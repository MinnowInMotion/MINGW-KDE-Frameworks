{"name": "kitemmodels-5.26.0", "fancyname": "KItemModels", "docfields": [{"type": "page", "name": "deprecated", "url": "deprecated.html", "keyword": null, "text": "Deprecated List Member KDescendantsProxyModel setRootIndex const QModelIndex index"}, {"type": "class", "name": "KBreadcrumbSelectionModel", "url": "classKBreadcrumbSelectionModel.html", "keyword": "KBreadcrumbSelectionModel", "text": "For example if the tree is and E is selected the selection can contain or if isActualSelectionIncluded is true The depth of the selection may also be set For example if the breadcrumbLength is 1 And if breadcrumbLength is 2 A KBreadcrumbsSelectionModel with a breadcrumbLength of 0 and including the actual selection is the same as a KSelectionProxyModel in the KSelectionProxyModel::ExactSelection configuration KBreadcrumbSelectionModel in several configurations This can work in two directions One option is for a single selection in the KBreadcrumbSelectionModel to invoke the breadcrumb selection in its constructor argument The other is for a selection in the itemselectionmodel in the constructor argument to cause a breadcrumb selection in this 4.5"}, {"type": "class", "name": "KCheckableProxyModel", "url": "classKCheckableProxyModel.html", "keyword": "KCheckableProxyModel", "text": "Items is standard Qt views such as QTreeView and QListView can have a checkable capability and draw checkboxes Adding such a capability requires specific implementations of the data() and flags() virtual methods This class implements those methods generically so that it is not necessary to implement them in your model This can be combined with a KSelectionProxyModel showing the items currently selected A KCheckableProxyModel and KSelectionProxyModel showing checked items 4.6 Stephen Kelly"}, {"type": "class", "name": "KConcatenateRowsProxyModel", "url": "classKConcatenateRowsProxyModel.html", "keyword": "KConcatenateRowsProxyModel", "text": "In other words the proxy will have all rows of the first source model followed by all rows of the second source model etc Only flat models lists and tables are supported no trees All models are assumed to have the same number of columns More precisely the number of columns of the first source model is used so all source models should have at least as many columns as the first source model and additional columns in other source models will simply be ignored Source models can be added and removed at runtime including the first source model but it should keep the same number of columns Dynamic insertion and removal of rows and columns in any source model is supported dataChanged layoutChanged and reset coming from the source models are supported At the moment this model doesn t support editing drag-n-drop It could be added though nothing prevents it This proxy does not inherit from QAbstractProxyModel because it uses multiple source models rather than a single one Author David Faure KDAB 5.14"}, {"type": "function", "name": "KConcatenateRowsProxyModel::KConcatenateRowsProxyModel", "url": "classKConcatenateRowsProxyModel.html#a94be5cd0e5272a29a2f889482faa4128", "keyword": "KConcatenateRowsProxyModel KConcatenateRowsProxyModel::KConcatenateRowsProxyModel KConcatenateRowsProxyModel", "text": "parent optional parent"}, {"type": "function", "name": "KConcatenateRowsProxyModel::~KConcatenateRowsProxyModel", "url": "classKConcatenateRowsProxyModel.html#a0afb9c9cd218f5753577c0a9058e3ecf", "keyword": "KConcatenateRowsProxyModel::~KConcatenateRowsProxyModel KConcatenateRowsProxyModel", "text": ""}, {"type": "function", "name": "KConcatenateRowsProxyModel::addSourceModel", "url": "classKConcatenateRowsProxyModel.html#ae9dd4add39e2b1971c36e63ee39c5483", "keyword": "addSourceModel KConcatenateRowsProxyModel::addSourceModel KConcatenateRowsProxyModel", "text": "sourceModel the source model The ownership of sourceModel is not affected by this The same source model cannot be added more than once"}, {"type": "function", "name": "KConcatenateRowsProxyModel::columnCount", "url": "classKConcatenateRowsProxyModel.html#a7be1a1a621e94d4d78eda0cd2f5e1bd2", "keyword": "columnCount KConcatenateRowsProxyModel::columnCount KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConcatenateRowsProxyModel::data", "url": "classKConcatenateRowsProxyModel.html#a7020bdbed38bc36a701ad9a6d016281b", "keyword": "data KConcatenateRowsProxyModel::data KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConcatenateRowsProxyModel::flags", "url": "classKConcatenateRowsProxyModel.html#a46d2232aa391e6d593c5ef9e0090405e", "keyword": "flags KConcatenateRowsProxyModel::flags KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConcatenateRowsProxyModel::headerData", "url": "classKConcatenateRowsProxyModel.html#a02a71789abe5b3f1b94a556207585985", "keyword": "headerData KConcatenateRowsProxyModel::headerData KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConcatenateRowsProxyModel::index", "url": "classKConcatenateRowsProxyModel.html#a389e9c6f4a30db5b1a10c3c0b2b3e2a4", "keyword": "index KConcatenateRowsProxyModel::index KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConcatenateRowsProxyModel::itemData", "url": "classKConcatenateRowsProxyModel.html#a616a5fe6e1456d17de6e78fd9d7fd4c2", "keyword": "itemData KConcatenateRowsProxyModel::itemData KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConcatenateRowsProxyModel::mapFromSource", "url": "classKConcatenateRowsProxyModel.html#a57d67c52780238d94f0f51d2f147ffcd", "keyword": "mapFromSource KConcatenateRowsProxyModel::mapFromSource KConcatenateRowsProxyModel", "text": "sourceIndex an index coming from any of the source models a proxy index Calling this method with an index not from a source model is undefined behavior"}, {"type": "function", "name": "KConcatenateRowsProxyModel::mapToSource", "url": "classKConcatenateRowsProxyModel.html#a2a27fa66bc1a76e7869ff15ae672db27", "keyword": "mapToSource KConcatenateRowsProxyModel::mapToSource KConcatenateRowsProxyModel", "text": "proxyIndex an index for this proxy model a source index"}, {"type": "function", "name": "KConcatenateRowsProxyModel::parent", "url": "classKConcatenateRowsProxyModel.html#aaca8a1f57cead6d5be1266873941d937", "keyword": "parent KConcatenateRowsProxyModel::parent KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConcatenateRowsProxyModel::removeSourceModel", "url": "classKConcatenateRowsProxyModel.html#ad744ed86fe908077ff0f6873fb74651a", "keyword": "removeSourceModel KConcatenateRowsProxyModel::removeSourceModel KConcatenateRowsProxyModel", "text": "sourceModel a source model previously added to this proxy The ownership of is not affected by this"}, {"type": "function", "name": "KConcatenateRowsProxyModel::rowCount", "url": "classKConcatenateRowsProxyModel.html#a99f2b92c20ef044a563f2060e965172d", "keyword": "rowCount KConcatenateRowsProxyModel::rowCount KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConcatenateRowsProxyModel::setData", "url": "classKConcatenateRowsProxyModel.html#a2a19ed32f1a1267960b6a1d50242e90e", "keyword": "setData KConcatenateRowsProxyModel::setData KConcatenateRowsProxyModel", "text": "Reimplemented from superclass"}, {"type": "class", "name": "KDescendantsProxyModel", "url": "classKDescendantsProxyModel.html", "keyword": "KDescendantsProxyModel", "text": "A KDescendantsProxyModel may be used to alter how the items in the tree are presented Given a model which is represented as a tree A plain EntityTreeModel in a view The KDescendantsProxyModel restructures the sourceModel to represent it as a flat list A KDescendantsProxyModel KDescendantEntitiesProxyModel can also display the ancestors of the index in the source model as part of its display A KDescendantsProxyModel with ancestor names 4.6 Stephen Kelly"}, {"type": "function", "name": "KDescendantsProxyModel::KDescendantsProxyModel", "url": "classKDescendantsProxyModel.html#aec9f2236012d21350ccf291a17a2f631", "keyword": "KDescendantsProxyModel KDescendantsProxyModel::KDescendantsProxyModel KDescendantsProxyModel", "text": "parent The parent object"}, {"type": "function", "name": "KDescendantsProxyModel::~KDescendantsProxyModel", "url": "classKDescendantsProxyModel.html#a38783be6be9feb6a85c0b011215a15a8", "keyword": "KDescendantsProxyModel::~KDescendantsProxyModel KDescendantsProxyModel", "text": ""}, {"type": "function", "name": "KDescendantsProxyModel::ancestorSeparator", "url": "classKDescendantsProxyModel.html#afaec76662c6bb31ef46dfc46c2354aff", "keyword": "ancestorSeparator KDescendantsProxyModel::ancestorSeparator KDescendantsProxyModel", "text": ""}, {"type": "function", "name": "KDescendantsProxyModel::displayAncestorData", "url": "classKDescendantsProxyModel.html#af94959bf9a40aaee8dca150a0e77955f", "keyword": "displayAncestorData KDescendantsProxyModel::displayAncestorData KDescendantsProxyModel", "text": ""}, {"type": "function", "name": "KDescendantsProxyModel::match", "url": "classKDescendantsProxyModel.html#a726317fcc68729884ee98d40a67ffff4", "keyword": "match KDescendantsProxyModel::match KDescendantsProxyModel", "text": ""}, {"type": "function", "name": "KDescendantsProxyModel::setAncestorSeparator", "url": "classKDescendantsProxyModel.html#a51e4610b6004c3f5d38ed055c9b87af0", "keyword": "setAncestorSeparator KDescendantsProxyModel::setAncestorSeparator KDescendantsProxyModel", "text": ""}, {"type": "function", "name": "KDescendantsProxyModel::setDisplayAncestorData", "url": "classKDescendantsProxyModel.html#a7fdc507c226c884accaea9b3cac2ec6e", "keyword": "setDisplayAncestorData KDescendantsProxyModel::setDisplayAncestorData KDescendantsProxyModel", "text": "If display is true then a source model which is displayed as will be displayed as If display is false the proxy will show Default is false"}, {"type": "function", "name": "KDescendantsProxyModel::setRootIndex", "url": "classKDescendantsProxyModel.html#a538094968402a1f0d3508d6a9afa2119", "keyword": "setRootIndex KDescendantsProxyModel::setRootIndex KDescendantsProxyModel", "text": "This method does nothing"}, {"type": "function", "name": "KDescendantsProxyModel::setSourceModel", "url": "classKDescendantsProxyModel.html#abd806ceb6067c30d5b277448a71f0ead", "keyword": "setSourceModel KDescendantsProxyModel::setSourceModel KDescendantsProxyModel", "text": ""}, {"type": "class", "name": "KExtraColumnsProxyModel", "url": "classKExtraColumnsProxyModel.html", "keyword": "KExtraColumnsProxyModel", "text": "The proxy supports source models that have a tree structure It also supports editing and propagating changes from the source model Row insertion/removal column insertion/removal in the source model are supported Not supported adding/removing extra columns at runtime having a different number of columns in subtrees drag-n-drop support in the extra columns moving columns Derive from KExtraColumnsProxyModel call appendColumn typically in the constructor for each extra column and reimplement extraColumnData() to allow KExtraColumnsProxyModel to retrieve the data to show in the extra columns If you want your new column(s) to be somewhere else than at the right of the existing columns you can use a KRearrangeColumnsProxyModel on top Author David Faure KDAB 5.13"}, {"type": "function", "name": "KExtraColumnsProxyModel::KExtraColumnsProxyModel", "url": "classKExtraColumnsProxyModel.html#a0e3c0fddbc8fd0150388ab6ab56fd85a", "keyword": "KExtraColumnsProxyModel KExtraColumnsProxyModel::KExtraColumnsProxyModel KExtraColumnsProxyModel", "text": "Remember to call setSourceModel afterwards and appendColumn"}, {"type": "function", "name": "KExtraColumnsProxyModel::~KExtraColumnsProxyModel", "url": "classKExtraColumnsProxyModel.html#a308659c6602532ac165df0cc81fcd4b0", "keyword": "KExtraColumnsProxyModel::~KExtraColumnsProxyModel KExtraColumnsProxyModel", "text": ""}, {"type": "function", "name": "KExtraColumnsProxyModel::appendColumn", "url": "classKExtraColumnsProxyModel.html#a43a06ff9cd119be438d6a12d9dc01cd7", "keyword": "appendColumn KExtraColumnsProxyModel::appendColumn KExtraColumnsProxyModel", "text": "header an optional text for the horizontal header This does not emit any signals do it in the initial setup phase"}, {"type": "function", "name": "KExtraColumnsProxyModel::buddy", "url": "classKExtraColumnsProxyModel.html#aafc84827633670784605c970009b7936", "keyword": "buddy KExtraColumnsProxyModel::buddy KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::columnCount", "url": "classKExtraColumnsProxyModel.html#a1af410b140306ea5c8db6e7350d37118", "keyword": "columnCount KExtraColumnsProxyModel::columnCount KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::data", "url": "classKExtraColumnsProxyModel.html#a868220a779b7124b453940ce3a4c4c2f", "keyword": "data KExtraColumnsProxyModel::data KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::extraColumnData", "url": "classKExtraColumnsProxyModel.html#af43091f6935231396c77736933f9fa8f", "keyword": "extraColumnData KExtraColumnsProxyModel::extraColumnData KExtraColumnsProxyModel", "text": "Reimplement this method to return the data for the extra columns parent the parent model index in the proxy model only useful in tree models row the row number for which the proxy model is querying for data child of parent if set extraColumn the number of the extra column starting at 0 this doesn t require knowing how many columns the source model has role the role being queried the data at row and extraColumn"}, {"type": "function", "name": "KExtraColumnsProxyModel::extraColumnDataChanged", "url": "classKExtraColumnsProxyModel.html#ac9ff6d56fb14f94eb71c120c7a662add", "keyword": "extraColumnDataChanged KExtraColumnsProxyModel::extraColumnDataChanged KExtraColumnsProxyModel", "text": "The use case is data that changes unrelated to setData"}, {"type": "function", "name": "KExtraColumnsProxyModel::extraColumnForProxyColumn", "url": "classKExtraColumnsProxyModel.html#a595def01bf0f5e6a5267db8dafd9b387", "keyword": "extraColumnForProxyColumn KExtraColumnsProxyModel::extraColumnForProxyColumn KExtraColumnsProxyModel", "text": "This basically means subtracting the amount of columns in the source model"}, {"type": "function", "name": "KExtraColumnsProxyModel::flags", "url": "classKExtraColumnsProxyModel.html#ae5f44109aabbbd1f55e4492733abfa4a", "keyword": "flags KExtraColumnsProxyModel::flags KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::hasChildren", "url": "classKExtraColumnsProxyModel.html#a6e5370662892f12aa18d3f4dc938cad8", "keyword": "hasChildren KExtraColumnsProxyModel::hasChildren KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::headerData", "url": "classKExtraColumnsProxyModel.html#a4b31d7401358e31542699c2f99e6dad3", "keyword": "headerData KExtraColumnsProxyModel::headerData KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::index", "url": "classKExtraColumnsProxyModel.html#af3f99473e4e47f217e016bf3dbbc433f", "keyword": "index KExtraColumnsProxyModel::index KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::mapSelectionToSource", "url": "classKExtraColumnsProxyModel.html#a4ae0c157b7c7d27b2b2695245218f838", "keyword": "mapSelectionToSource KExtraColumnsProxyModel::mapSelectionToSource KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::mapToSource", "url": "classKExtraColumnsProxyModel.html#a6680a102ab6517ec5e6a6ec82d4be0af", "keyword": "mapToSource KExtraColumnsProxyModel::mapToSource KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::parent", "url": "classKExtraColumnsProxyModel.html#a1feec87ba0872de0a0416cee944ab5bf", "keyword": "parent KExtraColumnsProxyModel::parent KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::proxyColumnForExtraColumn", "url": "classKExtraColumnsProxyModel.html#a9c24ec5fcddf34635a79fb269c69be43", "keyword": "proxyColumnForExtraColumn KExtraColumnsProxyModel::proxyColumnForExtraColumn KExtraColumnsProxyModel", "text": "This basically means adding the amount of columns in the source model"}, {"type": "function", "name": "KExtraColumnsProxyModel::removeExtraColumn", "url": "classKExtraColumnsProxyModel.html#a08d3dc9f834005d66021f7c869f74648", "keyword": "removeExtraColumn KExtraColumnsProxyModel::removeExtraColumn KExtraColumnsProxyModel", "text": "idx index of the extra column starting from 0 This does not emit any signals do it in the initial setup phase 5.24"}, {"type": "function", "name": "KExtraColumnsProxyModel::setData", "url": "classKExtraColumnsProxyModel.html#abc3fbad398d5f2c69dae09c3bfb4bbd0", "keyword": "setData KExtraColumnsProxyModel::setData KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::setExtraColumnData", "url": "classKExtraColumnsProxyModel.html#aa3363ea5cfc8d802b4572fd7941f3b66", "keyword": "setExtraColumnData KExtraColumnsProxyModel::setExtraColumnData KExtraColumnsProxyModel", "text": "Reimplement this method to set the data for the extra columns if editing is supported Remember to call extraColumnDataChanged() after changing the data storage The default implementation returns false"}, {"type": "function", "name": "KExtraColumnsProxyModel::setSourceModel", "url": "classKExtraColumnsProxyModel.html#a3f88bcccd24d88d4e30e0cb03a1f3a4a", "keyword": "setSourceModel KExtraColumnsProxyModel::setSourceModel KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KExtraColumnsProxyModel::sibling", "url": "classKExtraColumnsProxyModel.html#a3362e19c84411dfdb1b883fd3db20924", "keyword": "sibling KExtraColumnsProxyModel::sibling KExtraColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "class", "name": "KLinkItemSelectionModel", "url": "classKLinkItemSelectionModel.html", "keyword": "KLinkItemSelectionModel", "text": "Although multiple views can share the same QItemSelectionModel the views then need to have the same source model If there is a proxy model between the model and one of the views or different proxy models in each this class makes it possible to share the selection between the views Sharing a QItemSelectionModel between views on the same model is trivial If a proxy model is used it is no longer possible to share the QItemSelectionModel directly A KLinkItemSelectionModel can be used to map the selection through the proxy model Arbitrarily complex proxy configurations on the same root model can be used See also kdelibs/kdeui/tests/proxymodeltestapp/proxyitemselectionwidget.cpp 4.5 Stephen Kelly"}, {"type": "function", "name": "KLinkItemSelectionModel::KLinkItemSelectionModel", "url": "classKLinkItemSelectionModel.html#a5b4a8487f4cafb46aaea552cc3e88b3e", "keyword": "KLinkItemSelectionModel KLinkItemSelectionModel::KLinkItemSelectionModel KLinkItemSelectionModel", "text": ""}, {"type": "class", "name": "KModelIndexProxyMapper", "url": "classKModelIndexProxyMapper.html", "keyword": "KModelIndexProxyMapper", "text": "In a complex system of proxy models there can be a need to map indexes and selections between them and sometimes to do so without knowledge of the path from one model to another For example If there is a need to map indexes between proxy 2 and proxy 4 a KModelIndexProxyMapper can be created to facilitate mapping of indexes between them Note that the aim is to achieve black box connections so that there is no need for application code to know the structure of proxy models in the path between left and right and attempt to manually map them The isConnected property indicates whether there is a path from the left side to the right side Stephen Kelly"}, {"type": "property", "name": "KModelIndexProxyMapper::isConnected", "url": "classKModelIndexProxyMapper.html#a4f93cac9398063314fd59c7f4e0ca3fb", "keyword": "isConnected KModelIndexProxyMapper::isConnected KModelIndexProxyMapper", "text": "This value can change if the sourceModel of an intermediate proxy is changed"}, {"type": "function", "name": "KModelIndexProxyMapper::KModelIndexProxyMapper", "url": "classKModelIndexProxyMapper.html#a72fa24c6fe25288e3f91286acc691a0a", "keyword": "KModelIndexProxyMapper KModelIndexProxyMapper::KModelIndexProxyMapper KModelIndexProxyMapper", "text": ""}, {"type": "function", "name": "KModelIndexProxyMapper::mapLeftToRight", "url": "classKModelIndexProxyMapper.html#a9909699ce1972ee126553187522a1366", "keyword": "mapLeftToRight KModelIndexProxyMapper::mapLeftToRight KModelIndexProxyMapper", "text": ""}, {"type": "function", "name": "KModelIndexProxyMapper::mapRightToLeft", "url": "classKModelIndexProxyMapper.html#ad7c92673bd85422bffd773d59a635f3f", "keyword": "mapRightToLeft KModelIndexProxyMapper::mapRightToLeft KModelIndexProxyMapper", "text": ""}, {"type": "function", "name": "KModelIndexProxyMapper::mapSelectionLeftToRight", "url": "classKModelIndexProxyMapper.html#a1a15c085d9b6250b7995ea77115e3a07", "keyword": "mapSelectionLeftToRight KModelIndexProxyMapper::mapSelectionLeftToRight KModelIndexProxyMapper", "text": ""}, {"type": "function", "name": "KModelIndexProxyMapper::mapSelectionRightToLeft", "url": "classKModelIndexProxyMapper.html#ac776d7431e8f6ec06b35bfe69cdb83d7", "keyword": "mapSelectionRightToLeft KModelIndexProxyMapper::mapSelectionRightToLeft KModelIndexProxyMapper", "text": ""}, {"type": "class", "name": "KRearrangeColumnsProxyModel", "url": "classKRearrangeColumnsProxyModel.html", "keyword": "KRearrangeColumnsProxyModel", "text": "This allows to reorder columns as well as not showing all of them The proxy supports source models that have a tree structure It also supports editing and propagating changes from the source model Showing the same source column more than once is not supported Author David Faure KDAB 5.12"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::KRearrangeColumnsProxyModel", "url": "classKRearrangeColumnsProxyModel.html#a06ae66a6ab4401441d9fb9bdf5c82174", "keyword": "KRearrangeColumnsProxyModel KRearrangeColumnsProxyModel::KRearrangeColumnsProxyModel KRearrangeColumnsProxyModel", "text": "Remember to call setSourceModel afterwards"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::~KRearrangeColumnsProxyModel", "url": "classKRearrangeColumnsProxyModel.html#ad62e52de5371cb79e4ef62ca1804b76b", "keyword": "KRearrangeColumnsProxyModel::~KRearrangeColumnsProxyModel KRearrangeColumnsProxyModel", "text": ""}, {"type": "function", "name": "KRearrangeColumnsProxyModel::columnCount", "url": "classKRearrangeColumnsProxyModel.html#a96fca4ded42d5d5496f44585000ed23d", "keyword": "columnCount KRearrangeColumnsProxyModel::columnCount KRearrangeColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::headerData", "url": "classKRearrangeColumnsProxyModel.html#a58e422a4a5383919ee3aeb5995f7f545", "keyword": "headerData KRearrangeColumnsProxyModel::headerData KRearrangeColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::index", "url": "classKRearrangeColumnsProxyModel.html#aea9910f732576da30ad33712a97fc988", "keyword": "index KRearrangeColumnsProxyModel::index KRearrangeColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::mapFromSource", "url": "classKRearrangeColumnsProxyModel.html#ab85455ebe70cfea99892b2b4aefbf791", "keyword": "mapFromSource KRearrangeColumnsProxyModel::mapFromSource KRearrangeColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::mapToSource", "url": "classKRearrangeColumnsProxyModel.html#a489cc688b2f5012557265eede188dbcc", "keyword": "mapToSource KRearrangeColumnsProxyModel::mapToSource KRearrangeColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::parent", "url": "classKRearrangeColumnsProxyModel.html#ab18fbda958568f52a897ad085ea90dc7", "keyword": "parent KRearrangeColumnsProxyModel::parent KRearrangeColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::rowCount", "url": "classKRearrangeColumnsProxyModel.html#a6da8d5b3f77b60146fa8131261a850b9", "keyword": "rowCount KRearrangeColumnsProxyModel::rowCount KRearrangeColumnsProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KRearrangeColumnsProxyModel::setSourceColumns", "url": "classKRearrangeColumnsProxyModel.html#a3bdeceba3be0efaa809820b4a62ffa02", "keyword": "setSourceColumns KRearrangeColumnsProxyModel::setSourceColumns KRearrangeColumnsProxyModel", "text": "Example QVector<int>() 2 1 This examples configures the proxy to hide column 0 show column 2 from the source model then show column 1 from the source model"}, {"type": "class", "name": "KRecursiveFilterProxyModel", "url": "classKRecursiveFilterProxyModel.html", "keyword": "KRecursiveFilterProxyModel", "text": "QSortFilterProxyModel does not recurse when invoking a filtering stage so that if a particular row is filtered out its children are not even checked to see if they match the filter For example given a source model If a QSortFilterProxyModel is used with a filter matching A D G and I the QSortFilterProxyModel will contain That is even though D and E match the filter they are not represented in the proxy model because B does not match the filter and is filtered out The KRecursiveFilterProxyModel checks child indexes for filter matching and ensures that all matching indexes are represented in the model In the above example the KRecursiveFilterProxyModel will contain That is the leaves in the model match the filter but not necessarily the inner branches QSortFilterProxyModel provides the virtual method filterAcceptsRow to allow custom filter implementations Custom filter implementations can be written for KRecuriveFilterProxyModel using the acceptRow virtual method Note that using this proxy model is additional overhead compared to QSortFilterProxyModel as every index in the model must be visited and queried Stephen Kelly 4.5"}, {"type": "function", "name": "KRecursiveFilterProxyModel::KRecursiveFilterProxyModel", "url": "classKRecursiveFilterProxyModel.html#a664772829458eb639e61f04fc680aaf1", "keyword": "KRecursiveFilterProxyModel KRecursiveFilterProxyModel::KRecursiveFilterProxyModel KRecursiveFilterProxyModel", "text": ""}, {"type": "function", "name": "KRecursiveFilterProxyModel::~KRecursiveFilterProxyModel", "url": "classKRecursiveFilterProxyModel.html#aae857b1939bd089a6880b9df60e21da6", "keyword": "KRecursiveFilterProxyModel::~KRecursiveFilterProxyModel KRecursiveFilterProxyModel", "text": ""}, {"type": "function", "name": "KRecursiveFilterProxyModel::match", "url": "classKRecursiveFilterProxyModel.html#a34a8021f88c82d2f9e262ce29513cba3", "keyword": "match KRecursiveFilterProxyModel::match KRecursiveFilterProxyModel", "text": ""}, {"type": "function", "name": "KRecursiveFilterProxyModel::setSourceModel", "url": "classKRecursiveFilterProxyModel.html#afd95fe804a7192c74828465466fe6ed0", "keyword": "setSourceModel KRecursiveFilterProxyModel::setSourceModel KRecursiveFilterProxyModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KRecursiveFilterProxyModel::acceptRow", "url": "classKRecursiveFilterProxyModel.html#aeee9b6a0b2cfef9f70a00e86e55ab3ee", "keyword": "acceptRow KRecursiveFilterProxyModel::acceptRow KRecursiveFilterProxyModel", "text": ""}, {"type": "function", "name": "KRecursiveFilterProxyModel::filterAcceptsRow", "url": "classKRecursiveFilterProxyModel.html#a2f87ff6d96a65886d6810c155fcd55cc", "keyword": "filterAcceptsRow KRecursiveFilterProxyModel::filterAcceptsRow KRecursiveFilterProxyModel", "text": "Reimplemented from superclass"}, {"type": "class", "name": "KSelectionProxyModel", "url": "classKSelectionProxyModel.html", "keyword": "KSelectionProxyModel", "text": "The KSelectionProxyModel is most useful as a convenience for displaying the selection in one view in another view The selectionModel of the initial view is used to create a proxied model which is filtered based on the configuration of this class For example when a user clicks a mail folder in one view in an email application the contained emails should be displayed in another view This takes away the need for the developer to handle the selection between the views including all the mapToSource mapFromSource and setRootIndex calls A Selection in one view creating a model for use with another view The KSelectionProxyModel can handle complex selections Non-contiguous selection creating a new simple model in a second view The contents of the secondary view depends on the selection in the primary view and the configuration of the proxy model See KSelectionProxyModel::setFilterBehavior for the different possible configurations For example if the filterBehavior is SubTrees selecting another item in an already selected subtree has no effect Selecting an item and its descendant See the test application in KDE/kdelibs/kdeui/tests/proxymodeltestapp to try out the valid configurations KSelectionProxyModel test application Obviously the KSelectionProxyModel may be used in a view or further processed with other proxy models See KAddressBook and AkonadiConsole in kdepim for examples which use a further KDescendantsProxyModel and QSortFilterProxyModel on top of a KSelectionProxyModel Additionally this class can be used to programmatically choose some items from the source model to display in the view For example this is how the Favourite Folder View in KMail works and is also used in unit testing See also 4.4 Stephen Kelly"}, {"type": "signal", "name": "KSelectionProxyModel::rootIndexAboutToBeRemoved", "url": "classKSelectionProxyModel.html#a9a6318ee23ad08cfdd0436dc5e140595", "keyword": "rootIndexAboutToBeRemoved KSelectionProxyModel::rootIndexAboutToBeRemoved KSelectionProxyModel", "text": "Emitted before removeRootIndex an index in the sourceModel is removed from the root selected indexes This may be unrelated to rows removed from the model depending on configuration"}, {"type": "signal", "name": "KSelectionProxyModel::rootIndexAdded", "url": "classKSelectionProxyModel.html#a8e3e60bd991a9c261a9775c1a222b2f7", "keyword": "rootIndexAdded KSelectionProxyModel::rootIndexAdded KSelectionProxyModel", "text": "Emitted when newIndex an index in the sourceModel is added to the root selected indexes This may be unrelated to rows inserted to the model depending on configuration"}, {"type": "signal", "name": "KSelectionProxyModel::rootSelectionAboutToBeRemoved", "url": "classKSelectionProxyModel.html#a5e56d8e974331a94988b8b27cc3f124a", "keyword": "rootSelectionAboutToBeRemoved KSelectionProxyModel::rootSelectionAboutToBeRemoved KSelectionProxyModel", "text": "Emitted before selection a selection in the sourceModel is removed from the root selection"}, {"type": "signal", "name": "KSelectionProxyModel::rootSelectionAdded", "url": "classKSelectionProxyModel.html#a0af9ee98b4f447e418fc0ba12a37b739", "keyword": "rootSelectionAdded KSelectionProxyModel::rootSelectionAdded KSelectionProxyModel", "text": "Emitted after selection a selection in the sourceModel is added to the root selection"}, {"type": "function", "name": "KSelectionProxyModel::KSelectionProxyModel", "url": "classKSelectionProxyModel.html#afd30310906329fb0488991517968ca73", "keyword": "KSelectionProxyModel KSelectionProxyModel::KSelectionProxyModel KSelectionProxyModel", "text": "selectionModel The selection model used to filter what is presented by the proxy"}, {"type": "function", "name": "KSelectionProxyModel::KSelectionProxyModel", "url": "classKSelectionProxyModel.html#a6f5ba38655072237e0dc63c5596586d4", "keyword": "KSelectionProxyModel KSelectionProxyModel::KSelectionProxyModel KSelectionProxyModel", "text": "Allow the creation of a KSelectionProxyModel in QML code QML will assign a parent after construction"}, {"type": "function", "name": "KSelectionProxyModel::~KSelectionProxyModel", "url": "classKSelectionProxyModel.html#a8db1f32389ac758fde75124e61fe1e77", "keyword": "KSelectionProxyModel::~KSelectionProxyModel KSelectionProxyModel", "text": ""}, {"type": "function", "name": "KSelectionProxyModel::setFilterBehavior", "url": "classKSelectionProxyModel.html#a8969c5b6f871b1c8f26fed2c24635964", "keyword": "setFilterBehavior KSelectionProxyModel::setFilterBehavior KSelectionProxyModel", "text": "The filter behaviors of the model govern the content of the model based on the selection of the contained QItemSelectionModel See kdeui/proxymodeltestapp to try out the different proxy model behaviors The most useful behaviors are SubTrees ExactSelection and ChildrenOfExactSelection The default behavior is SubTrees This means that this proxy model will contain the roots of the items in the source model Any descendants which are also selected have no additional effect For example if the source model is like And A B C and D are selected the proxy will contain That is selecting D or C if B is also selected has no effect If B is de-selected then C amd D become top-level items This is the behavior used by KJots when rendering books If the behavior is set to SubTreeRoots then the children of selected indexes are not part of the model If A B and D are selected Note that although D is selected it is not part of the proxy model because its parent B is already selected SubTreesWithoutRoots has the effect of not making the selected items part of the model but making their children part of the model instead If A B and I are selected Note that A has no children so selecting it has no outward effect on the model ChildrenOfExactSelection causes the proxy model to contain the children of the selected indexes but further descendants are omitted Additionally if descendants of an already selected index are selected their children are part of the proxy model For example if A B D and I are selected This would be useful for example if showing containers for example maildirs in one view and their items in another Sub-maildirs would still appear in the proxy but could be filtered out using a QSortfilterProxyModel The ExactSelection behavior causes the selected items to be part of the proxy model even if their ancestors are already selected but children of selected items are not included Again if A B D and I are selected This is the behavior used by the Favourite Folder View in KMail"}, {"type": "function", "name": "KSelectionProxyModel::setSourceModel", "url": "classKSelectionProxyModel.html#a8df9a643cb899c9db967611c11cd63e8", "keyword": "setSourceModel KSelectionProxyModel::setSourceModel KSelectionProxyModel", "text": ""}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KItemModels Set of item models extending the Qt model-view framework Introduction KItemModels provides the following models KBreadcrumbSelectionModel Selects the parents of selected items to create breadcrumbs KCheckableProxyModel Adds a checkable capability to a source model KConcatenateRowsProxyModel Concatenates rows from multiple source models KDescendantsProxyModel Proxy Model for restructuring a Tree into a list KExtraColumnsProxyModel Adds columns after existing columns KLinkItemSelectionModel Share a selection in multiple views which do not have the same source model KModelIndexProxyMapper Mapping of indexes and selections through proxy models KRearrangeColumnsProxyModel Can reorder and hide columns from the source model KRecursiveFilterProxyModel Recursive filtering of models KSelectionProxyModel A Proxy Model which presents a subset of its source model to observers"}]}