{"name": "kdeclarative-5.26.0", "fancyname": "KDeclarative", "docfields": [{"type": "class", "name": "DeclarativeMimeData", "url": "classDeclarativeMimeData.html", "keyword": "DeclarativeMimeData", "text": "Creates a new DeclarativeMimeData by cloning the QMimeData passed as parameter This is useful for two reasons In DragArea we want to clone our of the DeclarativeMimeData instance as Qt will automatically delete it after the drag and drop operation In the drop events the QMimeData is const and we have troubles passing const to QML So we clone it to remove the This method will try to cast the QMimeData to DeclarativeMimeData and will clone our extensions to QMimeData as well"}, {"type": "property", "name": "DeclarativeMimeData::color", "url": "classDeclarativeMimeData.html#a6832aee52f18de3dadcfbafc0d755f64", "keyword": "color DeclarativeMimeData::color DeclarativeMimeData", "text": ""}, {"type": "property", "name": "DeclarativeMimeData::formats", "url": "classDeclarativeMimeData.html#a90b9b3a290d693131da0264bde23c499", "keyword": "formats DeclarativeMimeData::formats DeclarativeMimeData", "text": "QMimeData::formats"}, {"type": "property", "name": "DeclarativeMimeData::hasUrls", "url": "classDeclarativeMimeData.html#a0776d0dcc66314f30f2e34dc3b5cd7d6", "keyword": "hasUrls DeclarativeMimeData::hasUrls DeclarativeMimeData", "text": "QMimeData::hasUrls"}, {"type": "property", "name": "DeclarativeMimeData::html", "url": "classDeclarativeMimeData.html#a18e3c25df301eb09bac6c86ab3692f61", "keyword": "html DeclarativeMimeData::html DeclarativeMimeData", "text": ""}, {"type": "property", "name": "DeclarativeMimeData::source", "url": "classDeclarativeMimeData.html#acb750a17d90b323a1dfa81f139317425", "keyword": "source DeclarativeMimeData::source DeclarativeMimeData", "text": "It may be null item MimeData::source Setting source to any existing qml item will enable the receiver of the drag and drop operation to know in which item the operation originated In the case of inter-application drag and drop operations the source will not be available and will be 0 Be sure to test it in your QML code before using it or it will generate errors in the console"}, {"type": "property", "name": "DeclarativeMimeData::text", "url": "classDeclarativeMimeData.html#a4239f7399a5b7f272e4609dfaed01499", "keyword": "text DeclarativeMimeData::text DeclarativeMimeData", "text": ""}, {"type": "property", "name": "DeclarativeMimeData::url", "url": "classDeclarativeMimeData.html#a5b84899200933b6b293db57960943309", "keyword": "url DeclarativeMimeData::url DeclarativeMimeData", "text": "url MimeData::url Returns the first URL from the urls property of QMimeData TODO We should use QDeclarativeListProperty<QUrls> to return the whole list instead of only the first element"}, {"type": "property", "name": "DeclarativeMimeData::urls", "url": "classDeclarativeMimeData.html#a3127ec94a03dcb687cae1999332d8500", "keyword": "urls DeclarativeMimeData::urls DeclarativeMimeData", "text": "URLs correspond to the MIME type text/uri-list"}, {"type": "function", "name": "DeclarativeMimeData::DeclarativeMimeData", "url": "classDeclarativeMimeData.html#a0a61cfcdf632d04b902be3313b9f1f3d", "keyword": "DeclarativeMimeData DeclarativeMimeData::DeclarativeMimeData DeclarativeMimeData", "text": "MimeData DeclarativeMimeData This is a wrapper class around QMimeData with a few extensions to provide better support for in-qml drag drops"}, {"type": "class", "name": "ImageTexturesCache", "url": "classImageTexturesCache.html", "keyword": "ImageTexturesCache", "text": "Use this class as a factory for textures when creating them from a QImage instance Keeps track of all the created textures in a map between the QImage::cacheKey() and the cached texture until it gets de-referenced ManagedTextureNode"}, {"type": "function", "name": "ImageTexturesCache::loadTexture", "url": "classImageTexturesCache.html#aa35543053f2fd3a2de1462e14f0fe6ee", "keyword": "loadTexture ImageTexturesCache::loadTexture ImageTexturesCache", "text": "the texture for a given window and image If an image id is the same as one already provided before we won t create a new texture and return a shared pointer to the existing texture"}, {"type": "class", "name": "KDeclarativeMouseEvent", "url": "classKDeclarativeMouseEvent.html", "keyword": "KDeclarativeMouseEvent", "text": "It does not accept the event In addition unlike MouseArea events include the mouse position in global co-ordinates and provides the sceen the mouse is in"}, {"type": "class", "name": "KUserProxy", "url": "classKUserProxy.html", "keyword": "KUserProxy", "text": "This object can be used to personalize user interfaces Example usage KUser provides read-only access to the user s personal information KUser"}, {"type": "signal", "name": "KUserProxy::faceIconUrlChanged", "url": "classKUserProxy.html#a7dd33703306e52718962dc65cb3858b7", "keyword": "faceIconUrlChanged KUserProxy::faceIconUrlChanged KUserProxy", "text": "faceIconUrl"}, {"type": "signal", "name": "KUserProxy::nameChanged", "url": "classKUserProxy.html#aa2ac2f7e98f817d8d54c522468a15766", "keyword": "nameChanged KUserProxy::nameChanged KUserProxy", "text": "fullName loginName"}, {"type": "function", "name": "KUserProxy::faceIconUrl", "url": "classKUserProxy.html#a5fc98c9445af0c457170a58c25205fb2", "keyword": "faceIconUrl KUserProxy::faceIconUrl KUserProxy", "text": "the url of the user s configured image including faceIconUrlChanged"}, {"type": "function", "name": "KUserProxy::fullName", "url": "classKUserProxy.html#aeeb97f43098d39acc9e6508b71ce26cd", "keyword": "fullName KUserProxy::fullName KUserProxy", "text": "the full name of the user nameChanged"}, {"type": "function", "name": "KUserProxy::host", "url": "classKUserProxy.html#a9cf8a40c2d2cc43482a80f594f32327d", "keyword": "host KUserProxy::host KUserProxy", "text": "the system s hostname nameChanged"}, {"type": "function", "name": "KUserProxy::loginName", "url": "classKUserProxy.html#a97637dd24b4d8e08e5ba8012e7e92362", "keyword": "loginName KUserProxy::loginName KUserProxy", "text": "the user s login name nameChanged"}, {"type": "function", "name": "KUserProxy::os", "url": "classKUserProxy.html#aeac453c6226e734dacb41fc9e35fdf89", "keyword": "os KUserProxy::os KUserProxy", "text": "pretty name indicating operating system and version nameChanged"}, {"type": "class", "name": "KWindowSystemProxy", "url": "classKWindowSystemProxy.html", "keyword": "KWindowSystemProxy", "text": "Example usage The features provided by this item are specific to the windowing system and might not be supported on any platform other than X11"}, {"type": "property", "name": "KWindowSystemProxy::compositingActive", "url": "classKWindowSystemProxy.html#a85569af58980beee8eef4b8592d52d55", "keyword": "compositingActive KWindowSystemProxy::compositingActive KWindowSystemProxy", "text": "This property is updated delayed"}, {"type": "property", "name": "KWindowSystemProxy::currentDesktop", "url": "classKWindowSystemProxy.html#a4ab03196d2c191dab25d6a88b2745e77", "keyword": "currentDesktop KWindowSystemProxy::currentDesktop KWindowSystemProxy", "text": ""}, {"type": "property", "name": "KWindowSystemProxy::currentDesktopName", "url": "classKWindowSystemProxy.html#af9f6ae219a79de83a3d59a4accbe5474", "keyword": "currentDesktopName KWindowSystemProxy::currentDesktopName KWindowSystemProxy", "text": ""}, {"type": "property", "name": "KWindowSystemProxy::numberOfDesktops", "url": "classKWindowSystemProxy.html#a985d730fb7d15855ef523d4bb19f2863", "keyword": "numberOfDesktops KWindowSystemProxy::numberOfDesktops KWindowSystemProxy", "text": ""}, {"type": "property", "name": "KWindowSystemProxy::showingDesktop", "url": "classKWindowSystemProxy.html#a4ecfe2f2fbdcdd8b68f0d31f3aadbe3c", "keyword": "showingDesktop KWindowSystemProxy::showingDesktop KWindowSystemProxy", "text": ""}, {"type": "function", "name": "KWindowSystemProxy::desktopName", "url": "classKWindowSystemProxy.html#a905701b33a951679acafa200ff95cde0", "keyword": "desktopName KWindowSystemProxy::desktopName KWindowSystemProxy", "text": "currentDesktopName desktop the number of the desktop the name of the desktop"}, {"type": "function", "name": "KWindowSystemProxy::forceActivateWindow", "url": "classKWindowSystemProxy.html#acd8c1baede4fe242bbbcb7dd894c212f", "keyword": "forceActivateWindow KWindowSystemProxy::forceActivateWindow KWindowSystemProxy", "text": "This should be called only in special cases applications shouldn t force themselves or other windows to be the active window Generally this call should used only by pagers and similar tools window the window to make active time X server timestamp of the user activity that caused this request"}, {"type": "function", "name": "KWindowSystemProxy::hasWindow", "url": "classKWindowSystemProxy.html#aa3b7d445f3745189b130081c6cb52e9e", "keyword": "hasWindow KWindowSystemProxy::hasWindow KWindowSystemProxy", "text": "window the window to test"}, {"type": "function", "name": "KWindowSystemProxy::setDesktopName", "url": "classKWindowSystemProxy.html#aa5438b8260f9735e9ac4a6bc32a6df03", "keyword": "setDesktopName KWindowSystemProxy::setDesktopName KWindowSystemProxy", "text": "desktop the number of the desktop name the new name for the desktop"}, {"type": "function", "name": "KWindowSystemProxy::setOnActivities", "url": "classKWindowSystemProxy.html#a21b16377838c7c5484573682d08fbd72", "keyword": "setOnActivities KWindowSystemProxy::setOnActivities KWindowSystemProxy", "text": "window the window activities the list of activity UUIDs"}, {"type": "function", "name": "KWindowSystemProxy::setOnAllDesktops", "url": "classKWindowSystemProxy.html#abad98cad46d83436096d84421216762e", "keyword": "setOnAllDesktops KWindowSystemProxy::setOnAllDesktops KWindowSystemProxy", "text": "Otherwise the window lives only on one single desktop window the window onAllDesktops true to show the window on all desktops false otherwise"}, {"type": "function", "name": "KWindowSystemProxy::setOnDesktop", "url": "classKWindowSystemProxy.html#aa85b5a30426a4dd5791dd10f01084f46", "keyword": "setOnDesktop KWindowSystemProxy::setOnDesktop KWindowSystemProxy", "text": "window the window desktop the number of the new desktop"}, {"type": "class", "name": "ManagedTextureNode", "url": "classManagedTextureNode.html", "keyword": "ManagedTextureNode", "text": "Usually when assigning textures within a node we ll want to delete the texture with the node This class will take a shared texture and display it within the node It s especially interesting to use this class together with the ImageTexturesCache that will offer us shareable textures and cache them transparently when asking it to create the texture ImageTexturesCache"}, {"type": "class", "name": "MimeDataWrapper", "url": "classMimeDataWrapper.html", "keyword": "MimeDataWrapper", "text": "In contrast to DeclarativeMimeData doesn t create a copy of the QMimeData instance"}, {"type": "property", "name": "MimeDataWrapper::color", "url": "classMimeDataWrapper.html#ad6074ef602220a941f1b6da691bda2ae", "keyword": "color MimeDataWrapper::color MimeDataWrapper", "text": ""}, {"type": "property", "name": "MimeDataWrapper::formats", "url": "classMimeDataWrapper.html#a7cf96057e01fa4287597a9c2a87e7721", "keyword": "formats MimeDataWrapper::formats MimeDataWrapper", "text": "QMimeData::formats"}, {"type": "property", "name": "MimeDataWrapper::hasUrls", "url": "classMimeDataWrapper.html#a071326f028e8f2c177b4b280b0d8b410", "keyword": "hasUrls MimeDataWrapper::hasUrls MimeDataWrapper", "text": "QMimeData::hasUrls"}, {"type": "property", "name": "MimeDataWrapper::html", "url": "classMimeDataWrapper.html#aab2b955b1bb043dffdefdd1e4d1484a9", "keyword": "html MimeDataWrapper::html MimeDataWrapper", "text": ""}, {"type": "property", "name": "MimeDataWrapper::mimeData", "url": "classMimeDataWrapper.html#a2f7d222804c5cb3c9df2dfe8c453f292", "keyword": "mimeData MimeDataWrapper::mimeData MimeDataWrapper", "text": "the wrapped object"}, {"type": "property", "name": "MimeDataWrapper::source", "url": "classMimeDataWrapper.html#aaf18bab4177e36aeaa38f45e3c5839c8", "keyword": "source MimeDataWrapper::source MimeDataWrapper", "text": "It may be null"}, {"type": "property", "name": "MimeDataWrapper::text", "url": "classMimeDataWrapper.html#a5752f414ce2c90e63e45b80dc7d974ef", "keyword": "text MimeDataWrapper::text MimeDataWrapper", "text": ""}, {"type": "property", "name": "MimeDataWrapper::url", "url": "classMimeDataWrapper.html#a350faeb50d92d8b326f87084835f0bb5", "keyword": "url MimeDataWrapper::url MimeDataWrapper", "text": ""}, {"type": "property", "name": "MimeDataWrapper::urls", "url": "classMimeDataWrapper.html#afae493245c8241b507eb3f76ad594096", "keyword": "urls MimeDataWrapper::urls MimeDataWrapper", "text": "URLs correspond to the MIME type text/uri-list"}, {"type": "class", "name": "PlotData", "url": "classPlotData.html", "keyword": "PlotData", "text": "an example can be a plot of the network transfer speed or CPU temperature over time Multiple plots can be fitted in the same graph either stacked or intersected"}, {"type": "property", "name": "PlotData::color", "url": "classPlotData.html#aa17ac3c2cca6a905bf52591f8bb3fd32", "keyword": "color PlotData::color PlotData", "text": ""}, {"type": "property", "name": "PlotData::label", "url": "classPlotData.html#a122cf4f029c73f27cb9ad6728ece06f1", "keyword": "label PlotData::label PlotData", "text": ""}, {"type": "property", "name": "PlotData::max", "url": "classPlotData.html#a9e59d123cffa235f4c0b5619c8df39bf", "keyword": "max PlotData::max PlotData", "text": ""}, {"type": "property", "name": "PlotData::min", "url": "classPlotData.html#ad9fde7f7a952eca460a3779daa5a7ff7", "keyword": "min PlotData::min PlotData", "text": ""}, {"type": "property", "name": "PlotData::values", "url": "classPlotData.html#a2bbcb4de86dbf07c898bb9102b2f20a8", "keyword": "values PlotData::values PlotData", "text": ""}, {"type": "class", "name": "KDeclarative::QmlObject", "url": "classKDeclarative_1_1QmlObject.html", "keyword": "QmlObject", "text": "Marco Martin Plasma::QmlObject provides a class for conveniently use QML based declarative user interfaces inside Plasma widgets To one QmlObject corresponds one QML file that can eventually include others tere will be its own QQmlEngine with a single root object described in the QML file"}, {"type": "signal", "name": "KDeclarative::QmlObject::finished", "url": "classKDeclarative_1_1QmlObject.html#a25e3e86a183e2c9273c1119271d4cff8", "keyword": "finished KDeclarative::QmlObject::finished KDeclarative::QmlObject finished KDeclarative::QmlObject::finished KDeclarative::QmlObject", "text": ""}, {"type": "slot", "name": "KDeclarative::QmlObject::completeInitialization", "url": "classKDeclarative_1_1QmlObject.html#a0d279161a226bd02d4e41177d93cf0ee", "keyword": "completeInitialization KDeclarative::QmlObject::completeInitialization KDeclarative::QmlObject completeInitialization KDeclarative::QmlObject::completeInitialization KDeclarative::QmlObject", "text": "If isInitializationDelayed() is false calling this will have no effect initialProperties optional properties that will be set on the object when created and before Component.onCompleted gets emitted"}, {"type": "function", "name": "KDeclarative::QmlObject::QmlObject", "url": "classKDeclarative_1_1QmlObject.html#ab153f10cbcfdd8ab7a6f8c801a42db56", "keyword": "QmlObject KDeclarative::QmlObject::QmlObject KDeclarative::QmlObject QmlObject KDeclarative::QmlObject::QmlObject KDeclarative::QmlObject", "text": "parent the parent of this object"}, {"type": "function", "name": "KDeclarative::QmlObject::QmlObject", "url": "classKDeclarative_1_1QmlObject.html#a0a1720770de8b91876e2f055ce7437ff", "keyword": "QmlObject KDeclarative::QmlObject::QmlObject KDeclarative::QmlObject QmlObject KDeclarative::QmlObject::QmlObject KDeclarative::QmlObject", "text": "engine a QQmlEngine we want to use parent the parent of this object"}, {"type": "function", "name": "KDeclarative::QmlObject::QmlObject", "url": "classKDeclarative_1_1QmlObject.html#a0e6e219cd6e32f3dd4a1c7b2583187e1", "keyword": "QmlObject KDeclarative::QmlObject::QmlObject KDeclarative::QmlObject QmlObject KDeclarative::QmlObject::QmlObject KDeclarative::QmlObject", "text": "engine a QQmlEngine we want to use rootContext the root context we want to use for objects creation parent the parent of this object"}, {"type": "function", "name": "KDeclarative::QmlObject::createObjectFromComponent", "url": "classKDeclarative_1_1QmlObject.html#ac0470139f6e29c69ca979c7025a24ab0", "keyword": "createObjectFromComponent KDeclarative::QmlObject::createObjectFromComponent KDeclarative::QmlObject createObjectFromComponent KDeclarative::QmlObject::createObjectFromComponent KDeclarative::QmlObject", "text": "component the component we want to instantiate context The QQmlContext in which we will create the object if 0 it will use the engine s root context initialProperties optional properties that will be set on the object when created and before Component.onCompleted gets emitted"}, {"type": "function", "name": "KDeclarative::QmlObject::createObjectFromSource", "url": "classKDeclarative_1_1QmlObject.html#a56d134912553606dc9190af0c6452154", "keyword": "createObjectFromSource KDeclarative::QmlObject::createObjectFromSource KDeclarative::QmlObject createObjectFromSource KDeclarative::QmlObject::createObjectFromSource KDeclarative::QmlObject", "text": "source url where the QML file is located context The QQmlContext in which we will create the object if 0 it will use the engine s root context initialProperties optional properties that will be set on the object when created and before Component.onCompleted gets emitted"}, {"type": "function", "name": "KDeclarative::QmlObject::engine", "url": "classKDeclarative_1_1QmlObject.html#a6eb64b1fa4e365b9bb8860b0de6e5bf1", "keyword": "engine KDeclarative::QmlObject::engine KDeclarative::QmlObject engine KDeclarative::QmlObject::engine KDeclarative::QmlObject", "text": "the declarative engine that runs the qml file assigned to this widget"}, {"type": "function", "name": "KDeclarative::QmlObject::isInitializationDelayed", "url": "classKDeclarative_1_1QmlObject.html#ad2b722721ef1ad829e9ae7bf2a4c6e18", "keyword": "isInitializationDelayed KDeclarative::QmlObject::isInitializationDelayed KDeclarative::QmlObject isInitializationDelayed KDeclarative::QmlObject::isInitializationDelayed KDeclarative::QmlObject", "text": "true if the initialization of the QML file will be delayed at the end of the event loop"}, {"type": "function", "name": "KDeclarative::QmlObject::loadPackage", "url": "classKDeclarative_1_1QmlObject.html#a380bfa50f3ba1e8a580af0285ac64c4b", "keyword": "loadPackage KDeclarative::QmlObject::loadPackage KDeclarative::QmlObject loadPackage KDeclarative::QmlObject::loadPackage KDeclarative::QmlObject", "text": "packageName the plugin name of the package"}, {"type": "function", "name": "KDeclarative::QmlObject::mainComponent", "url": "classKDeclarative_1_1QmlObject.html#a6403a03892096f7aaca2aacfb8dc37f1", "keyword": "mainComponent KDeclarative::QmlObject::mainComponent KDeclarative::QmlObject mainComponent KDeclarative::QmlObject::mainComponent KDeclarative::QmlObject", "text": "the main QQmlComponent of the engine"}, {"type": "function", "name": "KDeclarative::QmlObject::package", "url": "classKDeclarative_1_1QmlObject.html#ab2f1702180e0c3a9ca6d5409254b55c5", "keyword": "package KDeclarative::QmlObject::package KDeclarative::QmlObject package KDeclarative::QmlObject::package KDeclarative::QmlObject", "text": "the optional package if any"}, {"type": "function", "name": "KDeclarative::QmlObject::rootContext", "url": "classKDeclarative_1_1QmlObject.html#a26bc8084d1aa225ef66de677c788e40a", "keyword": "rootContext KDeclarative::QmlObject::rootContext KDeclarative::QmlObject rootContext KDeclarative::QmlObject::rootContext KDeclarative::QmlObject", "text": "5.11"}, {"type": "function", "name": "KDeclarative::QmlObject::rootObject", "url": "classKDeclarative_1_1QmlObject.html#a99915dcdd5a8b737f35815b1b96babec", "keyword": "rootObject KDeclarative::QmlObject::rootObject KDeclarative::QmlObject rootObject KDeclarative::QmlObject::rootObject KDeclarative::QmlObject", "text": "the root object of the declarative object tree"}, {"type": "function", "name": "KDeclarative::QmlObject::setInitializationDelayed", "url": "classKDeclarative_1_1QmlObject.html#a61dd42137458e04f3d61081070244ae6", "keyword": "setInitializationDelayed KDeclarative::QmlObject::setInitializationDelayed KDeclarative::QmlObject setInitializationDelayed KDeclarative::QmlObject::setInitializationDelayed KDeclarative::QmlObject", "text": "It has to be called before setQmlPath() In this case will be possible to assign new objects in the main engine context before the main component gets initialized So it will be possible to access it immediately from the QML code The initialization will either be completed automatically asyncronously or explicitly by calling completeInitialization() delay if true the initialization of the QML file will be delayed at the end of the event loop"}, {"type": "function", "name": "KDeclarative::QmlObject::setPackage", "url": "classKDeclarative_1_1QmlObject.html#a1aa0473c0c29f402c6973d3b2d03b38f", "keyword": "setPackage KDeclarative::QmlObject::setPackage KDeclarative::QmlObject setPackage KDeclarative::QmlObject::setPackage KDeclarative::QmlObject", "text": "package the package we want to use to provide QML files to this QML object"}, {"type": "function", "name": "KDeclarative::QmlObject::setSource", "url": "classKDeclarative_1_1QmlObject.html#a0e1066a0e0ccc1e3f9a506f9fa9d8b5c", "keyword": "setSource KDeclarative::QmlObject::setSource KDeclarative::QmlObject setSource KDeclarative::QmlObject::setSource KDeclarative::QmlObject", "text": "path the absolute path of a QML file"}, {"type": "function", "name": "KDeclarative::QmlObject::setTranslationDomain", "url": "classKDeclarative_1_1QmlObject.html#af7b983bb835fc045fa61fe5c075d7821", "keyword": "setTranslationDomain KDeclarative::QmlObject::setTranslationDomain KDeclarative::QmlObject setTranslationDomain KDeclarative::QmlObject::setTranslationDomain KDeclarative::QmlObject", "text": "If a translation domain is set all i18n calls delegate to the matching i18nd calls with the provided translation domain The translationDomain affects all i18n calls including those from imports Because of that modules intended to be used as imports should prefer the i18nd variants and set the translation domain explicitly in each call This method is only required if your declarative usage is inside a library If it s in an application there is no need to set the translation domain as the application s domain can be used translationDomain The translation domain to be used for i18n calls 5.0"}, {"type": "function", "name": "KDeclarative::QmlObject::source", "url": "classKDeclarative_1_1QmlObject.html#a8b7c69d867ef860e765ae35b39c15940", "keyword": "source KDeclarative::QmlObject::source KDeclarative::QmlObject source KDeclarative::QmlObject::source KDeclarative::QmlObject", "text": "the absolute path of the current QML file"}, {"type": "function", "name": "KDeclarative::QmlObject::status", "url": "classKDeclarative_1_1QmlObject.html#a9c82a60ec98fddbf34af5e96999278bf", "keyword": "status KDeclarative::QmlObject::status KDeclarative::QmlObject status KDeclarative::QmlObject::status KDeclarative::QmlObject", "text": "5.11"}, {"type": "function", "name": "KDeclarative::QmlObject::translationDomain", "url": "classKDeclarative_1_1QmlObject.html#a2de78762c0c133cdd3577de5ce243521", "keyword": "translationDomain KDeclarative::QmlObject::translationDomain KDeclarative::QmlObject translationDomain KDeclarative::QmlObject::translationDomain KDeclarative::QmlObject", "text": "the translation domain for the i18n calls done in this QML engine 5.0"}, {"type": "class", "name": "KDeclarative::QmlObjectSharedEngine", "url": "classKDeclarative_1_1QmlObjectSharedEngine.html", "keyword": "QmlObjectSharedEngine", "text": "Marco Martin Plasma::QmlObjectSharedEngine is a version of QmlObject that ensures only one QQmlEngine instance exists for the whole application Objects created by different instances of QmlObjectSharedEngine will be insulated by having different creation contexts accessible by QmlObject::rootContext()"}, {"type": "function", "name": "KDeclarative::QmlObjectSharedEngine::QmlObjectSharedEngine", "url": "classKDeclarative_1_1QmlObjectSharedEngine.html#a30342c32653b6fd4d60ef15171a2d040", "keyword": "QmlObjectSharedEngine KDeclarative::QmlObjectSharedEngine::QmlObjectSharedEngine KDeclarative::QmlObjectSharedEngine", "text": "parent the parent of this object"}, {"type": "class", "name": "KQuickAddons::ConfigModule", "url": "classKQuickAddons_1_1ConfigModule.html", "keyword": "ConfigModule", "text": "Configuration modules are realized as plugins that are loaded only when needed The module in principle is a simple widget displaying the item to be changed The module has a very small interface All the necessary glue logic and the GUI bells and whistles are provided by the control center and must not concern the module author To write a config module you have to create a C++ library and an accompaining QML user interface The library must contain a factory function like the following The constructor of the ConfigModule then looks like this The QML part must be in the KPackage format installed under share/kpackage/kcms KPackage::Package The package must have the same name as the KAboutData componentName to be installed by CMake with the command kpackage_install_package(package kcm_componentName kcms) given is the subdirectory in the source tree where the package sources are located and is the componentname passed to the KAboutData in the C++ part The main config dialog UI will be the file ui/main.qml from the package or what X-KPackage-MainScript value is in the package metadata desktop file The QML part can access all the properties of ConfigModule together with the properties defined in its subclass by accessing to the global object or with the import of the ConfigModule attached property If you want to make the ConfigModule available only conditionally i.e show in the list of available modules only if some test succeeds then you can use Hidden in the desktop file An example The example executes the given code in a shell and uses the stdout output for the Hidden value so it s either Hidden true or Hidden false See for more detailed documentation"}, {"type": "enum", "name": "KQuickAddons::ConfigModule::Button", "url": "classKQuickAddons_1_1ConfigModule.html#af01b919b1a15263445b7a27fc08e6225", "keyword": "Button KQuickAddons::ConfigModule::Button KQuickAddons::ConfigModule", "text": "You should only use Help Default and Apply The rest is obsolete NoAdditionalButton can be used when we do not want have other button that Ok Cancel ConfigModule::buttons ConfigModule::setButtons"}, {"type": "signal", "name": "KQuickAddons::ConfigModule::authActionNameChanged", "url": "classKQuickAddons_1_1ConfigModule.html#a7def293c57916041b4a89743316f1cce", "keyword": "authActionNameChanged KQuickAddons::ConfigModule::authActionNameChanged KQuickAddons::ConfigModule", "text": ""}, {"type": "signal", "name": "KQuickAddons::ConfigModule::buttonsChanged", "url": "classKQuickAddons_1_1ConfigModule.html#ad0e3f1c566a75ee1d6e90aea7d340560", "keyword": "buttonsChanged KQuickAddons::ConfigModule::buttonsChanged KQuickAddons::ConfigModule", "text": ""}, {"type": "signal", "name": "KQuickAddons::ConfigModule::needsAuthorizationChanged", "url": "classKQuickAddons_1_1ConfigModule.html#a07d2fcff0069b0582f9d55d355b9396e", "keyword": "needsAuthorizationChanged KQuickAddons::ConfigModule::needsAuthorizationChanged KQuickAddons::ConfigModule", "text": ""}, {"type": "signal", "name": "KQuickAddons::ConfigModule::needsSaveChanged", "url": "classKQuickAddons_1_1ConfigModule.html#a7633b09cee3e3e419a73c991ae9e49f4", "keyword": "needsSaveChanged KQuickAddons::ConfigModule::needsSaveChanged KQuickAddons::ConfigModule", "text": "This signal is emitted whenever the state of the configuration shown in the module changes It allows the module container to keep track of unsaved changes"}, {"type": "signal", "name": "KQuickAddons::ConfigModule::quickHelpChanged", "url": "classKQuickAddons_1_1ConfigModule.html#aca1510b4319baf0d7af2fc68f3428494", "keyword": "quickHelpChanged KQuickAddons::ConfigModule::quickHelpChanged KQuickAddons::ConfigModule", "text": "Emit this signal whenever the module s quickhelp changes Modules implemented as tabbed dialogs might want to implement per-tab quickhelp for example"}, {"type": "signal", "name": "KQuickAddons::ConfigModule::rootOnlyMessageChanged", "url": "classKQuickAddons_1_1ConfigModule.html#ab6acbb858354c23005c7634af63e13fc", "keyword": "rootOnlyMessageChanged KQuickAddons::ConfigModule::rootOnlyMessageChanged KQuickAddons::ConfigModule", "text": "Emits this signal whenever the module s root message changes"}, {"type": "signal", "name": "KQuickAddons::ConfigModule::useRootOnlyMessageChanged", "url": "classKQuickAddons_1_1ConfigModule.html#ad6a4b066039a4f1f0cb7572d357ca4ae", "keyword": "useRootOnlyMessageChanged KQuickAddons::ConfigModule::useRootOnlyMessageChanged KQuickAddons::ConfigModule", "text": ""}, {"type": "slot", "name": "KQuickAddons::ConfigModule::defaults", "url": "classKQuickAddons_1_1ConfigModule.html#a0565e9c7878ab7ddc4a1b83aa2796102", "keyword": "defaults KQuickAddons::ConfigModule::defaults KQuickAddons::ConfigModule", "text": "This method is called when the user clicks the button It should set the display to useful values"}, {"type": "slot", "name": "KQuickAddons::ConfigModule::load", "url": "classKQuickAddons_1_1ConfigModule.html#a5880e378b8f40325a54b2a54de5bb1a2", "keyword": "load KQuickAddons::ConfigModule::load KQuickAddons::ConfigModule", "text": "The load method sets the user interface elements of the module to reflect the current settings stored in the configuration files This method is invoked whenever the module should read its configuration most of the times from a config file and update the user interface This happens when the user clicks the button in the control center to undo all of his changes and restore the currently valid settings It is also called right after construction"}, {"type": "slot", "name": "KQuickAddons::ConfigModule::save", "url": "classKQuickAddons_1_1ConfigModule.html#a2a95833182941b69cf99e311d0ece5bb", "keyword": "save KQuickAddons::ConfigModule::save KQuickAddons::ConfigModule", "text": "The save method stores the config information as shown in the user interface in the config files If necessary this method also updates the running system e.g by restarting applications This normally does not apply for KSettings::Dialog modules where the updating is taken care of by KSettings::Dispatcher save is called when the user clicks or"}, {"type": "function", "name": "KQuickAddons::ConfigModule::ConfigModule", "url": "classKQuickAddons_1_1ConfigModule.html#a42991e8f4f94c87f0856f90395a656e9", "keyword": "ConfigModule KQuickAddons::ConfigModule::ConfigModule KQuickAddons::ConfigModule", "text": "do not emit changed signals here since they are not yet connected to any slot aboutData becomes owned by the ConfigModule"}, {"type": "function", "name": "KQuickAddons::ConfigModule::ConfigModule", "url": "classKQuickAddons_1_1ConfigModule.html#a88b887e68a9a2ef37d0f59aa805151c6", "keyword": "ConfigModule KQuickAddons::ConfigModule::ConfigModule KQuickAddons::ConfigModule", "text": "do not emit changed signals here since they are not yet connected to any slot metaData description for the plugin it will generate a KAboutData from that 5.11"}, {"type": "function", "name": "KQuickAddons::ConfigModule::ConfigModule", "url": "classKQuickAddons_1_1ConfigModule.html#ab92db6ba3881c9fac41bdfd318cf9f91", "keyword": "ConfigModule KQuickAddons::ConfigModule::ConfigModule KQuickAddons::ConfigModule", "text": "do not emit changed signals here since they are not yet connected to any slot"}, {"type": "function", "name": "KQuickAddons::ConfigModule::~ConfigModule", "url": "classKQuickAddons_1_1ConfigModule.html#ac30c800456c5c7c43f79247a7abf92ce", "keyword": "KQuickAddons::ConfigModule::~ConfigModule KQuickAddons::ConfigModule", "text": ""}, {"type": "function", "name": "KQuickAddons::ConfigModule::aboutData", "url": "classKQuickAddons_1_1ConfigModule.html#a4f7a2c65040e6f42c8a31f086ecf03ee", "keyword": "aboutData KQuickAddons::ConfigModule::aboutData KQuickAddons::ConfigModule", "text": "If you override you should have it return a pointer to a constant the KAboutData for this module"}, {"type": "function", "name": "KQuickAddons::ConfigModule::authActionName", "url": "classKQuickAddons_1_1ConfigModule.html#a2b3277c743fe3e1a6091adb93d5a8efd", "keyword": "authActionName KQuickAddons::ConfigModule::authActionName KQuickAddons::ConfigModule", "text": "By default its an invalid action The action that has to be authorized to execute the save() method"}, {"type": "function", "name": "KQuickAddons::ConfigModule::buttons", "url": "classKQuickAddons_1_1ConfigModule.html#aa42076b8a5df83498be320300d4565d3", "keyword": "buttons KQuickAddons::ConfigModule::buttons KQuickAddons::ConfigModule", "text": "The return value is a value or ed together from the Button enumeration type ConfigModule::setButtons"}, {"type": "function", "name": "KQuickAddons::ConfigModule::engine", "url": "classKQuickAddons_1_1ConfigModule.html#a29a837141e0b4175c4329239b7650e69", "keyword": "engine KQuickAddons::ConfigModule::engine KQuickAddons::ConfigModule", "text": ""}, {"type": "function", "name": "KQuickAddons::ConfigModule::mainUi", "url": "classKQuickAddons_1_1ConfigModule.html#a53f4c116a5be72f91da9b67edab641a3", "keyword": "mainUi KQuickAddons::ConfigModule::mainUi KQuickAddons::ConfigModule", "text": "The main UI for this configuration module It s a QQuickItem coming from the QML package named the same as the KAboutData s component name for this config module"}, {"type": "function", "name": "KQuickAddons::ConfigModule::needsAuthorization", "url": "classKQuickAddons_1_1ConfigModule.html#a23fb814369411e92cfd9c12fb9f02d17", "keyword": "needsAuthorization KQuickAddons::ConfigModule::needsAuthorization KQuickAddons::ConfigModule", "text": "By default it s false true if the module s save() method requires authorization false otherwise"}, {"type": "function", "name": "KQuickAddons::ConfigModule::needsSave", "url": "classKQuickAddons_1_1ConfigModule.html#a59f530e459530a73cbb4ae46ecd76059", "keyword": "needsSave KQuickAddons::ConfigModule::needsSave KQuickAddons::ConfigModule", "text": ""}, {"type": "function", "name": "KQuickAddons::ConfigModule::quickHelp", "url": "classKQuickAddons_1_1ConfigModule.html#a0c34a82278908af5f43e7532b48e139a", "keyword": "quickHelp KQuickAddons::ConfigModule::quickHelp KQuickAddons::ConfigModule", "text": "This method is called when the module is docked The quick-help text should contain a short description of the module and links to the module s help files You can use HTML formatting tags in the text make sure the quick help text gets translated use i18n()"}, {"type": "function", "name": "KQuickAddons::ConfigModule::rootOnlyMessage", "url": "classKQuickAddons_1_1ConfigModule.html#a8ea4e576cd40aa4a86111e178e0809b9", "keyword": "rootOnlyMessage KQuickAddons::ConfigModule::rootOnlyMessage KQuickAddons::ConfigModule", "text": "When the module must be run as root or acts differently for root and a normal user it is sometimes useful to customize the message that appears at the top of the module when used as a normal user This function returns this customized message If none has been set a default message will be used ConfigModule::setRootOnlyMessage"}, {"type": "function", "name": "KQuickAddons::ConfigModule::setAboutData", "url": "classKQuickAddons_1_1ConfigModule.html#a0fba18519127c8139f02e272f1ac3fdd", "keyword": "setAboutData KQuickAddons::ConfigModule::setAboutData KQuickAddons::ConfigModule", "text": ""}, {"type": "function", "name": "KQuickAddons::ConfigModule::setAuthActionName", "url": "classKQuickAddons_1_1ConfigModule.html#addb62ff7ad8266a12ca15f27fa0b45f5", "keyword": "setAuthActionName KQuickAddons::ConfigModule::setAuthActionName KQuickAddons::ConfigModule", "text": "It will still have to execute the action itself using the KAuth library so this method is not technically needed to perform the action but using this method will ensure that hosting applications like System Settings or kcmshell behave correctly action the action that will be used by this ConfigModule"}, {"type": "function", "name": "KQuickAddons::ConfigModule::setButtons", "url": "classKQuickAddons_1_1ConfigModule.html#a109e25082f42134c37c8ea4ea4b7c56f", "keyword": "setButtons KQuickAddons::ConfigModule::setButtons KQuickAddons::ConfigModule", "text": "Help shows a button Default shows a button Apply in kcontrol this will show an and button in kcmshell this will show an and button If Apply is not specified kcmshell will show a button ConfigModule::buttons"}, {"type": "function", "name": "KQuickAddons::ConfigModule::setNeedsAuthorization", "url": "classKQuickAddons_1_1ConfigModule.html#a8483a64dcf93b733e1cfd1db4fd8b989", "keyword": "setNeedsAuthorization KQuickAddons::ConfigModule::setNeedsAuthorization KQuickAddons::ConfigModule", "text": "The module can set this property to true if it requires authorization It will still have to execute the action itself using the KAuth library so this method is not technically needed to perform the action but using this and/or the setAuthActionName() method will ensure that hosting applications like System Settings or kcmshell behave correctly Called with true this method will set the action to where is aboutData() appName() return value This default action won t be set if the aboutData() object is not valid Note that called with false this method will reset the action name set with setAuthActionName() needsAuth Tells if the module s save() method requires authorization to be executed"}, {"type": "function", "name": "KQuickAddons::ConfigModule::setNeedsSave", "url": "classKQuickAddons_1_1ConfigModule.html#a1f7a3b5ca7b60e821d547937d6a3d992", "keyword": "setNeedsSave KQuickAddons::ConfigModule::setNeedsSave KQuickAddons::ConfigModule", "text": ""}, {"type": "function", "name": "KQuickAddons::ConfigModule::setQuickHelp", "url": "classKQuickAddons_1_1ConfigModule.html#a32d304a8726f89da333d38adbbae0952", "keyword": "setQuickHelp KQuickAddons::ConfigModule::setQuickHelp KQuickAddons::ConfigModule", "text": ""}, {"type": "function", "name": "KQuickAddons::ConfigModule::setRootOnlyMessage", "url": "classKQuickAddons_1_1ConfigModule.html#a27c7b133ef78fc9d0ae704519babe933", "keyword": "setRootOnlyMessage KQuickAddons::ConfigModule::setRootOnlyMessage KQuickAddons::ConfigModule", "text": "This message will be shown at the top of the module if useRootOnlyMessage is set If no message is set a default one will be used ConfigModule::rootOnlyMessage"}, {"type": "function", "name": "KQuickAddons::ConfigModule::setUseRootOnlyMessage", "url": "classKQuickAddons_1_1ConfigModule.html#a89189ff460977c6d350f956eb58ae36e", "keyword": "setUseRootOnlyMessage KQuickAddons::ConfigModule::setUseRootOnlyMessage KQuickAddons::ConfigModule", "text": "Following the value of on the RootOnly message will be shown or not ConfigModule::useRootOnlyMessage"}, {"type": "function", "name": "KQuickAddons::ConfigModule::useRootOnlyMessage", "url": "classKQuickAddons_1_1ConfigModule.html#a1a7b5767d350f98b6343ffcf6a64c771", "keyword": "useRootOnlyMessage KQuickAddons::ConfigModule::useRootOnlyMessage KQuickAddons::ConfigModule", "text": "In some cases the module don t want a RootOnly message to appear for example if it has already one This function tells KControl if a RootOnly message should be shown ConfigModule::setUseRootOnlyMessage"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KDeclarative Integration of QML and KDE work spaces Introduction KDeclarative provides integration of QML and KDE work spaces It s comprises two parts a library used by the C++ part of your application to intergrate QML with KDE Frameworks specific features and a series of QML imports that offer bindings to some of the Frameworks KDeclarative library KDeclarative exposes 3 namespaced classes KDeclarative::KDeclarative KDeclarative::QmlObject KDeclarative::ConfigPropertyMap KDeclarative::KDeclarative The KDeclarative class is used to manipulate the QQmlEngine instance used by the application and to get some informations about the platform that influences the behavior of the QML components In order to use it create an instance of KDeclarative and as soon as you have a pointer to your QQmlEngine call setupBindings This will add the following things to the engine use a KIOAccessManagerFactory instead of the stock QQmlNetworkAccessManagerFactory set a new rootContextObject() that exposes all the i18n() functions from the KI18n framework they will be available in the global QML context just call i18n() from anywhere in your QML code Add a QML icon provider that makes possible for the Image element to load stuff from the scheme KDeclarative::QmlObject KDeclarative::ConfigPropertyMap"}]}