{"name": "kparts-5.26.0", "fancyname": "KParts", "docfields": [{"type": "page", "name": "deprecated", "url": "deprecated.html", "keyword": null, "text": "Deprecated List Member KParts BrowserRun askEmbedOrSave const QUrl url const QString mimeType const QString suggestedFileName QString() int flags 0 use BrowserOpenOrSaveQuestion Member KParts BrowserRun askSave const QUrl url KService::Ptr offer const QString mimeType const QString suggestedFileName QString() use BrowserOpenOrSaveQuestion"}, {"type": "group", "name": "ScriptValueTypes", "url": "group__ScriptValueTypes.html", "keyword": "Script Value Types", "text": "Valid values may be bools strings and numbers doubles as well as the following custom types Null Undefined Exception Object FunctionRef"}, {"type": "class", "name": "TerminalInterface", "url": "classTerminalInterface.html", "keyword": "TerminalInterface", "text": "Note that besides the functions below here KonsolePart also has some signals you can connect to They aren t in this class cause we can t have signals without having a QObject which TerminalInterface is not These are some signals you can connect to void currentDirectoryChanged(const QString& dir) See the example code below for how to connect to these Use it like this Dominique Devriese"}, {"type": "function", "name": "TerminalInterface::currentWorkingDirectory", "url": "classTerminalInterface.html#a4775cd3ccd734e5ef48c27e1b0cded64", "keyword": "currentWorkingDirectory TerminalInterface::currentWorkingDirectory TerminalInterface", "text": ""}, {"type": "function", "name": "TerminalInterface::foregroundProcessId", "url": "classTerminalInterface.html#aedcb8529e693a68a282dc8a7126b2dee", "keyword": "foregroundProcessId TerminalInterface::foregroundProcessId TerminalInterface", "text": ""}, {"type": "function", "name": "TerminalInterface::foregroundProcessName", "url": "classTerminalInterface.html#a932165af76970452b2be58047fb94447", "keyword": "foregroundProcessName TerminalInterface::foregroundProcessName TerminalInterface", "text": "If there is no sub process running returns empty QString"}, {"type": "function", "name": "TerminalInterface::sendInput", "url": "classTerminalInterface.html#a9a2a04525883f6be174592228c6a0e4e", "keyword": "sendInput TerminalInterface::sendInput TerminalInterface", "text": "text as input to the currently running program"}, {"type": "function", "name": "TerminalInterface::startProgram", "url": "classTerminalInterface.html#a1bd7a01c2c2dabd5a7cc7f653b5fe083", "keyword": "startProgram TerminalInterface::startProgram TerminalInterface", "text": ""}, {"type": "function", "name": "TerminalInterface::terminalProcessId", "url": "classTerminalInterface.html#a986adf37e119c722520c9a57e2d99d87", "keyword": "terminalProcessId TerminalInterface::terminalProcessId TerminalInterface", "text": "If no process is currently running returns 0"}, {"type": "struct", "name": "KParts::BrowserArguments", "url": "structKParts_1_1BrowserArguments.html", "keyword": "BrowserArguments", "text": "The arguments remain stored in the browser extension after that and can be used for instance to jump to the xOffset/yOffset position once the url has finished loading The parts with a browser extension who care about urlargs will use those arguments others will ignore them This can also be used the other way round when a part asks for a URL to be opened with openUrlRequest or createNewWindow"}, {"type": "function", "name": "KParts::BrowserArguments::contentType", "url": "structKParts_1_1BrowserArguments.html#a4d79e549dbfbbb7fd0b28a2786aaaf0c", "keyword": "contentType KParts::BrowserArguments::contentType KParts::BrowserArguments", "text": ""}, {"type": "function", "name": "KParts::BrowserArguments::doPost", "url": "structKParts_1_1BrowserArguments.html#af19877a7c56a87a9e5ff46499f9bfcb8", "keyword": "doPost KParts::BrowserArguments::doPost KParts::BrowserArguments", "text": ""}, {"type": "function", "name": "KParts::BrowserArguments::forcesNewWindow", "url": "structKParts_1_1BrowserArguments.html#a29be5b609b5a704dbeab5fd58c45b667", "keyword": "forcesNewWindow KParts::BrowserArguments::forcesNewWindow KParts::BrowserArguments", "text": ""}, {"type": "function", "name": "KParts::BrowserArguments::redirectedRequest", "url": "structKParts_1_1BrowserArguments.html#a221b56f8b39906d12dc9d9cdc7bcaf6a", "keyword": "redirectedRequest KParts::BrowserArguments::redirectedRequest KParts::BrowserArguments", "text": "true if the request was a result of a META refresh/redirect request or HTTP redirect"}, {"type": "function", "name": "KParts::BrowserArguments::setContentType", "url": "structKParts_1_1BrowserArguments.html#aa5a45039269323c861805dcbb40db5bd", "keyword": "setContentType KParts::BrowserArguments::setContentType KParts::BrowserArguments", "text": ""}, {"type": "function", "name": "KParts::BrowserArguments::setDoPost", "url": "structKParts_1_1BrowserArguments.html#a31900428f566238a35f2d667835921e0", "keyword": "setDoPost KParts::BrowserArguments::setDoPost KParts::BrowserArguments", "text": ""}, {"type": "function", "name": "KParts::BrowserArguments::setForcesNewWindow", "url": "structKParts_1_1BrowserArguments.html#a893eaea4409d7cb1424e12b581dad729", "keyword": "setForcesNewWindow KParts::BrowserArguments::setForcesNewWindow KParts::BrowserArguments", "text": "When openUrlRequest is emitted normally the url would be opened in the current view setForcesNewWindow(true) specifies that a new window or tab should be used setNewTab(true) requests a tab specifically otherwise the user-preference is followed This is typically used for target in web browsers When createNewWindow is emitted if setNewTab(true) was called a tab is created otherwise if setForcesNewWindow(true) was called a window is created otherwise the user preference is followed"}, {"type": "function", "name": "KParts::BrowserArguments::setLockHistory", "url": "structKParts_1_1BrowserArguments.html#a01996b915ecb07d67258dc31f0dfca8e", "keyword": "setLockHistory KParts::BrowserArguments::setLockHistory KParts::BrowserArguments", "text": "This is used during e.g a redirection to avoid a new entry in the history"}, {"type": "function", "name": "KParts::BrowserArguments::setNewTab", "url": "structKParts_1_1BrowserArguments.html#a618f6fe19f6e4a776a0f1f2168ab366d", "keyword": "setNewTab KParts::BrowserArguments::setNewTab KParts::BrowserArguments", "text": ""}, {"type": "function", "name": "KParts::BrowserArguments::setRedirectedRequest", "url": "structKParts_1_1BrowserArguments.html#a958ee61094423cb514dd749f5d079a61", "keyword": "setRedirectedRequest KParts::BrowserArguments::setRedirectedRequest KParts::BrowserArguments", "text": "redirected"}, {"type": "variable", "name": "KParts::BrowserArguments::docState", "url": "structKParts_1_1BrowserArguments.html#a76aed0d1e923b73db918038d23f524ec", "keyword": "docState KParts::BrowserArguments::docState KParts::BrowserArguments", "text": "See KHTMLPart for instance"}, {"type": "variable", "name": "KParts::BrowserArguments::frameName", "url": "structKParts_1_1BrowserArguments.html#ad8b767db0ac78790860f4f0cbef64ea2", "keyword": "frameName KParts::BrowserArguments::frameName KParts::BrowserArguments", "text": "KHTML/Konqueror-specific"}, {"type": "variable", "name": "KParts::BrowserArguments::postData", "url": "structKParts_1_1BrowserArguments.html#a9c1fb6cb602a10fec4ca05a25f1b9ac6", "keyword": "postData KParts::BrowserArguments::postData KParts::BrowserArguments", "text": ""}, {"type": "variable", "name": "KParts::BrowserArguments::softReload", "url": "structKParts_1_1BrowserArguments.html#af06b08da058cd6fc19ad42e2904e2594", "keyword": "softReload KParts::BrowserArguments::softReload KParts::BrowserArguments", "text": "It s used currently for two different frameset reload strategies In case of soft reload individual frames are reloaded instead of reloading whole frameset"}, {"type": "variable", "name": "KParts::BrowserArguments::trustedSource", "url": "structKParts_1_1BrowserArguments.html#aa9e31eabaee6af2692319d21721fc9cb", "keyword": "trustedSource KParts::BrowserArguments::trustedSource KParts::BrowserArguments", "text": "For instance the directory views can be trusted whereas HTML pages are not trusted in that respect"}, {"type": "class", "name": "KParts::BrowserExtension", "url": "classKParts_1_1BrowserExtension.html", "keyword": "BrowserExtension", "text": "Remember that ReadOnlyPart only has openUrl(QUrl) and a few arguments() but not much more For full-fledged browsing we need much more than that including enabling/disabling of standard actions print copy paste allowing parts to save and restore their data into the back/forward history allowing parts to control the location bar URL to requests URLs to be opened by the hosting browser etc The part developer needs to define its own class derived from BrowserExtension to implement the virtual methods and the standard-actions slots see below The way to associate the BrowserExtension with the part is to simply create the BrowserExtension as a child of the part in QObject s terms The hosting application will look for it automatically Another aspect of the browser integration is that a set of standard actions are provided by the browser but implemented by the part for the actions it supports The following standard actions are defined by the host of the view selection-dependent actions cut Copy selected items to clipboard and store not cut in clipboard copy Copy selected items to clipboard and store cut in clipboard paste Paste clipboard into view URL pasteTo(const QUrl &) Paste clipboard into given URL searchProvider Lookup selected text at default search provider normal actions None anymore The view defines a slot with the name of the action in order to implement the action The browser will detect the slot automatically and connect its action to it when appropriate i.e when the view is active The selection-dependent actions are disabled by default and the view should enable them when the selection changes emitting enableAction() The normal actions do not depend on the selection A special case is the configuration slots not connected to any action directly configuration slot reparseConfiguration Re-read configuration and apply it disableScrolling no scrollbars"}, {"type": "typedef", "name": "KParts::BrowserExtension::ActionGroupMap", "url": "classKParts_1_1BrowserExtension.html#a73ab162c395443c0227946524a8ee04c", "keyword": "ActionGroupMap KParts::BrowserExtension::ActionGroupMap KParts::BrowserExtension", "text": ""}, {"type": "enum", "name": "KParts::BrowserExtension::PopupFlag", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3", "keyword": "PopupFlag KParts::BrowserExtension::PopupFlag KParts::BrowserExtension", "text": ""}, {"type": "enumvalue", "name": "KParts::BrowserExtension::DefaultPopupItems", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a59ee58fca9e8b900d617c4f232b497f7", "keyword": "DefaultPopupItems KParts::BrowserExtension::DefaultPopupItems KParts::BrowserExtension", "text": "default value no additional menu item"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::ShowNavigationItems", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a05faf3d46fca9da3a396d72c993eec5c", "keyword": "ShowNavigationItems KParts::BrowserExtension::ShowNavigationItems KParts::BrowserExtension", "text": "show and usually done when clicking the background of the view but not an item"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::ShowUp", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3af6030e3884ded53eace393f2af510c68", "keyword": "ShowUp KParts::BrowserExtension::ShowUp KParts::BrowserExtension", "text": "show same thing but not over e.g HTTP Requires ShowNavigationItems"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::ShowReload", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a97cbb12bbef8ef52b233c24d0bf3e41e", "keyword": "ShowReload KParts::BrowserExtension::ShowReload KParts::BrowserExtension", "text": "show usually done when clicking the background of the view but not an item"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::ShowBookmark", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3ac6c783f725ac9fe594d0b563495feb64", "keyword": "ShowBookmark KParts::BrowserExtension::ShowBookmark KParts::BrowserExtension", "text": "show usually not done on the local filesystem"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::ShowCreateDirectory", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a152988520c15f75baddf48de43c9092a", "keyword": "ShowCreateDirectory KParts::BrowserExtension::ShowCreateDirectory KParts::BrowserExtension", "text": "show usually only done on the background of the view or in hierarchical views like directory trees where the new dir would be visible"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::ShowTextSelectionItems", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a947c452c66b8c500ac2ce303451d68c4", "keyword": "ShowTextSelectionItems KParts::BrowserExtension::ShowTextSelectionItems KParts::BrowserExtension", "text": "set when selecting text for a popup that only contains text-related items"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::NoDeletion", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a2332ecaf86d9179ba1ba92b9b3b10463", "keyword": "NoDeletion KParts::BrowserExtension::NoDeletion KParts::BrowserExtension", "text": "deletion trashing and renaming not allowed e.g parent dir not writeable this is only needed if the protocol itself supports deletion unlike e.g HTTP"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::IsLink", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a0521ef0fcccfba841ae8c5ae373f8976", "keyword": "IsLink KParts::BrowserExtension::IsLink KParts::BrowserExtension", "text": "show and other link-related actions linkactions merging group"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::ShowUrlOperations", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a40232b7894e5aa48029559354b84aeb5", "keyword": "ShowUrlOperations KParts::BrowserExtension::ShowUrlOperations KParts::BrowserExtension", "text": "show copy paste as well as cut if NoDeletion is not set"}, {"type": "enumvalue", "name": "KParts::BrowserExtension::ShowProperties", "url": "classKParts_1_1BrowserExtension.html#ae5b9acf92e7d83faf5142597371ef1e3a12a41a796fe0be4f8411259b7a77920d", "keyword": "ShowProperties KParts::BrowserExtension::ShowProperties KParts::BrowserExtension", "text": "show action usually done by directory views"}, {"type": "signal", "name": "KParts::BrowserExtension::addWebSideBar", "url": "classKParts_1_1BrowserExtension.html#a781dba34df4a81ca0027363b08a4ab27", "keyword": "addWebSideBar KParts::BrowserExtension::addWebSideBar KParts::BrowserExtension", "text": ""}, {"type": "signal", "name": "KParts::BrowserExtension::createNewWindow", "url": "classKParts_1_1BrowserExtension.html#ad6ca2903f3c5ba4cd8db5f18cc47a800", "keyword": "createNewWindow KParts::BrowserExtension::createNewWindow KParts::BrowserExtension", "text": "arguments is optional additional information about how to open the url KParts::OpenUrlArguments browserArguments is optional additional information for web browsers KParts::BrowserArguments The request for a pointer to the part is only fulfilled/processed if the mimeType is set in the browserArguments otherwise the request cannot be processed synchronously"}, {"type": "signal", "name": "KParts::BrowserExtension::enableAction", "url": "classKParts_1_1BrowserExtension.html#a3252f2adebd103519ee15e57037c7386", "keyword": "enableAction KParts::BrowserExtension::enableAction KParts::BrowserExtension", "text": "See class documentation for the list of standard actions"}, {"type": "signal", "name": "KParts::BrowserExtension::itemsRemoved", "url": "classKParts_1_1BrowserExtension.html#ab52eaff5194bfec9aeff1e346f94d757", "keyword": "itemsRemoved KParts::BrowserExtension::itemsRemoved KParts::BrowserExtension", "text": ""}, {"type": "signal", "name": "KParts::BrowserExtension::loadingProgress", "url": "classKParts_1_1BrowserExtension.html#a347035c05f6d6064f18ee656d61faed7", "keyword": "loadingProgress KParts::BrowserExtension::loadingProgress KParts::BrowserExtension", "text": "However if you don t use a KIO::Job in the part you can use loadingProgress() and speedProgress() to display progress information"}, {"type": "signal", "name": "KParts::BrowserExtension::mouseOverInfo", "url": "classKParts_1_1BrowserExtension.html#abc6b8cdb9134eadcf817a3a9dea4c898", "keyword": "mouseOverInfo KParts::BrowserExtension::mouseOverInfo KParts::BrowserExtension", "text": "Used when the mouse is on an URL"}, {"type": "signal", "name": "KParts::BrowserExtension::moveTopLevelWidget", "url": "classKParts_1_1BrowserExtension.html#aad5b1ddfb7313a8cf23a791fde7ec336", "keyword": "moveTopLevelWidget KParts::BrowserExtension::moveTopLevelWidget KParts::BrowserExtension", "text": ""}, {"type": "signal", "name": "KParts::BrowserExtension::openUrlNotify", "url": "classKParts_1_1BrowserExtension.html#a06b1ae0f0712677310ff7bc0b31b376a", "keyword": "openUrlNotify KParts::BrowserExtension::openUrlNotify KParts::BrowserExtension", "text": "This helps the browser to update/create an entry in the history The part may not emit this signal together with openUrlRequest() Emit openUrlRequest() if you want the browser to handle a URL the user asked to open from within your part/document This signal however is useful if you want to handle URLs all yourself internally while still telling the hosting browser about new opened URLs in order to provide a proper history functionality to the user An example of usage is a html rendering component which wants to emit this signal when a child frame document changed its URL Conclusion you probably want to use openUrlRequest() instead"}, {"type": "signal", "name": "KParts::BrowserExtension::openUrlRequest", "url": "classKParts_1_1BrowserExtension.html#a8d8c22399daa85b3dd9750d89931938a", "keyword": "openUrlRequest KParts::BrowserExtension::openUrlRequest KParts::BrowserExtension", "text": "To set a reload the x and y offsets the service type etc fill in the appropriate fields in the args structure Hosts should not connect to this signal but to openUrlRequestDelayed()"}, {"type": "signal", "name": "KParts::BrowserExtension::openUrlRequestDelayed", "url": "classKParts_1_1BrowserExtension.html#a1b3216fc78b96cb42e511f7a2b095c93", "keyword": "openUrlRequestDelayed KParts::BrowserExtension::openUrlRequestDelayed KParts::BrowserExtension", "text": "This allows the caller to terminate what it s doing first before usually being destroyed Parts should never use this signal hosts should only connect to this signal"}, {"type": "signal", "name": "KParts::BrowserExtension::popupMenu", "url": "classKParts_1_1BrowserExtension.html#a97f2ed6d4318555095512275f6988484", "keyword": "popupMenu KParts::BrowserExtension::popupMenu KParts::BrowserExtension", "text": "global global coordinates where the popup should be shown items list of file items which the popup applies to args OpenUrlArguments mostly for metadata here browserArguments BrowserArguments mostly for referrer flags enables/disables certain builtin actions in the popupmenu actionGroups named groups of actions which should be inserted into the popup see ActionGroupMap"}, {"type": "signal", "name": "KParts::BrowserExtension::popupMenu", "url": "classKParts_1_1BrowserExtension.html#a861d4f7490f2a8f15e48030d91904638", "keyword": "popupMenu KParts::BrowserExtension::popupMenu KParts::BrowserExtension", "text": "Give as much information about this URL as possible like args.mimeType and the file type mode global global coordinates where the popup should be shown url the URL this popup applies to mode the file type of the url S_IFREG S_IFDIR args OpenUrlArguments set the mimetype of the URL using setMimeType() browserArguments BrowserArguments mostly for referrer flags enables/disables certain builtin actions in the popupmenu actionGroups named groups of actions which should be inserted into the popup see ActionGroupMap"}, {"type": "signal", "name": "KParts::BrowserExtension::requestFocus", "url": "classKParts_1_1BrowserExtension.html#a8424167e31fd3c68e53cfd0aacb38934", "keyword": "requestFocus KParts::BrowserExtension::requestFocus KParts::BrowserExtension", "text": ""}, {"type": "signal", "name": "KParts::BrowserExtension::resizeTopLevelWidget", "url": "classKParts_1_1BrowserExtension.html#a5ac0475a4a7d3434326c96bfcff57006", "keyword": "resizeTopLevelWidget KParts::BrowserExtension::resizeTopLevelWidget KParts::BrowserExtension", "text": ""}, {"type": "signal", "name": "KParts::BrowserExtension::selectionInfo", "url": "classKParts_1_1BrowserExtension.html#aae2db786c70b458b433a2819ed2110fe", "keyword": "selectionInfo KParts::BrowserExtension::selectionInfo KParts::BrowserExtension", "text": "Used when a set of files/URLs is selected with full information about those URLs including size permissions etc"}, {"type": "signal", "name": "KParts::BrowserExtension::selectionInfo", "url": "classKParts_1_1BrowserExtension.html#a5acae1ffb924f3791fd55900443c3bc0", "keyword": "selectionInfo KParts::BrowserExtension::selectionInfo KParts::BrowserExtension", "text": "Used when some text is selected"}, {"type": "signal", "name": "KParts::BrowserExtension::selectionInfo", "url": "classKParts_1_1BrowserExtension.html#a84365d8811f6bbb3210c6e12e2723e01", "keyword": "selectionInfo KParts::BrowserExtension::selectionInfo KParts::BrowserExtension", "text": "Used when a set of URLs is selected"}, {"type": "signal", "name": "KParts::BrowserExtension::setActionText", "url": "classKParts_1_1BrowserExtension.html#a73506e6a8b89d661512d4a6dfcfaabd5", "keyword": "setActionText KParts::BrowserExtension::setActionText KParts::BrowserExtension", "text": "This can be used to change into for instance See class documentation for the list of standard actions"}, {"type": "signal", "name": "KParts::BrowserExtension::setIconUrl", "url": "classKParts_1_1BrowserExtension.html#a2ee4871e08049994f1ebdebece5a5ce0", "keyword": "setIconUrl KParts::BrowserExtension::setIconUrl KParts::BrowserExtension", "text": ""}, {"type": "signal", "name": "KParts::BrowserExtension::setLocationBarUrl", "url": "classKParts_1_1BrowserExtension.html#a335b6f5c78db67e7b8d385eb313b8aef", "keyword": "setLocationBarUrl KParts::BrowserExtension::setLocationBarUrl KParts::BrowserExtension", "text": ""}, {"type": "signal", "name": "KParts::BrowserExtension::setPageSecurity", "url": "classKParts_1_1BrowserExtension.html#a7a352d71c9bcabd14a48efb589dd0957", "keyword": "setPageSecurity KParts::BrowserExtension::setPageSecurity KParts::BrowserExtension", "text": ""}, {"type": "signal", "name": "KParts::BrowserExtension::speedProgress", "url": "classKParts_1_1BrowserExtension.html#a51c00341228e2280d548e960b3d1fbe6", "keyword": "speedProgress KParts::BrowserExtension::speedProgress KParts::BrowserExtension", "text": "loadingProgress"}, {"type": "function", "name": "KParts::BrowserExtension::BrowserExtension", "url": "classKParts_1_1BrowserExtension.html#ad99182108f25e08eff9c2475f926a7bd", "keyword": "BrowserExtension KParts::BrowserExtension::BrowserExtension KParts::BrowserExtension", "text": "parent The KParts::ReadOnlyPart that this extension"}, {"type": "function", "name": "KParts::BrowserExtension::actionText", "url": "classKParts_1_1BrowserExtension.html#a44d604ace2d77477df75444f203746ff", "keyword": "actionText KParts::BrowserExtension::actionText KParts::BrowserExtension", "text": "the text of an action if it was set explicitly by the part When the setActionText signal is emitted the browserextension stores the text of the action internally so that it s possible to query later for the text of the action using this method"}, {"type": "function", "name": "KParts::BrowserExtension::browserArguments", "url": "classKParts_1_1BrowserExtension.html#ab88e6bc9a8b583dd697650854d13bb51", "keyword": "browserArguments KParts::BrowserExtension::browserArguments KParts::BrowserExtension", "text": "BrowserArguments"}, {"type": "function", "name": "KParts::BrowserExtension::isActionEnabled", "url": "classKParts_1_1BrowserExtension.html#a5d7ef0478ef2be2e492bb6b5231d7242", "keyword": "isActionEnabled KParts::BrowserExtension::isActionEnabled KParts::BrowserExtension", "text": "the status enabled/disabled of an action When the enableAction signal is emitted the browserextension stores the status of the action internally so that it s possible to query later for the status of the action using this method"}, {"type": "function", "name": "KParts::BrowserExtension::isURLDropHandlingEnabled", "url": "classKParts_1_1BrowserExtension.html#a7f0185bcf5408038e45f992ae48631be", "keyword": "isURLDropHandlingEnabled KParts::BrowserExtension::isURLDropHandlingEnabled KParts::BrowserExtension", "text": "See setURLDropHandlingEnabled for more information about this property"}, {"type": "function", "name": "KParts::BrowserExtension::pasteRequest", "url": "classKParts_1_1BrowserExtension.html#a159892e86904e0d8defd209d70a79c5b", "keyword": "pasteRequest KParts::BrowserExtension::pasteRequest KParts::BrowserExtension", "text": ""}, {"type": "function", "name": "KParts::BrowserExtension::restoreState", "url": "classKParts_1_1BrowserExtension.html#aa079a1969335549d2c20a3ce60ce4dfa", "keyword": "restoreState KParts::BrowserExtension::restoreState KParts::BrowserExtension", "text": "If you saved additional properties reimplement it but don t forget to call the parent method probably first"}, {"type": "function", "name": "KParts::BrowserExtension::saveState", "url": "classKParts_1_1BrowserExtension.html#afb99e279b186fc7af270cc9469991cba", "keyword": "saveState KParts::BrowserExtension::saveState KParts::BrowserExtension", "text": "If you want to save additional properties reimplement it but don t forget to call the parent method probably first"}, {"type": "function", "name": "KParts::BrowserExtension::setBrowserArguments", "url": "classKParts_1_1BrowserExtension.html#a5dd8719a11279df48660a9e636869c5d", "keyword": "setBrowserArguments KParts::BrowserExtension::setBrowserArguments KParts::BrowserExtension", "text": "This is called by the application to pass parameters to the part BrowserArguments"}, {"type": "function", "name": "KParts::BrowserExtension::setURLDropHandlingEnabled", "url": "classKParts_1_1BrowserExtension.html#afad1b992ba82e4f47fbb4ba6cdfcd1cb", "keyword": "setURLDropHandlingEnabled KParts::BrowserExtension::setURLDropHandlingEnabled KParts::BrowserExtension", "text": "URL drop handling is a property describing whether the hosting shell component is allowed to install an event filter on the part s widget to listen for URI drop events Set it to true if you are exporting a BrowserExtension implementation and do not provide any special URI drop handling If set to false you can be sure to receive all those URI drop events unfiltered Also note that the implementation as of Konqueror installs the event filter only on the part s widget itself not on child widgets"}, {"type": "function", "name": "KParts::BrowserExtension::xOffset", "url": "classKParts_1_1BrowserExtension.html#a1bd7c693e1aca9e07edeffc138cf267b", "keyword": "xOffset KParts::BrowserExtension::xOffset KParts::BrowserExtension", "text": "For a scrollview implement this using contentsX()"}, {"type": "function", "name": "KParts::BrowserExtension::yOffset", "url": "classKParts_1_1BrowserExtension.html#af1da24da659609c5c0c1e5f838d5b2d1", "keyword": "yOffset KParts::BrowserExtension::yOffset KParts::BrowserExtension", "text": "For a scrollview implement this using contentsY()"}, {"type": "function", "name": "KParts::BrowserExtension::actionSlotMap", "url": "classKParts_1_1BrowserExtension.html#aa758d6b4f47d16476b1f9faee387dd47", "keyword": "actionSlotMap KParts::BrowserExtension::actionSlotMap KParts::BrowserExtension", "text": "This is very useful for the host component when connecting the own signals with the extension s slots Basically you iterate over the map check if the extension implements the slot and connect to the slot using the data value of your map iterator Checking if the extension implements a certain slot can be done like this note that actionName is the iterator s key value if already iterating over the action slot map returned by this method Connecting to the slot can be done like this where is your QMap<QCString,QCString> iterator"}, {"type": "function", "name": "KParts::BrowserExtension::actionSlotMapPtr", "url": "classKParts_1_1BrowserExtension.html#a25d2953fbab499eecb17f981f1f182ed", "keyword": "actionSlotMapPtr KParts::BrowserExtension::actionSlotMapPtr KParts::BrowserExtension", "text": "a pointer to the static action-slot map Preferred method to get it The map is created if it doesn t exist yet"}, {"type": "function", "name": "KParts::BrowserExtension::childObject", "url": "classKParts_1_1BrowserExtension.html#a8b0030640356a9a097e2a2328d7bfc3d", "keyword": "childObject KParts::BrowserExtension::childObject KParts::BrowserExtension", "text": "Convenience method"}, {"type": "class", "name": "KParts::BrowserHostExtension", "url": "classKParts_1_1BrowserHostExtension.html", "keyword": "BrowserHostExtension", "text": "parts that contain other parts For instance a KHTMLPart hosts one part per frame"}, {"type": "function", "name": "KParts::BrowserHostExtension::findFrameParent", "url": "classKParts_1_1BrowserHostExtension.html#a74ba17b18e70aa0bb308d65cf10df0bd", "keyword": "findFrameParent KParts::BrowserHostExtension::findFrameParent KParts::BrowserHostExtension", "text": ""}, {"type": "function", "name": "KParts::BrowserHostExtension::frameNames", "url": "classKParts_1_1BrowserHostExtension.html#a07c280ca27030e6015ff11f3fa51f5ae", "keyword": "frameNames KParts::BrowserHostExtension::frameNames KParts::BrowserHostExtension", "text": "Note that this method does not query the child objects recursively"}, {"type": "function", "name": "KParts::BrowserHostExtension::frames", "url": "classKParts_1_1BrowserHostExtension.html#aea8125554a7c3824e5afb13e16e3e8fd", "keyword": "frames KParts::BrowserHostExtension::frames KParts::BrowserHostExtension", "text": "Note that this method does not query the child objects recursively"}, {"type": "function", "name": "KParts::BrowserHostExtension::openUrlInFrame", "url": "classKParts_1_1BrowserHostExtension.html#a85485d896fbb6d96d8c7bd8f728c6772", "keyword": "openUrlInFrame KParts::BrowserHostExtension::openUrlInFrame KParts::BrowserHostExtension", "text": "The frame name is specified in the frameName variable in the browserArguments parameter see KParts::BrowserArguments"}, {"type": "function", "name": "KParts::BrowserHostExtension::childObject", "url": "classKParts_1_1BrowserHostExtension.html#a3249ad6a6b4651761ca01543ab16eb32", "keyword": "childObject KParts::BrowserHostExtension::childObject KParts::BrowserHostExtension", "text": "Convenience method"}, {"type": "class", "name": "KParts::BrowserInterface", "url": "classKParts_1_1BrowserInterface.html", "keyword": "BrowserInterface", "text": "A shell implementing this interface can propagate it to embedded kpart components by using the setBrowserInterface call of the part s KParts::BrowserExtension object This interface looks not very rich but the main functionality is implemented using the callMethod method for part- shell communication and using Qt properties for allowing a part to to explicitly query information from the shell Konqueror in particular as reference implementation provides the following functionality through this interface Qt properties Q_PROPERTY( uint historyLength READ historyLength ) Callable methods void goHistory( int )"}, {"type": "function", "name": "KParts::BrowserInterface::callMethod", "url": "classKParts_1_1BrowserInterface.html#a2b7c63a3eaa196f53b3cc679714de295", "keyword": "callMethod KParts::BrowserInterface::callMethod KParts::BrowserInterface", "text": "Methods are to be implemented as simple Qt slots You should only include the method name and not the signature in the name argument"}, {"type": "class", "name": "KParts::BrowserOpenOrSaveQuestion", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html", "keyword": "BrowserOpenOrSaveQuestion", "text": "It also has the variant which asks e.g into konqueror 4.4"}, {"type": "enum", "name": "KParts::BrowserOpenOrSaveQuestion::Feature", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#a9dfe6a7919cfadff826a357e94ac3a9a", "keyword": "Feature KParts::BrowserOpenOrSaveQuestion::Feature KParts::BrowserOpenOrSaveQuestion", "text": "This allows to add features before making all applications ready for those features e.g applications need to read selectedService() otherwise the dialog should not show the service selection button"}, {"type": "enumvalue", "name": "KParts::BrowserOpenOrSaveQuestion::BasicFeatures", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#a9dfe6a7919cfadff826a357e94ac3a9aa1cfa50dab189d46bdc4a66c5a1763168", "keyword": "BasicFeatures KParts::BrowserOpenOrSaveQuestion::BasicFeatures KParts::BrowserOpenOrSaveQuestion", "text": "Only the basic save open embed cancel button"}, {"type": "enumvalue", "name": "KParts::BrowserOpenOrSaveQuestion::ServiceSelection", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#a9dfe6a7919cfadff826a357e94ac3a9aa3bc1c3177b1a3c8f4cd297ae558c155e", "keyword": "ServiceSelection KParts::BrowserOpenOrSaveQuestion::ServiceSelection KParts::BrowserOpenOrSaveQuestion", "text": "Shows with the associated applications for the mimetype"}, {"type": "function", "name": "KParts::BrowserOpenOrSaveQuestion::BrowserOpenOrSaveQuestion", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#ae8e4080f0b509e005111ec41d73fdc64", "keyword": "BrowserOpenOrSaveQuestion KParts::BrowserOpenOrSaveQuestion::BrowserOpenOrSaveQuestion KParts::BrowserOpenOrSaveQuestion", "text": "url the URL in question mimeType the mimetype of the URL"}, {"type": "function", "name": "KParts::BrowserOpenOrSaveQuestion::askEmbedOrSave", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#a45c22370ea3217588d318dd5901eef60", "keyword": "askEmbedOrSave KParts::BrowserOpenOrSaveQuestion::askEmbedOrSave KParts::BrowserOpenOrSaveQuestion", "text": "parent parent widget for the dialog flags set to BrowserRun::AttachmentDisposition if suggested by the server This is used because by default text/html files are opened embedded in browsers not saved But if the server said it means the user is download a file for saving it Save Embed or Cancel"}, {"type": "function", "name": "KParts::BrowserOpenOrSaveQuestion::askOpenOrSave", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#a3bfaa812a98f95ac9b6327e075e624c6", "keyword": "askOpenOrSave KParts::BrowserOpenOrSaveQuestion::askOpenOrSave KParts::BrowserOpenOrSaveQuestion", "text": "parent parent widget for the dialog Save Open or Cancel"}, {"type": "function", "name": "KParts::BrowserOpenOrSaveQuestion::selectedService", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#a170d4c6015e48d10783bb1b44bae3fdf", "keyword": "selectedService KParts::BrowserOpenOrSaveQuestion::selectedService KParts::BrowserOpenOrSaveQuestion", "text": "the service that was selected during askOpenOrSave if it returned Open In all other cases no associated application Save or Cancel selected this returns 0 Requires setFeatures(BrowserOpenOrSaveQuestion::ServiceSelection)"}, {"type": "function", "name": "KParts::BrowserOpenOrSaveQuestion::setFeatures", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#a4c97367478d964dab1b2d80f08ced2dc", "keyword": "setFeatures KParts::BrowserOpenOrSaveQuestion::setFeatures KParts::BrowserOpenOrSaveQuestion", "text": ""}, {"type": "function", "name": "KParts::BrowserOpenOrSaveQuestion::setSuggestedFileName", "url": "classKParts_1_1BrowserOpenOrSaveQuestion.html#a7788b66c636c566c3bc015189bc529a0", "keyword": "setSuggestedFileName KParts::BrowserOpenOrSaveQuestion::setSuggestedFileName KParts::BrowserOpenOrSaveQuestion", "text": "suggestedFileName optional file name suggested by the server HTTP Content-Disposition"}, {"type": "class", "name": "KParts::BrowserRun", "url": "classKParts_1_1BrowserRun.html", "keyword": "BrowserRun", "text": "dialog boxes functionality support for HTTP POST including saving the result to a temp file if opening a separate application warning before launching executables off the web custom error handling i.e treating errors as HTML pages generation of SSL metadata depending on the previous URL shown by the part David Faure"}, {"type": "function", "name": "KParts::BrowserRun::BrowserRun", "url": "classKParts_1_1BrowserRun.html#a9eb7d07ec06fcd928c6790d2fc7ba8eb", "keyword": "BrowserRun KParts::BrowserRun::BrowserRun KParts::BrowserRun", "text": "url the URL we re probing args URL args includes reload metaData etc browserArgs browser-related args includes data for a HTTP POST etc part the part going to open this URL can be 0 if not created yet window the mainwindow passed to KIO::Job::setWindow() removeReferrer if true the metadata from args isn t passed on trustedSource if false a warning will be shown before launching an executable Always pass false for trustedSource except for local directory views hideErrorDialog if true no dialog will be shown in case of errors"}, {"type": "function", "name": "KParts::BrowserRun::contentDisposition", "url": "classKParts_1_1BrowserRun.html#a520a8700b82cc6838ede2b3429ced30a", "keyword": "contentDisposition KParts::BrowserRun::contentDisposition KParts::BrowserRun", "text": "Suggested disposition by the server e.g HTTP content-disposition"}, {"type": "function", "name": "KParts::BrowserRun::serverSuggestsSave", "url": "classKParts_1_1BrowserRun.html#a0c66bf3e3e2c8aa55bd87af8dccbc829", "keyword": "serverSuggestsSave KParts::BrowserRun::serverSuggestsSave KParts::BrowserRun", "text": "Whether the returned disposition suggests saving or opening inline"}, {"type": "function", "name": "KParts::BrowserRun::askEmbedOrSave", "url": "classKParts_1_1BrowserRun.html#a4a284211de130504274bcbd5ca90b76f", "keyword": "askEmbedOrSave KParts::BrowserRun::askEmbedOrSave KParts::BrowserRun", "text": "url the URL in question mimeType the mimetype of the URL suggestedFileName optional filename suggested by the server flags set to AttachmentDisposition if suggested by the server Save Open or Cancel use BrowserOpenOrSaveQuestion"}, {"type": "function", "name": "KParts::BrowserRun::askSave", "url": "classKParts_1_1BrowserRun.html#ad883dcd4472988820c7e16182ef0e6da", "keyword": "askSave KParts::BrowserRun::askSave KParts::BrowserRun", "text": "url the URL in question offer the application that will be used to open the URL mimeType the mimetype of the URL suggestedFileName optional file name suggested by the server Save Open or Cancel use BrowserOpenOrSaveQuestion"}, {"type": "function", "name": "KParts::BrowserRun::makeErrorUrl", "url": "classKParts_1_1BrowserRun.html#a6bc7202641b036277ee27cbf8b2ca081", "keyword": "makeErrorUrl KParts::BrowserRun::makeErrorUrl KParts::BrowserRun", "text": "This helper method creates the error URL from its parameters error the KIO error code or KIO::ERR_SLAVE_DEFINED if not from KIO errorText the text of the error message initialUrl the URL that we were trying to open as a string so that this can support invalid URLs as well changed from QString to QUrl in KF5 4.6"}, {"type": "function", "name": "KParts::BrowserRun::saveUrl", "url": "classKParts_1_1BrowserRun.html#afdbcdc28907ea31dbf809a5950899725", "keyword": "saveUrl KParts::BrowserRun::saveUrl KParts::BrowserRun", "text": "Otherwise asks the user for a destination url and calls saveUrlUsingKIO 4.4"}, {"type": "function", "name": "KParts::BrowserRun::saveUrlUsingKIO", "url": "classKParts_1_1BrowserRun.html#af326d6921197f1a2c0c22978854820a1", "keyword": "saveUrlUsingKIO KParts::BrowserRun::saveUrlUsingKIO KParts::BrowserRun", "text": "4.4"}, {"type": "enum", "name": "KParts::BrowserRun::NonEmbeddableResult", "url": "classKParts_1_1BrowserRun.html#af7f4f75d5ab28c3183f9f5ee96b8a79f", "keyword": "NonEmbeddableResult KParts::BrowserRun::NonEmbeddableResult KParts::BrowserRun", "text": "launch an external app"}, {"type": "function", "name": "KParts::BrowserRun::handleError", "url": "classKParts_1_1BrowserRun.html#a06c9173826499e52945ce45b071876c9", "keyword": "handleError KParts::BrowserRun::handleError KParts::BrowserRun", "text": ""}, {"type": "function", "name": "KParts::BrowserRun::handleNonEmbeddable", "url": "classKParts_1_1BrowserRun.html#a620eeb51117a09a603240d58692f0d53", "keyword": "handleNonEmbeddable KParts::BrowserRun::handleNonEmbeddable KParts::BrowserRun", "text": ""}, {"type": "function", "name": "KParts::BrowserRun::handleNonEmbeddable", "url": "classKParts_1_1BrowserRun.html#a2fbf5def54f1b6c912cb76d9141caf7f", "keyword": "handleNonEmbeddable KParts::BrowserRun::handleNonEmbeddable KParts::BrowserRun", "text": "mimeType the mimetype found for the URL pSelectedService Output variable pointer to a KService::Ptr which will be set to the service selected in the BrowserOpenOrSaveQuestion dialog if any How to handle this properly if pSelectedService is non-zero then the dialog will show additional buttons In your code you should write 4.5"}, {"type": "function", "name": "KParts::BrowserRun::init", "url": "classKParts_1_1BrowserRun.html#adc764fe7e9ab7b224b8b7cbc21ab5fd5", "keyword": "init KParts::BrowserRun::init KParts::BrowserRun", "text": ""}, {"type": "function", "name": "KParts::BrowserRun::scanFile", "url": "classKParts_1_1BrowserRun.html#a581f3a8adfd7eb07b72e195575ca5b7b", "keyword": "scanFile KParts::BrowserRun::scanFile KParts::BrowserRun", "text": ""}, {"type": "class", "name": "KParts::Event", "url": "classKParts_1_1Event.html", "keyword": "Event", "text": ""}, {"type": "class", "name": "KParts::FileInfoExtension", "url": "classKParts_1_1FileInfoExtension.html", "keyword": "FileInfoExtension", "text": "This extension provides information about file and directory resources that are present in the part the implements it The main purpose of for this extension is to provide information about files and directories located on remote servers so that download managers such as kget can easily retrieve these resources 4.6"}, {"type": "enum", "name": "KParts::FileInfoExtension::QueryMode", "url": "classKParts_1_1FileInfoExtension.html#a9bc830a53b0005013082984a2bbd5639", "keyword": "QueryMode KParts::FileInfoExtension::QueryMode KParts::FileInfoExtension", "text": ""}, {"type": "enumvalue", "name": "KParts::FileInfoExtension::None", "url": "classKParts_1_1FileInfoExtension.html#a9bc830a53b0005013082984a2bbd5639af7f7b524610ed47f67081fee1a37a604", "keyword": "None KParts::FileInfoExtension::None KParts::FileInfoExtension", "text": "Querying for file information is NOT possible"}, {"type": "enumvalue", "name": "KParts::FileInfoExtension::AllItems", "url": "classKParts_1_1FileInfoExtension.html#a9bc830a53b0005013082984a2bbd5639a553b2481b4b7b99d8f839eed303177d8", "keyword": "AllItems KParts::FileInfoExtension::AllItems KParts::FileInfoExtension", "text": "Retrieve or can retrieve file information for all items"}, {"type": "enumvalue", "name": "KParts::FileInfoExtension::SelectedItems", "url": "classKParts_1_1FileInfoExtension.html#a9bc830a53b0005013082984a2bbd5639aaa07fd2649d0deb94a819b29cddbe32e", "keyword": "SelectedItems KParts::FileInfoExtension::SelectedItems KParts::FileInfoExtension", "text": "Retrieve or can retrieve file information for selected items"}, {"type": "function", "name": "KParts::FileInfoExtension::FileInfoExtension", "url": "classKParts_1_1FileInfoExtension.html#ab7f24a4cbfcabe40422b26fa2ee562b7", "keyword": "FileInfoExtension KParts::FileInfoExtension::FileInfoExtension KParts::FileInfoExtension", "text": "Constructor"}, {"type": "function", "name": "KParts::FileInfoExtension::~FileInfoExtension", "url": "classKParts_1_1FileInfoExtension.html#abddc8b6d5806578df019f0e69026b1db", "keyword": "KParts::FileInfoExtension::~FileInfoExtension KParts::FileInfoExtension", "text": "Destructor"}, {"type": "function", "name": "KParts::FileInfoExtension::hasSelection", "url": "classKParts_1_1FileInfoExtension.html#adbcad4f6b8eb8425641bf25ac1e2746b", "keyword": "hasSelection KParts::FileInfoExtension::hasSelection KParts::FileInfoExtension", "text": "By default this function returns false"}, {"type": "function", "name": "KParts::FileInfoExtension::queryFor", "url": "classKParts_1_1FileInfoExtension.html#addac1579dcbc21c5fcceecda6f5cb532", "keyword": "queryFor KParts::FileInfoExtension::queryFor KParts::FileInfoExtension", "text": "If the mode specified by mode is not supported or cannot be handled then an empty list is returned"}, {"type": "function", "name": "KParts::FileInfoExtension::supportedQueryModes", "url": "classKParts_1_1FileInfoExtension.html#af82b572809e306f7cb43572e7606ebc0", "keyword": "supportedQueryModes KParts::FileInfoExtension::supportedQueryModes KParts::FileInfoExtension", "text": "By default this function returns None"}, {"type": "function", "name": "KParts::FileInfoExtension::childObject", "url": "classKParts_1_1FileInfoExtension.html#a647f1533021c107574d094cff4820ae3", "keyword": "childObject KParts::FileInfoExtension::childObject KParts::FileInfoExtension", "text": ""}, {"type": "class", "name": "KParts::GUIActivateEvent", "url": "classKParts_1_1GUIActivateEvent.html", "keyword": "GUIActivateEvent", "text": "This is related to PartActivateEvent but the difference is that GUIActivateEvent happens later when the GUI is actually built only for parts that have GUI elements and only if using KParts::MainWindow KParts::Part::guiActivateEvent()"}, {"type": "class", "name": "KParts::HistoryProvider", "url": "classKParts_1_1HistoryProvider.html", "keyword": "HistoryProvider", "text": "This class is only meant for fast lookup if an item is in the history or not May be subclassed to implement a persistent history for example For usage with khtml just create your provider and call the HistoryProvider constructor before you do any khtml stuff That way khtml using the self() will use your subclassed provider Carsten Pfeiffer"}, {"type": "signal", "name": "KParts::HistoryProvider::cleared", "url": "classKParts_1_1HistoryProvider.html#ac1328e387f0adb62419ddfdd74b1839e", "keyword": "cleared KParts::HistoryProvider::cleared KParts::HistoryProvider", "text": ""}, {"type": "signal", "name": "KParts::HistoryProvider::inserted", "url": "classKParts_1_1HistoryProvider.html#a24304e5276a1f113314eb7b4e464828f", "keyword": "inserted KParts::HistoryProvider::inserted KParts::HistoryProvider", "text": ""}, {"type": "signal", "name": "KParts::HistoryProvider::updated", "url": "classKParts_1_1HistoryProvider.html#adf153d0a7a3efcdaba20a86e323e115f", "keyword": "updated KParts::HistoryProvider::updated KParts::HistoryProvider", "text": "Emit this signal to notify others that the history has changed Put those items that were added or removed from the history into items"}, {"type": "function", "name": "KParts::HistoryProvider::clear", "url": "classKParts_1_1HistoryProvider.html#a9eb70389cbe1912435f4e97f56ed6943", "keyword": "clear KParts::HistoryProvider::clear KParts::HistoryProvider", "text": "The cleared() signal is emitted after clearing"}, {"type": "function", "name": "KParts::HistoryProvider::contains", "url": "classKParts_1_1HistoryProvider.html#aab6ca496613fbf95efedc27dd15cd229", "keyword": "contains KParts::HistoryProvider::contains KParts::HistoryProvider", "text": "true if item is present in the history"}, {"type": "function", "name": "KParts::HistoryProvider::insert", "url": "classKParts_1_1HistoryProvider.html#a02a9f183d6c9607f912c7047b39c6db1", "keyword": "insert KParts::HistoryProvider::insert KParts::HistoryProvider", "text": ""}, {"type": "function", "name": "KParts::HistoryProvider::remove", "url": "classKParts_1_1HistoryProvider.html#a385a1a584ea86c3680f4c4501a9665b8", "keyword": "remove KParts::HistoryProvider::remove KParts::HistoryProvider", "text": ""}, {"type": "function", "name": "KParts::HistoryProvider::exists", "url": "classKParts_1_1HistoryProvider.html#ad0152951f12f738e3d252e8ba74fe9d4", "keyword": "exists KParts::HistoryProvider::exists KParts::HistoryProvider", "text": "true if a provider has already been created 4.4"}, {"type": "function", "name": "KParts::HistoryProvider::HistoryProvider", "url": "classKParts_1_1HistoryProvider.html#ad3d3f24a212ea28a4f325285b5db2e1f", "keyword": "HistoryProvider KParts::HistoryProvider::HistoryProvider KParts::HistoryProvider", "text": ""}, {"type": "function", "name": "KParts::HistoryProvider::~HistoryProvider", "url": "classKParts_1_1HistoryProvider.html#a4dda551811cf5beb59b459577aced662", "keyword": "KParts::HistoryProvider::~HistoryProvider KParts::HistoryProvider", "text": ""}, {"type": "class", "name": "KParts::HtmlExtension", "url": "classKParts_1_1HtmlExtension.html", "keyword": "HtmlExtension", "text": "Use qobject_cast to cast the extension to interesting interfaces like qobject_cast<KParts::SelectorInterface> 4.6"}, {"type": "function", "name": "KParts::HtmlExtension::baseUrl", "url": "classKParts_1_1HtmlExtension.html#a5f20c803e3f8b096fa6e94291ee86205", "keyword": "baseUrl KParts::HtmlExtension::baseUrl KParts::HtmlExtension", "text": "This function is mostly used to resolve any relative URLs that might be returned when querying the part for links"}, {"type": "function", "name": "KParts::HtmlExtension::hasSelection", "url": "classKParts_1_1HtmlExtension.html#a6af991ec27d09cbca5064f5ebdf38a7a", "keyword": "hasSelection KParts::HtmlExtension::hasSelection KParts::HtmlExtension", "text": "By default this function returns false"}, {"type": "function", "name": "KParts::HtmlExtension::childObject", "url": "classKParts_1_1HtmlExtension.html#abca1a74beb48888267f83bb0d860dd52", "keyword": "childObject KParts::HtmlExtension::childObject KParts::HtmlExtension", "text": ""}, {"type": "class", "name": "KParts::HtmlSettingsInterface", "url": "classKParts_1_1HtmlSettingsInterface.html", "keyword": "HtmlSettingsInterface", "text": "This interface provides a generic means for querying or changing the settings of browser engines that implement it To use this class simply cast an instance of the HTMLExtension object using qobject_cast<KParts::HtmlSettingsInterface> Example KParts::HTMLExtension extension KParts::HTMLExtension::childObject(part) KParts::HtmlSettingsInterface settings qobject_cast KParts::HtmlSettingsInterface extension const bool autoLoadImages settings- attribute(KParts::AutoLoadImages) 4.8.1"}, {"type": "enum", "name": "KParts::HtmlSettingsInterface::HtmlSettingsType", "url": "classKParts_1_1HtmlSettingsInterface.html#a62e44360376f423604c5c838ec0e312f", "keyword": "HtmlSettingsType KParts::HtmlSettingsInterface::HtmlSettingsType KParts::HtmlSettingsInterface", "text": ""}, {"type": "enum", "name": "KParts::HtmlSettingsInterface::JavaScriptAdvice", "url": "classKParts_1_1HtmlSettingsInterface.html#af6b2303d6834ceff4d5251e10bd9d54b", "keyword": "JavaScriptAdvice KParts::HtmlSettingsInterface::JavaScriptAdvice KParts::HtmlSettingsInterface", "text": "4.8.2"}, {"type": "enum", "name": "KParts::HtmlSettingsInterface::JSWindowFocusPolicy", "url": "classKParts_1_1HtmlSettingsInterface.html#a3c00e5813af380f956480b47a76fdf8c", "keyword": "JSWindowFocusPolicy KParts::HtmlSettingsInterface::JSWindowFocusPolicy KParts::HtmlSettingsInterface", "text": "4.8.2"}, {"type": "enum", "name": "KParts::HtmlSettingsInterface::JSWindowMovePolicy", "url": "classKParts_1_1HtmlSettingsInterface.html#a2774dbe8635ec916babf19de468d6c34", "keyword": "JSWindowMovePolicy KParts::HtmlSettingsInterface::JSWindowMovePolicy KParts::HtmlSettingsInterface", "text": "4.8.2"}, {"type": "enum", "name": "KParts::HtmlSettingsInterface::JSWindowOpenPolicy", "url": "classKParts_1_1HtmlSettingsInterface.html#aab245c057a7179fc1bdc16e020750643", "keyword": "JSWindowOpenPolicy KParts::HtmlSettingsInterface::JSWindowOpenPolicy KParts::HtmlSettingsInterface", "text": "4.8.2"}, {"type": "enum", "name": "KParts::HtmlSettingsInterface::JSWindowResizePolicy", "url": "classKParts_1_1HtmlSettingsInterface.html#a0fcf7802e2f831ee1449e82713f6f359", "keyword": "JSWindowResizePolicy KParts::HtmlSettingsInterface::JSWindowResizePolicy KParts::HtmlSettingsInterface", "text": "4.8.2"}, {"type": "enum", "name": "KParts::HtmlSettingsInterface::JSWindowStatusPolicy", "url": "classKParts_1_1HtmlSettingsInterface.html#a88188ac567388141e0b1b988ae71961f", "keyword": "JSWindowStatusPolicy KParts::HtmlSettingsInterface::JSWindowStatusPolicy KParts::HtmlSettingsInterface", "text": "4.8.2"}, {"type": "function", "name": "KParts::HtmlSettingsInterface::~HtmlSettingsInterface", "url": "classKParts_1_1HtmlSettingsInterface.html#a044f53f15e82bc3c209d578849812cfd", "keyword": "KParts::HtmlSettingsInterface::~HtmlSettingsInterface KParts::HtmlSettingsInterface", "text": ""}, {"type": "function", "name": "KParts::HtmlSettingsInterface::htmlSettingsProperty", "url": "classKParts_1_1HtmlSettingsInterface.html#a00b2a2f9ce6f7b505ab0bbfa4f71eca5", "keyword": "htmlSettingsProperty KParts::HtmlSettingsInterface::htmlSettingsProperty KParts::HtmlSettingsInterface", "text": ""}, {"type": "function", "name": "KParts::HtmlSettingsInterface::setHtmlSettingsProperty", "url": "classKParts_1_1HtmlSettingsInterface.html#ad345737d10028b838bb1324568d813f3", "keyword": "setHtmlSettingsProperty KParts::HtmlSettingsInterface::setHtmlSettingsProperty KParts::HtmlSettingsInterface", "text": ""}, {"type": "function", "name": "KParts::HtmlSettingsInterface::javascriptAdviceToText", "url": "classKParts_1_1HtmlSettingsInterface.html#a3c3addaf95ebd946a56da4e6726c1113", "keyword": "javascriptAdviceToText KParts::HtmlSettingsInterface::javascriptAdviceToText KParts::HtmlSettingsInterface", "text": "If advice is not either JavaScriptAccept or JavaScriptReject this function returns a NULL string 4.8.2"}, {"type": "function", "name": "KParts::HtmlSettingsInterface::splitDomainAdvice", "url": "classKParts_1_1HtmlSettingsInterface.html#a3383a89c4a79dcb879473098cf2ef671", "keyword": "splitDomainAdvice KParts::HtmlSettingsInterface::splitDomainAdvice KParts::HtmlSettingsInterface", "text": "If text is empty or does not contain the proper delimiter this function will set domain to text and the other two parameters to JavaScriptDunno 4.8.2"}, {"type": "function", "name": "KParts::HtmlSettingsInterface::textToJavascriptAdvice", "url": "classKParts_1_1HtmlSettingsInterface.html#ae96f92e3cab638765debd7b318a983e9", "keyword": "textToJavascriptAdvice KParts::HtmlSettingsInterface::textToJavascriptAdvice KParts::HtmlSettingsInterface", "text": "If text is not either or this function returns JavaScriptDunno 4.8.2"}, {"type": "class", "name": "KParts::ListingFilterExtension", "url": "classKParts_1_1ListingFilterExtension.html", "keyword": "ListingFilterExtension", "text": "This extension is intended to be implemented by parts that provide listing services e.g file management parts and is intended to provide a generic API for filtering any listing through keywords wildcard characters and/or content-type Examples To show items that only match the term To show items that only match To show items that only match the wildcard string To show items that match multiple mime types e.g text/html application/xml 4.9.2"}, {"type": "enum", "name": "KParts::ListingFilterExtension::FilterMode", "url": "classKParts_1_1ListingFilterExtension.html#a041ca874c3e56fa51472e8fe1a1d468f", "keyword": "FilterMode KParts::ListingFilterExtension::FilterMode KParts::ListingFilterExtension", "text": ""}, {"type": "enumvalue", "name": "KParts::ListingFilterExtension::MimeType", "url": "classKParts_1_1ListingFilterExtension.html#a041ca874c3e56fa51472e8fe1a1d468faa2a85fba42da8d43d3cc230e7dd2186f", "keyword": "MimeType KParts::ListingFilterExtension::MimeType KParts::ListingFilterExtension", "text": "Filter by mime type e.g"}, {"type": "enumvalue", "name": "KParts::ListingFilterExtension::SubString", "url": "classKParts_1_1ListingFilterExtension.html#a041ca874c3e56fa51472e8fe1a1d468fac130123afa132f5f3299484cd7ab55e9", "keyword": "SubString KParts::ListingFilterExtension::SubString KParts::ListingFilterExtension", "text": "Filter by matching any part of a file or directory name e.g"}, {"type": "enumvalue", "name": "KParts::ListingFilterExtension::WildCard", "url": "classKParts_1_1ListingFilterExtension.html#a041ca874c3e56fa51472e8fe1a1d468fa3abdf9850531a6fc903e652685855fa4", "keyword": "WildCard KParts::ListingFilterExtension::WildCard KParts::ListingFilterExtension", "text": "Filter by using wildcard matches e.g"}, {"type": "function", "name": "KParts::ListingFilterExtension::ListingFilterExtension", "url": "classKParts_1_1ListingFilterExtension.html#a26a2fc2b4e5bc0d58b448f311d6fc3f7", "keyword": "ListingFilterExtension KParts::ListingFilterExtension::ListingFilterExtension KParts::ListingFilterExtension", "text": "Constructor"}, {"type": "function", "name": "KParts::ListingFilterExtension::~ListingFilterExtension", "url": "classKParts_1_1ListingFilterExtension.html#af10f490a8152ea657185a4eecab6f6fa", "keyword": "KParts::ListingFilterExtension::~ListingFilterExtension KParts::ListingFilterExtension", "text": "Destructor"}, {"type": "function", "name": "KParts::ListingFilterExtension::filter", "url": "classKParts_1_1ListingFilterExtension.html#ab498f287b01766cafbb2de8615d3a763", "keyword": "filter KParts::ListingFilterExtension::filter KParts::ListingFilterExtension", "text": "mode the desired filter mode as specified in FilterMode"}, {"type": "function", "name": "KParts::ListingFilterExtension::setFilter", "url": "classKParts_1_1ListingFilterExtension.html#add79e2235c1de7906e68adb4c094e3a4", "keyword": "setFilter KParts::ListingFilterExtension::setFilter KParts::ListingFilterExtension", "text": "To remove a filter for a given filter mode simply call this function with the desired mode and the filter parameter set to a NULL variant The second parameter can be mode the desired filter mode as specified in FilterMode filters a list of filter texts based on the selected mode"}, {"type": "function", "name": "KParts::ListingFilterExtension::supportedFilterModes", "url": "classKParts_1_1ListingFilterExtension.html#aba4a88733c6ac5936d24210f21091711", "keyword": "supportedFilterModes KParts::ListingFilterExtension::supportedFilterModes KParts::ListingFilterExtension", "text": "By default this function returns None"}, {"type": "function", "name": "KParts::ListingFilterExtension::supportsMultipleFilters", "url": "classKParts_1_1ListingFilterExtension.html#a0a2034d777edfaa522d8648b0c02b370", "keyword": "supportsMultipleFilters KParts::ListingFilterExtension::supportsMultipleFilters KParts::ListingFilterExtension", "text": "By default this function returns false"}, {"type": "function", "name": "KParts::ListingFilterExtension::childObject", "url": "classKParts_1_1ListingFilterExtension.html#a464dc516a11c4a8019d9cdaa05513384", "keyword": "childObject KParts::ListingFilterExtension::childObject KParts::ListingFilterExtension", "text": ""}, {"type": "class", "name": "KParts::ListingNotificationExtension", "url": "classKParts_1_1ListingNotificationExtension.html", "keyword": "ListingNotificationExtension", "text": "This extension is intended for implementation by parts that provide listing services e.g file management and is intended to notify about changes to a given listing For example if file management part implemented this extension it would emit itemsDeleted and itemsAdded signal whenever new files or folders are deleted and added to a directory respectively 4.9.2"}, {"type": "enum", "name": "KParts::ListingNotificationExtension::NotificationEventType", "url": "classKParts_1_1ListingNotificationExtension.html#ac36e19f0084977025c497a428c126d1e", "keyword": "NotificationEventType KParts::ListingNotificationExtension::NotificationEventType KParts::ListingNotificationExtension", "text": ""}, {"type": "enumvalue", "name": "KParts::ListingNotificationExtension::ItemsAdded", "url": "classKParts_1_1ListingNotificationExtension.html#ac36e19f0084977025c497a428c126d1ea2689e25d3cfef944b5e4a4bc699ddb4e", "keyword": "ItemsAdded KParts::ListingNotificationExtension::ItemsAdded KParts::ListingNotificationExtension", "text": "New items added to the listing"}, {"type": "enumvalue", "name": "KParts::ListingNotificationExtension::ItemsDeleted", "url": "classKParts_1_1ListingNotificationExtension.html#ac36e19f0084977025c497a428c126d1eab36ff763bb33b14e79e89faf1405ad2f", "keyword": "ItemsDeleted KParts::ListingNotificationExtension::ItemsDeleted KParts::ListingNotificationExtension", "text": "Items deleted from the listing"}, {"type": "signal", "name": "KParts::ListingNotificationExtension::listingEvent", "url": "classKParts_1_1ListingNotificationExtension.html#a919b31c86ec1f15cc889799d5ffd4cc1", "keyword": "listingEvent KParts::ListingNotificationExtension::listingEvent KParts::ListingNotificationExtension", "text": ""}, {"type": "function", "name": "KParts::ListingNotificationExtension::ListingNotificationExtension", "url": "classKParts_1_1ListingNotificationExtension.html#ac5d481c41ab9389648b40f3d9ce53ce8", "keyword": "ListingNotificationExtension KParts::ListingNotificationExtension::ListingNotificationExtension KParts::ListingNotificationExtension", "text": "Constructor"}, {"type": "function", "name": "KParts::ListingNotificationExtension::~ListingNotificationExtension", "url": "classKParts_1_1ListingNotificationExtension.html#a6a4e356f2cd6b90dd2a180dfc07e629e", "keyword": "KParts::ListingNotificationExtension::~ListingNotificationExtension KParts::ListingNotificationExtension", "text": "Destructor"}, {"type": "function", "name": "KParts::ListingNotificationExtension::supportedNotificationEventTypes", "url": "classKParts_1_1ListingNotificationExtension.html#a65a7a2ef7a8334fad8020a4feb86adc7", "keyword": "supportedNotificationEventTypes KParts::ListingNotificationExtension::supportedNotificationEventTypes KParts::ListingNotificationExtension", "text": "By default this function returns None"}, {"type": "function", "name": "KParts::ListingNotificationExtension::childObject", "url": "classKParts_1_1ListingNotificationExtension.html#a839b7efcbd71d9d1c4eaf0d1a354d353", "keyword": "childObject KParts::ListingNotificationExtension::childObject KParts::ListingNotificationExtension", "text": ""}, {"type": "class", "name": "KParts::LiveConnectExtension", "url": "classKParts_1_1LiveConnectExtension.html", "keyword": "LiveConnectExtension", "text": "a call from JavaScript from a HTML page which embeds this part A part can have an object hierarchy by using objid as a reference to an object"}, {"type": "signal", "name": "KParts::LiveConnectExtension::partEvent", "url": "classKParts_1_1LiveConnectExtension.html#a0cb4efb5b26992f31ae44f3d4a6ba2a1", "keyword": "partEvent KParts::LiveConnectExtension::partEvent KParts::LiveConnectExtension", "text": ""}, {"type": "function", "name": "KParts::LiveConnectExtension::call", "url": "classKParts_1_1LiveConnectExtension.html#a8af89d03bcefd24bb9c099deb80ca5ae", "keyword": "call KParts::LiveConnectExtension::call KParts::LiveConnectExtension", "text": ""}, {"type": "function", "name": "KParts::LiveConnectExtension::get", "url": "classKParts_1_1LiveConnectExtension.html#a46722a5f382f4d0173396f879e050c66", "keyword": "get KParts::LiveConnectExtension::get KParts::LiveConnectExtension", "text": ""}, {"type": "function", "name": "KParts::LiveConnectExtension::put", "url": "classKParts_1_1LiveConnectExtension.html#ae0bc85bde992773d5bf3235d9772de9d", "keyword": "put KParts::LiveConnectExtension::put KParts::LiveConnectExtension", "text": ""}, {"type": "function", "name": "KParts::LiveConnectExtension::unregister", "url": "classKParts_1_1LiveConnectExtension.html#ac5aa145601a74a7ac1a84baee4690fc4", "keyword": "unregister KParts::LiveConnectExtension::unregister KParts::LiveConnectExtension", "text": ""}, {"type": "class", "name": "KParts::MainWindow", "url": "classKParts_1_1MainWindow.html", "keyword": "MainWindow", "text": "It implements all internal interfaces in the case of a KMainWindow as host the builder and servant interface for menu merging Inherit your main window from this class and don t forget to call setupGUI() before you call createGUI() on the KPart For example you should not pass the Default flag to setupGUI() since it contains the Create flag that is not supposed to be used from this class setupGUI createGUI"}, {"type": "function", "name": "KParts::MainWindow::MainWindow", "url": "classKParts_1_1MainWindow.html#a3a5e07b7a5a176d0d2b4b76dc63e0825", "keyword": "MainWindow KParts::MainWindow::MainWindow KParts::MainWindow", "text": ""}, {"type": "function", "name": "KParts::MainWindow::~MainWindow", "url": "classKParts_1_1MainWindow.html#ae98d00a93bc118200eeef9f9bba1dba7", "keyword": "KParts::MainWindow::~MainWindow KParts::MainWindow", "text": ""}, {"type": "function", "name": "KParts::PartBase::PartBase", "url": "classKParts_1_1PartBase.html#afd87c7912f9feef662662dbfb66ee110", "keyword": "PartBase KParts::PartBase::PartBase KParts::PartBase PartBase KParts::PartBase::PartBase KParts::PartBase PartBase KParts::PartBase::PartBase KParts::PartBase PartBase KParts::PartBase::PartBase KParts::PartBase PartBase KParts::PartBase::PartBase KParts::PartBase", "text": ""}, {"type": "function", "name": "KParts::PartBase::~PartBase", "url": "classKParts_1_1PartBase.html#a95d451269133053c06247ec4cc647afc", "keyword": "KParts::PartBase::~PartBase KParts::PartBase KParts::PartBase::~PartBase KParts::PartBase KParts::PartBase::~PartBase KParts::PartBase KParts::PartBase::~PartBase KParts::PartBase KParts::PartBase::~PartBase KParts::PartBase", "text": ""}, {"type": "function", "name": "KParts::PartBase::setPartObject", "url": "classKParts_1_1PartBase.html#ad672e8e40af0aed3c5edff69f737d920", "keyword": "setPartObject KParts::PartBase::setPartObject KParts::PartBase setPartObject KParts::PartBase::setPartObject KParts::PartBase setPartObject KParts::PartBase::setPartObject KParts::PartBase setPartObject KParts::PartBase::setPartObject KParts::PartBase setPartObject KParts::PartBase::setPartObject KParts::PartBase", "text": "Called by KParts::Part to specify the parent object for plugin objects"}, {"type": "slot", "name": "KParts::MainWindow::createGUI", "url": "classKParts_1_1MainWindow.html#af96742c32da821dd7350deebc0a65382", "keyword": "createGUI KParts::MainWindow::createGUI KParts::MainWindow", "text": "In a main window with multiple parts being shown e.g as in Konqueror you need to connect this slot to the KPartManager::activePartChanged() signal part The active part set to 0L if no part"}, {"type": "slot", "name": "KParts::MainWindow::saveNewToolbarConfig", "url": "classKParts_1_1MainWindow.html#aa312f0eff55e1a2b69bff4e27e195187", "keyword": "saveNewToolbarConfig KParts::MainWindow::saveNewToolbarConfig KParts::MainWindow", "text": "configureToolbars()"}, {"type": "slot", "name": "KParts::MainWindow::setWindowTitleHandling", "url": "classKParts_1_1MainWindow.html#aa97d90473a0899f30b729b16d3f096ed", "keyword": "setWindowTitleHandling KParts::MainWindow::setWindowTitleHandling KParts::MainWindow", "text": "By default a part always changes the window title when the document changes This value must be set before calling createGUI enabled boolean to enable or disable the window title handling 5.24"}, {"type": "slot", "name": "KParts::MainWindow::slotSetStatusBarText", "url": "classKParts_1_1MainWindow.html#af391fc98a82478ee389a3357d487141f", "keyword": "slotSetStatusBarText KParts::MainWindow::slotSetStatusBarText KParts::MainWindow", "text": ""}, {"type": "function", "name": "KParts::PartBase::loadPlugins", "url": "classKParts_1_1PartBase.html#abdc6495c1dd313ee16e903ce396a1df0", "keyword": "loadPlugins KParts::PartBase::loadPlugins KParts::PartBase loadPlugins KParts::PartBase::loadPlugins KParts::PartBase loadPlugins KParts::PartBase::loadPlugins KParts::PartBase loadPlugins KParts::PartBase::loadPlugins KParts::PartBase loadPlugins KParts::PartBase::loadPlugins KParts::PartBase", "text": "If you call this method in an already constructed GUI like when the user has changed which plugins are enabled you need to add the new plugins to the KXMLGUIFactory"}, {"type": "function", "name": "KParts::PartBase::setComponentData", "url": "classKParts_1_1PartBase.html#ac9088a2da884260f9dafa07513ae9af1", "keyword": "setComponentData KParts::PartBase::setComponentData KParts::PartBase setComponentData KParts::PartBase::setComponentData KParts::PartBase setComponentData KParts::PartBase::setComponentData KParts::PartBase setComponentData KParts::PartBase::setComponentData KParts::PartBase setComponentData KParts::PartBase::setComponentData KParts::PartBase", "text": "Call this first in the inherited class constructor because it loads the i18n catalogs"}, {"type": "function", "name": "KParts::PartBase::setComponentData", "url": "classKParts_1_1PartBase.html#ad508aa84a1e2109e5dcdabe3bdde3af8", "keyword": "setComponentData KParts::PartBase::setComponentData KParts::PartBase setComponentData KParts::PartBase::setComponentData KParts::PartBase setComponentData KParts::PartBase::setComponentData KParts::PartBase setComponentData KParts::PartBase::setComponentData KParts::PartBase setComponentData KParts::PartBase::setComponentData KParts::PartBase", "text": "Call this first in the inherited class constructor because it loads the i18n catalogs It is recommended to call setComponentData with loadPlugins set to false and to load plugins at the end of your part constructor in the case of KParts::MainWindow plugins are automatically loaded in createGUI anyway so set loadPlugins to false for KParts::MainWindow as well"}, {"type": "function", "name": "KParts::PartBase::setPluginInterfaceVersion", "url": "classKParts_1_1PartBase.html#a5a9ed59560edb848e787c4b3cee878b1", "keyword": "setPluginInterfaceVersion KParts::PartBase::setPluginInterfaceVersion KParts::PartBase setPluginInterfaceVersion KParts::PartBase::setPluginInterfaceVersion KParts::PartBase setPluginInterfaceVersion KParts::PartBase::setPluginInterfaceVersion KParts::PartBase setPluginInterfaceVersion KParts::PartBase::setPluginInterfaceVersion KParts::PartBase setPluginInterfaceVersion KParts::PartBase::setPluginInterfaceVersion KParts::PartBase", "text": "Increase both numbers every time a binary incompatible change in the application s plugin interface is made version the interface version that plugins must have in order to be loaded For a KParts::Part call this before setComponentData For a KParts::MainWindow call this before createGUI"}, {"type": "function", "name": "KParts::PartBase::setPluginLoadingMode", "url": "classKParts_1_1PartBase.html#a49e418df2d77f5f915aa7addfeec455e", "keyword": "setPluginLoadingMode KParts::PartBase::setPluginLoadingMode KParts::PartBase setPluginLoadingMode KParts::PartBase::setPluginLoadingMode KParts::PartBase setPluginLoadingMode KParts::PartBase::setPluginLoadingMode KParts::PartBase setPluginLoadingMode KParts::PartBase::setPluginLoadingMode KParts::PartBase setPluginLoadingMode KParts::PartBase::setPluginLoadingMode KParts::PartBase", "text": "loadingMode see PluginLoadingMode For a KParts::Part call this before setComponentData For a KParts::MainWindow call this before createGUI"}, {"type": "enum", "name": "KParts::PartBase::PluginLoadingMode", "url": "classKParts_1_1PartBase.html#a73b04eba759c3505ac722b2ceaaa8b76", "keyword": "PluginLoadingMode KParts::PartBase::PluginLoadingMode KParts::PartBase PluginLoadingMode KParts::PartBase::PluginLoadingMode KParts::PartBase PluginLoadingMode KParts::PartBase::PluginLoadingMode KParts::PartBase PluginLoadingMode KParts::PartBase::PluginLoadingMode KParts::PartBase PluginLoadingMode KParts::PartBase::PluginLoadingMode KParts::PartBase", "text": "The value in the KConfig object of the KAboutData object always overrides LoadPlugins and LoadPluginsIfEnabled"}, {"type": "enumvalue", "name": "KParts::PartBase::DoNotLoadPlugins", "url": "classKParts_1_1PartBase.html#a73b04eba759c3505ac722b2ceaaa8b76a3ffe0a5005d5e1d00b4d3fd8c4d51a1e", "keyword": "DoNotLoadPlugins KParts::PartBase::DoNotLoadPlugins KParts::PartBase DoNotLoadPlugins KParts::PartBase::DoNotLoadPlugins KParts::PartBase DoNotLoadPlugins KParts::PartBase::DoNotLoadPlugins KParts::PartBase DoNotLoadPlugins KParts::PartBase::DoNotLoadPlugins KParts::PartBase DoNotLoadPlugins KParts::PartBase::DoNotLoadPlugins KParts::PartBase", "text": "Don t load any plugins at all"}, {"type": "enumvalue", "name": "KParts::PartBase::LoadPlugins", "url": "classKParts_1_1PartBase.html#a73b04eba759c3505ac722b2ceaaa8b76aeff505f5627f1539e03730d042e39522", "keyword": "LoadPlugins KParts::PartBase::LoadPlugins KParts::PartBase LoadPlugins KParts::PartBase::LoadPlugins KParts::PartBase LoadPlugins KParts::PartBase::LoadPlugins KParts::PartBase LoadPlugins KParts::PartBase::LoadPlugins KParts::PartBase LoadPlugins KParts::PartBase::LoadPlugins KParts::PartBase", "text": "Load new plugins automatically Can be overridden by the plugin if it sets EnabledByDefault false in the corresponding desktop file"}, {"type": "enumvalue", "name": "KParts::PartBase::LoadPluginsIfEnabled", "url": "classKParts_1_1PartBase.html#a73b04eba759c3505ac722b2ceaaa8b76aeaf6ca999ef635e22e3f52234226e931", "keyword": "LoadPluginsIfEnabled KParts::PartBase::LoadPluginsIfEnabled KParts::PartBase LoadPluginsIfEnabled KParts::PartBase::LoadPluginsIfEnabled KParts::PartBase LoadPluginsIfEnabled KParts::PartBase::LoadPluginsIfEnabled KParts::PartBase LoadPluginsIfEnabled KParts::PartBase::LoadPluginsIfEnabled KParts::PartBase LoadPluginsIfEnabled KParts::PartBase::LoadPluginsIfEnabled KParts::PartBase", "text": "New plugins are disabled by default Can be overridden by the plugin if it sets EnabledByDefault true in the corresponding desktop file"}, {"type": "class", "name": "KParts::OpenUrlArguments", "url": "classKParts_1_1OpenUrlArguments.html", "keyword": "OpenUrlArguments", "text": "For instance reload() indicates that the url should be loaded from the network even if it matches the current url of the part All setter methods in this class are for the class that calls openUrl usually the hosting application all the getter methods are for the part"}, {"type": "function", "name": "KParts::OpenUrlArguments::actionRequestedByUser", "url": "classKParts_1_1OpenUrlArguments.html#abd9e74a1158df3cba7891370c2302528", "keyword": "actionRequestedByUser KParts::OpenUrlArguments::actionRequestedByUser KParts::OpenUrlArguments", "text": "False if the URL should be opened due to an external event like javascript popups or automatic redirections This is true by default 4.1"}, {"type": "function", "name": "KParts::OpenUrlArguments::metaData", "url": "classKParts_1_1OpenUrlArguments.html#a50ea6eeacb4b93758a19e678071c7942", "keyword": "metaData KParts::OpenUrlArguments::metaData KParts::OpenUrlArguments", "text": "This method can be used to add or retrieve metadata KIO::TransferJob etc"}, {"type": "function", "name": "KParts::OpenUrlArguments::mimeType", "url": "classKParts_1_1OpenUrlArguments.html#a48d610cf52d43303cba3c15865c33be5", "keyword": "mimeType KParts::OpenUrlArguments::mimeType KParts::OpenUrlArguments", "text": ""}, {"type": "function", "name": "KParts::OpenUrlArguments::reload", "url": "classKParts_1_1OpenUrlArguments.html#ad97f2508f4aa720704af0e85eb3ed4c2", "keyword": "reload KParts::OpenUrlArguments::reload KParts::OpenUrlArguments", "text": "true to indicate that the part should reload the URL i.e the cache shouldn t be used forced reload"}, {"type": "function", "name": "KParts::OpenUrlArguments::setReload", "url": "classKParts_1_1OpenUrlArguments.html#a2b9d7ac959db074ef06697de8f4e7a14", "keyword": "setReload KParts::OpenUrlArguments::setReload KParts::OpenUrlArguments", "text": ""}, {"type": "function", "name": "KParts::OpenUrlArguments::xOffset", "url": "classKParts_1_1OpenUrlArguments.html#a33abc6853f32dc9d9a0c19778af2c787", "keyword": "xOffset KParts::OpenUrlArguments::xOffset KParts::OpenUrlArguments", "text": "This is saved into the history and restored when going back in the history"}, {"type": "function", "name": "KParts::OpenUrlArguments::yOffset", "url": "classKParts_1_1OpenUrlArguments.html#a9f390a732bb66282908df5bcf1e33d4c", "keyword": "yOffset KParts::OpenUrlArguments::yOffset KParts::OpenUrlArguments", "text": "This is saved into the history and restored when going back in the history"}, {"type": "class", "name": "KParts::OpenUrlEvent", "url": "classKParts_1_1OpenUrlEvent.html", "keyword": "OpenUrlEvent", "text": "Applications can use this event to send this information to interested plugins The event should be sent before opening the URL in the part so that the plugins can use part() url() to get the old URL"}, {"type": "class", "name": "KParts::Part", "url": "classKParts_1_1Part.html", "keyword": "Part", "text": "A is a GUI component featuring A widget embeddedable in any application GUI elements that will be merged in the user interface menubars toolbars About the widget Note that KParts::Part does not inherit QWidget This is due to the fact that the will probably not be a mere QWidget but an elaborate one That s why when implementing your KParts::Part or derived you should call KParts::Part::setWidget() in your constructor About the GUI elements Those elements trigger actions defined by the part action() The layout of the actions in the GUI is defined by an XML file setXMLFile() See also ReadOnlyPart and ReadWritePart which define the framework for a part and for an part Use Part directly only if your part doesn t fit into those"}, {"type": "signal", "name": "KParts::Part::setStatusBarText", "url": "classKParts_1_1Part.html#a809740a79edf0fa0bbe1dd982a6c4d35", "keyword": "setStatusBarText KParts::Part::setStatusBarText KParts::Part setStatusBarText KParts::Part::setStatusBarText KParts::Part setStatusBarText KParts::Part::setStatusBarText KParts::Part", "text": ""}, {"type": "signal", "name": "KParts::Part::setWindowCaption", "url": "classKParts_1_1Part.html#a00982292ef3d8b80dedeb5fed2376099", "keyword": "setWindowCaption KParts::Part::setWindowCaption KParts::Part setWindowCaption KParts::Part::setWindowCaption KParts::Part setWindowCaption KParts::Part::setWindowCaption KParts::Part", "text": "this signal has only an effect on the window title if window title handling is enabled KParts::MainWindow::setWindowTitleHandling"}, {"type": "function", "name": "KParts::Part::Part", "url": "classKParts_1_1Part.html#aee55422c867e8e10fd3f713a74249357", "keyword": "Part KParts::Part::Part KParts::Part Part KParts::Part::Part KParts::Part Part KParts::Part::Part KParts::Part", "text": "parent Parent object of the part"}, {"type": "function", "name": "KParts::Part::~Part", "url": "classKParts_1_1Part.html#a1710faabd37355a2a4380b904ea37642", "keyword": "KParts::Part::~Part KParts::Part KParts::Part::~Part KParts::Part KParts::Part::~Part KParts::Part", "text": ""}, {"type": "function", "name": "KParts::Part::embed", "url": "classKParts_1_1Part.html#ae4a4d92e9f945a898755bbffde3dd0d5", "keyword": "embed KParts::Part::embed KParts::Part embed KParts::Part::embed KParts::Part embed KParts::Part::embed KParts::Part", "text": "You don t need to do this if you created the widget with the correct parent widget this is just a QWidget::reparent() Note that the Part is still the holder of the QWidget meaning that if you delete the Part then the widget gets destroyed as well and vice-versa This method is not recommended since creating the widget with the correct parent is simpler anyway"}, {"type": "function", "name": "KParts::Part::hitTest", "url": "classKParts_1_1Part.html#a1a008e13075413a25e6005dffb9a1bd4", "keyword": "hitTest KParts::Part::hitTest KParts::Part hitTest KParts::Part::hitTest KParts::Part hitTest KParts::Part::hitTest KParts::Part", "text": "This is called by the part manager to ask whether a part should be activated when clicking somewhere In most cases the default implementation is enough Reimplement this if your part has child parts in some areas like in khtml or koffice widget the part widget being clicked usually the same as widget() except in koffice globalPos the mouse coordinates in global coordinates"}, {"type": "function", "name": "KParts::Part::iconLoader", "url": "classKParts_1_1Part.html#ad0590a12e373494880f51eb459cf238c", "keyword": "iconLoader KParts::Part::iconLoader KParts::Part iconLoader KParts::Part::iconLoader KParts::Part iconLoader KParts::Part::iconLoader KParts::Part", "text": "icons installed into this part s own directories as opposed to standard kde icons Make sure to call setComponentData before calling iconLoader"}, {"type": "function", "name": "KParts::Part::isSelectable", "url": "classKParts_1_1Part.html#a33f9cf35587d5e7072eb435cfa1e6066", "keyword": "isSelectable KParts::Part::isSelectable KParts::Part isSelectable KParts::Part::isSelectable KParts::Part isSelectable KParts::Part::isSelectable KParts::Part", "text": ""}, {"type": "function", "name": "KParts::Part::manager", "url": "classKParts_1_1Part.html#ae8752779c1e3664796ddd9ebf51b0c64", "keyword": "manager KParts::Part::manager KParts::Part manager KParts::Part::manager KParts::Part manager KParts::Part::manager KParts::Part", "text": ""}, {"type": "function", "name": "KParts::Part::setAutoDeletePart", "url": "classKParts_1_1Part.html#aa645dcacf25b33211e9d64e9eb65a29a", "keyword": "setAutoDeletePart KParts::Part::setAutoDeletePart KParts::Part setAutoDeletePart KParts::Part::setAutoDeletePart KParts::Part setAutoDeletePart KParts::Part::setAutoDeletePart KParts::Part", "text": "The hosting application can call setAutoDeletePart(false) to disable this behavior to be able to delete the widget and then the part independently This is a method for the hosting application only Part subclasses should never call this"}, {"type": "function", "name": "KParts::Part::setAutoDeleteWidget", "url": "classKParts_1_1Part.html#ad2a08cc79d77952e389780eb63b68052", "keyword": "setAutoDeleteWidget KParts::Part::setAutoDeleteWidget KParts::Part setAutoDeleteWidget KParts::Part::setAutoDeleteWidget KParts::Part setAutoDeleteWidget KParts::Part::setAutoDeleteWidget KParts::Part", "text": "The hosting application can call setAutoDeleteWidget(false) to disable this behavior given that the widget is usually deleted by its parent widget anyway This is a method for the hosting application only Part subclasses should never call this"}, {"type": "function", "name": "KParts::Part::setManager", "url": "classKParts_1_1Part.html#a6e2136ed1fc42f74f36472f00dd759bb", "keyword": "setManager KParts::Part::setManager KParts::Part setManager KParts::Part::setManager KParts::Part setManager KParts::Part::setManager KParts::Part", "text": "Used by the part manager"}, {"type": "function", "name": "KParts::Part::setSelectable", "url": "classKParts_1_1Part.html#a770220e0beb227ba286b09df93ce3d15", "keyword": "setSelectable KParts::Part::setSelectable KParts::Part setSelectable KParts::Part::setSelectable KParts::Part setSelectable KParts::Part::setSelectable KParts::Part", "text": "selectable Indicates whether the part is selectable or not"}, {"type": "function", "name": "KParts::Part::widget", "url": "classKParts_1_1Part.html#a2d2efd56fe23904104c48dc56371c03d", "keyword": "widget KParts::Part::widget KParts::Part widget KParts::Part::widget KParts::Part widget KParts::Part::widget KParts::Part", "text": "The widget defined by this part set by setWidget()"}, {"type": "slot", "name": "KParts::Part::slotWidgetDestroyed", "url": "classKParts_1_1Part.html#ae6789f7047afd8d87ade140428cbe7b3", "keyword": "slotWidgetDestroyed KParts::Part::slotWidgetDestroyed KParts::Part slotWidgetDestroyed KParts::Part::slotWidgetDestroyed KParts::Part slotWidgetDestroyed KParts::Part::slotWidgetDestroyed KParts::Part", "text": ""}, {"type": "function", "name": "KParts::Part::customEvent", "url": "classKParts_1_1Part.html#a5774787704b5ea74ac8d23a7a5adc2bb", "keyword": "customEvent KParts::Part::customEvent KParts::Part customEvent KParts::Part::customEvent KParts::Part customEvent KParts::Part::customEvent KParts::Part", "text": ""}, {"type": "function", "name": "KParts::Part::guiActivateEvent", "url": "classKParts_1_1Part.html#aac6f064a320fa83b31bf67520df3761f", "keyword": "guiActivateEvent KParts::Part::guiActivateEvent KParts::Part", "text": "Reimplement this if you don t want to reimplement event and test for the event yourself or even install an event filter"}, {"type": "function", "name": "KParts::Part::hostContainer", "url": "classKParts_1_1Part.html#a79d27796d0a5fb6b1be321b8367b0e7e", "keyword": "hostContainer KParts::Part::hostContainer KParts::Part hostContainer KParts::Part::hostContainer KParts::Part hostContainer KParts::Part::hostContainer KParts::Part", "text": "a container widget owned by the Part s GUI"}, {"type": "function", "name": "KParts::Part::loadPlugins", "url": "classKParts_1_1Part.html#a95c41d68c9667995a86cd142f1cd14de", "keyword": "loadPlugins KParts::Part::loadPlugins KParts::Part loadPlugins KParts::Part::loadPlugins KParts::Part loadPlugins KParts::Part::loadPlugins KParts::Part", "text": "Normally you want to call this at the end of the part constructor if you used setComponentData(componentData, false) 4.1"}, {"type": "function", "name": "KParts::Part::partActivateEvent", "url": "classKParts_1_1Part.html#ab268f00ee4e3984a2ea21c364c09681f", "keyword": "partActivateEvent KParts::Part::partActivateEvent KParts::Part partActivateEvent KParts::Part::partActivateEvent KParts::Part partActivateEvent KParts::Part::partActivateEvent KParts::Part", "text": "Reimplement this if you don t want to reimplement event and test for the event yourself or even install an event filter"}, {"type": "function", "name": "KParts::Part::partSelectEvent", "url": "classKParts_1_1Part.html#a20573e8db0c4f08d3ff04422df51b461", "keyword": "partSelectEvent KParts::Part::partSelectEvent KParts::Part partSelectEvent KParts::Part::partSelectEvent KParts::Part partSelectEvent KParts::Part::partSelectEvent KParts::Part", "text": "Reimplement this if you don t want to reimplement event and test for the event yourself or even install an event filter"}, {"type": "function", "name": "KParts::Part::setWidget", "url": "classKParts_1_1Part.html#a399fea8c8f8d4ee321118d1ec85775db", "keyword": "setWidget KParts::Part::setWidget KParts::Part setWidget KParts::Part::setWidget KParts::Part setWidget KParts::Part::setWidget KParts::Part", "text": "Call this in the Part-inherited class constructor"}, {"type": "class", "name": "KParts::PartActivateEvent", "url": "classKParts_1_1PartActivateEvent.html", "keyword": "PartActivateEvent", "text": "Each time the active part changes it will send first a PartActivateEvent with activated false part oldActivePart widget oldActiveWidget and then another PartActivateEvent with activated true part newPart widget newWidget KParts::Part::partActivateEvent"}, {"type": "class", "name": "KParts::PartBase", "url": "classKParts_1_1PartBase.html", "keyword": "PartBase", "text": ""}, {"type": "class", "name": "KParts::PartManager", "url": "classKParts_1_1PartManager.html", "keyword": "PartManager", "text": "Applications that want to embed parts without merging GUIs only use a KParts::PartManager Those who want to merge GUIs use a KParts::MainWindow for example in addition to a part manager Parts know about the part manager to add nested parts to it See also KParts::Part::manager() and KParts::Part::setManager()"}, {"type": "enum", "name": "KParts::PartManager::Reason", "url": "classKParts_1_1PartManager.html#a2210acbbe8638df29b112c48e4d9cfb3", "keyword": "Reason KParts::PartManager::Reason KParts::PartManager", "text": "To test for use ReasonLeftClick NoReason usually means explicit activation with setActivePart"}, {"type": "enum", "name": "KParts::PartManager::SelectionPolicy", "url": "classKParts_1_1PartManager.html#a7db25fb7e7f91548fa15566b3af4bb34", "keyword": "SelectionPolicy KParts::PartManager::SelectionPolicy KParts::PartManager", "text": ""}, {"type": "signal", "name": "KParts::PartManager::activePartChanged", "url": "classKParts_1_1PartManager.html#a9142dcbea26a78a91d4075a223594e3d", "keyword": "activePartChanged KParts::PartManager::activePartChanged KParts::PartManager", "text": "setActivePart()"}, {"type": "signal", "name": "KParts::PartManager::partAdded", "url": "classKParts_1_1PartManager.html#a0ddd1f334b7c397dcb2b11b418604a3f", "keyword": "partAdded KParts::PartManager::partAdded KParts::PartManager", "text": "addPart()"}, {"type": "signal", "name": "KParts::PartManager::partRemoved", "url": "classKParts_1_1PartManager.html#afacc58788662a9e2eb73cc9418d442d8", "keyword": "partRemoved KParts::PartManager::partRemoved KParts::PartManager", "text": "removePart()"}, {"type": "function", "name": "KParts::PartManager::PartManager", "url": "classKParts_1_1PartManager.html#a657476303c48dde9899e2cae30992b1f", "keyword": "PartManager KParts::PartManager::PartManager KParts::PartManager", "text": "parent The toplevel widget window dialog the partmanager should monitor for activation/selection events"}, {"type": "function", "name": "KParts::PartManager::PartManager", "url": "classKParts_1_1PartManager.html#a1b27480e6562e748d2d935c59fee83ea", "keyword": "PartManager KParts::PartManager::PartManager KParts::PartManager", "text": "topLevel The toplevel widget window dialog the partmanager should monitor for activation/selection events parent The parent QObject"}, {"type": "function", "name": "KParts::PartManager::activationButtonMask", "url": "classKParts_1_1PartManager.html#a0698b986d0da6a3c8b69930d566a04ec", "keyword": "activationButtonMask KParts::PartManager::activationButtonMask KParts::PartManager", "text": "setActivationButtonMask"}, {"type": "function", "name": "KParts::PartManager::activePart", "url": "classKParts_1_1PartManager.html#a61316b59da1590f8f736078bd9e9ca7b", "keyword": "activePart KParts::PartManager::activePart KParts::PartManager", "text": ""}, {"type": "function", "name": "KParts::PartManager::activeWidget", "url": "classKParts_1_1PartManager.html#a339ddeed8cab9fa609b24b1a1a2aa61b", "keyword": "activeWidget KParts::PartManager::activeWidget KParts::PartManager", "text": ""}, {"type": "function", "name": "KParts::PartManager::addManagedTopLevelWidget", "url": "classKParts_1_1PartManager.html#afbfa76cfcc8b4b9912fb798ca1184b62", "keyword": "addManagedTopLevelWidget KParts::PartManager::addManagedTopLevelWidget KParts::PartManager", "text": "Usually a PartManager only listens for events for activation/selection for one toplevel widget and its children the one specified in the constructor Sometimes however like for example when using the KDE dockwidget library it is necessary to extend this"}, {"type": "function", "name": "KParts::PartManager::addPart", "url": "classKParts_1_1PartManager.html#aeb3d51831fac7978fe6779b95266dbc5", "keyword": "addPart KParts::PartManager::addPart KParts::PartManager", "text": "Sets it to the active part automatically if setActive is true default"}, {"type": "function", "name": "KParts::PartManager::allowNestedParts", "url": "classKParts_1_1PartManager.html#a04c81c8b4346d28f21a8c87804050784", "keyword": "allowNestedParts KParts::PartManager::allowNestedParts KParts::PartManager", "text": "setAllowNestedParts"}, {"type": "function", "name": "KParts::PartManager::eventFilter", "url": "classKParts_1_1PartManager.html#a3d55ca6f6701b59cca40136631c9d755", "keyword": "eventFilter KParts::PartManager::eventFilter KParts::PartManager", "text": ""}, {"type": "function", "name": "KParts::PartManager::ignoreScrollBars", "url": "classKParts_1_1PartManager.html#a56a3302db9e021597322ec5fe4a6c39e", "keyword": "ignoreScrollBars KParts::PartManager::ignoreScrollBars KParts::PartManager", "text": "setIgnoreScrollBars"}, {"type": "function", "name": "KParts::PartManager::parts", "url": "classKParts_1_1PartManager.html#a8a0dc8557ef168d7910364707b0ce1c8", "keyword": "parts KParts::PartManager::parts KParts::PartManager", "text": ""}, {"type": "function", "name": "KParts::PartManager::reason", "url": "classKParts_1_1PartManager.html#a52fdbc45e587ee66a6dc99d882ecf270", "keyword": "reason KParts::PartManager::reason KParts::PartManager", "text": "the reason for the last activePartChanged signal emitted Reason"}, {"type": "function", "name": "KParts::PartManager::removeManagedTopLevelWidget", "url": "classKParts_1_1PartManager.html#aeb33df2081fe50cdcd6272921aa33bdd", "keyword": "removeManagedTopLevelWidget KParts::PartManager::removeManagedTopLevelWidget KParts::PartManager", "text": "addManagedTopLevelWidget"}, {"type": "function", "name": "KParts::PartManager::removePart", "url": "classKParts_1_1PartManager.html#a167a0221dd0dbdff7e259e3be9eb3cba", "keyword": "removePart KParts::PartManager::removePart KParts::PartManager", "text": "Sets the active part to 0 if part is the activePart()"}, {"type": "function", "name": "KParts::PartManager::replacePart", "url": "classKParts_1_1PartManager.html#a7eb0fe00720363cf9b5c7a368b317779", "keyword": "replacePart KParts::PartManager::replacePart KParts::PartManager", "text": "This is an optimised version of removePart addPart"}, {"type": "function", "name": "KParts::PartManager::selectedPart", "url": "classKParts_1_1PartManager.html#ad8dfe171b719066fdd7434c2a0cbd244", "keyword": "selectedPart KParts::PartManager::selectedPart KParts::PartManager", "text": ""}, {"type": "function", "name": "KParts::PartManager::selectedWidget", "url": "classKParts_1_1PartManager.html#a9b34dc25af741706469b174b49b28eb3", "keyword": "selectedWidget KParts::PartManager::selectedWidget KParts::PartManager", "text": ""}, {"type": "function", "name": "KParts::PartManager::selectionPolicy", "url": "classKParts_1_1PartManager.html#ada9a2e31714fdb72038934cb2e53d4cf", "keyword": "selectionPolicy KParts::PartManager::selectionPolicy KParts::PartManager", "text": ""}, {"type": "function", "name": "KParts::PartManager::setActivationButtonMask", "url": "classKParts_1_1PartManager.html#a1db711b8ec907e877dbc443cb5766874", "keyword": "setActivationButtonMask KParts::PartManager::setActivationButtonMask KParts::PartManager", "text": "By default it reacts on all mouse buttons LMB/MMB/RMB buttonMask a combination of Qt::ButtonState values e.g Qt::LeftButton Qt::MidButton"}, {"type": "function", "name": "KParts::PartManager::setActivePart", "url": "classKParts_1_1PartManager.html#a55ded6525a6cee17d796f1d2aa4d4092", "keyword": "setActivePart KParts::PartManager::setActivePart KParts::PartManager", "text": "The active part receives activation events widget can be used to specify which widget was responsible for the activation This is important if you have multiple views for a document/part like in KOffice"}, {"type": "function", "name": "KParts::PartManager::setAllowNestedParts", "url": "classKParts_1_1PartManager.html#af2080b98531d980a28248f9249aeccfe", "keyword": "setAllowNestedParts KParts::PartManager::setAllowNestedParts KParts::PartManager", "text": "This is a property the shell has to set/specify Per default we assume that the shell cannot handle nested parts However in case of a KOffice shell for example we allow nested parts A Part is nested a child part if its parent object inherits KParts::Part If a child part is activated and nested parts are not allowed/handled then the top parent part in the tree is activated"}, {"type": "function", "name": "KParts::PartManager::setIgnoreScrollBars", "url": "classKParts_1_1PartManager.html#a042e63414928bdda99a34ac71b74d5f6", "keyword": "setIgnoreScrollBars KParts::PartManager::setIgnoreScrollBars KParts::PartManager", "text": "If the partmanager ignores them then clicking on the scrollbars of a non-active/non-selected part will not change the selection or activation state The default value is false read scrollbars are NOT ignored"}, {"type": "function", "name": "KParts::PartManager::setSelectedPart", "url": "classKParts_1_1PartManager.html#af09d9efcf5c3ab4ff3c234d3cef0aec9", "keyword": "setSelectedPart KParts::PartManager::setSelectedPart KParts::PartManager", "text": "The selected part receives selection events widget can be used to specify which widget was responsible for the selection This is important if you have multiple views for a document/part like in KOffice"}, {"type": "function", "name": "KParts::PartManager::setSelectionPolicy", "url": "classKParts_1_1PartManager.html#a86fd76d971c0d7707e795e84f49da898", "keyword": "setSelectionPolicy KParts::PartManager::setSelectionPolicy KParts::PartManager", "text": ""}, {"type": "slot", "name": "KParts::PartManager::slotManagedTopLevelWidgetDestroyed", "url": "classKParts_1_1PartManager.html#abd0c651ab3014ab805b518f1fa570572", "keyword": "slotManagedTopLevelWidgetDestroyed KParts::PartManager::slotManagedTopLevelWidgetDestroyed KParts::PartManager", "text": ""}, {"type": "slot", "name": "KParts::PartManager::slotObjectDestroyed", "url": "classKParts_1_1PartManager.html#aa1fe880348e22dd2fc24ad9981e9e88f", "keyword": "slotObjectDestroyed KParts::PartManager::slotObjectDestroyed KParts::PartManager", "text": ""}, {"type": "slot", "name": "KParts::PartManager::slotWidgetDestroyed", "url": "classKParts_1_1PartManager.html#addb6b1f857a9daa8f272afa291a1d1eb", "keyword": "slotWidgetDestroyed KParts::PartManager::slotWidgetDestroyed KParts::PartManager", "text": ""}, {"type": "function", "name": "KParts::PartManager::setIgnoreExplictFocusRequests", "url": "classKParts_1_1PartManager.html#ad856335eeec779d702b796677cd4528f", "keyword": "setIgnoreExplictFocusRequests KParts::PartManager::setIgnoreExplictFocusRequests KParts::PartManager", "text": "By default this option is set to false Set it to true to prevent the part from sending explicit set focus requests to the client application 4.10"}, {"type": "class", "name": "KParts::PartSelectEvent", "url": "classKParts_1_1PartSelectEvent.html", "keyword": "PartSelectEvent", "text": "KParts::PartManager::setSelectionPolicy"}, {"type": "class", "name": "KParts::Plugin", "url": "classKParts_1_1Plugin.html", "keyword": "Plugin", "text": "The XML of those plugins looks exactly like of the shell or parts with one small difference The document tag should have an additional attribute named and contain the name of the library implementing the plugin If you want this plugin to be used by a part you need to install the rc file under the directory KDEDIR/share/apps usually where instancename is the name of the part s instance You should also install a desktop file with the same name KPluginInfo For a tutorial on how to write plugins see"}, {"type": "function", "name": "KParts::Plugin::Plugin", "url": "classKParts_1_1Plugin.html#a503f1b81d74d4c085cb0e165832e901a", "keyword": "Plugin KParts::Plugin::Plugin KParts::Plugin", "text": ""}, {"type": "function", "name": "KParts::Plugin::~Plugin", "url": "classKParts_1_1Plugin.html#aee4cc1864a2afa84a9ad935153f3fe39", "keyword": "KParts::Plugin::~Plugin KParts::Plugin", "text": ""}, {"type": "function", "name": "KParts::Plugin::localXMLFile", "url": "classKParts_1_1Plugin.html#a4bda4ecd4b8fc594757df150e2c83da3", "keyword": "localXMLFile KParts::Plugin::localXMLFile KParts::Plugin", "text": ""}, {"type": "function", "name": "KParts::Plugin::xmlFile", "url": "classKParts_1_1Plugin.html#a836f1796d73c47db7c0cd637a6bd7686", "keyword": "xmlFile KParts::Plugin::xmlFile KParts::Plugin", "text": ""}, {"type": "function", "name": "KParts::Plugin::loadPlugins", "url": "classKParts_1_1Plugin.html#a97318b5990912f6171d2a8da8f2aeb00", "keyword": "loadPlugins KParts::Plugin::loadPlugins KParts::Plugin", "text": "It is recommended to use the last loadPlugins method instead to support enabling and disabling of plugins"}, {"type": "function", "name": "KParts::Plugin::loadPlugins", "url": "classKParts_1_1Plugin.html#a8363c7e6e997758390fef1afade6da24", "keyword": "loadPlugins KParts::Plugin::loadPlugins KParts::Plugin", "text": "It is recommended to use the last loadPlugins method instead to support enabling and disabling of plugins"}, {"type": "function", "name": "KParts::Plugin::loadPlugins", "url": "classKParts_1_1Plugin.html#a2e43021b93f534a5ef8317daa2771ebf", "keyword": "loadPlugins KParts::Plugin::loadPlugins KParts::Plugin", "text": "It is recommended to use the last loadPlugins method instead to support enabling and disabling of plugins"}, {"type": "function", "name": "KParts::Plugin::loadPlugins", "url": "classKParts_1_1Plugin.html#a248f1215c1a452065c77c6ba35885153", "keyword": "loadPlugins KParts::Plugin::loadPlugins KParts::Plugin", "text": "This method uses the KConfig object of the given instance to find out which plugins are enabled and which are disabled What happens by default i.e for new plugins that are not in that config file is controlled by enableNewPluginsByDefault It can be overridden by the plugin if it sets the X-KDE-PluginInfo-EnabledByDefault key in the desktop file with the same name as the rc file If a disabled plugin is already loaded it will be removed from the GUI factory and deleted If you change the binary interface offered by your part you can avoid crashes from old plugins lying around by setting X-KDE-InterfaceVersion 2 in the desktop files of the plugins and passing 2 to interfaceVersionRequired so that the old plugins are not loaded Increase both numbers every time a binary incompatible change in the application s plugin interface is made This method is automatically called by KParts::Part and by KParts::MainWindow PartBase::setPluginLoadingMode PartBase::setPluginInterfaceVersion If you call this method in an already constructed GUI like when the user has changed which plugins are enabled you need to add the new plugins to the KXMLGUIFactory"}, {"type": "function", "name": "KParts::Plugin::pluginObjects", "url": "classKParts_1_1Plugin.html#a259e811d2fdba1b7862fc5f30e5d7e28", "keyword": "pluginObjects KParts::Plugin::pluginObjects KParts::Plugin", "text": "This functions basically iterates over the children of the given object and returns those that inherit from KParts::Plugin"}, {"type": "class", "name": "KParts::ReadOnlyPart", "url": "classKParts_1_1ReadOnlyPart.html", "keyword": "ReadOnlyPart", "text": "This class takes care of network transparency for you in the simplest way downloading to a temporary file then letting the part load from the temporary file To use the built-in network transparency you only need to implement openFile() not openUrl() To implement network transparency differently e.g for progressive loading like a web browser does for instance or to prevent network transparency but why would you do that you can override openUrl() KParts Application can use the signals to show feedback while the URL is being loaded ReadOnlyPart handles the window caption by setting it to the current URL set in openUrl() and each time the part is activated If you want another caption set it in openFile() and if the part might ever be used with a part manager in guiActivateEvent()"}, {"type": "signal", "name": "KParts::ReadOnlyPart::canceled", "url": "classKParts_1_1ReadOnlyPart.html#ab1083f7c30e868d66e1f326b94851d8c", "keyword": "canceled KParts::ReadOnlyPart::canceled KParts::ReadOnlyPart canceled KParts::ReadOnlyPart::canceled KParts::ReadOnlyPart", "text": "errMsg the error message empty if the user canceled the loading voluntarily"}, {"type": "signal", "name": "KParts::ReadOnlyPart::completed", "url": "classKParts_1_1ReadOnlyPart.html#a7dbe7a0dd64ed631d7d7fc763167de31", "keyword": "completed KParts::ReadOnlyPart::completed KParts::ReadOnlyPart completed KParts::ReadOnlyPart::completed KParts::ReadOnlyPart", "text": "Hosting apps will want to know when the process of loading the data is finished so that they can access the data when everything is loaded"}, {"type": "signal", "name": "KParts::ReadOnlyPart::completed", "url": "classKParts_1_1ReadOnlyPart.html#a48ddc679f4b303102237f8e33b29c904", "keyword": "completed KParts::ReadOnlyPart::completed KParts::ReadOnlyPart completed KParts::ReadOnlyPart::completed KParts::ReadOnlyPart", "text": "An example of this is the meta-refresh tags on web pages used to reload/redirect after a certain period of time This signal is useful if you want to give the user the ability to cancel such pending actions pendingAction true if a pending action exists false otherwise"}, {"type": "signal", "name": "KParts::ReadOnlyPart::started", "url": "classKParts_1_1ReadOnlyPart.html#a1839e6f2741b7fca77cd4b04b5acdc6d", "keyword": "started KParts::ReadOnlyPart::started KParts::ReadOnlyPart started KParts::ReadOnlyPart::started KParts::ReadOnlyPart", "text": "If using a KIO::Job it sets the job in the signal so that progress information can be shown Otherwise job is 0"}, {"type": "signal", "name": "KParts::ReadOnlyPart::urlChanged", "url": "classKParts_1_1ReadOnlyPart.html#a4407ef7bb67f18b963dc062bd8040e66", "keyword": "urlChanged KParts::ReadOnlyPart::urlChanged KParts::ReadOnlyPart urlChanged KParts::ReadOnlyPart::urlChanged KParts::ReadOnlyPart", "text": "4.10"}, {"type": "slot", "name": "KParts::ReadOnlyPart::openUrl", "url": "classKParts_1_1ReadOnlyPart.html#a2d7ce3e9a4d68e36f1e2f6cb016670da", "keyword": "openUrl KParts::ReadOnlyPart::openUrl KParts::ReadOnlyPart openUrl KParts::ReadOnlyPart::openUrl KParts::ReadOnlyPart", "text": "Otherwise reimplement openFile() only If you reimplement it don t forget to set the caption usually with emit setWindowCaption url.prettyUrl()"}, {"type": "function", "name": "KParts::ReadOnlyPart::ReadOnlyPart", "url": "classKParts_1_1ReadOnlyPart.html#a874486b9af2a3135e84df9b3dcd569f7", "keyword": "ReadOnlyPart KParts::ReadOnlyPart::ReadOnlyPart KParts::ReadOnlyPart ReadOnlyPart KParts::ReadOnlyPart::ReadOnlyPart KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::~ReadOnlyPart", "url": "classKParts_1_1ReadOnlyPart.html#a9e6ac2807367409576ee2f4b369118e7", "keyword": "KParts::ReadOnlyPart::~ReadOnlyPart KParts::ReadOnlyPart KParts::ReadOnlyPart::~ReadOnlyPart KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::arguments", "url": "classKParts_1_1ReadOnlyPart.html#a56da65f13e8071941e8119eaee85eace", "keyword": "arguments KParts::ReadOnlyPart::arguments KParts::ReadOnlyPart arguments KParts::ReadOnlyPart::arguments KParts::ReadOnlyPart", "text": "the arguments that were used to open this URL"}, {"type": "function", "name": "KParts::ReadOnlyPart::browserExtension", "url": "classKParts_1_1ReadOnlyPart.html#a18975c92231cd2f902055cd8ca837106", "keyword": "browserExtension KParts::ReadOnlyPart::browserExtension KParts::ReadOnlyPart browserExtension KParts::ReadOnlyPart::browserExtension KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::closeStream", "url": "classKParts_1_1ReadOnlyPart.html#aa828fc225a2f32563624053f80f40257", "keyword": "closeStream KParts::ReadOnlyPart::closeStream KParts::ReadOnlyPart closeStream KParts::ReadOnlyPart::closeStream KParts::ReadOnlyPart", "text": "With some data types text html closeStream might never actually be called in the case of continuous streams for instance plain text or HTML data"}, {"type": "function", "name": "KParts::ReadOnlyPart::closeUrl", "url": "classKParts_1_1ReadOnlyPart.html#ab189d22c6f431b8b892cbfe8a4d0f946", "keyword": "closeUrl KParts::ReadOnlyPart::closeUrl KParts::ReadOnlyPart", "text": "document for instance when switching to another url note that openUrl() calls it automatically in this case If the current URL is not fully loaded yet aborts loading Deletes the temporary file used when the url is remote always true but the return value exists for reimplementations"}, {"type": "function", "name": "KParts::ReadOnlyPart::isProgressInfoEnabled", "url": "classKParts_1_1ReadOnlyPart.html#a1066f7ec170ffba4aef5e94604a27fe0", "keyword": "isProgressInfoEnabled KParts::ReadOnlyPart::isProgressInfoEnabled KParts::ReadOnlyPart isProgressInfoEnabled KParts::ReadOnlyPart::isProgressInfoEnabled KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::openStream", "url": "classKParts_1_1ReadOnlyPart.html#a22cb48e2c6ab9d7b4b40a0585fefb405", "keyword": "openStream KParts::ReadOnlyPart::openStream KParts::ReadOnlyPart openStream KParts::ReadOnlyPart::openStream KParts::ReadOnlyPart", "text": "This is an alternative to openUrl which allows the user of the part to load the data itself and send it progressively to the part mimeType the type of data that is going to be sent to this part url the URL representing this data Although not directly used every ReadOnlyPart has a URL see url() so this simply sets it true if the part supports progressive loading and accepts data false otherwise"}, {"type": "function", "name": "KParts::ReadOnlyPart::setArguments", "url": "classKParts_1_1ReadOnlyPart.html#aab893a47747cad8bb29f1f95316140de", "keyword": "setArguments KParts::ReadOnlyPart::setArguments KParts::ReadOnlyPart setArguments KParts::ReadOnlyPart::setArguments KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::setProgressInfoEnabled", "url": "classKParts_1_1ReadOnlyPart.html#a2d8af6ecaf7d70e2670af6420fee7af3", "keyword": "setProgressInfoEnabled KParts::ReadOnlyPart::setProgressInfoEnabled KParts::ReadOnlyPart setProgressInfoEnabled KParts::ReadOnlyPart::setProgressInfoEnabled KParts::ReadOnlyPart", "text": "Use this if you provide another way of displaying progress info e.g a statusbar using the signals emitted by this class and/or those emitted by the Job given by started"}, {"type": "function", "name": "KParts::ReadOnlyPart::url", "url": "classKParts_1_1ReadOnlyPart.html#a7738e261780c6ac5d9de08b069afe543", "keyword": "url KParts::ReadOnlyPart::url KParts::ReadOnlyPart url KParts::ReadOnlyPart::url KParts::ReadOnlyPart", "text": "The current URL"}, {"type": "function", "name": "KParts::ReadOnlyPart::writeStream", "url": "classKParts_1_1ReadOnlyPart.html#aea4c1981f0f9bea442450895a43b4bcb", "keyword": "writeStream KParts::ReadOnlyPart::writeStream KParts::ReadOnlyPart writeStream KParts::ReadOnlyPart::writeStream KParts::ReadOnlyPart", "text": "openStream must have been called previously and must have returned true true if the data was accepted by the part If false is returned the application should stop sending data and doesn t have to call closeStream"}, {"type": "function", "name": "KParts::ReadOnlyPart::abortLoad", "url": "classKParts_1_1ReadOnlyPart.html#aa23121934cc4a6419a85d911142b2abc", "keyword": "abortLoad KParts::ReadOnlyPart::abortLoad KParts::ReadOnlyPart abortLoad KParts::ReadOnlyPart::abortLoad KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::guiActivateEvent", "url": "classKParts_1_1ReadOnlyPart.html#af6b4ad8bc010422aba489ca8a68deba6", "keyword": "guiActivateEvent KParts::ReadOnlyPart::guiActivateEvent KParts::ReadOnlyPart guiActivateEvent KParts::ReadOnlyPart::guiActivateEvent KParts::ReadOnlyPart", "text": "Technical note this is done with GUIActivateEvent and not with PartActivateEvent because it s handled by the mainwindow which gets the even after the PartActivateEvent events have been sent"}, {"type": "function", "name": "KParts::ReadOnlyPart::isLocalFileTemporary", "url": "classKParts_1_1ReadOnlyPart.html#a577bf2ace32aedddca4d3fc4a43cc7db", "keyword": "isLocalFileTemporary KParts::ReadOnlyPart::isLocalFileTemporary KParts::ReadOnlyPart isLocalFileTemporary KParts::ReadOnlyPart::isLocalFileTemporary KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::localFilePath", "url": "classKParts_1_1ReadOnlyPart.html#ade4d077c20fcc1e4b0ddaf760f010b2a", "keyword": "localFilePath KParts::ReadOnlyPart::localFilePath KParts::ReadOnlyPart localFilePath KParts::ReadOnlyPart::localFilePath KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::openFile", "url": "classKParts_1_1ReadOnlyPart.html#a83657296ba8c8b17592a1a16b7fb8e1a", "keyword": "openFile KParts::ReadOnlyPart::openFile KParts::ReadOnlyPart openFile KParts::ReadOnlyPart::openFile KParts::ReadOnlyPart", "text": "The default implementation is simply return false"}, {"type": "function", "name": "KParts::ReadOnlyPart::setLocalFilePath", "url": "classKParts_1_1ReadOnlyPart.html#a50bbf4b06d031cb046102981c1ff1e27", "keyword": "setLocalFilePath KParts::ReadOnlyPart::setLocalFilePath KParts::ReadOnlyPart setLocalFilePath KParts::ReadOnlyPart::setLocalFilePath KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::setLocalFileTemporary", "url": "classKParts_1_1ReadOnlyPart.html#a84452e9039419eb69ede96ec6e741e21", "keyword": "setLocalFileTemporary KParts::ReadOnlyPart::setLocalFileTemporary KParts::ReadOnlyPart setLocalFileTemporary KParts::ReadOnlyPart::setLocalFileTemporary KParts::ReadOnlyPart", "text": ""}, {"type": "function", "name": "KParts::ReadOnlyPart::setUrl", "url": "classKParts_1_1ReadOnlyPart.html#a0be6bf63d9ddb3ad42d347c274678ada", "keyword": "setUrl KParts::ReadOnlyPart::setUrl KParts::ReadOnlyPart setUrl KParts::ReadOnlyPart::setUrl KParts::ReadOnlyPart", "text": ""}, {"type": "class", "name": "KParts::ReadWritePart", "url": "classKParts_1_1ReadWritePart.html", "keyword": "ReadWritePart", "text": "This class handles network transparency for you Anything that can open a URL allow modifications and save to the same URL or a different one A read-write part can be set to read-only mode using setReadWrite() Part writers Any part inheriting ReadWritePart should check isReadWrite before allowing any action that modifies the part The part probably wants to reimplement setReadWrite disable those actions Don t forget to call the parent setReadWrite"}, {"type": "signal", "name": "KParts::ReadWritePart::sigQueryClose", "url": "classKParts_1_1ReadWritePart.html#adb7caee3c74e13b22dd922f67a68f830", "keyword": "sigQueryClose KParts::ReadWritePart::sigQueryClose KParts::ReadWritePart", "text": ""}, {"type": "slot", "name": "KParts::ReadWritePart::save", "url": "classKParts_1_1ReadWritePart.html#abd2f5a4ce68f32b6f21635b7f97ce63a", "keyword": "save KParts::ReadWritePart::save KParts::ReadWritePart", "text": "You can connect this to the action Calls saveFile() and saveToUrl() no need to reimplement"}, {"type": "slot", "name": "KParts::ReadWritePart::setModified", "url": "classKParts_1_1ReadWritePart.html#af62573db9600db7c877a05f57d81f3e8", "keyword": "setModified KParts::ReadWritePart::setModified KParts::ReadWritePart", "text": "This is a slot for convenience since it simply calls setModified(true) so that you can connect it to a signal like textChanged()"}, {"type": "slot", "name": "KParts::ReadWritePart::waitSaveComplete", "url": "classKParts_1_1ReadWritePart.html#a93827f9da0f3fdcdbb2c53710afe43ae", "keyword": "waitSaveComplete KParts::ReadWritePart::waitSaveComplete KParts::ReadWritePart", "text": ""}, {"type": "function", "name": "KParts::ReadWritePart::ReadWritePart", "url": "classKParts_1_1ReadWritePart.html#a457ff937481a4b2d10c136ae90bae8fc", "keyword": "ReadWritePart KParts::ReadWritePart::ReadWritePart KParts::ReadWritePart", "text": ""}, {"type": "function", "name": "KParts::ReadWritePart::~ReadWritePart", "url": "classKParts_1_1ReadWritePart.html#ad69aa70703adae4f0973a002b3054e47", "keyword": "KParts::ReadWritePart::~ReadWritePart KParts::ReadWritePart", "text": "In KMainWindow::queryClose() for instance they should allow closing only if the return value of closeUrl() was true This allows to cancel"}, {"type": "function", "name": "KParts::ReadWritePart::closeUrl", "url": "classKParts_1_1ReadWritePart.html#ae9d19e3faf1c9a79678653d34e36246b", "keyword": "closeUrl KParts::ReadWritePart::closeUrl KParts::ReadWritePart", "text": "document for instance when switching to another url note that openUrl() calls it automatically in this case If the current URL is not fully loaded yet aborts loading If isModified() queryClose() will be called false on cancel"}, {"type": "function", "name": "KParts::ReadWritePart::closeUrl", "url": "classKParts_1_1ReadWritePart.html#aac29e29d109c5f0a12898d0b746a5a72", "keyword": "closeUrl KParts::ReadWritePart::closeUrl KParts::ReadWritePart", "text": "For example if you call queryClose() from KMainWindow::queryClose() you would not want to prompt again when closing the url Equivalent to promptToSave closeUrl() ReadOnlyPart::closeUrl()"}, {"type": "function", "name": "KParts::ReadWritePart::isModified", "url": "classKParts_1_1ReadWritePart.html#a7f8c59e327e0a2ffbfecb961e00685c1", "keyword": "isModified KParts::ReadWritePart::isModified KParts::ReadWritePart", "text": "true if the document has been modified"}, {"type": "function", "name": "KParts::ReadWritePart::isReadWrite", "url": "classKParts_1_1ReadWritePart.html#ae338c1d8c5a6a0531a0e4414aa2e6f02", "keyword": "isReadWrite KParts::ReadWritePart::isReadWrite KParts::ReadWritePart", "text": "true if the part is in read-write mode"}, {"type": "function", "name": "KParts::ReadWritePart::queryClose", "url": "classKParts_1_1ReadWritePart.html#a51ead3990f91223ed2ebeb8dfa0d60ec", "keyword": "queryClose KParts::ReadWritePart::queryClose KParts::ReadWritePart", "text": "This method is meant to be called from KMainWindow::queryClose() It will also be called from closeUrl() true if closeUrl() can be called without the user losing important data false if the user chooses to cancel"}, {"type": "function", "name": "KParts::ReadWritePart::saveAs", "url": "classKParts_1_1ReadWritePart.html#a58f440b315af918d2c9bb2aa5ff182a4", "keyword": "saveAs KParts::ReadWritePart::saveAs KParts::ReadWritePart", "text": "Calls save() no need to reimplement"}, {"type": "function", "name": "KParts::ReadWritePart::setModified", "url": "classKParts_1_1ReadWritePart.html#a8d6fe0168095b3333dc80884888f02f2", "keyword": "setModified KParts::ReadWritePart::setModified KParts::ReadWritePart", "text": ""}, {"type": "function", "name": "KParts::ReadWritePart::setReadWrite", "url": "classKParts_1_1ReadWritePart.html#a09288e0b4b17a2790e5375763d7bf72c", "keyword": "setReadWrite KParts::ReadWritePart::setReadWrite KParts::ReadWritePart", "text": "readwrite set to true to enable readwrite mode"}, {"type": "function", "name": "KParts::ReadWritePart::saveFile", "url": "classKParts_1_1ReadWritePart.html#a599af24081c3dc1c261c04dce1de4f41", "keyword": "saveFile KParts::ReadWritePart::saveFile KParts::ReadWritePart", "text": "You need to implement it to save to the local file The framework takes care of re-uploading afterwards true on success false on failure On failure the function should inform the user about the problem with an appropriate message box Standard error messages can be constructed using KIO::buildErrorString() in combination with the error codes defined in kio/global.h"}, {"type": "function", "name": "KParts::ReadWritePart::saveToUrl", "url": "classKParts_1_1ReadWritePart.html#a6b8f01446db1864e1e2c7430fdb2522e", "keyword": "saveToUrl KParts::ReadWritePart::saveToUrl KParts::ReadWritePart", "text": "Uploads the file if url is remote This will emit started() and either completed() or canceled() in case you want to provide feedback true on success false on failure"}, {"type": "class", "name": "KParts::ScriptableExtension", "url": "classKParts_1_1ScriptableExtension.html", "keyword": "ScriptableExtension", "text": "See Script Value Types for how values are passed to/from various methods here 4.5"}, {"type": "function", "name": "KParts::ScriptableExtension::childObject", "url": "classKParts_1_1ScriptableExtension.html#a2c00711c6fd9f186204b2e7b2b05d9f3", "keyword": "childObject KParts::ScriptableExtension::childObject KParts::ScriptableExtension", "text": "Convenience method"}, {"type": "function", "name": "KParts::ScriptableExtension::adapterFromLiveConnect", "url": "classKParts_1_1ScriptableExtension.html#abf008da85bad132f4aa0271be83b189e", "keyword": "adapterFromLiveConnect KParts::ScriptableExtension::adapterFromLiveConnect KParts::ScriptableExtension", "text": "The bridge s parent will be the parentObj"}, {"type": "function", "name": "KParts::ScriptableExtension::setHost", "url": "classKParts_1_1ScriptableExtension.html#ac643fa084835c8fc07abd9072c1a079c", "keyword": "setHost KParts::ScriptableExtension::setHost KParts::ScriptableExtension", "text": "It s the responsibility of a parent part to call this method on all of its kids ScriptableExtensions as soon as possible"}, {"type": "function", "name": "KParts::ScriptableExtension::host", "url": "classKParts_1_1ScriptableExtension.html#a44f2c6c0c8eb8401570cc0d4a421c293", "keyword": "host KParts::ScriptableExtension::host KParts::ScriptableExtension", "text": "May be 0 if setHost was not called or not call yet"}, {"type": "function", "name": "KParts::ScriptableExtension::rootObject", "url": "classKParts_1_1ScriptableExtension.html#ae7cda27315d93b72f10ef307b54518da", "keyword": "rootObject KParts::ScriptableExtension::rootObject KParts::ScriptableExtension", "text": "For example for an HTML part it would represent a Window object May be undefined or null"}, {"type": "function", "name": "KParts::ScriptableExtension::enclosingObject", "url": "classKParts_1_1ScriptableExtension.html#a1654d1f14b8f3184c4a2c4e382826aee", "keyword": "enclosingObject KParts::ScriptableExtension::enclosingObject KParts::ScriptableExtension", "text": "For example if the host is an HTML part it would return a DOM node of an object handled by this part May be undefined or null Implemented in terms of objectForKid"}, {"type": "enum", "name": "KParts::ScriptableExtension::ScriptLanguage", "url": "classKParts_1_1ScriptableExtension.html#ae24e9c2e1e132201ddc092b8b069be23", "keyword": "ScriptLanguage KParts::ScriptableExtension::ScriptLanguage KParts::ScriptableExtension", "text": ""}, {"type": "enumvalue", "name": "KParts::ScriptableExtension::EnumLimit", "url": "classKParts_1_1ScriptableExtension.html#ae24e9c2e1e132201ddc092b8b069be23a0609cfd03f0802c4af4ccae88f385f67", "keyword": "EnumLimit KParts::ScriptableExtension::EnumLimit KParts::ScriptableExtension", "text": "also known as JavaScript"}, {"type": "function", "name": "KParts::ScriptableExtension::callAsFunction", "url": "classKParts_1_1ScriptableExtension.html#a41f258c2cccfd31f87b8d60980e5a2aa", "keyword": "callAsFunction KParts::ScriptableExtension::callAsFunction KParts::ScriptableExtension", "text": ""}, {"type": "function", "name": "KParts::ScriptableExtension::callFunctionReference", "url": "classKParts_1_1ScriptableExtension.html#a99084f24f74962637bf45281ed32c0bb", "keyword": "callFunctionReference KParts::ScriptableExtension::callFunctionReference KParts::ScriptableExtension", "text": ""}, {"type": "function", "name": "KParts::ScriptableExtension::callAsConstructor", "url": "classKParts_1_1ScriptableExtension.html#a14991a56d4b905c0448cc1deb8a213a4", "keyword": "callAsConstructor KParts::ScriptableExtension::callAsConstructor KParts::ScriptableExtension", "text": ""}, {"type": "function", "name": "KParts::ScriptableExtension::hasProperty", "url": "classKParts_1_1ScriptableExtension.html#ae64716ad4cefb3777187319d25606b9c", "keyword": "hasProperty KParts::ScriptableExtension::hasProperty KParts::ScriptableExtension", "text": ""}, {"type": "function", "name": "KParts::ScriptableExtension::get", "url": "classKParts_1_1ScriptableExtension.html#ad968f9b9f7534c454e78633af2a10afd", "keyword": "get KParts::ScriptableExtension::get KParts::ScriptableExtension", "text": ""}, {"type": "function", "name": "KParts::ScriptableExtension::put", "url": "classKParts_1_1ScriptableExtension.html#a8f511ed16298fd9be98e6f847183c8eb", "keyword": "put KParts::ScriptableExtension::put KParts::ScriptableExtension", "text": "Returns true on success"}, {"type": "function", "name": "KParts::ScriptableExtension::removeProperty", "url": "classKParts_1_1ScriptableExtension.html#a5090ab0afbbcc803c72dc794f7ca2333", "keyword": "removeProperty KParts::ScriptableExtension::removeProperty KParts::ScriptableExtension", "text": "Returns true on success"}, {"type": "function", "name": "KParts::ScriptableExtension::enumerateProperties", "url": "classKParts_1_1ScriptableExtension.html#af7c4dfc8abfbfd8124b33c008a87be71", "keyword": "enumerateProperties KParts::ScriptableExtension::enumerateProperties KParts::ScriptableExtension", "text": "Returns true on success"}, {"type": "function", "name": "KParts::ScriptableExtension::setException", "url": "classKParts_1_1ScriptableExtension.html#a089d0b759be7b52bd456d0afd60b9c9e", "keyword": "setException KParts::ScriptableExtension::setException KParts::ScriptableExtension", "text": "Returns true on success"}, {"type": "function", "name": "KParts::ScriptableExtension::evaluateScript", "url": "classKParts_1_1ScriptableExtension.html#a956bfc7f44f8da93096b6ee40561604c", "keyword": "evaluateScript KParts::ScriptableExtension::evaluateScript KParts::ScriptableExtension", "text": "The parameter language specifies the language to execute it as Use isScriptLanguageSupported to check for support"}, {"type": "function", "name": "KParts::ScriptableExtension::isScriptLanguageSupported", "url": "classKParts_1_1ScriptableExtension.html#a1ff4db8fe6525a7b855ed126185f544c", "keyword": "isScriptLanguageSupported KParts::ScriptableExtension::isScriptLanguageSupported KParts::ScriptableExtension", "text": ""}, {"type": "function", "name": "KParts::ScriptableExtension::acquire", "url": "classKParts_1_1ScriptableExtension.html#abb87ddfdc7a9088996ae8ac83d1bbcfd", "keyword": "acquire KParts::ScriptableExtension::acquire KParts::ScriptableExtension", "text": ""}, {"type": "function", "name": "KParts::ScriptableExtension::release", "url": "classKParts_1_1ScriptableExtension.html#a00a64a6f3650f510d92ce8dbc21da67f", "keyword": "release KParts::ScriptableExtension::release KParts::ScriptableExtension", "text": ""}, {"type": "function", "name": "KParts::ScriptableExtension::acquireValue", "url": "classKParts_1_1ScriptableExtension.html#aa41c2be19933cfa8470ee0aeaf8879e2", "keyword": "acquireValue KParts::ScriptableExtension::acquireValue KParts::ScriptableExtension", "text": "a copy of the passed in value"}, {"type": "function", "name": "KParts::ScriptableExtension::releaseValue", "url": "classKParts_1_1ScriptableExtension.html#a3cbf441c3bb2ccc3d734031c345e92e8", "keyword": "releaseValue KParts::ScriptableExtension::releaseValue KParts::ScriptableExtension", "text": "a copy of the passed in value"}, {"type": "struct", "name": "KParts::ScriptableExtension::Exception", "url": "structKParts_1_1ScriptableExtension_1_1Exception.html", "keyword": "Exception", "text": "May not be passed in as a parameter only returned"}, {"type": "variable", "name": "KParts::ScriptableExtension::Exception::message", "url": "structKParts_1_1ScriptableExtension_1_1Exception.html#aa077475854a1ee79ac8905a2e07be407", "keyword": "message KParts::ScriptableExtension::Exception::message KParts::ScriptableExtension::Exception", "text": "This should be assumed to be low-level in particular it might not be translated and should only be displayed in low-level debugging tools and the like"}, {"type": "struct", "name": "KParts::ScriptableExtension::FunctionRef", "url": "structKParts_1_1ScriptableExtension_1_1FunctionRef.html", "keyword": "FunctionRef", "text": "Essentially if you have a base.field(something) call the base needs to be passed as the this to the function and these references can be used to resolve that"}, {"type": "struct", "name": "KParts::ScriptableExtension::Null", "url": "structKParts_1_1ScriptableExtension_1_1Null.html", "keyword": "Null", "text": ""}, {"type": "struct", "name": "KParts::ScriptableExtension::Object", "url": "structKParts_1_1ScriptableExtension_1_1Object.html", "keyword": "Object", "text": "Objects are reference-counted with the following protocol 1 Return values from methods rootObject() enclosingObject() and get() are already acquired by the producer so the consumer should release them when done 2 During a call the caller guarantees that all the arguments will be live for the calls duration but the callee must acquire them if it stores it for longer than that acquire acquireValue release releaseValue"}, {"type": "struct", "name": "KParts::ScriptableExtension::Undefined", "url": "structKParts_1_1ScriptableExtension_1_1Undefined.html", "keyword": "Undefined", "text": ""}, {"type": "class", "name": "KParts::SelectorInterface", "url": "classKParts_1_1SelectorInterface.html", "keyword": "SelectorInterface", "text": "Example const QList<SelectorInterface::Element> elements selectorInterface- querySelectorAll alternate"}, {"type": "enum", "name": "KParts::SelectorInterface::QueryMethod", "url": "classKParts_1_1SelectorInterface.html#a90fe11660661a423709a52c91a969dce", "keyword": "QueryMethod KParts::SelectorInterface::QueryMethod KParts::SelectorInterface", "text": ""}, {"type": "enumvalue", "name": "KParts::SelectorInterface::None", "url": "classKParts_1_1SelectorInterface.html#a90fe11660661a423709a52c91a969dcea75dbd3a4d444c3a5f3ec94c2c20c2322", "keyword": "None KParts::SelectorInterface::None KParts::SelectorInterface", "text": "Quering is not possible"}, {"type": "enumvalue", "name": "KParts::SelectorInterface::EntireContent", "url": "classKParts_1_1SelectorInterface.html#a90fe11660661a423709a52c91a969dceac39e4ace6e5f56e828ee81b7d1589d4d", "keyword": "EntireContent KParts::SelectorInterface::EntireContent KParts::SelectorInterface", "text": "Query or can query the entire content"}, {"type": "enumvalue", "name": "KParts::SelectorInterface::SelectedContent", "url": "classKParts_1_1SelectorInterface.html#a90fe11660661a423709a52c91a969dcea98dd4d0cb11e9068d9c017a6c666ce83", "keyword": "SelectedContent KParts::SelectorInterface::SelectedContent KParts::SelectorInterface", "text": "Query or can query only the user selected content if any"}, {"type": "function", "name": "KParts::SelectorInterface::~SelectorInterface", "url": "classKParts_1_1SelectorInterface.html#a01573870d1fdd7143defe395acd359fd", "keyword": "KParts::SelectorInterface::~SelectorInterface KParts::SelectorInterface", "text": ""}, {"type": "function", "name": "KParts::SelectorInterface::querySelector", "url": "classKParts_1_1SelectorInterface.html#a704329531ffbb8abe80c97daaea01b4d", "keyword": "querySelector KParts::SelectorInterface::querySelector KParts::SelectorInterface", "text": "Note that since the returned item is static snapshot i.e not live it will not be updated when the document changes If the quering method specified by method is not supported or cannot be handled then a null element is returned supportedQueryMethods QueryMethod"}, {"type": "function", "name": "KParts::SelectorInterface::querySelectorAll", "url": "classKParts_1_1SelectorInterface.html#afe199d585952b4aeb1717122753616b3", "keyword": "querySelectorAll KParts::SelectorInterface::querySelectorAll KParts::SelectorInterface", "text": "Note that since the returned list is static snapshot i.e not live it will not be updated when the document changes If the quering method specified by method is not supported or cannot be handled then an empty list is returned supportedQueryMethods QueryMethod"}, {"type": "function", "name": "KParts::SelectorInterface::supportedQueryMethods", "url": "classKParts_1_1SelectorInterface.html#a9dacc1505b77025c221a718ee64753c6", "keyword": "supportedQueryMethods KParts::SelectorInterface::supportedQueryMethods KParts::SelectorInterface", "text": "By default this function returns None QueryMethod"}, {"type": "class", "name": "KParts::StatusBarExtension", "url": "classKParts_1_1StatusBarExtension.html", "keyword": "StatusBarExtension", "text": "Every part can use this class to customize the statusbar as long as it is active Add items via addStatusBarItem and remove an item with removeStatusBarItem IMPORTANT do NOT add any items immediately after constructing the extension Give the application time to set the statusbar in the extension if necessary"}, {"type": "function", "name": "KParts::StatusBarExtension::addStatusBarItem", "url": "classKParts_1_1StatusBarExtension.html#aff7f43b3ad6d835b95440fb849aec498", "keyword": "addStatusBarItem KParts::StatusBarExtension::addStatusBarItem KParts::StatusBarExtension", "text": "If you use this method instead of using statusBar() directly this extension will take care of removing the items when the parts GUI is deactivated and will re-add them when it is reactivated The parameters are the same as QStatusBar::addWidget() Note that you can t use KStatusBar methods inserting text items by id but you can create a KStatusBarLabel with a dummy id instead and use it directly in order to get the same look and feel widget the widget to add stretch the stretch factor 0 for a minimum size permanent passed to QStatusBar::addWidget as the bool Note that the item isn t really permanent though it goes away when the part is unactivated This simply controls whether temporary messages hide the widget and whether it s added to the left or to the right side that the widget does not technically become a child of the StatusBarExtension in a QObject sense However it will be deleted when the StatusBarExtension is deleted IMPORTANT do NOT add any items immediately after constructing the extension Give the application time to set the statusbar in the extension if necessary"}, {"type": "function", "name": "KParts::StatusBarExtension::eventFilter", "url": "classKParts_1_1StatusBarExtension.html#a03fbcb219341e685f833874554db01b9", "keyword": "eventFilter KParts::StatusBarExtension::eventFilter KParts::StatusBarExtension", "text": ""}, {"type": "function", "name": "KParts::StatusBarExtension::removeStatusBarItem", "url": "classKParts_1_1StatusBarExtension.html#a7ca2fab9855765fa917b373d7b828922", "keyword": "removeStatusBarItem KParts::StatusBarExtension::removeStatusBarItem KParts::StatusBarExtension", "text": ""}, {"type": "function", "name": "KParts::StatusBarExtension::setStatusBar", "url": "classKParts_1_1StatusBarExtension.html#a5a166bb2d7421164540040f07ae5b2bd", "keyword": "setStatusBar KParts::StatusBarExtension::setStatusBar KParts::StatusBarExtension", "text": "If it doesn t do this the statusbar used will be the one of the KMainWindow in which the part is embedded Konqueror uses this to assign a view-statusbar to the part The part should never call this method!"}, {"type": "function", "name": "KParts::StatusBarExtension::statusBar", "url": "classKParts_1_1StatusBarExtension.html#a000309678c1c95baf3d433498b4b67d3", "keyword": "statusBar KParts::StatusBarExtension::statusBar KParts::StatusBarExtension", "text": "the statusbar of the KMainWindow in which this part is currently embedded WARNING this could return 0L"}, {"type": "function", "name": "KParts::StatusBarExtension::childObject", "url": "classKParts_1_1StatusBarExtension.html#ab3b379fbe78a969493bf464aa5fd16c5", "keyword": "childObject KParts::StatusBarExtension::childObject KParts::StatusBarExtension", "text": "Convenience method"}, {"type": "class", "name": "KParts::TextExtension", "url": "classKParts_1_1TextExtension.html", "keyword": "TextExtension", "text": "For instance the text-to-speech plugin uses this to speak the whole text from the part or the selected text The translation plugin uses it for translating the selected text and so on 4.6"}, {"type": "signal", "name": "KParts::TextExtension::selectionChanged", "url": "classKParts_1_1TextExtension.html#a4d5e1cb28d1faa2dbccef3bb41c058f9", "keyword": "selectionChanged KParts::TextExtension::selectionChanged KParts::TextExtension", "text": ""}, {"type": "function", "name": "KParts::TextExtension::completeText", "url": "classKParts_1_1TextExtension.html#a94bfd640a5ec9d348f63686882f554fe", "keyword": "completeText KParts::TextExtension::completeText KParts::TextExtension", "text": "If the format is not supported the part must return an empty string"}, {"type": "function", "name": "KParts::TextExtension::currentPage", "url": "classKParts_1_1TextExtension.html#acfa732fce2f56ec7c28e6ea2397d6684", "keyword": "currentPage KParts::TextExtension::currentPage KParts::TextExtension", "text": "Otherwise returns 0"}, {"type": "function", "name": "KParts::TextExtension::findText", "url": "classKParts_1_1TextExtension.html#aef108ddeb8d99dab02ddba87dec0526e", "keyword": "findText KParts::TextExtension::findText KParts::TextExtension", "text": "If any text matches string then it will be selected/highlighted To find the next matching text simply call this function again with the same search text until it returns false To clear a selection just pass an empty string Note that parts that implement this extension might not support all the options available in KFind::SearchOptions"}, {"type": "function", "name": "KParts::TextExtension::hasSelection", "url": "classKParts_1_1TextExtension.html#a36404bf6dd994e509bec36ea4b5ad8b7", "keyword": "hasSelection KParts::TextExtension::hasSelection KParts::TextExtension", "text": ""}, {"type": "function", "name": "KParts::TextExtension::pageCount", "url": "classKParts_1_1TextExtension.html#abdbd61e124bb78bcc37261dbd83d3c5e", "keyword": "pageCount KParts::TextExtension::pageCount KParts::TextExtension", "text": "Otherwise returns 0"}, {"type": "function", "name": "KParts::TextExtension::pageText", "url": "classKParts_1_1TextExtension.html#a3e5bb85cf4bfdcf410f64e19ed350785", "keyword": "pageText KParts::TextExtension::pageText KParts::TextExtension", "text": ""}, {"type": "function", "name": "KParts::TextExtension::selectedText", "url": "classKParts_1_1TextExtension.html#a5bf13fab6c672a9461151ff965937df2", "keyword": "selectedText KParts::TextExtension::selectedText KParts::TextExtension", "text": "If the format is not supported the part must return an empty string"}, {"type": "function", "name": "KParts::TextExtension::childObject", "url": "classKParts_1_1TextExtension.html#aea72f87a190bd3cb81b51fa0119aa958", "keyword": "childObject KParts::TextExtension::childObject KParts::TextExtension", "text": ""}, {"type": "class", "name": "KParts::WindowArgs", "url": "classKParts_1_1WindowArgs.html", "keyword": "WindowArgs", "text": "The primary reason for this is the javascript window.open function"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KParts Plugin framework for user interface components Introduction This library implements the framework for KDE parts which are elaborate widgets with a user-interface defined in terms of actions menu items toolbar icons Usage If you are using CMake you need to have or similar in your CMakeLists.txt file and you need to link to KF5::Parts The main class is KParts::Part This or one of its subclasses is what authors of parts implement and how users of parts interact with them Applications wishing to embed a part need to inherit their main window from KParts::MainWindow and provide a so-called shell GUI which provides a basic skeleton GUI with part-independent functionality/actions Some KParts applications won t be specific to a given part but expect to be able to embed for instance all types of viewers out there For this the basic functionality of any viewer has been implemented in KParts::ReadOnlyPart which viewer-like parts should inherit from The same applies to KParts::ReadWritePart which is for editor-like parts You can add actions to an existing KParts app from defining the code for those actions in a shared library This mechanism is obviously called plugins and implemented by KParts::Plugin For a complete and very simple example of how to use KParts to display any kind of file i.e making a generic viewer see the documentation for KParts::ComponentFactory::createPartInstanceFromQuery"}]}