{"name": "kdesignerplugin-5.26.0", "fancyname": "KDesignerPlugin", "docfields": [{"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KDesignerPlugin Integrating KDE frameworks widgets with Qt Designer Introduction This framework provides plugins for Qt Designer that allow it to display the widgets provided by various KDE frameworks as well as a utility kgendesignerplugin that can be used to generate other such plugins from ini-style description files kgendesignerplugin To use kgendesignerplugin in your own project add to your CMakeLists.txt file and use the kf5designerplugin_add_widget_files macro For example you might do foo.widgets is an ini-style configuration file see the KConfig framework for format details describing the widgets exported by the plugin It must include a Global section providing a PluginName entry the value of which must be a valid C++ class name For example This section can also list additional headers that should be included for the plugin code to work for example preview classes see ImplClass documentation below with the Includes entry It can also specify a default value for the Group option see below with the DefaultGroup entry In addition it should have a section for each widget you wish to include in the plugin For example if you have a class FooView that inherits QWidget whose header file is fooview.h you could have the section The implementation of every method of QDesignerCustomWidgetInterface can be controlled using options similar to the Group entry in the above example which causes the group() method to return kgendesignerplugin attempts to pick sensible defaults for these values IncludeFile would default to if it were omitted from the example Group defaults to the value of DefaultGroup in the Global section which itself defaults to ToolTip defaults to in the example WhatsThis defaults to in the example IsContainer defaults to false CreateWidget defaults to return new ImplClass ConstructorArgs where ImplClass and ConstructorArgs are entries see below DomXml defaults to the value of QDesignerCustomWidgetInterface::domXml() Initialize the default simply sets the mInitialized variable to true if it is not already Note that no Icon entry is given above instead you should provide an icon name with IconName this defaults to in the above example You should include this image in a resource file If your class requires arguments other than the parent widget or you need to use a different class for previewing the widget in Qt Designer FooViewPreview in the above example rather than setting CreateWidget you can use some combination of ImplClass and ConstructorArgs ImplClass would default to FooView if it were omitted from the example ConstructorArgs defaults to parent note that the parentheses are required"}]}