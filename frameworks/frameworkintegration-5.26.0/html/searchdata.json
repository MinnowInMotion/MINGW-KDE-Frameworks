{"name": "frameworkintegration-5.26.0", "fancyname": "FrameworkIntegration", "docfields": [{"type": "class", "name": "KStyle", "url": "classKStyle.html", "keyword": "KStyle", "text": "Derive your Qt style from KStyle to automatically inherit various settings from the KDE Plasma Workspace providing a consistent user experience For example this will ensure a consistent single-click or double-click activation setting and the use of standard themed icons Maksim Orlovich maksim kde.org Sandro Giessl giessl kde.org \u00c0lex Fiestas afiestas kde.org"}, {"type": "function", "name": "KStyle::standardPalette", "url": "classKStyle.html#a6b05ac2719cbeb4082980d3ed538d62f", "keyword": "standardPalette KStyle::standardPalette KStyle", "text": ""}, {"type": "function", "name": "KStyle::customStyleHint", "url": "classKStyle.html#a2b275c9e532b2959e8e520d9f220ee49", "keyword": "customStyleHint KStyle::customStyleHint KStyle", "text": "calling this while using cleanlooks won t segfault or so but just return 0 Returns a unique id for an element string e.g For simplicity only StyleHints ControlElements and their SubElements are supported If you don t need extended SubElement functionality just drop it element The style element represented as string Naming convention where the 2-char-element-type is of SH CE SE widgets in kdelibs don t have to pass the appname examples widget Your widget passing this is mandatory passing NULL will just return 0 a unique id for the element string or 0 if the element is not supported by the widgets current style Important notes 1 If your string lacks the matching or token the element request will be ignored return is 0 2 Try to avoid custom elements and use default ones if possible to get better style support and keep UI coherency 3 If you cache this value good idea this requires a map lookup don t forget to catch style changes in QWidget::changeEvent()"}, {"type": "function", "name": "KStyle::newStyleHint", "url": "classKStyle.html#a73c784ba736d9907c6558c6a54fd903f", "keyword": "newStyleHint KStyle::newStyleHint KStyle", "text": "in your constructor NOTICE in order to have this work your style must provide an classinfo i.e class MyStyle public KStyle Q_OBJECT Q_CLASSINFO public element The style element represented as string Suggested naming convention appname 2-char-element-type _element where the 2-char-element-type is of SH CE SE widgets in kdelibs don t have to pass the appname examples Important notes 1 If your string lacks the matching or token the element request will be ignored return is 0 2 To keep UI coherency don t support any nonsense in your style but convince app developers to use standard elements if available"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "Framework Integration Integration of Qt application with KDE workspaces Introduction Framework Integration is a set of plugins responsible for better integration of Qt applications when running on a KDE Plasma workspace Applications do not need to link to this directly Components KF5Style The library KF5Style provides integration with KDE Plasma Workspace settings for Qt styles Derive your Qt style from KStyle to automatically inherit various settings from the KDE Plasma Workspace providing a consistent user experience For example this will ensure a consistent single-click or double-click activation setting and the use of standard themed icons infopage Common data files used in info page content in various applications FrameworkIntegrationPlugin FrameworkIntegrationPlugin provides extra features to other KDE Frameworks to integrate with KDE Plasma It currently provides an addon to KMessageBox which stores settings for asking users the same question again KDEPlatformTheme The plugin KDEPlatformTheme provides KDE integration for QPlatformThemePlugin"}]}