{"name": "kdbusaddons-5.26.0", "fancyname": "KDBusAddons", "docfields": [{"type": "class", "name": "KDBusInterProcessLock", "url": "classKDBusInterProcessLock.html", "keyword": "KDBusInterProcessLock", "text": "This class can be used to serialize access to a resource between multiple processes Instead of using lock files which could become stale easily the registration of dummy dbus services is used to allow only one process at a time to access the resource Example Tobias Koenig"}, {"type": "signal", "name": "KDBusInterProcessLock::lockGranted", "url": "classKDBusInterProcessLock.html#ac62167a063c9b40a2b3f8bf98da5145f", "keyword": "lockGranted KDBusInterProcessLock::lockGranted KDBusInterProcessLock", "text": "lock The lock that has been granted"}, {"type": "function", "name": "KDBusInterProcessLock::KDBusInterProcessLock", "url": "classKDBusInterProcessLock.html#a9322fbb826e6626a5bcb6dfab9d9a8b8", "keyword": "KDBusInterProcessLock KDBusInterProcessLock::KDBusInterProcessLock KDBusInterProcessLock", "text": "resource The identifier of the resource that shall be locked This identifier can be any string however it must be unique for the resource and every client that wants to access the resource must know it"}, {"type": "function", "name": "KDBusInterProcessLock::~KDBusInterProcessLock", "url": "classKDBusInterProcessLock.html#a519e6b63bf6062c95e00506d34c6bb06", "keyword": "KDBusInterProcessLock::~KDBusInterProcessLock KDBusInterProcessLock", "text": ""}, {"type": "function", "name": "KDBusInterProcessLock::lock", "url": "classKDBusInterProcessLock.html#a41480ff8fbb36988a6df6217815519db", "keyword": "lock KDBusInterProcessLock::lock KDBusInterProcessLock", "text": "The lock is granted as soon as the lockGranted() signal is emitted"}, {"type": "function", "name": "KDBusInterProcessLock::resource", "url": "classKDBusInterProcessLock.html#a5536595e1f285a0c88a61436071bb91d", "keyword": "resource KDBusInterProcessLock::resource KDBusInterProcessLock", "text": ""}, {"type": "function", "name": "KDBusInterProcessLock::unlock", "url": "classKDBusInterProcessLock.html#acf278cddaba11314520bad8ebc6c1ea9", "keyword": "unlock KDBusInterProcessLock::unlock KDBusInterProcessLock", "text": "This method should be called as soon as the critical area is left in your code path and the lock is no longer needed"}, {"type": "function", "name": "KDBusInterProcessLock::waitForLockGranted", "url": "classKDBusInterProcessLock.html#a34c2cc245e2fdfb0b37dc2e2dc983106", "keyword": "waitForLockGranted KDBusInterProcessLock::waitForLockGranted KDBusInterProcessLock", "text": ""}, {"type": "class", "name": "KDBusService", "url": "classKDBusService.html", "keyword": "KDBusService", "text": "This registers the application at a predictable location on D-Bus registers the QCoreApplication or subclass object at and assists in implementing the application side of D-Bus activation from the Desktop Entry Specification An application can either work in Multiple mode or Unique mode In Multiple mode the application can be launched many times The service name in the D-Bus registration will contain the PID to distinguish the various instances for example org.kde.konqueror In Unique mode only one instance of this application can ever run The first instance of the application registers with D-Bus without the PID and any attempt to run the application again will cause the activateRequested() signal to be emitted in the already-running instance the duplicate instance will then quit The exit value can be set by the already running instance with setExitValue() the default value is 0 Unique-mode applications should usually delay parsing command-line arguments until after creating a KDBusService object that way they know they are the original instance of the application Applications that set the D-Bus activation entries in their desktop files should use Unique mode and connect to the signals emitted by this class Note that the D-Bus interface is exported for Multiple-mode applications as well so it also makes sense for such applications to connect to the signals emitted by this class In order to avoid a race the application should export its objects to D-Bus before allowing the event loop to run for example by calling QCoreApplication::exec() Otherwise the application will appear on the bus before its objects are accessible via D-Bus which could be a problem for other applications or scripts which start the application in order to talk D-Bus to it immediately Example usage 5.0"}, {"type": "enum", "name": "KDBusService::StartupOption", "url": "classKDBusService.html#ae926a530a0b87b6a01f30f967cb4d1d4", "keyword": "StartupOption KDBusService::StartupOption KDBusService", "text": ""}, {"type": "enumvalue", "name": "KDBusService::Unique", "url": "classKDBusService.html#ae926a530a0b87b6a01f30f967cb4d1d4a904b4e552e06d76c5719da1f888da048", "keyword": "Unique KDBusService::Unique KDBusService", "text": "Indicates that only one instance of this application should ever exist Cannot be combined with Multiple"}, {"type": "enumvalue", "name": "KDBusService::Multiple", "url": "classKDBusService.html#ae926a530a0b87b6a01f30f967cb4d1d4a5ddca7a02a6a3571066844bedd678823", "keyword": "Multiple KDBusService::Multiple KDBusService", "text": "Indicates that multiple instances of the application may exist Cannot be combined with Unique This is the default"}, {"type": "enumvalue", "name": "KDBusService::NoExitOnFailure", "url": "classKDBusService.html#ae926a530a0b87b6a01f30f967cb4d1d4a3061fcf4e67a77975c843c8316d404f9", "keyword": "NoExitOnFailure KDBusService::NoExitOnFailure KDBusService", "text": "Indicates that the application should not exit if it failed to register with D-Bus If not set KDBusService will quit the application if it failed to register the service with D-Bus or a Unique instance can not be activated A Multiple instance will exit with error code 1 The exit value of a Unique instance can be set from the running instance with setExitValue() the default value is 0"}, {"type": "signal", "name": "KDBusService::activateActionRequested", "url": "classKDBusService.html#ac4485cbdad1d8cc9dba7989c038bef3b", "keyword": "activateActionRequested KDBusService::activateActionRequested KDBusService", "text": "See the desktop entry specification for more information"}, {"type": "signal", "name": "KDBusService::activateRequested", "url": "classKDBusService.html#af0ad38f597aedaf22a30045d0423ed0e", "keyword": "activateRequested KDBusService::activateRequested KDBusService", "text": "If this is a Unique application when KDBusService is constructed in subsequent instances of the application ie when the executable is run when an instance is already running it will cause this signal to be emitted in the already-running instance with the arguments passed to the duplicate instance and the duplicate instance will then exit If this application s desktop file indicates that it supports D-Bus activation DBusActivatable true a command launcher may also call the Activate() D-Bus method to trigger this signal In this case args will be empty In single-window applications the connected signal should typically raise the window arguments The arguments the executable was called with See QCoreApplication::arguments() A typical implementation of the slot would be setExitValue()"}, {"type": "signal", "name": "KDBusService::openRequested", "url": "classKDBusService.html#a3e5216561a31a2ee74b8c62f5323ba03", "keyword": "openRequested KDBusService::openRequested KDBusService", "text": "uris The URLs of the files to open"}, {"type": "slot", "name": "KDBusService::unregister", "url": "classKDBusService.html#a4962f833b90cadd1e0b70631a5ea5aec", "keyword": "unregister KDBusService::unregister KDBusService", "text": "This is called automatically when the application is about to quit to make sure it doesn t keep receiving calls to its D-Bus interface while it is doing final cleanups"}, {"type": "function", "name": "KDBusService::KDBusService", "url": "classKDBusService.html#a2b430cfbe1e706d963afc2774c52306d", "keyword": "KDBusService KDBusService::KDBusService KDBusService", "text": "The DBus service name is the reversed organization domain followed by the application name If options includes the Multiple flag the application PID will be appended For example will make KDBusService register as org.kde.kuiserver in Unique mode and org.kde.kuiserver if the process has PID 1234 in Multiple mode"}, {"type": "function", "name": "KDBusService::~KDBusService", "url": "classKDBusService.html#a8cc46efc19c97a43d2721a93d354ca5a", "keyword": "KDBusService::~KDBusService KDBusService", "text": "Deleting this object before unregister() is called either manually or because QCoreApplication::aboutToQuit() was emitted could confuse clients who will see the service on the bus but will be unable to use the activation methods"}, {"type": "function", "name": "KDBusService::errorMessage", "url": "classKDBusService.html#a5c502481ec803aac33f90c11ffe1c550", "keyword": "errorMessage KDBusService::errorMessage KDBusService", "text": "Note that this is only useful when specifying the option NoExitOnFailure Otherwise the process has quit by the time you can get a chance to call this"}, {"type": "function", "name": "KDBusService::isRegistered", "url": "classKDBusService.html#ab2dfc71e1297d34244cdb8440e9060f4", "keyword": "isRegistered KDBusService::isRegistered KDBusService", "text": "Note that this is only useful when specifying the option NoExitOnFailure Otherwise the simple fact that this process is still running indicates that the registration succeeded"}, {"type": "function", "name": "KDBusService::setExitValue", "url": "classKDBusService.html#aeb640e48b69d89c3ea5e776e3610f024", "keyword": "setExitValue KDBusService::setExitValue KDBusService", "text": "If this is a Unique application a slot connected to activateRequested() can use this to specify a non-zero exit value for the duplicate instance This would typically be done if invalid command-line arguments are passed Note that this will only work if the signal-slot connection type is Qt::DirectConnection value The exit value for the duplicate instance"}, {"type": "class", "name": "KDEDModule", "url": "classKDEDModule.html", "keyword": "KDEDModule", "text": "KDED modules are realized as shared libraries that are loaded on-demand into kded at runtime See kdelibs/kded/HOWTO for documentation about writing kded modules Waldo Bastian"}, {"type": "signal", "name": "KDEDModule::moduleDeleted", "url": "classKDEDModule.html#aefe4a320992f6ffff6e24a699cc095cd", "keyword": "moduleDeleted KDEDModule::moduleDeleted KDEDModule", "text": ""}, {"type": "signal", "name": "KDEDModule::moduleRegistered", "url": "classKDEDModule.html#ae32a3f939aaf2e09b5fca63b00f6c502", "keyword": "moduleRegistered KDEDModule::moduleRegistered KDEDModule", "text": "4.2"}, {"type": "signal", "name": "KDEDModule::windowRegistered", "url": "classKDEDModule.html#aa7b274634821ae4e49e24e3171d2b184", "keyword": "windowRegistered KDEDModule::windowRegistered KDEDModule", "text": ""}, {"type": "signal", "name": "KDEDModule::windowUnregistered", "url": "classKDEDModule.html#a9499ce79524bc1e424726aa7232821b3", "keyword": "windowUnregistered KDEDModule::windowUnregistered KDEDModule", "text": ""}, {"type": "function", "name": "KDEDModule::KDEDModule", "url": "classKDEDModule.html#a1014a3d162c420e2bd464ffbf5043a53", "keyword": "KDEDModule KDEDModule::KDEDModule KDEDModule", "text": ""}, {"type": "function", "name": "KDEDModule::setModuleName", "url": "classKDEDModule.html#a8b53a3f52fa10b30a968aafdf24cd8d4", "keyword": "setModuleName KDEDModule::setModuleName KDEDModule", "text": "For modules loaded as plugins by a daemon this is called automatically by the daemon after loading the module Module authors should NOT call this"}, {"type": "function", "name": "KDEDModule::moduleForMessage", "url": "classKDEDModule.html#a5d7436e21e7f429d274ee55f3f715c67", "keyword": "moduleForMessage KDEDModule::moduleForMessage KDEDModule", "text": "Useful for autoloading modules in kded and similar daemons 5.7"}, {"type": "namespace", "name": "KDEInitInterface", "url": "namespaceKDEInitInterface.html", "keyword": "KDEInitInterface", "text": "A function to ensure kdeinit and klauncher are running This is necessary before making D-Bus calls to org.kde.klauncher5 5.0"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KDBusAddons Convenience classes for DBus Introduction KDBusAddons provides convenience classes on top of QtDBus as well as an API to create KDED modules"}]}