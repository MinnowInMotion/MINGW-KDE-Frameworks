{"name": "kauth-5.26.0", "fancyname": "KAuth", "docfields": [{"type": "namespace", "name": "KAuth", "url": "namespaceKAuth.html", "keyword": "KAuth", "text": "The KDE Authorization API allows developers to write desktop applications that run high-privileged tasks in an easy secure and cross-platform way Previously if an application had to do administrative tasks it had to be run as root using mechanisms such as sudo or graphical equivalents or by setting the executable s setuid bit This approach has some drawbacks For example the whole application code including GUI handling and network communication had to be done as root More code that runs as root means more possible security holes The solution is the caller/helper pattern With this pattern the privileged code is isolated in a small helper tool that runs as root This tool includes only the few lines of code that actually need to be run with privileges not the whole application logic All the other parts of the application are run as a normal user and the helper tool is called when needed using a secure mechanism that ensures that the user is authorized to do so This pattern is not very easy to implement because the developer has to deal with a lot of details about how to authorize the user how to call the helper with the right privileges how to exchange data with the helper etc This is where the new KDE Authorization API becomes useful Thanks to this new library every developer can implement the caller/helper pattern to write application that require high privileges with a few lines of code in an easy secure and cross-platform way Not only the library can also be used to lock down some actions in your application without using a helper but just checking for authorization and verifying if the user is allowed to perform it The KDE Authorization library uses different backends depending on the system where it s built As far as the user authorization is concerned it currently uses PolicyKit on linux and Authorization Services on Mac OSX and a Windows backend will eventually be written too At the communication layer the library uses D-Bus on every supported platform There are a few concepts to understand when using the library Much of those are carried from underlying APIs such as PolicyKit so if you know something about them there shouldn t be problems An action is a single task that needs to be done by the application You refer to an action using an action identifier which is a string in reverse domain name syntax to avoid duplicates For example if the date/time control center module needs to change the date it would need an action like If your application has to perform more than one privileged task you should configure more than one action This allows system administrators to fine tune the policies that allow users to perform your actions The authorization is the process that is executed to decide if a user can perform an action or not In order to execute the helper as root the user has to be authorized For example on linux che policykit backend will look at the policykit policy database to see what requirements the user has to meet in order to execute the action you requested The policy set for that action could allow or deny that user or could say the user has to authenticate in order to gain the authorization The authentication is the process that allows the system to know that the person is in front of the console is who he says to be If an action can be allowed or not depending on the user s identity it has to be proved by entering a password or any other identification data the system requires A typical session with the authorization API is like this The user want to perform some privileged task The application asks the system if the user is authorized The system asks the user to authenticate if needed and reply the application The application uses some system-provided mechanism to execute the helper s code as the root user Previously you had to set the setuid bit to do this but we have something cool called that doesn t require the setuid bit and is much more flexible The helper code immediately after starting checks if the caller is authorized to do what it asks If not the helper immediately exits! If the caller is authorized the helper executes the task and exits The application receives data back from the helper All these steps are managed by the library Following sections will focus on how to write the helper to implement your actions and how to call the helper from the application The first thing you need to do before writing anything is to decide what actions you need to implement Every action needs to be identified by a string in the reverse domain name syntax This helps to avoid duplicates An example of action id is or Action names can only contain lowercase letters and dots not as the first or last char You also need an identifier for your helper An application using the KDE auth api can implement and use more than one helper implementing different actions An helper is uniquely identified in the system context with a string It again is in reverse domain name syntax to avoid duplicates A common approach is to call the helper like the common prefix of your action names For example the Date/Time kcm module could use a helper called to perform actions like and This naming convention simplifies the implementation of the helper From the code point of view the helper is implemented as a QObject subclass Every action is implemented by a public slot In the example/ directory in the source code tree you find a complete example Let s look at that The helper.h file declares the class that implements the helper It looks like The slot names are the last part of the action name without the helper s ID if it s a prefix with all the dots replaced by underscores In this case the helper ID is so those three slots implement the actions and The helper ID doesn t have to appear at the beginning of the action name but it s good practice If you want to extend MyHelper to implement also a different action like since the helper ID doesn t match you ll have to implement a slot called org_kde_datetime_changetime() The slot s signature is fixed the return type is ActionReply a class that allows you to return results error codes and custom data to the application when your action has finished to run Please note that due to QMetaObject being picky about namespaces you NEED to declare the return type as ActionReply and not KAuth::ActionReply So the using declaration is compulsory The QVariantMap object that comes as argument contains custom data coming from the application Let s look at the read action implementation Its purpose is to read files First the code creates a default reply object The default constructor creates a reply that reports success Then it gets the filename parameter from the argument QVariantMap that has previously been set by the application before calling the helper If it fails to open the file it creates an ActionReply object that notifies that some error has happened in the helper then set the error code to that returned by QFile and returns If there is no error it reads the file The contents are put into the reply.data() object which is another QVariantMap It will be sent back to the application with the reply Because this class will be compiled into a standalone executable we need a main() function and some code to initialize everything you don t have to write it Instead you use the KAUTH_HELPER_MAIN() macro that will take care of everything It s used like this The first parameter is the string containing the helper identifier Please note that you need to use this same string in the application s code to tell the library which helper to call so please stay away from typos because we don t have any way to detect them The second parameter is the name of the helper s class Your helper if complex can be composed of a lot of source files but the important thing is to include this macro in one at least one of them To build the helper KDE macros provide a function named kauth_install_helper_files() Use it in your cmake file like this The first argument is the cmake target name for the helper executable which you have to build and install separately Make sure to INSTALL THE HELPER IN KAUTH_HELPER_INSTALL_DIR otherwise kauth_install_helper_files will not work The second argument is the helper id Please be sure to don t misspell it and to not quote it The user parameter is the user that the helper has to be run as It usually is root but some actions could require less strict permissions so you should use the right user where possible for example the user apache if you have to mess with apache settings Note that the target created by this macro already links to libkauth and QtCore To be able to authorize the actions they have to be added to the policy database To do this in a cross-platform way we provide a cmake macro It looks like The action definition file describes which actions are implemented by your code and which default security options they should have It is a common text file in ini format with one section for each action and some parameters The definition for the read action is The name parameter is a text describing the action for who reads the file The description parameter is the message shown to the user in the authentication dialog It should be a finite phrase The policy attribute specify the default rule that the user must satisfy to be authorized Possible values are yes the action should be always allowed no the action should be always denied auth_self the user should authenticate as itself auth_admin the user should authenticate as an administrator user The persistence attribute is optional It says how long an authorization should be retained for that action The values could be session the authorization persists until the user logs-out always the authorization will persist indefinitely Once the helper is ready we need to call it from the main application In the example s mainwindow.cpp you can see how this is done To create a reference to an action an object of type Action has to be created Every Action object refers to an action by its action id Two objects with the same action id will act on the same action With an Action object you can authorize and execute the action To execute an action you have a couple of choices A synchronous call using the Action::execute() method will start the helper execute the action and return the reply An asynchronous call by setting Action::setExecutesAsync(true) and calling Action::execute() will start the helper and return immediately The asynchronous call is the most flexible alternative but you need a way to obtain the reply This is done by connecting to a signal but the Action class is not a QObject subclass Instead you connect to signals exposed by the ActionWatcher class For every action id you use there is one ActionWatcher object You can retrieve it using the Action::watcher() method If you execute an action using Action::executeAsync() you can connect to the actionPerformed(ActionReply) signal to be notified when the action has been completed or failed As a parameter you ll get a reply object containing all the data you need As a convenience you can also pass an object and a slot to the executeAsync() method to directly connect them to the signal if you don t want to mess with watchers The piece of code that calls the action of the previous example is located in example/mainwindow.cpp in the on_readAction_triggered() slot It looks like this First of all it creates the action object specifying the action id Then it loads the filename we want to read a forbidden file into the arguments() QVariantMap which will be directly passed to the helper in the read() slot s parameter This example code uses a synchronous call to execute the action and retrieve the reply If the reply succeeded the reply data is retrieved from the returned QVariantMap object Please note that although the execute() method will return only when the action is completed the GUI will remain responsive because an internal event loop is entered This means you should be prepared to receive other events in the meanwhile Also notice that you have to explicitly set the helper ID to the action this is done for added safety to prevent the caller from accidentally invoking a helper and also because KAuth actions may be used without a helper attached the default In this case action.execute() will return ActionSuccess if the authentication went well This is quite useful if you want your user to authenticate before doing something which however needs no privileged permissions implementation-wise For a more advanced example we look at the action in the example helper This is an action that takes a long time to execute so we need some features The helper needs to regularly send data to the application to inform about the execution status The application needs to be able to stop the action execution if the user stops it or close the application The example code follows In this example the action is only waiting a time using a loop but we can see some interesting line The progress status is sent to the application using the HelperSupport::progressStep() method When this method is called the ActionWatcher associated with this action will emit the progressStep() signal reporting back the data to the application There are two overloads of these methods and corresponding signals The one used here takes an integer Its meaning is application dependent so you can use it as a sort of percentage The other overload takes a QVariantMap object that is directly passed to the app In this way you can report to the application all the custom data you want In this example code the loop exits when the HelperSupport::isStopped() returns true This happens when the application calls the stop() method on the correponding action object The stop() method this way asks the helper to stop the action execution It s up to the helper to obbey to this request and if it does so it should return from the slot not exit The code that calls the action in the application connects a slot to the actionPerformed() signal and then call executeAsync() The progressStep() signal is directly connected to a QProgressBar and the Stop button in the UI is connected to a slot that calls the Action::stop() method Please pay attention that when you call an action the helper will be busy executing that action Therefore you can t call two execute() methods in sequence like that If you do you ll get a HelperBusy reply from the second action A solution would be to launch the second action from the slot connected to the first s actionPerformed signal but this would be very ugly Read further to know how to solve this problem To allow to easily execute several actions in sequence you can execute them in a group This means using the Action::executeActions() static method which takes a list of actions and asks the helper to execute them with a single request The helper will execute the actions in the specified order All the signals will be emitted from the watchers associated with each action Sometimes the application needs to know when a particular action has started to execute For this purpose you can connect to the actionStarted() signal It is emitted immediately before the helper s slot is called This isn t very useful if you call execute() but if you use executeActions() it lets you know when individual actions in the group are started It doesn t happen very frequently that you code something that doesn t require some debugging and you ll need some tool even a basic one to debug your helper code as well For this reason the KDE Authorization library provides a message handler for the Qt debugging system This means that every call to qDebug() co will be reported to the application and printed using the same qt debugging system with the same debug level If in the helper code you write something like You ll see something like this in the application s output Remember that the debug level is preserved so if you use qFatal() you won t only abort the helper which isn t suggested anyway but also the application"}, {"type": "class", "name": "KAuth::Action", "url": "classKAuth_1_1Action.html", "keyword": "Action", "text": "This is the main class of the kauth API It provides the interface to manipulate actions Every action is identified by its name Every instance of the Action class with the same name refers to the same action Once you have an action object you can tell the helper to execute it asking the user to authenticate if needed with the execute() method The simplest thing to do is to execute a single action synchronously blocking for the reply by callin exec() on the job object returned by execute() For asynchronous calls use KAuth::ExecuteJob::start() instead It sends the request to the helper and returns immediately Before doing so you should however connect to at least the KJob::result(KJob *) signal to receive a slot call once the action is done executing To use the execute() method you have to set the default helper s ID using the setHelperID() static method Alternatively you can specify the helperID using the overloaded version of the methods that takes it as a parameter Each action object contains a QVariantMap object that is passed directly to the helper when the action is executed You can access this map using the arguments() method You can insert into it any kind of custom data you need to pass to the helper 4.4"}, {"type": "enum", "name": "KAuth::Action::AuthStatus", "url": "classKAuth_1_1Action.html#ae270c3cbaed8810c54f59d6e41122cb2", "keyword": "AuthStatus KAuth::Action::AuthStatus KAuth::Action", "text": ""}, {"type": "enumvalue", "name": "KAuth::Action::DeniedStatus", "url": "classKAuth_1_1Action.html#ae270c3cbaed8810c54f59d6e41122cb2a41be030981b0874a847e0aeeb660f1d2", "keyword": "DeniedStatus KAuth::Action::DeniedStatus KAuth::Action", "text": "The authorization has been denied by the authorization backend"}, {"type": "enumvalue", "name": "KAuth::Action::ErrorStatus", "url": "classKAuth_1_1Action.html#ae270c3cbaed8810c54f59d6e41122cb2ac581c16559bc3ac2833bb24c509f9b47", "keyword": "ErrorStatus KAuth::Action::ErrorStatus KAuth::Action", "text": "An error occurred"}, {"type": "enumvalue", "name": "KAuth::Action::InvalidStatus", "url": "classKAuth_1_1Action.html#ae270c3cbaed8810c54f59d6e41122cb2a779a61e322d6ca2fa7b782f777897e48", "keyword": "InvalidStatus KAuth::Action::InvalidStatus KAuth::Action", "text": "An invalid action cannot be authorized"}, {"type": "enumvalue", "name": "KAuth::Action::AuthorizedStatus", "url": "classKAuth_1_1Action.html#ae270c3cbaed8810c54f59d6e41122cb2adb4f14e995c81bf14d431de6aae04352", "keyword": "AuthorizedStatus KAuth::Action::AuthorizedStatus KAuth::Action", "text": "The authorization has been granted by the authorization backend"}, {"type": "enumvalue", "name": "KAuth::Action::AuthRequiredStatus", "url": "classKAuth_1_1Action.html#ae270c3cbaed8810c54f59d6e41122cb2a50b8805a706fb68edb17aeaa7e0a8450", "keyword": "AuthRequiredStatus KAuth::Action::AuthRequiredStatus KAuth::Action", "text": "The user could obtain the authorization after authentication"}, {"type": "enumvalue", "name": "KAuth::Action::UserCancelledStatus", "url": "classKAuth_1_1Action.html#ae270c3cbaed8810c54f59d6e41122cb2aa9df2582077e20f7b2ee41a820ecfd78", "keyword": "UserCancelledStatus KAuth::Action::UserCancelledStatus KAuth::Action", "text": "The user pressed Cancel the authentication dialog Currently used only on the mac"}, {"type": "function", "name": "KAuth::Action::Action", "url": "classKAuth_1_1Action.html#a4f457ccfc8336b565cadca56b36e0271", "keyword": "Action KAuth::Action::Action KAuth::Action", "text": "This constructor sets the name to the empty string Such an action is invalid and cannot be authorized nor executed so you need to call setName() before you can use the object"}, {"type": "function", "name": "KAuth::Action::Action", "url": "classKAuth_1_1Action.html#aa2be15f82f10a4ff2332e9309a4905cd", "keyword": "Action KAuth::Action::Action KAuth::Action", "text": ""}, {"type": "function", "name": "KAuth::Action::Action", "url": "classKAuth_1_1Action.html#a12094557a0e47d623168ea339a2fd523", "keyword": "Action KAuth::Action::Action KAuth::Action", "text": "name The name of the new action"}, {"type": "function", "name": "KAuth::Action::Action", "url": "classKAuth_1_1Action.html#ae12a2703813f965a220b1b5de3371f3c", "keyword": "Action KAuth::Action::Action KAuth::Action", "text": "name The name of the new action details The details of the action setDetails"}, {"type": "function", "name": "KAuth::Action::~Action", "url": "classKAuth_1_1Action.html#acdb06775d157339256a8ecd55749226c", "keyword": "KAuth::Action::~Action KAuth::Action", "text": ""}, {"type": "function", "name": "KAuth::Action::addArgument", "url": "classKAuth_1_1Action.html#a049e3540f1c70af3ce7e9f2b2d200733", "keyword": "addArgument KAuth::Action::addArgument KAuth::Action", "text": "This method adds the pair key/value to the QVariantMap used to send custom data to the helper Use this method if you don t want to create a new QVariantMap only to add a new entry key The new entry s key value The value of the new entry"}, {"type": "function", "name": "KAuth::Action::arguments", "url": "classKAuth_1_1Action.html#a479eaf239c9d7b35637a751565a60d46", "keyword": "arguments KAuth::Action::arguments KAuth::Action", "text": "This method returns the variant map that the application can use to pass arbitrary data to the helper when executing the action The arguments map that will be passed to the helper"}, {"type": "function", "name": "KAuth::Action::details", "url": "classKAuth_1_1Action.html#acc90e05e2eaa727c414fa6b537be15d8", "keyword": "details KAuth::Action::details KAuth::Action", "text": "The details that will be shown in the authorization dialog if the backend supports it The action s details"}, {"type": "function", "name": "KAuth::Action::execute", "url": "classKAuth_1_1Action.html#ac2afcc97d09158b94fa550cb67485520", "keyword": "execute KAuth::Action::execute KAuth::Action", "text": "This is the simpler of all the action execution methods It sends an execution request to the caller and returns the reply directly to the caller The ActionReply object will contain the custom data coming from the helper The method blocks the execution and will return only when the action has been completed or failed Take note however that with the D-Bus helper proxy currently the only one implemented on all the supported platforms the request is sent using the QDBus::BlockWithGui flag This means the method will enter a local eventloop to wait for the reply This allows the application GUI to stay responsive but you have to be prepared to receive other events in the meantime All the signals from the ActionWatcher class are emitted also with this method although they re more useful with the asynchronous calls The method checks for authorization before to execute the action If the user is not authorized the return value will be ActionReply::AuthorizationDeniedReply If the user cancels the authentication the return value should be ActionReply::UserCancelledReply Due to policykit limitations this currently only with the Mac OS X backend If the helper is busy executing another action or action group the reply will be ActionReply::HelperBusyReply If the request cannot be sent for bus errors the method returns ActionReply::DBusErrorReply The reply from the helper or an error reply if something s wrong"}, {"type": "function", "name": "KAuth::Action::hasHelper", "url": "classKAuth_1_1Action.html#af1c0d5b49f04e341a4327f80e3c35f3e", "keyword": "hasHelper KAuth::Action::hasHelper KAuth::Action", "text": "This function can be used to check if an helper will be called upon the execution of an action Such an helper can be set through setHelperID If this function returns false upon execution the action will be just authorized 4.5 Whether the action has an helper or not setHelperID"}, {"type": "function", "name": "KAuth::Action::helperId", "url": "classKAuth_1_1Action.html#adc194c6a10f616a72a0c6bfc323ce00f", "keyword": "helperId KAuth::Action::helperId KAuth::Action", "text": "The helper ID is the string that uniquely identifies the helper in the system It is the string passed to the KAUTH_HELPER() macro in the helper source Because one could have different helpers you need to specify an helper ID for each execution or set a default ID by calling setHelperID() This method returns the current default value The default helper ID"}, {"type": "function", "name": "KAuth::Action::isValid", "url": "classKAuth_1_1Action.html#a276a7771c92666b7a27994a836f48458", "keyword": "isValid KAuth::Action::isValid KAuth::Action", "text": "Action names have to respect a simple syntax They have to be all in lowercase characters separated by dots Dots can t appear at the beginning and at the end of the name In other words the action name has to match this perl-like regular expression This method returns false if the action name doesn t match the valid syntax If the backend supports it this method also checks if the action is valid and recognized by the backend itself Invalid actions cannot be authorized nor executed The empty string is not a valid action name so the default constructor returns an invalid action"}, {"type": "function", "name": "KAuth::Action::name", "url": "classKAuth_1_1Action.html#a94b805528b6d86e82c18108ab50d7208", "keyword": "name KAuth::Action::name KAuth::Action", "text": "This is the unique attribute that identifies an action object Two action objects with the same name always refer to the same action The action name"}, {"type": "function", "name": "KAuth::Action::operator!=", "url": "classKAuth_1_1Action.html#ab7b4b50ff2ed16e89821085a409e3e58", "keyword": "operator!= KAuth::Action::operator!= KAuth::Action", "text": "Returns the negation of operator true if the two actions are different and not both invalid"}, {"type": "function", "name": "KAuth::Action::operator=", "url": "classKAuth_1_1Action.html#a8d70bf97089cfcc640997f3211a31804", "keyword": "operator= KAuth::Action::operator= KAuth::Action", "text": ""}, {"type": "function", "name": "KAuth::Action::operator==", "url": "classKAuth_1_1Action.html#a6be8a1e34d6c757b716730cbcb2dc1eb", "keyword": "operator== KAuth::Action::operator== KAuth::Action", "text": "This comparison operator compares the names of two actions and returns whether they are the same It does not care about the arguments stored in the actions However if two actions are invalid they ll match as equal even if the invalid names are different true if the two actions are the same or both invalid"}, {"type": "function", "name": "KAuth::Action::parentWidget", "url": "classKAuth_1_1Action.html#a4be7e6aed4bc98a1eaf934b72ddb0bf9", "keyword": "parentWidget KAuth::Action::parentWidget KAuth::Action", "text": "4.6 A QWidget which will is being used as the dialog s parent"}, {"type": "function", "name": "KAuth::Action::setArguments", "url": "classKAuth_1_1Action.html#aa85bd1589eca50adae8828ae73e4b5ef", "keyword": "setArguments KAuth::Action::setArguments KAuth::Action", "text": "This method sets the variant map that the application can use to pass arbitrary data to the helper when executing the action arguments The new arguments map"}, {"type": "function", "name": "KAuth::Action::setDetails", "url": "classKAuth_1_1Action.html#a252c08c284dcbb0d7d6ebc450627ecde", "keyword": "setDetails KAuth::Action::setDetails KAuth::Action", "text": "You can use this function to provide the user more details if the backend supports it on the action being authorized in the authorization dialog"}, {"type": "function", "name": "KAuth::Action::setHelperId", "url": "classKAuth_1_1Action.html#a73c7538e20472397f1226193ae6fa462", "keyword": "setHelperId KAuth::Action::setHelperId KAuth::Action", "text": "This method sets the helper ID which contains the body of this action If the string is non-empty the corresponding helper will be fired and the action executed inside the helper Otherwise the action will be just authorized To unset a previously set helper just pass an empty string id The default helper ID hasHelper helperId"}, {"type": "function", "name": "KAuth::Action::setName", "url": "classKAuth_1_1Action.html#a6a7f88959cac2e933eeb4543e8ed6fdd", "keyword": "setName KAuth::Action::setName KAuth::Action", "text": "It s not common to change the action name after its creation Usually you set the name with the constructor and you have to because there s no default constructor"}, {"type": "function", "name": "KAuth::Action::setParentWidget", "url": "classKAuth_1_1Action.html#af91c15e1de114497e20e5c391f2afc3e", "keyword": "setParentWidget KAuth::Action::setParentWidget KAuth::Action", "text": "This function is used for explicitly setting a parent window for an eventual authentication dialog required when authorization is triggered Some backends in fact like polkit-1 need to have a parent explicitly set for displaying the dialog correctly If you are using KAuth through one of KDE s GUI components KPushButton KCModule you do not need and should not call this function as it is already done by the component itself 4.6 parent A QWidget which will be used as the dialog s parent"}, {"type": "function", "name": "KAuth::Action::status", "url": "classKAuth_1_1Action.html#a0fe4c1bb7d5800af23bfba574314aba7", "keyword": "status KAuth::Action::status KAuth::Action", "text": "This methods query the authorization backend to know if the user can try to acquire the authorization for this action If the result is Action::AuthRequired the user can try to acquire the authorization by authenticating It should not be needed to call this method directly because the execution methods already take care of all the authorization stuff Action::Denied if the user doesn t have the authorization to execute the action Action::Authorized if the action can be executed Action::AuthRequired if the user could acquire the authorization after authentication Action::UserCancelled if the user cancels the authentication dialog Not currently supported by the Polkit backend"}, {"type": "class", "name": "KAuth::ActionReply", "url": "classKAuth_1_1ActionReply.html", "keyword": "ActionReply", "text": "An instance of ActionReply is returned every time you execute an action with the Action class You get the reply directly from the Action::execute() method or indirectly as a parameter of the ActionWatcher::actionPerformed() signal ActionReply objects can contain both data from a successful action or an error indicator In case of success the errorCode() is ActionReply::NoError zero and the type() is ActionReply::Success The data() method returns a QVariantMap object that may contain custom data sent back by the helper In case of errors coming from the library the type() is ActionReply::KAuthError In this case errorCode() will always be one of the predefined errors from the ActionReply::Error enum An error reply of KAuthError type always contains an empty data() object For some kind of errors you could get a human-readable description with errorDescription() If instead the helper itself has to report some errors occurred during the action execution the type() will be and has to be ActionReply::HelperError In this case the data() object can contain custom data from the helper and the errorCode() and errorDescription() values are application-dependent In the helper to create an action reply object you have two choices using the constructor or the predefined replies For example to create a successful reply you can use the default constructor but to create a helper error reply instead of writing ActionReply(ActionReply::HelperError) you could use the more convenient ActionReply::HelperErrorReply constant You should not use the predefined error replies to create and return new errors Replies with the KAuthError type are intended to be returned by the library only However you can use them for comparisons To quickly check for success or failure of an action you can use succeeded() or failed() 4.4"}, {"type": "enum", "name": "KAuth::ActionReply::Error", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619", "keyword": "Error KAuth::ActionReply::Error KAuth::ActionReply", "text": ""}, {"type": "enumvalue", "name": "KAuth::ActionReply::NoError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619a7e3401e3c1494b6a81dae185ce0f26c0", "keyword": "NoError KAuth::ActionReply::NoError KAuth::ActionReply", "text": "No error"}, {"type": "enumvalue", "name": "KAuth::ActionReply::NoResponderError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619a7811678991b25ae9d6c90467d480ace2", "keyword": "NoResponderError KAuth::ActionReply::NoResponderError KAuth::ActionReply", "text": "The helper responder object hasn t been set This shouldn t happen if you use the KAUTH_HELPER macro in the helper source"}, {"type": "enumvalue", "name": "KAuth::ActionReply::NoSuchActionError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619ae55e60ddd7a74ba59eaa6bd1ac8c2557", "keyword": "NoSuchActionError KAuth::ActionReply::NoSuchActionError KAuth::ActionReply", "text": "The action you tried to execute doesn t exist"}, {"type": "enumvalue", "name": "KAuth::ActionReply::InvalidActionError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619a7752b96fe189ca70f436bb900c2ef0bf", "keyword": "InvalidActionError KAuth::ActionReply::InvalidActionError KAuth::ActionReply", "text": "You tried to execute an invalid action object"}, {"type": "enumvalue", "name": "KAuth::ActionReply::AuthorizationDeniedError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619a652eca3258c4f2c32eb24e4bb0562103", "keyword": "AuthorizationDeniedError KAuth::ActionReply::AuthorizationDeniedError KAuth::ActionReply", "text": "You don t have the authorization to execute the action"}, {"type": "enumvalue", "name": "KAuth::ActionReply::UserCancelledError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619aec2a77cf2836479bc01bc207814eaf41", "keyword": "UserCancelledError KAuth::ActionReply::UserCancelledError KAuth::ActionReply", "text": "Action execution has been cancelled by the user"}, {"type": "enumvalue", "name": "KAuth::ActionReply::HelperBusyError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619ae03e2be0694d735440cf434d8d2129eb", "keyword": "HelperBusyError KAuth::ActionReply::HelperBusyError KAuth::ActionReply", "text": "The helper is busy executing another action or group of actions Try later"}, {"type": "enumvalue", "name": "KAuth::ActionReply::AlreadyStartedError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619afafb9d0d4311e8a8312ca06e3ec131f6", "keyword": "AlreadyStartedError KAuth::ActionReply::AlreadyStartedError KAuth::ActionReply", "text": "The action was already started and is currently running"}, {"type": "enumvalue", "name": "KAuth::ActionReply::DBusError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619a1180872d9c4956b0596435e6095e7edd", "keyword": "DBusError KAuth::ActionReply::DBusError KAuth::ActionReply", "text": "An error from D-Bus occurred"}, {"type": "enumvalue", "name": "KAuth::ActionReply::BackendError", "url": "classKAuth_1_1ActionReply.html#a703af1f9b49e6436a3990c0273900619aa4b7095583c7c78c64fd134987aa765b", "keyword": "BackendError KAuth::ActionReply::BackendError KAuth::ActionReply", "text": "The underlying backend reported an error"}, {"type": "enum", "name": "KAuth::ActionReply::Type", "url": "classKAuth_1_1ActionReply.html#ab106612933b81a97f990e224828bcbb6", "keyword": "Type KAuth::ActionReply::Type KAuth::ActionReply", "text": ""}, {"type": "enumvalue", "name": "KAuth::ActionReply::KAuthErrorType", "url": "classKAuth_1_1ActionReply.html#ab106612933b81a97f990e224828bcbb6a1243d1178c7d227b478aa7cce10a0308", "keyword": "KAuthErrorType KAuth::ActionReply::KAuthErrorType KAuth::ActionReply", "text": "An error reply generated by the library itself"}, {"type": "enumvalue", "name": "KAuth::ActionReply::HelperErrorType", "url": "classKAuth_1_1ActionReply.html#ab106612933b81a97f990e224828bcbb6ae7dbb87b29cff766c83dce23fbe21924", "keyword": "HelperErrorType KAuth::ActionReply::HelperErrorType KAuth::ActionReply", "text": "An error reply generated by the helper"}, {"type": "enumvalue", "name": "KAuth::ActionReply::SuccessType", "url": "classKAuth_1_1ActionReply.html#ab106612933b81a97f990e224828bcbb6aee9697ab8a2037cd6d5ee2260650b2ba", "keyword": "SuccessType KAuth::ActionReply::SuccessType KAuth::ActionReply", "text": "The action has been completed successfully"}, {"type": "function", "name": "KAuth::ActionReply::ActionReply", "url": "classKAuth_1_1ActionReply.html#a802f0c35863997ac02a1b7a2209a9a6b", "keyword": "ActionReply KAuth::ActionReply::ActionReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::ActionReply", "url": "classKAuth_1_1ActionReply.html#a6917d9e45e367e22fe5ff7d942dcad6f", "keyword": "ActionReply KAuth::ActionReply::ActionReply KAuth::ActionReply", "text": "This constructor directly sets the reply type You shouldn t need to directly call this constructor because you can use the more convenient predefined replies constants You also shouldn t create a reply with the KAuthError type because it s reserved for errors coming from the library type The type of the new reply"}, {"type": "function", "name": "KAuth::ActionReply::ActionReply", "url": "classKAuth_1_1ActionReply.html#a22148e48f6cda0193529ce744f697057", "keyword": "ActionReply KAuth::ActionReply::ActionReply KAuth::ActionReply", "text": "Do not use outside the library This constructor is for internal use only since it creates a reply with KAuthError type which is reserved for errors coming from the library errorCode The error code of the new reply"}, {"type": "function", "name": "KAuth::ActionReply::ActionReply", "url": "classKAuth_1_1ActionReply.html#ad459585af21a87b144c753e328719787", "keyword": "ActionReply KAuth::ActionReply::ActionReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::~ActionReply", "url": "classKAuth_1_1ActionReply.html#a2589a886eaa36db85d228f9bd715b901", "keyword": "KAuth::ActionReply::~ActionReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::addData", "url": "classKAuth_1_1ActionReply.html#a2a7f188241bde0d90af9a43fa4844b51", "keyword": "addData KAuth::ActionReply::addData KAuth::ActionReply", "text": "This method adds the pair key/value to the QVariantMap used to report back custom data to the application Use this method if you don t want to create a new QVariantMap only to add a new entry key The new entry s key value The value of the new entry"}, {"type": "function", "name": "KAuth::ActionReply::data", "url": "classKAuth_1_1ActionReply.html#aeece469d67b3c1ae2b232e9ad5b26d07", "keyword": "data KAuth::ActionReply::data KAuth::ActionReply", "text": "This method is used to get the object that contains the custom data coming from the helper In the helper s code you can set it using setData() or the convenience method addData() The data coming from or that will be sent by the helper"}, {"type": "function", "name": "KAuth::ActionReply::errorCode", "url": "classKAuth_1_1ActionReply.html#a13dbb2074c0b4480bae0f93053ba2327", "keyword": "errorCode KAuth::ActionReply::errorCode KAuth::ActionReply", "text": "The error code returned is one of the values in the ActionReply::Error enumeration if type() KAuthError or is totally application-dependent if type() HelperError It also should be zero for successful replies The reply error code"}, {"type": "function", "name": "KAuth::ActionReply::errorDescription", "url": "classKAuth_1_1ActionReply.html#a5c7d8c9c5ef3a797d11cafc2594f5f19", "keyword": "errorDescription KAuth::ActionReply::errorDescription KAuth::ActionReply", "text": "Currently replies of type KAuthError rarely report an error description This situation could change in the future By now you can use this method for custom errors of type HelperError The error human-readable description"}, {"type": "function", "name": "KAuth::ActionReply::failed", "url": "classKAuth_1_1ActionReply.html#af0beb913953d6f5411dd1347e4b5f93b", "keyword": "failed KAuth::ActionReply::failed KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::operator!=", "url": "classKAuth_1_1ActionReply.html#a23c16bfe0b2fb3c40dadc3d3bf1fb31a", "keyword": "operator!= KAuth::ActionReply::operator!= KAuth::ActionReply", "text": "See the operator==() for an important notice"}, {"type": "function", "name": "KAuth::ActionReply::operator=", "url": "classKAuth_1_1ActionReply.html#a294dce9c0a6ac8391436a25f3b9837f0", "keyword": "operator= KAuth::ActionReply::operator= KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::operator==", "url": "classKAuth_1_1ActionReply.html#a371adc5f7040e8a90a026ea67ae3f5cc", "keyword": "operator== KAuth::ActionReply::operator== KAuth::ActionReply", "text": "This operator checks if the type and the error code of two replies are the same It doesn t compare the data or the error descriptions so be careful The suggested use it to compare a reply agains one of the predefined error replies Note that you can do it also by compare errorCode() with the relative enumeration value"}, {"type": "function", "name": "KAuth::ActionReply::serialized", "url": "classKAuth_1_1ActionReply.html#aca2f15ccc0808ebbb03339f735e0bf9e", "keyword": "serialized KAuth::ActionReply::serialized KAuth::ActionReply", "text": "This is a convenience method used internally to sent the reply to a remote peer To recreate the reply use deserialize() A QByteArray representation of this reply"}, {"type": "function", "name": "KAuth::ActionReply::setData", "url": "classKAuth_1_1ActionReply.html#ac1ca4b8d1f95c7af136b939d5b83cc79", "keyword": "setData KAuth::ActionReply::setData KAuth::ActionReply", "text": "In the helper s code you can use this function to set an QVariantMap with custom data that will be sent back to the application data The new QVariantMap object"}, {"type": "function", "name": "KAuth::ActionReply::setErrorCode", "url": "classKAuth_1_1ActionReply.html#a74e7456f138e08c61468569e3bdb0085", "keyword": "setErrorCode KAuth::ActionReply::setErrorCode KAuth::ActionReply", "text": "If you re setting the error code in the helper because you need to return an error to the application please make sure you already have set the type to HelperError either by calling setType() or by creating the reply in the right way If the type is Success when you call this method it will become KAuthError errorCode The new reply error code"}, {"type": "function", "name": "KAuth::ActionReply::setErrorDescription", "url": "classKAuth_1_1ActionReply.html#a44992c12cdf172fd1d00467805da2085", "keyword": "setErrorDescription KAuth::ActionReply::setErrorDescription KAuth::ActionReply", "text": "Call this method from the helper if you want to send back a description for a custom error Note that this method doesn t affect the errorCode in any way error The new error description"}, {"type": "function", "name": "KAuth::ActionReply::setType", "url": "classKAuth_1_1ActionReply.html#a3861ac8b616d7c16b6e3f68e27d1016f", "keyword": "setType KAuth::ActionReply::setType KAuth::ActionReply", "text": "Every time you create an action reply you implicitly set a type Default constructed replies or ActionReply::SuccessReply have type() Success ActionReply::HelperErrorReply has type() HelperError Predefined error replies have type() KAuthError This means you rarely need to change the type after the creation but if you need to don t set it to KAuthError because it s reserved for errors coming from the library type The new reply type"}, {"type": "function", "name": "KAuth::ActionReply::succeeded", "url": "classKAuth_1_1ActionReply.html#a90081f0965f973c263d19e5ecad6aaaa", "keyword": "succeeded KAuth::ActionReply::succeeded KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::type", "url": "classKAuth_1_1ActionReply.html#a7221bc7e89859f978b5d1756ab74be18", "keyword": "type KAuth::ActionReply::type KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::AlreadyStartedReply", "url": "classKAuth_1_1ActionReply.html#abdd0aae711be85150492cc7228af8213", "keyword": "AlreadyStartedReply KAuth::ActionReply::AlreadyStartedReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::AuthorizationDeniedReply", "url": "classKAuth_1_1ActionReply.html#ab3afbb8ad997e3a868536a9538f2711a", "keyword": "AuthorizationDeniedReply KAuth::ActionReply::AuthorizationDeniedReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::DBusErrorReply", "url": "classKAuth_1_1ActionReply.html#a6a079e43a997b5b63ae4080f680fd696", "keyword": "DBusErrorReply KAuth::ActionReply::DBusErrorReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::deserialize", "url": "classKAuth_1_1ActionReply.html#a980d590a5dc126e2e7d542a7abd8d283", "keyword": "deserialize KAuth::ActionReply::deserialize KAuth::ActionReply", "text": "This method returns a reply from a QByteArray obtained from the serialized() method data A QByteArray obtained with serialized()"}, {"type": "function", "name": "KAuth::ActionReply::HelperBusyReply", "url": "classKAuth_1_1ActionReply.html#a93c02ef4a88d4cafc963e9dcdc891bdf", "keyword": "HelperBusyReply KAuth::ActionReply::HelperBusyReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::HelperErrorReply", "url": "classKAuth_1_1ActionReply.html#a4d6577154e215e68fe4889484465bda2", "keyword": "HelperErrorReply KAuth::ActionReply::HelperErrorReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::InvalidActionReply", "url": "classKAuth_1_1ActionReply.html#a227a3224f0a9b0671639ef414baa1042", "keyword": "InvalidActionReply KAuth::ActionReply::InvalidActionReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::NoResponderReply", "url": "classKAuth_1_1ActionReply.html#a8c8111a31393927973343c195eb9bcce", "keyword": "NoResponderReply KAuth::ActionReply::NoResponderReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::NoSuchActionReply", "url": "classKAuth_1_1ActionReply.html#a359e820a545560aa10f1f4d42a86b532", "keyword": "NoSuchActionReply KAuth::ActionReply::NoSuchActionReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::SuccessReply", "url": "classKAuth_1_1ActionReply.html#a211040c1fd29b3575b1921c4da647225", "keyword": "SuccessReply KAuth::ActionReply::SuccessReply KAuth::ActionReply", "text": ""}, {"type": "function", "name": "KAuth::ActionReply::UserCancelledReply", "url": "classKAuth_1_1ActionReply.html#aa22425100fef7028be8018cb8ca3e309", "keyword": "UserCancelledReply KAuth::ActionReply::UserCancelledReply KAuth::ActionReply", "text": ""}, {"type": "friend", "name": "KAuth::ActionReply::operator<<", "url": "classKAuth_1_1ActionReply.html#a3c8b9312dd8665c0cdd72dece65a3f61", "keyword": "operator<< KAuth::ActionReply::operator<< KAuth::ActionReply", "text": ""}, {"type": "friend", "name": "KAuth::ActionReply::operator>>", "url": "classKAuth_1_1ActionReply.html#ad767536584f1e4264686eeb131ae5ab7", "keyword": "operator>> KAuth::ActionReply::operator>> KAuth::ActionReply", "text": ""}, {"type": "class", "name": "KAuth::ExecuteJob", "url": "classKAuth_1_1ExecuteJob.html", "keyword": "ExecuteJob", "text": "5.0"}, {"type": "signal", "name": "KAuth::ExecuteJob::newData", "url": "classKAuth_1_1ExecuteJob.html#a4188a035ebdef1c5a2acc66c527fb366", "keyword": "newData KAuth::ExecuteJob::newData KAuth::ExecuteJob", "text": "This signal is emitted every time the helper s code calls the HelperSupport::progressStep(QVariantMap) method This is useful to let the helper notify the execution status of a long action also providing some data for example if you want to achieve some sort of progressive loading The meaning of the data passed here is totally application-dependent If you only need to pass some percentage you can use the other signal that pass an int data The progress data from the helper"}, {"type": "signal", "name": "KAuth::ExecuteJob::statusChanged", "url": "classKAuth_1_1ExecuteJob.html#a809eb8a780cee53b77a80d6c8e4afa8b", "keyword": "statusChanged KAuth::ExecuteJob::statusChanged KAuth::ExecuteJob", "text": "status the the new authentication status"}, {"type": "function", "name": "KAuth::ExecuteJob::~ExecuteJob", "url": "classKAuth_1_1ExecuteJob.html#af7830bdc23dfde4b4db57676f37cc7cf", "keyword": "KAuth::ExecuteJob::~ExecuteJob KAuth::ExecuteJob", "text": ""}, {"type": "function", "name": "KAuth::ExecuteJob::action", "url": "classKAuth_1_1ExecuteJob.html#a950618e392393f81d5e967530f5c7c3c", "keyword": "action KAuth::ExecuteJob::action KAuth::ExecuteJob", "text": "the action associated with this job"}, {"type": "function", "name": "KAuth::ExecuteJob::data", "url": "classKAuth_1_1ExecuteJob.html#a75f9d0183aac364296ef33ba4c8decc0", "keyword": "data KAuth::ExecuteJob::data KAuth::ExecuteJob", "text": "the data sent by the helper"}, {"type": "function", "name": "KAuth::ExecuteJob::start", "url": "classKAuth_1_1ExecuteJob.html#a96281b477299829549889db8ba93e006", "keyword": "start KAuth::ExecuteJob::start KAuth::ExecuteJob", "text": "KJob::result newData statusChanged"}, {"type": "class", "name": "KAuth::ObjectDecorator", "url": "classKAuth_1_1ObjectDecorator.html", "keyword": "ObjectDecorator", "text": "Dario Freddi"}, {"type": "signal", "name": "KAuth::ObjectDecorator::authorized", "url": "classKAuth_1_1ObjectDecorator.html#a166eed0389361667fd36c3b5d46250af", "keyword": "authorized KAuth::ObjectDecorator::authorized KAuth::ObjectDecorator", "text": "If the decorator needs authorization whenever the user triggers it the authorization process automatically begins If it succeeds this signal is emitted The KAuth::Action object is provided for convenience if you have multiple Action objects but of course it s always the same set with setAuthAction() WARNING If your button or action needs authorization you should connect eventual slots processing stuff to this signal and NOT clicked/triggered Clicked/triggered will be emitted even if the user has not been authorized action The object set with setAuthAction()"}, {"type": "function", "name": "KAuth::ObjectDecorator::ObjectDecorator", "url": "classKAuth_1_1ObjectDecorator.html#aad0e3a31c81230772cea31108de167de", "keyword": "ObjectDecorator KAuth::ObjectDecorator::ObjectDecorator KAuth::ObjectDecorator", "text": "parent The parent object this decorator will be attached to"}, {"type": "function", "name": "KAuth::ObjectDecorator::~ObjectDecorator", "url": "classKAuth_1_1ObjectDecorator.html#a5afc0c049a83d59c5c279a5f704ce19d", "keyword": "KAuth::ObjectDecorator::~ObjectDecorator KAuth::ObjectDecorator", "text": ""}, {"type": "function", "name": "KAuth::ObjectDecorator::authAction", "url": "classKAuth_1_1ObjectDecorator.html#a8e5396a99659a3e379153d37f150008b", "keyword": "authAction KAuth::ObjectDecorator::authAction KAuth::ObjectDecorator", "text": "the KAuth::Action associated with this decorator"}, {"type": "function", "name": "KAuth::ObjectDecorator::setAuthAction", "url": "classKAuth_1_1ObjectDecorator.html#a7fec9d36b4aa4624c47566dadf0199e4", "keyword": "setAuthAction KAuth::ObjectDecorator::setAuthAction KAuth::ObjectDecorator", "text": "By setting a KAuth::Action this decorator will become associated with it and whenever the action or button it is attached to gets clicked it will trigger the authorization and execution process for the action Pass 0 to this function to disassociate the decorator action the KAuth::Action to associate with this decorator"}, {"type": "function", "name": "KAuth::ObjectDecorator::setAuthAction", "url": "classKAuth_1_1ObjectDecorator.html#a48b561b16e75028d2a1637f6d8e4e166", "keyword": "setAuthAction KAuth::ObjectDecorator::setAuthAction KAuth::ObjectDecorator", "text": "Overloaded member to allow creating the action by name actionName the name of the action to associate"}, {"type": "namespace", "name": "KAuth::HelperSupport", "url": "namespaceKAuth_1_1HelperSupport.html", "keyword": "HelperSupport", "text": "This class provides the API to write the helper tool that executes your actions You don t create instances of HelperSupport Instead you use its KAUTH_EXPORT methods This them you can notify the application of progress in your action s execution and you can check if the application asked you to terminate it 4.4"}, {"type": "function", "name": "KAuth::HelperSupport::helperMain", "url": "namespaceKAuth_1_1HelperSupport.html#af2665da1a7765c8fd6d3755a35acf311", "keyword": "helperMain KAuth::HelperSupport::helperMain KAuth::HelperSupport", "text": "Do not call directly This method is called in the proper way by the code generated by the KAUTH_HELPER_MAIN() which creates a main() function for the helper tool macro You shouldn t call this method directly argc The argc parameter from the main() function argv The argv parameter from the main() function id The helper ID as passed to the macro responder The responder object for the helper The macro passes a default-constructed heap-allocated object of the class specified as the last macro parameter"}, {"type": "function", "name": "KAuth::HelperSupport::isStopped", "url": "namespaceKAuth_1_1HelperSupport.html#a92d5d14499774c17e5ed1bd38ab26804", "keyword": "isStopped KAuth::HelperSupport::isStopped KAuth::HelperSupport", "text": "This method will return true if the helper has been asked to stop the execution of the current action If this happens your helper should return NOT exit The meaning of the data you return in this case is application-dependent It s good practice to check it regularly if you have a long-running action true if the helper has been asked to stop false otherwise"}, {"type": "function", "name": "KAuth::HelperSupport::progressStep", "url": "namespaceKAuth_1_1HelperSupport.html#a3fe5f7ed6e46213d7ffc39c4eec67f77", "keyword": "progressStep KAuth::HelperSupport::progressStep KAuth::HelperSupport", "text": "You can use this method to notify progress information about the action execution When you call this method the ActionWatcher object associated with the current action will emit the progressStep(int) signal The meaning of the integer passed here is totally application dependent but you ll want to use it as a sort of percentage If you need to be more expressive use the other overload which takes a QVariantMap step The progress indicator"}, {"type": "function", "name": "KAuth::HelperSupport::progressStep", "url": "namespaceKAuth_1_1HelperSupport.html#abc0f9026e751c74accd3ff3140cde5a9", "keyword": "progressStep KAuth::HelperSupport::progressStep KAuth::HelperSupport", "text": "You can use this method to notify progress information about the action execution When you call this method the ActionWatcher object associated with the current action will emit the progressStep(QVariantMap) signal The meaning of the data passed here is totally application dependent If you only need a simple percentage value use the other overload which takes an int data The progress data"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KAuth Execute actions as privileged user Introduction KAuth provides a convenient system-integrated way to offload actions that need to be performed as a privileged user root for example to small hopefully secure helper utilities Usage If you are using CMake you need to have or find KF5 with the Auth component in your CMakeLists.txt file and you need to link to KF5::Auth Executing privileged actions typically involves having a minimal helper utility that does the actual work and calling that utility with escalated privileges if the user has permission to do so often requiring the user to enter appropriate credentials like entering a password Therefore use of the KAuth library is in two parts In the main part of your code you use KAuth::Action and specifically KAuth::Action::execute() when you need to do something privileged like write to a file normally only writable by root The code that actually performs that action such as writing to a file needs to be placed in the slot of a helper QObject class which should use the methods of KAuth::HelperSupport and be compiled into an executable You will also want to use the kauth_install_helper_files and kauth_install_actions macros in your CMakeLists.txt See for a detailed tutorial on how to use KAuth"}]}