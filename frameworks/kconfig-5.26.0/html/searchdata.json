{"name": "kconfig-5.26.0", "fancyname": "KConfig", "docfields": [{"type": "page", "name": "kconfig_compiler", "url": "kconfig_compiler.html", "keyword": null, "text": "The KDE Configuration Compiler kconfig_compiler generates C++ source code from an XML file containing information about configuration options kcfg and a file that provides the code generation options kcfgc The generated class is based on KConfigSkeleton and provides an API for the application to access its configuration data The generated C++ source code is output to a h and a cpp file whose base name is the same as that of the kcfgc file XML description of the configuration options The structure of the kcfg file is described by its DTD kcfg.xsd The kcfgfile tag may contain either the attribute which should be the name of the configuration file described or the attribute which if set to will allow you to pass the KSharedConfig::Ptr object to use If neither nor is set the default configuration file will be used The include tags are optional and may contain C++ header files that are needed to compile the code needed to compute default values To generate a include statement instead of include enclose the header file name in double quotes e.g include The remaining entries in the XML file are grouped by the tag group which describes the corresponding group in the configuration file The individual entries must have at least a name or a key The key is used as the key in the config file while the name is used to create accessor and modifier functions If key is given but not name the name is constructed by removing all spaces from key If name is given but not key the key is the same as name An entry must also have a type The list of allowable types is specified in the DTD and loosely follows the list of types supported by the QVariant with exception of the clearly binary types e.g Pixmap Image which are not supported Besides those basic types the following special types are supported Path This is a string that is specially treated as a file-path In particular paths in the home directory are prefixed with in when being stored in the configuration file Enum This indicates an enumeration The possible enum values and optional enum name should be provided via the choices tag Enum values are accessed as integers by the application but stored as strings in the configuration file This makes it possible to add more values at a later date without breaking compatibility IntList This indicates a list of integers This information is provided to the application as QValueList<int> Useful for storing QSplitter geometries An entry can optionally have a default value which is used as default when the value isn t specified in any config file Default values are interpreted as literal constant values If a default value needs to be computed or if it needs to be obtained from a function call the default tag should contain the code attribute The contents of the default tag is then considered to be a C++ expression Note that in this case you might have to add an include tag as described above or a SourceIncludeFiles entry in the kcfgc file as described below so that the code which computes the default value can be compiled Additional code for computing default values can be provided outside any entry definition via the code tag The contents of the code tag is inserted as-is A typical use for this is to compute a common default value which can then be referenced by multiple entries that follow Code generation options The options for generating the C++ sources are read from the file with the extension kcfgc To generate a class add the corresponding kcfgc file to the SOURCES line in the Makefile.am The following options are read from the kcfgc file Name Type Default Description File string programname.kcfg Name of kcfg file containing the options the class is generated for NameSpace string Optional namespace for generated class ClassName string Name of generated class required Inherits string KConfigSkeleton Class the generated class inherits from This class must inherit KConfigSkeleton Visibility string Inserts visibility directive for example KDE_EXPORT between keyword and class name in header file Singleton bool false Generated class is a singleton CustomAdditions bool MemberVariables string public|protected|private|dpointer private C++ access modifier used for member variables holding the configuration values IncludeFiles comma separated list of strings Names of files to be included in the header of the generated class Enclose a file name in escaped double quotes to generate include instead of include SourceIncludeFiles comma separated list of strings Names of files to be included in the source file of the generated class Enclose a file name in escaped double quotes to generate include instead of include Mutators true false or a comma separated list of options false If true mutator functions for all configuration options are generated If false no mutator functions are generated If a list is provided mutator functions are generated for the options that are listed DefaultValueGetters true false or a comma separated list of options false If true functions to return the default value of all configuration options are generated If false no default value functions are generated If a list is provided default value functions are generated for the options that are listed ItemAccessors bool false Generate accessor functions for the KConfigSkeletonItem objects corresponding to the configuration options If SetUserTexts is set ItemAccessors also has to be set SetUserTexts bool false Set the label and whatthis texts of the items from the kcfg file.If SetUserTexts is set ItemAccessors also has to be set GlobalEnums bool false If set to true all choices of Enum items will be created in the global scope of the generated class If set to false each Enum item whose enum is not explicitly named will get its own namespace for its choices UseEnumTypes bool false If set to true all Enum items whose enums are named will use enum types for the return value of accessor functions and for the parameter of mutator functions This eliminates the need to cast accessor return values to the enum type if you want to use the enum type in your own code If set to false accessor return values and mutator parameters will be of type int ForceStringFilename bool false If set to true forces the first parameter of the generated class to be a QString when using an argument for the filename This is useful to specify at runtime the filename of the configuration class Advanced options There are several possibilities to parameterize entries Parameterized entries An entry can be parameterized using a fixed range parameter specified with the parameter tag Such parameter can either be an Enum or an int An Enum parameter should specify the possible enumeration values with the choices tag An int parameter should specify its maximum value Its minimum value is always 0 A parameterized entry is expanded to a number of entries one for each value in the parameter range The name and key should contain a reference to the parameter in the form of parameter-name When expanding the entries the parameter-name part is replaced with the value of the parameter In the case of an Enum parameter it is replaced with the name of the enumuration value In the case of an int parameter it is replaced with the numeric value of the parameter Parameterized entries all share the same default value unless different default values have been specified for specific parameter values This can be done with the param attribute of the default When a param attribute is specified the default value only applies to that particular parameter value Example 1 The above describes 4 color configuration entries with the following defaults The configuration options will be accessible to the application via a QColor color(int ColorIndex) and a void setColor(int ColorIndex, const QColor &v) function Example 2 The above describes 3 string configuration entries with the following defaults sound_Explosion boom.wav sound_Crash crash.wav sound_Missile missile.wav The configuration options will be accessible to the application via a QString sound(int SoundEvent) and a void setSound(int SoundEvent, const QString &v) function Parameterized groups A group name can be parametrized using a parameter given to the KConfigSkeleton instance which means this feature cannot be used with singleton classes Example 1 In this case passing as the groupname parameter to the generated class will make it use group for the entry Enums By default if GlobalEnums is set to false a separate named enum will be generated for each Enum entry Since each enum is defined in a little enclosing class of its own this allows the same Enum value names to be used in different enums For example the kcfg entry will generate this public class containing the enum definition inside the generated class Alternatively if GlobalEnums is set to true all Enum items are defined as unnamed enums in the global scope of the generated class In this case all Enum values must have different names to avoid clashes However you can use a prefix argument in choices to prevent duplicate enum member names clashing Using this the Enum value names are prefixed in code with the string you specify For example if GlobalEnums is set to true the kcfg entry will generate config file entries of and but the enum will be declared It is possible to specify your own name for a generated enum by including a name parameter in choices Just like unnamed enums this enum will be defined in the global scope of the generated class without any enclosing class of its own Therefore the names of Enum values must be unique across both unnamed enums if GlobalEnums is set to true and all specifically named enums An example of a specifically named enum which results in the following enum declaration inside the generated class It is also possible to specify the use of enums external to the generated class by including the string in the enum name just ensure that it is sufficiently qualified to be unambiguous in use To specify use of an unnamed enum append a trailing For example to use the enum myEnum defined in class ClassA use either of To specify an unnamed enum in namespace ProgSpace use To specify a top-level unnamed enum use To specify the top-level enum anotherEnum use Signal support An entry can emit a signal when it gets changed First of all you must define a list of signals for the configuration class The signal s name may be any legal identifier you wish The argument tag allows you to specify arguments for the emitted signal It supports all types as defined in the KConfigXT DTD The argument value must specify the name without spaces of one of the entries defined in the kcfg file A signal definition can also contain a label tag which will be the documentation line in the generated file After defining the signals you must tell which signal to emit for the entry A signal can be emitted by multiple entries Also you don t need to specify the arguments for a signal the signal name will suffice You can also use the generic configChanged() signal from KConfigSkeleton to notify your application about configuration changes If you have questions or comments please contact Cornelius Schumacher or Waldo Bastian"}, {"type": "page", "name": "options", "url": "options.html", "keyword": null, "text": "KConfig Entry Options KConfig provides various options that can alter how it interprets configuration entries on a per-entry per-group or per-file basis Note that these are not supported by other configuration frameworks and so should not be used in files that are intended to be used by applications that do not use KConfig such as application desktop files Immutable Entries KConfig s cadcading configuration mechanism usually causes values from earlier configuration files to be overridden by later ones Typically the system administrator might set global defaults and a user might override them in their local configuration files However KConfig provides a way to lock down configuration values so that the global settings override the local ones This allows system administrators to restrict the values a user can set for an entry group of entries or an entire configuration file This is important for Kiosk authorization see the KAuthorized namespace which allows parts of the user interface to be locked down Configuration entries can be marked as immutable with the option This can be done on a per-entry basis on a per-group basis which will prevent any attempts to modify entries in the group at all in later files or for an entire file by putting at the start of the file Once this is done the immutable entries or groups cannot be overridden by later files of the same name and if the file is immutable later files will be ignored entirely Note that a similar effect to file immutability can be acheived by using file system permissions to prevent the user from writing to their local versions of the configuration file although since this is normally a setup error the user will be warned that the configuration file is not writable This warning can be supressed by adding the following setting to either the relevant configuration file or the kdeglobals file However using file system permissions like this can potentially be circumvented by the user if they have write access to the containing directory or can modify environment variables and XDG_CONFIG_HOME in particular Shell Expansion If an entry is marked with environment variables and shell commands will be expanded When the entry is read will be replaced with the value of the environment variable and THINK-STATION will be replaced with the output of the hostname command Note that the application will replace and THINK-STATION with their respective expanded values after saving To prevent this combine the option with immmutable option For example This will make that the entry will always return the value of the environment variable The user will not be able to change this entry The following syntax for environment variables is also supported There are three environment variables that have a fallback strategy if the environment variable is not set They instead map to a location from QStanardPaths They are"}, {"type": "page", "name": "authors", "url": "authors.html", "keyword": null, "text": "Authors page Waldo Bastian"}, {"type": "page", "name": "deprecated", "url": "deprecated.html", "keyword": null, "text": "Deprecated List Member KAuthorized authorizeKAction const QString action since 5.24 use authorizeAction() instead Member KConfig forceGlobal const Member KConfig setForceGlobal bool force Member KConfigGroup changeGroup const char Create another KConfigGroup from the parent of this group instead Member KConfigGroup changeGroup const QString group Create another KConfigGroup from the parent of this group instead Member KConfigGui sessionConfigName since 5.11 use sessionConfig() name() Member KCoreConfigSkeleton addItemInt64 const QString name qint64 reference qint64 defaultValue 0 const QString key QString() Use addItemLongLong() Member KCoreConfigSkeleton addItemUInt64 const QString name quint64 reference quint64 defaultValue 0 const QString key QString() Use addItemULongLong() Member KCoreConfigSkeleton readConfig since 5.0 call load() instead to reload from disk or just read() if the underlying KConfig object is already up-to-date Member KCoreConfigSkeleton usrReadConfig since 5.0 override usrRead instead Member KCoreConfigSkeleton usrWriteConfig since 5.0 override usrSave instead Member KCoreConfigSkeleton writeConfig since 5.0 call save() instead Member KEMailSettings currentProfileName const since Frameworks 5.0 Returns the name of the current profile Member KEMailSettings InServerMBXType since Frameworks 5.0 Member KEMailSettings InServerTLS since Frameworks 5.0 Member KEMailSettings InServerType since Frameworks 5.0 Member KEMailSettings OutServerCommand since Frameworks 5.0 Member KEMailSettings OutServerTLS since Frameworks 5.0 Member KEMailSettings OutServerType since Frameworks 5.0"}, {"type": "page", "name": "maintainers", "url": "maintainers.html", "keyword": null, "text": "Maintainers page Unknown/None"}, {"type": "page", "name": "licenses", "url": "licenses.html", "keyword": null, "text": "Licenses page LGPLv2"}, {"type": "class", "name": "KConfig", "url": "classKConfig.html", "keyword": "KConfig", "text": "Quickstart Get the default application config object via KSharedConfig::openConfig() Load a specific configuration file Load the configuration of a specific component In general it is recommended to use KSharedConfig instead of creating multiple instances of KConfig to avoid the overhead of separate objects or concerns about synchronizing writes to disk even if the configuration object is updated from multiple code paths KSharedConfig provides a set of open methods as counterparts for the KConfig constructors KSharedConfig KConfigGroup the techbase HOWTO on KConfig"}, {"type": "enum", "name": "KConfig::OpenFlag", "url": "classKConfig.html#ad1f23964bbf8c11449e92a2596d15f7e", "keyword": "OpenFlag KConfig::OpenFlag KConfig OpenFlag KConfig::OpenFlag KConfig OpenFlag KConfig::OpenFlag KConfig", "text": "If CascadeConfig is selected system-wide configuration sources are used to provide defaults for the settings accessed through this object or possibly to override those settings in certain cases IncludeGlobals does the same but with the global settings sources Note that the main configuration source overrides the cascaded sources which override those provided to addConfigSources() which override the global sources The exception is that if a key or group is marked as being immutable it will not be overridden Note that all values other than IncludeGlobals and CascadeConfig are convenience definitions for the basic mode Do not combine them with anything"}, {"type": "enumvalue", "name": "KConfig::IncludeGlobals", "url": "classKConfig.html#ad1f23964bbf8c11449e92a2596d15f7eaca3f834b897f852abeed3c8c4ea4e6ac", "keyword": "IncludeGlobals KConfig::IncludeGlobals KConfig IncludeGlobals KConfig::IncludeGlobals KConfig IncludeGlobals KConfig::IncludeGlobals KConfig", "text": "Blend kdeglobals into the config object"}, {"type": "enumvalue", "name": "KConfig::CascadeConfig", "url": "classKConfig.html#ad1f23964bbf8c11449e92a2596d15f7ea6e5641f90ac5c6baf06a79472f73c13d", "keyword": "CascadeConfig KConfig::CascadeConfig KConfig CascadeConfig KConfig::CascadeConfig KConfig CascadeConfig KConfig::CascadeConfig KConfig", "text": "Cascade to system-wide config files"}, {"type": "enumvalue", "name": "KConfig::SimpleConfig", "url": "classKConfig.html#ad1f23964bbf8c11449e92a2596d15f7ea53b71a3aab71b05e8c4a6906ae647052", "keyword": "SimpleConfig KConfig::SimpleConfig KConfig SimpleConfig KConfig::SimpleConfig KConfig SimpleConfig KConfig::SimpleConfig KConfig", "text": "Just a single config file"}, {"type": "enumvalue", "name": "KConfig::NoCascade", "url": "classKConfig.html#ad1f23964bbf8c11449e92a2596d15f7ea2a259935afb022644735ea2a06a9df05", "keyword": "NoCascade KConfig::NoCascade KConfig NoCascade KConfig::NoCascade KConfig NoCascade KConfig::NoCascade KConfig", "text": "Include user s globals but omit system settings"}, {"type": "enumvalue", "name": "KConfig::NoGlobals", "url": "classKConfig.html#ad1f23964bbf8c11449e92a2596d15f7eab5b9ba5faf1474af0225b0a3900cb062", "keyword": "NoGlobals KConfig::NoGlobals KConfig NoGlobals KConfig::NoGlobals KConfig NoGlobals KConfig::NoGlobals KConfig", "text": "Cascade to system settings but omit user s globals"}, {"type": "enumvalue", "name": "KConfig::FullConfig", "url": "classKConfig.html#ad1f23964bbf8c11449e92a2596d15f7eaa0baff442592099376d261e026b8a140", "keyword": "FullConfig KConfig::FullConfig KConfig FullConfig KConfig::FullConfig KConfig FullConfig KConfig::FullConfig KConfig", "text": "Fully-fledged config including globals and cascading to system settings"}, {"type": "enum", "name": "KConfigBase::AccessMode", "url": "classKConfigBase.html#a86802f1591f5e30e012f99abb56c7edd", "keyword": "AccessMode KConfigBase::AccessMode KConfigBase AccessMode KConfigBase::AccessMode KConfigBase AccessMode KConfigBase::AccessMode KConfigBase AccessMode KConfigBase::AccessMode KConfigBase AccessMode KConfigBase::AccessMode KConfigBase", "text": ""}, {"type": "enum", "name": "KConfigBase::WriteConfigFlag", "url": "classKConfigBase.html#a748289f31b54c48d2ef03d66546718aa", "keyword": "WriteConfigFlag KConfigBase::WriteConfigFlag KConfigBase WriteConfigFlag KConfigBase::WriteConfigFlag KConfigBase WriteConfigFlag KConfigBase::WriteConfigFlag KConfigBase WriteConfigFlag KConfigBase::WriteConfigFlag KConfigBase WriteConfigFlag KConfigBase::WriteConfigFlag KConfigBase", "text": ""}, {"type": "enumvalue", "name": "KConfigBase::Persistent", "url": "classKConfigBase.html#a748289f31b54c48d2ef03d66546718aaa3e28cc02cc1ac896cd9b12f4797adef9", "keyword": "Persistent KConfigBase::Persistent KConfigBase Persistent KConfigBase::Persistent KConfigBase Persistent KConfigBase::Persistent KConfigBase Persistent KConfigBase::Persistent KConfigBase Persistent KConfigBase::Persistent KConfigBase", "text": "Save this entry when saving the config object"}, {"type": "enumvalue", "name": "KConfigBase::Global", "url": "classKConfigBase.html#a748289f31b54c48d2ef03d66546718aaa5fc9519c18ccdbfcd106d32fd461365d", "keyword": "Global KConfigBase::Global KConfigBase Global KConfigBase::Global KConfigBase Global KConfigBase::Global KConfigBase Global KConfigBase::Global KConfigBase Global KConfigBase::Global KConfigBase", "text": "Save the entry to the global KDE config file instead of the application specific config file"}, {"type": "enumvalue", "name": "KConfigBase::Localized", "url": "classKConfigBase.html#a748289f31b54c48d2ef03d66546718aaaa118a385b8191369484b54047d0a8d98", "keyword": "Localized KConfigBase::Localized KConfigBase Localized KConfigBase::Localized KConfigBase Localized KConfigBase::Localized KConfigBase Localized KConfigBase::Localized KConfigBase Localized KConfigBase::Localized KConfigBase", "text": "Add the locale tag to the key when writing it"}, {"type": "enumvalue", "name": "KConfigBase::Normal", "url": "classKConfigBase.html#a748289f31b54c48d2ef03d66546718aaab94aac9e996e8ddf7c42c74e323632fd", "keyword": "Normal KConfigBase::Normal KConfigBase Normal KConfigBase::Normal KConfigBase Normal KConfigBase::Normal KConfigBase Normal KConfigBase::Normal KConfigBase Normal KConfigBase::Normal KConfigBase", "text": "Save the entry to the application specific config file without a locale tag This is the default"}, {"type": "function", "name": "KConfig::KConfig", "url": "classKConfig.html#a091ffa858c9c0cd2d474ad7b93266dad", "keyword": "KConfig KConfig::KConfig KConfig KConfig KConfig::KConfig KConfig KConfig KConfig::KConfig KConfig", "text": "If an absolute path is specified for file that file will be used as the store for the configuration settings If a non-absolute path is provided the file will be looked for in the standard directory specified by type If no path is provided a default configuration file will be used based on the name of the main application component mode determines whether the user or global settings will be allowed to influence the values returned by this object See OpenFlags for more details You probably want to use KSharedConfig::openConfig instead file the name of the file If an empty string is passed in and SimpleConfig is passed in for the OpenFlags then an in-memory KConfig object is created which will not write out to file nor which requires any file in the filesystem at all mode how global settings should affect the configuration options exposed by this KConfig object type The standard directory to look for the configuration file in KSharedConfig::openConfig(const QString&, OpenFlags, QStandardPaths::StandardLocation)"}, {"type": "function", "name": "KConfig::KConfig", "url": "classKConfig.html#ae1812a9184a6630dca1b365fa4e2070e", "keyword": "KConfig KConfig::KConfig KConfig KConfig KConfig::KConfig KConfig KConfig KConfig::KConfig KConfig", "text": "Creates a KConfig object using the specified backend If the backend can not be found or loaded then the standard configuration parser is used as a fallback file the file to be parsed backend the backend to load type where to look for the file if an absolute path is not provided 4.1"}, {"type": "function", "name": "KConfig::checkUpdate", "url": "classKConfig.html#a7146ac7f1390e5040e280858649b4054", "keyword": "checkUpdate KConfig::checkUpdate KConfig checkUpdate KConfig::checkUpdate KConfig checkUpdate KConfig::checkUpdate KConfig", "text": "If the configuration file does not contain the update id as contained in updateFile kconf_update is run to update the configuration file If you install config update files with critical fixes you may wish to use this method to verify that a critical update has indeed been performed to catch the case where a user restores an old config file from backup that has not been updated yet id the update to check updateFile the file containing the update"}, {"type": "function", "name": "KConfig::copyTo", "url": "classKConfig.html#a557e059c7c1be4b00b19ef9943b2f1ae", "keyword": "copyTo KConfig::copyTo KConfig copyTo KConfig::copyTo KConfig copyTo KConfig::copyTo KConfig", "text": "The configuration will not actually be saved to file until the returned object is destroyed or sync() is called on it Do not forget to delete the returned KConfig object if config was 0 file the new config object will save itself to config if not 0 copy to the given KConfig object rather than creating a new one config if it was set otherwise a new KConfig object"}, {"type": "function", "name": "KConfig::entryMap", "url": "classKConfig.html#a4788d22c4c3719a2a3d853ba907bc867", "keyword": "entryMap KConfig::entryMap KConfig entryMap KConfig::entryMap KConfig entryMap KConfig::entryMap KConfig", "text": "The entries are all returned as strings aGroup The group to get entries from A map of entries in the group specified indexed by key The returned map may be empty if the group is empty or not found QMap"}, {"type": "function", "name": "KConfig::groupList", "url": "classKConfig.html#a819f390d0f4db6835801239b23a43775", "keyword": "groupList KConfig::groupList KConfig groupList KConfig::groupList KConfig groupList KConfig::groupList KConfig", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConfig::isDirty", "url": "classKConfig.html#ad7e59d598bed2e18e230963fec121f76", "keyword": "isDirty KConfig::isDirty KConfig isDirty KConfig::isDirty KConfig isDirty KConfig::isDirty KConfig", "text": "4.12"}, {"type": "function", "name": "KConfig::locationType", "url": "classKConfig.html#ab472b7495fdfd737613217ae8d21394e", "keyword": "locationType KConfig::locationType KConfig locationType KConfig::locationType KConfig locationType KConfig::locationType KConfig", "text": "Used by KSharedConfig 5.0"}, {"type": "function", "name": "KConfig::markAsClean", "url": "classKConfig.html#a2ad8cc41e9d976124d1a9e8a16b6990d", "keyword": "markAsClean KConfig::markAsClean KConfig markAsClean KConfig::markAsClean KConfig markAsClean KConfig::markAsClean KConfig", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConfig::name", "url": "classKConfig.html#a542fd0e22b133a5982c06e55fcdd574e", "keyword": "name KConfig::name KConfig name KConfig::name KConfig name KConfig::name KConfig", "text": ""}, {"type": "function", "name": "KConfig::openFlags", "url": "classKConfig.html#ab5f93423ec3b71d109518c158fa63af3", "keyword": "openFlags KConfig::openFlags KConfig openFlags KConfig::openFlags KConfig openFlags KConfig::openFlags KConfig", "text": "the flags this object was opened with 5.3"}, {"type": "function", "name": "KConfig::reparseConfiguration", "url": "classKConfig.html#a46f2e340c44261c2b58496bc64b31106", "keyword": "reparseConfiguration KConfig::reparseConfiguration KConfig reparseConfiguration KConfig::reparseConfiguration KConfig reparseConfiguration KConfig::reparseConfiguration KConfig", "text": ""}, {"type": "function", "name": "KConfig::sync", "url": "classKConfig.html#a4cd4e642d6d2120d0a3db05aa87d1c97", "keyword": "sync KConfig::sync KConfig sync KConfig::sync KConfig sync KConfig::sync KConfig", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConfig::accessMode", "url": "classKConfig.html#a1a2c529979c9f7700e1d194c77cd183e", "keyword": "accessMode KConfig::accessMode KConfig accessMode KConfig::accessMode KConfig accessMode KConfig::accessMode KConfig", "text": "configuration object state Reimplemented from superclass"}, {"type": "function", "name": "KConfig::isConfigWritable", "url": "classKConfig.html#ac3b7638c220d43607dc701781f482ad9", "keyword": "isConfigWritable KConfig::isConfigWritable KConfig isConfigWritable KConfig::isConfigWritable KConfig isConfigWritable KConfig::isConfigWritable KConfig", "text": "If warnUser is true and the configuration cannot be written to ie this method returns false a warning message box will be shown to the user telling them to contact their system administrator to get the problem fixed The most likely cause for this method returning false is that the user does not have write permission for the configuration file warnUser whether to show a warning message to the user if the configuration cannot be written to true if the configuration can be written to false if the configuration cannot be written to"}, {"type": "function", "name": "KConfig::addConfigSources", "url": "classKConfig.html#abe8618e08321df7218354795c7c50d64", "keyword": "addConfigSources KConfig::addConfigSources KConfig addConfigSources KConfig::addConfigSources KConfig addConfigSources KConfig::addConfigSources KConfig", "text": "Adds the list of configuration sources to the merge stack Currently only files are accepted as configuration sources The first entry in sources is treated as the most general and will be overridden by the second entry The settings in the final entry in sources will override all the other sources provided in the list The settings in sources will also be overridden by the sources provided by any previous calls to addConfigSources() The settings in the global configuration sources will be overridden by the sources provided to this method IncludeGlobals All the sources provided to any call to this method will be overridden by any files that cascade from the source provided to the constructor CascadeConfig which will in turn be overridden by the source provided to the constructor Note that only the most specific file ie the file provided to the constructor will be written to by this object The state is automatically updated by this method so there is no need to call reparseConfiguration() sources A list of extra config sources"}, {"type": "function", "name": "KConfig::locale", "url": "classKConfig.html#a45ea9edca6c08d313cedd970f0db0a94", "keyword": "locale KConfig::locale KConfig locale KConfig::locale KConfig locale KConfig::locale KConfig", "text": "Returns the current locale"}, {"type": "function", "name": "KConfig::setLocale", "url": "classKConfig.html#ae364df3c07e00111821d132d034fb75b", "keyword": "setLocale KConfig::setLocale KConfig setLocale KConfig::setLocale KConfig setLocale KConfig::setLocale KConfig", "text": "The global locale is used by default If set to the empty string no locale will be matched This effectively disables reading translated entries true if locale was changed false if the call had no effect eg aLocale was already the current locale for this object"}, {"type": "function", "name": "KConfig::setReadDefaults", "url": "classKConfig.html#a4c6bc213d77306a6f83b4c45ea344991", "keyword": "setReadDefaults KConfig::setReadDefaults KConfig setReadDefaults KConfig::setReadDefaults KConfig setReadDefaults KConfig::setReadDefaults KConfig", "text": "When set all readEntry calls return the system-wide default values instead of the user s settings This is off by default b whether to read the system-wide defaults instead of the user s settings"}, {"type": "function", "name": "KConfig::readDefaults", "url": "classKConfig.html#a6be7f2fac9dd3ae7aef98107b4f36588", "keyword": "readDefaults KConfig::readDefaults KConfig readDefaults KConfig::readDefaults KConfig readDefaults KConfig::readDefaults KConfig", "text": "true if the system-wide defaults will be read instead of the user s settings"}, {"type": "function", "name": "KConfig::isImmutable", "url": "classKConfig.html#a6d3489338799a217a36a84981c86dfc7", "keyword": "isImmutable KConfig::isImmutable KConfig isImmutable KConfig::isImmutable KConfig isImmutable KConfig::isImmutable KConfig", "text": "immutability Reimplemented from superclass"}, {"type": "function", "name": "KConfig::setForceGlobal", "url": "classKConfig.html#ad23a0ea745b472eef64581d6df5bb25d", "keyword": "setForceGlobal KConfig::setForceGlobal KConfig setForceGlobal KConfig::setForceGlobal KConfig setForceGlobal KConfig::setForceGlobal KConfig", "text": "Forces all following write-operations to be performed on kdeglobals independent of the Global flag in writeEntry() force true to force writing to kdeglobals forceGlobal"}, {"type": "function", "name": "KConfig::forceGlobal", "url": "classKConfig.html#a50102fa699937efa6fa237ba2569cc92", "keyword": "forceGlobal KConfig::forceGlobal KConfig forceGlobal KConfig::forceGlobal KConfig forceGlobal KConfig::forceGlobal KConfig", "text": "Returns whether all entries are being written to kdeglobals true if all entries are being written to kdeglobals setForceGlobal"}, {"type": "function", "name": "KConfigBase::~KConfigBase", "url": "classKConfigBase.html#a9d5f14f757f09817f3aa1abcd3b5400d", "keyword": "KConfigBase::~KConfigBase KConfigBase KConfigBase::~KConfigBase KConfigBase KConfigBase::~KConfigBase KConfigBase KConfigBase::~KConfigBase KConfigBase KConfigBase::~KConfigBase KConfigBase", "text": ""}, {"type": "function", "name": "KConfigBase::deleteGroup", "url": "classKConfigBase.html#a6251665543e7b49c9592aafb59c920f5", "keyword": "deleteGroup KConfigBase::deleteGroup KConfigBase deleteGroup KConfigBase::deleteGroup KConfigBase deleteGroup KConfigBase::deleteGroup KConfigBase deleteGroup KConfigBase::deleteGroup KConfigBase deleteGroup KConfigBase::deleteGroup KConfigBase", "text": "This marks aGroup as deleted in the config object This effectively removes any cascaded values from config files earlier in the stack"}, {"type": "function", "name": "KConfigBase::group", "url": "classKConfigBase.html#afbb86fb82d1aba5b76e3b2fe76dbfb02", "keyword": "group KConfigBase::group KConfigBase group KConfigBase::group KConfigBase group KConfigBase::group KConfigBase group KConfigBase::group KConfigBase group KConfigBase::group KConfigBase", "text": "group the group to open Pass a null string on to the KConfig object to obtain a handle on the root group The list of groups"}, {"type": "function", "name": "KConfigBase::group", "url": "classKConfigBase.html#acf64282fc205398c3c8e6c9705938c7a", "keyword": "group KConfigBase::group KConfigBase group KConfigBase::group KConfigBase group KConfigBase::group KConfigBase group KConfigBase::group KConfigBase group KConfigBase::group KConfigBase", "text": ""}, {"type": "function", "name": "KConfigBase::hasGroup", "url": "classKConfigBase.html#ac8581bb5f5d885235eb27261c7be70f4", "keyword": "hasGroup KConfigBase::hasGroup KConfigBase hasGroup KConfigBase::hasGroup KConfigBase hasGroup KConfigBase::hasGroup KConfigBase hasGroup KConfigBase::hasGroup KConfigBase hasGroup KConfigBase::hasGroup KConfigBase", "text": "group The group to search for true if the group exists"}, {"type": "function", "name": "KConfigBase::isGroupImmutable", "url": "classKConfigBase.html#ae0361106060ef97c8b592cf5a72b8670", "keyword": "isGroupImmutable KConfigBase::isGroupImmutable KConfigBase isGroupImmutable KConfigBase::isGroupImmutable KConfigBase isGroupImmutable KConfigBase::isGroupImmutable KConfigBase isGroupImmutable KConfigBase::isGroupImmutable KConfigBase isGroupImmutable KConfigBase::isGroupImmutable KConfigBase", "text": "aGroup The group to check for immutability false if the entries in aGroup can be modified"}, {"type": "function", "name": "KConfig::setMainConfigName", "url": "classKConfig.html#a99e61e61cbeaeeaf23d63f946e788823", "keyword": "setMainConfigName KConfig::setMainConfigName KConfig setMainConfigName KConfig::setMainConfigName KConfig setMainConfigName KConfig::setMainConfigName KConfig", "text": "5.0"}, {"type": "function", "name": "KConfig::virtual_hook", "url": "classKConfig.html#a64f3a7098b95aff1b0a864ed031b051a", "keyword": "virtual_hook KConfig::virtual_hook KConfig virtual_hook KConfig::virtual_hook KConfig virtual_hook KConfig::virtual_hook KConfig", "text": "Unused in this class"}, {"type": "class", "name": "KConfigBackend", "url": "classKConfigBackend.html", "keyword": "KConfigBackend", "text": "KDELibs only provides an INI backend but this class can be used to create plugins that allow access to other file formats and configuration systems"}, {"type": "enum", "name": "KConfigBackend::ParseInfo", "url": "classKConfigBackend.html#ab774372a3461074028e659be4815217e", "keyword": "ParseInfo KConfigBackend::ParseInfo KConfigBackend", "text": ""}, {"type": "enumvalue", "name": "KConfigBackend::ParseImmutable", "url": "classKConfigBackend.html#ab774372a3461074028e659be4815217eab3022372d7e1b15a13a29de415d38ead", "keyword": "ParseImmutable KConfigBackend::ParseImmutable KConfigBackend", "text": "the configuration was opened read/write"}, {"type": "enumvalue", "name": "KConfigBackend::ParseOpenError", "url": "classKConfigBackend.html#ab774372a3461074028e659be4815217ea35f44ac42c249066c934d3b1285eb0a9", "keyword": "ParseOpenError KConfigBackend::ParseOpenError KConfigBackend", "text": "the configuration is immutable the configuration could not be opened"}, {"type": "enum", "name": "KConfigBackend::ParseOption", "url": "classKConfigBackend.html#aaff7755a40a2c34f735105c42ae4fb53", "keyword": "ParseOption KConfigBackend::ParseOption KConfigBackend", "text": ""}, {"type": "enumvalue", "name": "KConfigBackend::ParseDefaults", "url": "classKConfigBackend.html#aaff7755a40a2c34f735105c42ae4fb53adf3b6233ae11d404d1ad7465b0bf81a5", "keyword": "ParseDefaults KConfigBackend::ParseDefaults KConfigBackend", "text": "entries should be marked as global"}, {"type": "enumvalue", "name": "KConfigBackend::ParseExpansions", "url": "classKConfigBackend.html#aaff7755a40a2c34f735105c42ae4fb53a0beb651513e1c35a8025bb1f1bfdb058", "keyword": "ParseExpansions KConfigBackend::ParseExpansions KConfigBackend", "text": "entries should be marked as default"}, {"type": "enum", "name": "KConfigBackend::WriteOption", "url": "classKConfigBackend.html#a87174635931d44906580227a9416494f", "keyword": "WriteOption KConfigBackend::WriteOption KConfigBackend", "text": ""}, {"type": "function", "name": "KConfigBackend::~KConfigBackend", "url": "classKConfigBackend.html#a4182de9547e9e0eb65c0dd29fa4ff770", "keyword": "KConfigBackend::~KConfigBackend KConfigBackend", "text": ""}, {"type": "function", "name": "KConfigBackend::accessMode", "url": "classKConfigBackend.html#ac378680ce0bcaed31cd6977d163e08f9", "keyword": "accessMode KConfigBackend::accessMode KConfigBackend", "text": "the read/write status of the configuration object KConfigBase::AccessMode"}, {"type": "function", "name": "KConfigBackend::createEnclosing", "url": "classKConfigBackend.html#ada2fd42a230f5dc2f659505ef011dc7a", "keyword": "createEnclosing KConfigBackend::createEnclosing KConfigBackend", "text": "For example if the configuration object is a file this should create the parent directory"}, {"type": "function", "name": "KConfigBackend::filePath", "url": "classKConfigBackend.html#a8ca66283ea6caeadacd04780ff8b8eb5", "keyword": "filePath KConfigBackend::filePath KConfigBackend", "text": "the absolute path to the object"}, {"type": "function", "name": "KConfigBackend::isLocked", "url": "classKConfigBackend.html#afeb2e750309c98512a6a5ebfced555ac", "keyword": "isLocked KConfigBackend::isLocked KConfigBackend", "text": "true if the file is locked false if it is not locked"}, {"type": "function", "name": "KConfigBackend::isWritable", "url": "classKConfigBackend.html#a16e8558c49dc0caaac0701abb12d0a7b", "keyword": "isWritable KConfigBackend::isWritable KConfigBackend", "text": "true if the configuration is writable false if it is immutable"}, {"type": "function", "name": "KConfigBackend::lastModified", "url": "classKConfigBackend.html#aed08b45e67186e11ae2dd8df150ef9c2", "keyword": "lastModified KConfigBackend::lastModified KConfigBackend", "text": "the date and time when the object was last modified"}, {"type": "function", "name": "KConfigBackend::lock", "url": "classKConfigBackend.html#af3519f25eac75818fd4666d33c1c8d87", "keyword": "lock KConfigBackend::lock KConfigBackend", "text": ""}, {"type": "function", "name": "KConfigBackend::nonWritableErrorMessage", "url": "classKConfigBackend.html#ad8a5ec10db3a03315297456d6880306e", "keyword": "nonWritableErrorMessage KConfigBackend::nonWritableErrorMessage KConfigBackend", "text": "The return value when isWritable() returns true is undefined a translated user-visible explanation for the configuration object not being writable"}, {"type": "function", "name": "KConfigBackend::parseConfig", "url": "classKConfigBackend.html#ace9b73d582d8a706d5ae5138ca92cca4", "keyword": "parseConfig KConfigBackend::parseConfig KConfigBackend", "text": "locale the locale to read entries for if the backend supports localized entries pWriteBackMap the KEntryMap where the entries are placed options ParseOptions ParseInfo"}, {"type": "function", "name": "KConfigBackend::setFilePath", "url": "classKConfigBackend.html#ae62bc4ba7984d0c483e677bf919f14f9", "keyword": "setFilePath KConfigBackend::setFilePath KConfigBackend", "text": "path MUST be absolute path the absolute file path"}, {"type": "function", "name": "KConfigBackend::size", "url": "classKConfigBackend.html#ac4821f5ba8a84120ca657e06fe4a14f8", "keyword": "size KConfigBackend::size KConfigBackend", "text": "the size of the object"}, {"type": "function", "name": "KConfigBackend::unlock", "url": "classKConfigBackend.html#a541d88d04599f1540d5df488d7e56b89", "keyword": "unlock KConfigBackend::unlock KConfigBackend", "text": ""}, {"type": "function", "name": "KConfigBackend::writeConfig", "url": "classKConfigBackend.html#af166a0a65306eaa0104be0f1bb9ba730", "keyword": "writeConfig KConfigBackend::writeConfig KConfigBackend", "text": "locale the locale to write entries for if the backend supports localized entries entryMap the KEntryMap containing the config object s entries options WriteOptions true if the write was successful false if writing the configuration failed"}, {"type": "function", "name": "KConfigBackend::create", "url": "classKConfigBackend.html#a2158974298b3beab44e6a94ae4d44e0b", "keyword": "create KConfigBackend::create KConfigBackend", "text": "If no system is given or the given system is unknown this method tries to determine the correct backend to use fileName the absolute file name of the configuration file system the configuration system to use a KConfigBackend object to be used with KConfig"}, {"type": "function", "name": "KConfigBackend::registerMappings", "url": "classKConfigBackend.html#a3a03c6a01750c6af1d2b73db49face05", "keyword": "registerMappings KConfigBackend::registerMappings KConfigBackend", "text": "Allows you to tell KConfigBackend that create() should use a particular backend for a particular file or directory currently does nothing entryMap the KEntryMap to build the mappings from"}, {"type": "class", "name": "KConfigBase", "url": "classKConfigBase.html", "keyword": "KConfigBase", "text": "KConfigBase allows a component of an application to persists its configuration without the component knowing if it is storing the configuration into a top level KConfig or a KConfigGroup inside a KConfig instance"}, {"type": "function", "name": "KConfigBase::accessMode", "url": "classKConfigBase.html#aabeafa7717ddf6044b10ce77f0e6eecd", "keyword": "accessMode KConfigBase::accessMode KConfigBase", "text": "Possible return values are NoAccess the application-specific config file could not be opened neither read-write nor read-only ReadOnly the application-specific config file is opened read-only but not read-write and ReadWrite the application-specific config file is opened read-write the access mode of the app-config object"}, {"type": "function", "name": "KConfigBase::groupList", "url": "classKConfigBase.html#a20c2e6795c7bee2843c6e1c130da6496", "keyword": "groupList KConfigBase::groupList KConfigBase", "text": "The list of groups"}, {"type": "function", "name": "KConfigBase::isImmutable", "url": "classKConfigBase.html#a72fc1c0ff46d7ab9cdcc0e4ed9e8a9ab", "keyword": "isImmutable KConfigBase::isImmutable KConfigBase", "text": "whether changes may be made to this configuration object"}, {"type": "function", "name": "KConfigBase::markAsClean", "url": "classKConfigBase.html#a69c37b44524887c5941a4f5489372147", "keyword": "markAsClean KConfigBase::markAsClean KConfigBase", "text": ""}, {"type": "function", "name": "KConfigBase::sync", "url": "classKConfigBase.html#af93541d8fab97ac1371daf64c83d8847", "keyword": "sync KConfigBase::sync KConfigBase", "text": "Unrelated concurrent changes to the same file are merged and thus not overwritten Note however that this object is not automatically updated with those changes"}, {"type": "function", "name": "KConfigBase::virtual_hook", "url": "classKConfigBase.html#a7069e1638523be70f8435dd0a5e7dd28", "keyword": "virtual_hook KConfigBase::virtual_hook KConfigBase virtual_hook KConfigBase::virtual_hook KConfigBase", "text": "Unused in this class"}, {"type": "class", "name": "KConfigGroup", "url": "classKConfigGroup.html", "keyword": "KConfigGroup", "text": "If you want to access the top-level entries of a KConfig object which are not associated with any group use an empty group name A KConfigGroup will be read-only if it is constructed from a const config object or from another read-only group"}, {"type": "function", "name": "KConfigGroup::KConfigGroup", "url": "classKConfigGroup.html#aa6cf4ce93bb212d17ee05c58d387a70b", "keyword": "KConfigGroup KConfigGroup::KConfigGroup KConfigGroup", "text": "isValid"}, {"type": "function", "name": "KConfigGroup::KConfigGroup", "url": "classKConfigGroup.html#adb6cc4e1b091dac8443c436684fbf4c5", "keyword": "KConfigGroup KConfigGroup::KConfigGroup KConfigGroup", "text": "This allows the creation of subgroups by passing another group as master group is the group name encoded in UTF-8"}, {"type": "function", "name": "KConfigGroup::KConfigGroup", "url": "classKConfigGroup.html#a1dd35f276d852b7d20c6cac52c2e4f42", "keyword": "KConfigGroup KConfigGroup::KConfigGroup KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::KConfigGroup", "url": "classKConfigGroup.html#a508a3b78dab1da62dce6366428c645b2", "keyword": "KConfigGroup KConfigGroup::KConfigGroup KConfigGroup", "text": "A read-only group will silently ignore any attempts to write to it This allows the creation of subgroups by passing an existing group as master"}, {"type": "function", "name": "KConfigGroup::KConfigGroup", "url": "classKConfigGroup.html#a4d3a8aa00771b30006e0a1f9c4439ba1", "keyword": "KConfigGroup KConfigGroup::KConfigGroup KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::KConfigGroup", "url": "classKConfigGroup.html#aa5ab43e257014ad42d470656718173a4", "keyword": "KConfigGroup KConfigGroup::KConfigGroup KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::KConfigGroup", "url": "classKConfigGroup.html#aa9d1cf8ee2b07facfdb8f3f57fdeb5f3", "keyword": "KConfigGroup KConfigGroup::KConfigGroup KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::KConfigGroup", "url": "classKConfigGroup.html#a0ed6418188c6fe39cbcffefb6bb7038a", "keyword": "KConfigGroup KConfigGroup::KConfigGroup KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::accessMode", "url": "classKConfigGroup.html#a6867f0b748c55b7cf66049a1edb8792c", "keyword": "accessMode KConfigGroup::accessMode KConfigGroup", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConfigGroup::changeGroup", "url": "classKConfigGroup.html#ad2dc1ccc586c076536ea81fed5504612", "keyword": "changeGroup KConfigGroup::changeGroup KConfigGroup", "text": "Create another KConfigGroup from the parent of this group instead"}, {"type": "function", "name": "KConfigGroup::changeGroup", "url": "classKConfigGroup.html#a6e5a4b506f37e7841726c7248ee82c01", "keyword": "changeGroup KConfigGroup::changeGroup KConfigGroup", "text": "Create another KConfigGroup from the parent of this group instead"}, {"type": "function", "name": "KConfigGroup::config", "url": "classKConfigGroup.html#abbc627fe4c08541008570f55cfbfac7c", "keyword": "config KConfigGroup::config KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::config", "url": "classKConfigGroup.html#ae27e584dd3f2b87b6265a30f25b587d4", "keyword": "config KConfigGroup::config KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::copyTo", "url": "classKConfigGroup.html#affa3af4f1c3a03a296758edf308ea836", "keyword": "copyTo KConfigGroup::copyTo KConfigGroup", "text": "other can be either another group or a different file other the configuration object to copy this group s entries to pFlags the flags to use when writing the entries to the other configuration object 4.1"}, {"type": "function", "name": "KConfigGroup::deleteEntry", "url": "classKConfigGroup.html#aca71f9228c741eb46e346bb1f2c847aa", "keyword": "deleteEntry KConfigGroup::deleteEntry KConfigGroup", "text": "This also hides system wide defaults pKey the key to delete pFlags the flags to use when deleting this entry deleteGroup() readEntry() writeEntry()"}, {"type": "function", "name": "KConfigGroup::deleteEntry", "url": "classKConfigGroup.html#a1c37d02c1945686037ace2a11e194fa2", "keyword": "deleteEntry KConfigGroup::deleteEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::deleteGroup", "url": "classKConfigGroup.html#a6a5f868f8eb3409422b9cc4b6dffbeb2", "keyword": "deleteGroup KConfigGroup::deleteGroup KConfigGroup", "text": "pFlags flags passed to KConfig::deleteGroup deleteEntry()"}, {"type": "function", "name": "KConfigGroup::entryMap", "url": "classKConfigGroup.html#adaf18365e1cd97a7fb2e8c90d3750112", "keyword": "entryMap KConfigGroup::entryMap KConfigGroup", "text": "Only the actual entry string is returned none of the other internal data should be included a map of entries in this group indexed by key"}, {"type": "function", "name": "KConfigGroup::exists", "url": "classKConfigGroup.html#ac42b1e7095936a557cbddec177de3d7b", "keyword": "exists KConfigGroup::exists KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::groupList", "url": "classKConfigGroup.html#ae4b78d590caa1d9847dad9e295b68ea9", "keyword": "groupList KConfigGroup::groupList KConfigGroup", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConfigGroup::hasDefault", "url": "classKConfigGroup.html#a24931c0b4eda8864a68ce0a23b3019df", "keyword": "hasDefault KConfigGroup::hasDefault KConfigGroup", "text": "If an application computes a default value at runtime for a certain entry e.g like then it may wish to make the following check before writing back changes This ensures that as long as the entry is not modified to differ from the computed default the application will keep using the computed default and will follow changes the computed default makes over time key the key of the entry to check true if the global or system settings files specify a default for key in this group false otherwise"}, {"type": "function", "name": "KConfigGroup::hasDefault", "url": "classKConfigGroup.html#a3d5d17d7000d1a659ff02eb8cffb29c7", "keyword": "hasDefault KConfigGroup::hasDefault KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::hasKey", "url": "classKConfigGroup.html#a2516fa21b2747bd213bdbff79e591fab", "keyword": "hasKey KConfigGroup::hasKey KConfigGroup", "text": "Use this to determine if a key is not specified for the current group hasKey() returns false If this returns false for a key readEntry() and its variants will return the default value passed to them key the key to search for true if the key is defined in this group by any of the configuration sources false otherwise readEntry()"}, {"type": "function", "name": "KConfigGroup::hasKey", "url": "classKConfigGroup.html#a3eb88155285dfda54ab6523c4dd5888f", "keyword": "hasKey KConfigGroup::hasKey KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::isEntryImmutable", "url": "classKConfigGroup.html#a506e50afd8ccb9d1bcc5f74165f9b13e", "keyword": "isEntryImmutable KConfigGroup::isEntryImmutable KConfigGroup", "text": "If isImmutable() returns true then this method will return true for all inputs key the key to check false if the key may be changed using this configuration group object true otherwise"}, {"type": "function", "name": "KConfigGroup::isEntryImmutable", "url": "classKConfigGroup.html#a58c8999b4447e667fd7b59984f779c48", "keyword": "isEntryImmutable KConfigGroup::isEntryImmutable KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::isImmutable", "url": "classKConfigGroup.html#aad08829154220cd99a333f241c648542", "keyword": "isImmutable KConfigGroup::isImmutable KConfigGroup", "text": "false if the group may be changed true otherwise"}, {"type": "function", "name": "KConfigGroup::isValid", "url": "classKConfigGroup.html#a754c98908f1fa22924b8a8a987cd25ba", "keyword": "isValid KConfigGroup::isValid KConfigGroup", "text": "A group is invalid if it was constructed without arguments You should not call any functions on an invalid group true if the group is valid false if it is invalid"}, {"type": "function", "name": "KConfigGroup::keyList", "url": "classKConfigGroup.html#af7cdf67008751f50038d6641129bc61c", "keyword": "keyList KConfigGroup::keyList KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::markAsClean", "url": "classKConfigGroup.html#aa3b0aea7907b3ab8b13588003073a75e", "keyword": "markAsClean KConfigGroup::markAsClean KConfigGroup", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KConfigGroup::name", "url": "classKConfigGroup.html#a19560ac6fd3755872e9c715ef94c6d3d", "keyword": "name KConfigGroup::name KConfigGroup", "text": "The root group is named"}, {"type": "function", "name": "KConfigGroup::parent", "url": "classKConfigGroup.html#ad9b6a4f9c71ab73696854241cdf7f17c", "keyword": "parent KConfigGroup::parent KConfigGroup", "text": "the parent group or an invalid group if this is a top-level group 4.1"}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a12ce78aa3ac7229ecdf5db9ce882a314", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": "This template method makes it possible to write QString foo readEntry QString and the same with all other types supported by QVariant The return type of the method is simply the same as the type of the default value readEntry Qt::white will not compile because Qt::white is an enum You must turn it into readEntry QColor(Qt::white) Only the following QVariant types are allowed String StringList List Font Point Rect Size Color Int UInt Bool Double LongLong ULongLong DateTime and Date key The key to search for aDefault A default value returned if the key was not found The value for this key or aDefault writeEntry() deleteEntry() hasKey()"}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a738106077c450aab8d692c8eb49ae99d", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a6c3996918b882232adb7d848459ee31e", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": "key the key to search for aDefault a default value returned if the key was not found the value for this key or aDefault if the key was not found writeEntry() deleteEntry() hasKey()"}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a0313fbcf3327fab0ee1a87ffabfddad3", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a5e7d1b835e413ea49b7e57eeac6dd4fa", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": "If you want to read a path please use readPathEntry() key the key to search for aDefault a default value returned if the key was not found the value for this key or aDefault if the key was not found readPathEntry() writeEntry() deleteEntry() hasKey()"}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a0835b34c334a2365677c62b4216b7561", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a524e533328faec01f5745d4034a8cac0", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#acb9e67511ec20bc2dbdb8ad34000b58a", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a81038f73edc839007b6ff491faf1af67", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": "This function doesn t convert the items returned to any type It s actually a list of QVariant::String s If you want the items converted to a specific type use readEntry(const char*, const QList<T>&) const"}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a17ae62969de878cce73fd0d354cd2022", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#ab3bfe39c0217bfe0d5f991d24ffdd7c5", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": "key The key to search for aDefault The default value to use if the key does not exist The list or aDefault if key does not exist readXdgListEntry() writeEntry() deleteEntry() hasKey()"}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#a77271a35ad9e7482cad1fb3e455e6ae0", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#aa27d512edf4bd66f6803afbe02f0b2f1", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": "key the key to search for aDefault the default value to use if the key does not exist the list or aDefault if key does not exist readXdgListEntry() writeEntry() deleteEntry() hasKey()"}, {"type": "function", "name": "KConfigGroup::readEntry", "url": "classKConfigGroup.html#aed2d5fe01528b5c6f8a05c41e7e512c4", "keyword": "readEntry KConfigGroup::readEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readEntryUntranslated", "url": "classKConfigGroup.html#af10f5f64448189136d6e06c949a73d6e", "keyword": "readEntryUntranslated KConfigGroup::readEntryUntranslated KConfigGroup", "text": "You should not normally need to use this pKey the key to search for aDefault a default value returned if the key was not found the value for this key or aDefault if the key does not exist"}, {"type": "function", "name": "KConfigGroup::readEntryUntranslated", "url": "classKConfigGroup.html#a07461a03ee5a4d184ce0ac52f94f1fd3", "keyword": "readEntryUntranslated KConfigGroup::readEntryUntranslated KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readPathEntry", "url": "classKConfigGroup.html#a34bc0fd083412d23bb7d3759167558db", "keyword": "readPathEntry KConfigGroup::readPathEntry KConfigGroup", "text": "Read the value of an entry specified by pKey in the current group and interpret it as a path This means dollar expansion is activated for this value so that e.g gets expanded pKey The key to search for aDefault A default value returned if the key was not found The value for this key Can be QString() if aDefault is null"}, {"type": "function", "name": "KConfigGroup::readPathEntry", "url": "classKConfigGroup.html#a627e39f83eddf6cd6001408b644272dc", "keyword": "readPathEntry KConfigGroup::readPathEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readPathEntry", "url": "classKConfigGroup.html#a97574e3575df09bfdd00aa3d680ba7c7", "keyword": "readPathEntry KConfigGroup::readPathEntry KConfigGroup", "text": "Read the value of an entry specified by pKey in the current group and interpret it as a list of paths This means dollar expansion is activated for this value so that e.g gets expanded pKey the key to search for aDefault a default value returned if the key was not found the list or aDefault if the key does not exist"}, {"type": "function", "name": "KConfigGroup::readPathEntry", "url": "classKConfigGroup.html#aff5c20f59cb4f95a559b7b9d3f4cae54", "keyword": "readPathEntry KConfigGroup::readPathEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::readXdgListEntry", "url": "classKConfigGroup.html#ae2efcfb6c772efbf3105135e2f11b111", "keyword": "readXdgListEntry KConfigGroup::readXdgListEntry KConfigGroup", "text": "pKey the key to search for aDefault the default value to use if the key does not exist the list or aDefault if pKey does not exist readEntry(const QString&, const QStringList&) const"}, {"type": "function", "name": "KConfigGroup::readXdgListEntry", "url": "classKConfigGroup.html#a7f52482231779a9f677186ec5686676f", "keyword": "readXdgListEntry KConfigGroup::readXdgListEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::reparent", "url": "classKConfigGroup.html#a02d55ee4293463e6f68b2e3a47fabb11", "keyword": "reparent KConfigGroup::reparent KConfigGroup", "text": "other can be another group the top-level KConfig object or a different KConfig object entirely If parent is already the parent of this group this method will have no effect parent the config object to place this group under pFlags the flags to use in determining which storage source to write the data to 4.1"}, {"type": "function", "name": "KConfigGroup::revertToDefault", "url": "classKConfigGroup.html#a989bce78837c87761cff85f5199e20b4", "keyword": "revertToDefault KConfigGroup::revertToDefault KConfigGroup", "text": "Reverts the entry with key key in the current group in the application specific config file to either the system wide default value or the value specified in the global KDE config file To revert entries in the global KDE config file the global KDE config file should be opened explicitly in a separate config object This is not the same as deleting the key as instead the global setting will be copied to the configuration file that this object manipulates key The key of the entry to revert"}, {"type": "function", "name": "KConfigGroup::revertToDefault", "url": "classKConfigGroup.html#afe0a8eff3a3d72108b98835b3851cdeb", "keyword": "revertToDefault KConfigGroup::revertToDefault KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::sync", "url": "classKConfigGroup.html#ad2383ff8d0bc35fd486103f09a4559aa", "keyword": "sync KConfigGroup::sync KConfigGroup", "text": "Reimplemented from superclass Syncs the parent config"}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a676bc549b9a24252bc2f0b11d9f7a3cc", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": "key the key to write to value the value to write pFlags the flags to use when writing this entry readEntry() writeXdgListEntry() deleteEntry()"}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a3f19ef2841865e119fd1af983df58ee0", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a1f812dfbd10f251ff24e5e1559b7270b", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a830eae87db2b01e1bfbeaa325977fefc", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a342c4306bf75c494a1bb68bd91f1815b", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a65b6b05592d420b9dfd7e028456e577c", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a1ab08cd1933d3a1f229ec37b7070e159", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a43693593a1b08e4c84d2957e0e0d79d0", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a69dc13948c1a345587c49a5e4a75aab4", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#adff2eb141a698eea23c00e1a13fb34e6", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a2b935a52d80b2e1af6aa3f26ee0833ef", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a50bd173bc2bddfe4e608a9ae23c9c165", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a8aff6ac427c59deed7c9ded932f6ce72", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#adc94622525de83098e29de67949a22b7", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#a886389574ed97254bea945ff4f01b7d1", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeEntry", "url": "classKConfigGroup.html#abaa64585b55344eef5a9e7d99d99ce6d", "keyword": "writeEntry KConfigGroup::writeEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writePathEntry", "url": "classKConfigGroup.html#a490dda9ae3bee4b3424a54b292b8f784", "keyword": "writePathEntry KConfigGroup::writePathEntry KConfigGroup", "text": "If the path is located under the user s home directory is replaced with in the persistent storage The path should therefore be read back with readPathEntry() pKey the key to write to path the path to write pFlags the flags to use when writing this entry writeEntry() readPathEntry()"}, {"type": "function", "name": "KConfigGroup::writePathEntry", "url": "classKConfigGroup.html#ae9f84184a61aac87ba89264b259c2245", "keyword": "writePathEntry KConfigGroup::writePathEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writePathEntry", "url": "classKConfigGroup.html#a2710901ca8835f0461445180e895f8aa", "keyword": "writePathEntry KConfigGroup::writePathEntry KConfigGroup", "text": "If any of the paths are located under the user s home directory is replaced with in the persistent storage The paths should therefore be read back with readPathEntry() pKey the key to write to value the list to write pFlags the flags to use when writing this entry writeEntry() readPathEntry()"}, {"type": "function", "name": "KConfigGroup::writePathEntry", "url": "classKConfigGroup.html#aac5282eaf0eccb9e1316e761ce2fe22a", "keyword": "writePathEntry KConfigGroup::writePathEntry KConfigGroup", "text": ""}, {"type": "function", "name": "KConfigGroup::writeXdgListEntry", "url": "classKConfigGroup.html#a18f6d63b9aa2628dc80c1f3979a2713b", "keyword": "writeXdgListEntry KConfigGroup::writeXdgListEntry KConfigGroup", "text": "pKey the key to write to value the list to write pFlags the flags to use when writing this entry writeEntry() readXdgListEntry()"}, {"type": "function", "name": "KConfigGroup::writeXdgListEntry", "url": "classKConfigGroup.html#a9fa310b42a924e3afe94e1fe95bb134e", "keyword": "writeXdgListEntry KConfigGroup::writeXdgListEntry KConfigGroup", "text": ""}, {"type": "class", "name": "KConfigLoader", "url": "classKConfigLoader.html", "keyword": "KConfigLoader", "text": "This class allows one to ship an XML file and reconstitute it into a KConfigSkeleton object at runtime Common usage might look like this Alternatively any QIODevice may be used in place of QFile in the example above KConfigLoader is useful if it is not possible to use compiled code and by that the kconfig compiler cannot be used Common examples are scripted plugins which want to provide a configuration interface With the help of KConfigLoader a dynamically loaded ui file can be populated with the stored values and also stored back to the config file An example for populating a QDialog with a dynamically populated UI with the help of a KConfigDialogManager Currently the following data types are supported bools colors datetimes enumerations fonts ints passwords paths strings stringlists uints urls doubles int lists longlongs path lists points rects sizes ulonglongs url lists"}, {"type": "function", "name": "KConfigLoader::KConfigLoader", "url": "classKConfigLoader.html#a449b897eb8dd3ad5653fdd952ae8d6a2", "keyword": "KConfigLoader KConfigLoader::KConfigLoader KConfigLoader", "text": "configFile path to the configuration file to use xml the xml data must be valid KConfigXT data parent optional QObject parent"}, {"type": "function", "name": "KConfigLoader::KConfigLoader", "url": "classKConfigLoader.html#a2d34a1d409df8bdc7f24b61ab16ff4fa", "keyword": "KConfigLoader KConfigLoader::KConfigLoader KConfigLoader", "text": "config the configuration object to use xml the xml data must be valid KConfigXT data parent optional QObject parent"}, {"type": "function", "name": "KConfigLoader::KConfigLoader", "url": "classKConfigLoader.html#a5404b2a0550c5334524a5dc0d9bff719", "keyword": "KConfigLoader KConfigLoader::KConfigLoader KConfigLoader", "text": "config the group to use as the root for configuration items xml the xml data must be valid KConfigXT data parent optional QObject parent"}, {"type": "function", "name": "KConfigLoader::findItem", "url": "classKConfigLoader.html#a5dc14f4320d86cd80924aadd835fc4b7", "keyword": "findItem KConfigLoader::findItem KConfigLoader", "text": "group the group in the config file to look in key the configuration key to find the associated KConfigSkeletonItem or 0 if none"}, {"type": "function", "name": "KConfigLoader::findItemByName", "url": "classKConfigLoader.html#a272d736b36d9644d776ca814d6d93e48", "keyword": "findItemByName KConfigLoader::findItemByName KConfigLoader", "text": ""}, {"type": "function", "name": "KConfigLoader::groupList", "url": "classKConfigLoader.html#a73e10c054853b303c3045725c1b57957", "keyword": "groupList KConfigLoader::groupList KConfigLoader", "text": "the list of groups defined by the XML"}, {"type": "function", "name": "KConfigLoader::hasGroup", "url": "classKConfigLoader.html#a77a0ed13d8a9abe6fcb0c84c345a2ea6", "keyword": "hasGroup KConfigLoader::hasGroup KConfigLoader", "text": "group the name of the group to check for true if the group exists or false if it does not"}, {"type": "function", "name": "KConfigLoader::property", "url": "classKConfigLoader.html#addacb65a7489f27e0bf03265d76b3e75", "keyword": "property KConfigLoader::property KConfigLoader", "text": ""}, {"type": "function", "name": "KConfigSkeleton::KConfigSkeleton", "url": "classKConfigSkeleton.html#ab65c7147b9804fe0a2f0d8d955a10ee0", "keyword": "KConfigSkeleton KConfigSkeleton::KConfigSkeleton KConfigSkeleton KConfigSkeleton KConfigSkeleton::KConfigSkeleton KConfigSkeleton", "text": "configname name of config file If no name is given the default config file as returned by KSharedConfig::openConfig() is used"}, {"type": "function", "name": "KConfigSkeleton::KConfigSkeleton", "url": "classKConfigSkeleton.html#a8c177969e36fba19b34f6c90a57e30d1", "keyword": "KConfigSkeleton KConfigSkeleton::KConfigSkeleton KConfigSkeleton KConfigSkeleton KConfigSkeleton::KConfigSkeleton KConfigSkeleton", "text": "config configuration object to use"}, {"type": "function", "name": "KConfigSkeleton::addItemColor", "url": "classKConfigSkeleton.html#a208b2d17fdff91aad3367e3e939eba6e", "keyword": "addItemColor KConfigSkeleton::addItemColor KConfigSkeleton addItemColor KConfigSkeleton::addItemColor KConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by read() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KConfigSkeleton::addItemFont", "url": "classKConfigSkeleton.html#afddb809939f6827950ba1c39e992afcb", "keyword": "addItemFont KConfigSkeleton::addItemFont KConfigSkeleton addItemFont KConfigSkeleton::addItemFont KConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by read() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::KCoreConfigSkeleton", "url": "classKCoreConfigSkeleton.html#ac7a99c4982c0548cc15fb4f5cf51cb1b", "keyword": "KCoreConfigSkeleton KCoreConfigSkeleton::KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton::KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton::KCoreConfigSkeleton KCoreConfigSkeleton", "text": "configname name of config file If no name is given the default config file as returned by KSharedConfig::openConfig() is used parent the parent object see QObject documentation"}, {"type": "function", "name": "KCoreConfigSkeleton::KCoreConfigSkeleton", "url": "classKCoreConfigSkeleton.html#a4c1d9f45f240de883a4d26944f665c91", "keyword": "KCoreConfigSkeleton KCoreConfigSkeleton::KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton::KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton::KCoreConfigSkeleton KCoreConfigSkeleton", "text": "config configuration object to use parent the parent object see QObject documentation"}, {"type": "function", "name": "KCoreConfigSkeleton::~KCoreConfigSkeleton", "url": "classKCoreConfigSkeleton.html#a7dd27700e60221128f612dbbd964aff5", "keyword": "KCoreConfigSkeleton::~KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton::~KCoreConfigSkeleton KCoreConfigSkeleton KCoreConfigSkeleton::~KCoreConfigSkeleton KCoreConfigSkeleton", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::addItem", "url": "classKCoreConfigSkeleton.html#a2e110a657b1b30e4fa3aa1fc87877381", "keyword": "addItem KCoreConfigSkeleton::addItem KCoreConfigSkeleton addItem KCoreConfigSkeleton::addItem KCoreConfigSkeleton addItem KCoreConfigSkeleton::addItem KCoreConfigSkeleton", "text": "If the name parameter is null take the name from KConfigSkeletonItem::key() Note that all names must be unique but that multiple entries can have the same key if they reside in different groups KCoreConfigSkeleton takes ownership of the KConfigSkeletonItem"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemBool", "url": "classKCoreConfigSkeleton.html#ae9fe1fe173052656f531dc32027d21a1", "keyword": "addItemBool KCoreConfigSkeleton::addItemBool KCoreConfigSkeleton addItemBool KCoreConfigSkeleton::addItemBool KCoreConfigSkeleton addItemBool KCoreConfigSkeleton::addItemBool KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemDateTime", "url": "classKCoreConfigSkeleton.html#a24d8e7fb84cd24465fb15f92d6f49183", "keyword": "addItemDateTime KCoreConfigSkeleton::addItemDateTime KCoreConfigSkeleton addItemDateTime KCoreConfigSkeleton::addItemDateTime KCoreConfigSkeleton addItemDateTime KCoreConfigSkeleton::addItemDateTime KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemDouble", "url": "classKCoreConfigSkeleton.html#a1777091369955d697a936fcb8d297e24", "keyword": "addItemDouble KCoreConfigSkeleton::addItemDouble KCoreConfigSkeleton addItemDouble KCoreConfigSkeleton::addItemDouble KCoreConfigSkeleton addItemDouble KCoreConfigSkeleton::addItemDouble KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemInt", "url": "classKCoreConfigSkeleton.html#ae9bcbd60dcd159036b444f44d48cd7a3", "keyword": "addItemInt KCoreConfigSkeleton::addItemInt KCoreConfigSkeleton addItemInt KCoreConfigSkeleton::addItemInt KCoreConfigSkeleton addItemInt KCoreConfigSkeleton::addItemInt KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemInt64", "url": "classKCoreConfigSkeleton.html#ada0f72551a9d81ac510e9a3ad1e3c4dd", "keyword": "addItemInt64 KCoreConfigSkeleton::addItemInt64 KCoreConfigSkeleton addItemInt64 KCoreConfigSkeleton::addItemInt64 KCoreConfigSkeleton addItemInt64 KCoreConfigSkeleton::addItemInt64 KCoreConfigSkeleton", "text": "Use addItemLongLong()"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemIntList", "url": "classKCoreConfigSkeleton.html#a33de64d20d64c678204b56e1b19c9949", "keyword": "addItemIntList KCoreConfigSkeleton::addItemIntList KCoreConfigSkeleton addItemIntList KCoreConfigSkeleton::addItemIntList KCoreConfigSkeleton addItemIntList KCoreConfigSkeleton::addItemIntList KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemLongLong", "url": "classKCoreConfigSkeleton.html#a1aa401ad36662f764ab97eb6644f0407", "keyword": "addItemLongLong KCoreConfigSkeleton::addItemLongLong KCoreConfigSkeleton addItemLongLong KCoreConfigSkeleton::addItemLongLong KCoreConfigSkeleton addItemLongLong KCoreConfigSkeleton::addItemLongLong KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemPassword", "url": "classKCoreConfigSkeleton.html#a937eeb834d6effa7945e07f4ede192da", "keyword": "addItemPassword KCoreConfigSkeleton::addItemPassword KCoreConfigSkeleton addItemPassword KCoreConfigSkeleton::addItemPassword KCoreConfigSkeleton addItemPassword KCoreConfigSkeleton::addItemPassword KCoreConfigSkeleton", "text": "The string value is written encrypted to the config file Note that the current encryption scheme is very weak name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemPath", "url": "classKCoreConfigSkeleton.html#a7e9906441c2d165d1a546a8a8e4db555", "keyword": "addItemPath KCoreConfigSkeleton::addItemPath KCoreConfigSkeleton addItemPath KCoreConfigSkeleton::addItemPath KCoreConfigSkeleton addItemPath KCoreConfigSkeleton::addItemPath KCoreConfigSkeleton", "text": "The string value is interpreted as a path This means dollar expension is activated for this value so that e.g gets expanded name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemPoint", "url": "classKCoreConfigSkeleton.html#ad3bc535b2520b90e3b69c97ada29963e", "keyword": "addItemPoint KCoreConfigSkeleton::addItemPoint KCoreConfigSkeleton addItemPoint KCoreConfigSkeleton::addItemPoint KCoreConfigSkeleton addItemPoint KCoreConfigSkeleton::addItemPoint KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemProperty", "url": "classKCoreConfigSkeleton.html#ab6580aee5511a0f5afebfc8039122c5a", "keyword": "addItemProperty KCoreConfigSkeleton::addItemProperty KCoreConfigSkeleton addItemProperty KCoreConfigSkeleton::addItemProperty KCoreConfigSkeleton addItemProperty KCoreConfigSkeleton::addItemProperty KCoreConfigSkeleton", "text": "Note that only the following QVariant types are allowed String StringList Font Point Rect Size Color Int UInt Bool Double DateTime and Date name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemRect", "url": "classKCoreConfigSkeleton.html#af8e71b71cdab5b04e1edb36ebae89e9d", "keyword": "addItemRect KCoreConfigSkeleton::addItemRect KCoreConfigSkeleton addItemRect KCoreConfigSkeleton::addItemRect KCoreConfigSkeleton addItemRect KCoreConfigSkeleton::addItemRect KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemSize", "url": "classKCoreConfigSkeleton.html#a121aa6ffb228398b2e9c125dfe2259d3", "keyword": "addItemSize KCoreConfigSkeleton::addItemSize KCoreConfigSkeleton addItemSize KCoreConfigSkeleton::addItemSize KCoreConfigSkeleton addItemSize KCoreConfigSkeleton::addItemSize KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemString", "url": "classKCoreConfigSkeleton.html#a484927ca5dece70e6bb4e3d7ba73f5ac", "keyword": "addItemString KCoreConfigSkeleton::addItemString KCoreConfigSkeleton addItemString KCoreConfigSkeleton::addItemString KCoreConfigSkeleton addItemString KCoreConfigSkeleton::addItemString KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemStringList", "url": "classKCoreConfigSkeleton.html#a56cb6b140e6f09d4e8fcd2cf6a4ed966", "keyword": "addItemStringList KCoreConfigSkeleton::addItemStringList KCoreConfigSkeleton addItemStringList KCoreConfigSkeleton::addItemStringList KCoreConfigSkeleton addItemStringList KCoreConfigSkeleton::addItemStringList KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemUInt", "url": "classKCoreConfigSkeleton.html#ae240fb12a96c4dc9bb09b8cb1c84c1ea", "keyword": "addItemUInt KCoreConfigSkeleton::addItemUInt KCoreConfigSkeleton addItemUInt KCoreConfigSkeleton::addItemUInt KCoreConfigSkeleton addItemUInt KCoreConfigSkeleton::addItemUInt KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemUInt64", "url": "classKCoreConfigSkeleton.html#abb142fb47953459eedcc3b5041047471", "keyword": "addItemUInt64 KCoreConfigSkeleton::addItemUInt64 KCoreConfigSkeleton addItemUInt64 KCoreConfigSkeleton::addItemUInt64 KCoreConfigSkeleton addItemUInt64 KCoreConfigSkeleton::addItemUInt64 KCoreConfigSkeleton", "text": "Use addItemULongLong()"}, {"type": "function", "name": "KCoreConfigSkeleton::addItemULongLong", "url": "classKCoreConfigSkeleton.html#a3235b736a50021e0f5ed235f29cf3a43", "keyword": "addItemULongLong KCoreConfigSkeleton::addItemULongLong KCoreConfigSkeleton addItemULongLong KCoreConfigSkeleton::addItemULongLong KCoreConfigSkeleton addItemULongLong KCoreConfigSkeleton::addItemULongLong KCoreConfigSkeleton", "text": "name Name used to identify this setting Names must be unique reference Pointer to the variable which is set by readConfig() calls and read by save() calls defaultValue Default value which is used when the config file does not yet contain the key of this item key Key used in config file If key is null name is used as key The created item"}, {"type": "function", "name": "KCoreConfigSkeleton::clearItems", "url": "classKCoreConfigSkeleton.html#a91867c87c474049b4ff2b73357c55375", "keyword": "clearItems KCoreConfigSkeleton::clearItems KCoreConfigSkeleton clearItems KCoreConfigSkeleton::clearItems KCoreConfigSkeleton clearItems KCoreConfigSkeleton::clearItems KCoreConfigSkeleton", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::config", "url": "classKCoreConfigSkeleton.html#a7bc2655c974eec0d32f2dde3895beeb6", "keyword": "config KCoreConfigSkeleton::config KCoreConfigSkeleton config KCoreConfigSkeleton::config KCoreConfigSkeleton config KCoreConfigSkeleton::config KCoreConfigSkeleton", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::config", "url": "classKCoreConfigSkeleton.html#ab9dda951fca382deb46e4d1cba372758", "keyword": "config KCoreConfigSkeleton::config KCoreConfigSkeleton config KCoreConfigSkeleton::config KCoreConfigSkeleton config KCoreConfigSkeleton::config KCoreConfigSkeleton", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::currentGroup", "url": "classKCoreConfigSkeleton.html#a3c2b4132e9a6eb94685253bef2bb2ac1", "keyword": "currentGroup KCoreConfigSkeleton::currentGroup KCoreConfigSkeleton currentGroup KCoreConfigSkeleton::currentGroup KCoreConfigSkeleton currentGroup KCoreConfigSkeleton::currentGroup KCoreConfigSkeleton", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::findItem", "url": "classKCoreConfigSkeleton.html#a63e6d8b4c086b00016cd1bdde8b53d6b", "keyword": "findItem KCoreConfigSkeleton::findItem KCoreConfigSkeleton findItem KCoreConfigSkeleton::findItem KCoreConfigSkeleton findItem KCoreConfigSkeleton::findItem KCoreConfigSkeleton", "text": "4.4"}, {"type": "function", "name": "KCoreConfigSkeleton::isImmutable", "url": "classKCoreConfigSkeleton.html#a952f53133075c966204cd33a43e99713", "keyword": "isImmutable KCoreConfigSkeleton::isImmutable KCoreConfigSkeleton isImmutable KCoreConfigSkeleton::isImmutable KCoreConfigSkeleton isImmutable KCoreConfigSkeleton::isImmutable KCoreConfigSkeleton", "text": "4.4"}, {"type": "function", "name": "KCoreConfigSkeleton::items", "url": "classKCoreConfigSkeleton.html#a8de288bfe43c1d8e510bedd2f8b3e40a", "keyword": "items KCoreConfigSkeleton::items KCoreConfigSkeleton items KCoreConfigSkeleton::items KCoreConfigSkeleton items KCoreConfigSkeleton::items KCoreConfigSkeleton", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::load", "url": "classKCoreConfigSkeleton.html#a26867b6cb852187bce178f50f91d5d3f", "keyword": "load KCoreConfigSkeleton::load KCoreConfigSkeleton load KCoreConfigSkeleton::load KCoreConfigSkeleton load KCoreConfigSkeleton::load KCoreConfigSkeleton", "text": "All registered items are set to the values read from disk This method calls usrRead() after reading the settings of the registered items from the KConfig You can override usrRead() in derived classes if you have special requirements"}, {"type": "function", "name": "KCoreConfigSkeleton::read", "url": "classKCoreConfigSkeleton.html#ada026dc97dc0ad74170b04ec2b0a49a5", "keyword": "read KCoreConfigSkeleton::read KCoreConfigSkeleton read KCoreConfigSkeleton::read KCoreConfigSkeleton read KCoreConfigSkeleton::read KCoreConfigSkeleton", "text": "This method assumes that the KConfig object was previously loaded i.e it uses the in-memory values from KConfig without reloading from disk This method calls usrRead() after reading the settings of the registered items from the KConfig You can override usrRead() in derived classes if you have special requirements 5.0"}, {"type": "function", "name": "KCoreConfigSkeleton::readConfig", "url": "classKCoreConfigSkeleton.html#a94bc582d4eac7748aba47ba40c08bc5a", "keyword": "readConfig KCoreConfigSkeleton::readConfig KCoreConfigSkeleton readConfig KCoreConfigSkeleton::readConfig KCoreConfigSkeleton readConfig KCoreConfigSkeleton::readConfig KCoreConfigSkeleton", "text": "since 5.0 call load() instead to reload from disk or just read() if the underlying KConfig object is already up-to-date"}, {"type": "function", "name": "KCoreConfigSkeleton::removeItem", "url": "classKCoreConfigSkeleton.html#a76e5d4c9f8c8fa791d69463cb3c9b96c", "keyword": "removeItem KCoreConfigSkeleton::removeItem KCoreConfigSkeleton removeItem KCoreConfigSkeleton::removeItem KCoreConfigSkeleton removeItem KCoreConfigSkeleton::removeItem KCoreConfigSkeleton", "text": "name the name of the item to remove"}, {"type": "function", "name": "KCoreConfigSkeleton::setCurrentGroup", "url": "classKCoreConfigSkeleton.html#af829115639af53e10813193229f77a11", "keyword": "setCurrentGroup KCoreConfigSkeleton::setCurrentGroup KCoreConfigSkeleton setCurrentGroup KCoreConfigSkeleton::setCurrentGroup KCoreConfigSkeleton setCurrentGroup KCoreConfigSkeleton::setCurrentGroup KCoreConfigSkeleton", "text": "It is valid until setCurrentGroup() is called with a new argument Call this before you add any items The default value is"}, {"type": "function", "name": "KCoreConfigSkeleton::setDefaults", "url": "classKCoreConfigSkeleton.html#ae917f12468babb6bf202160a866b6dc9", "keyword": "setDefaults KCoreConfigSkeleton::setDefaults KCoreConfigSkeleton setDefaults KCoreConfigSkeleton::setDefaults KCoreConfigSkeleton setDefaults KCoreConfigSkeleton::setDefaults KCoreConfigSkeleton", "text": "This method calls usrSetDefaults() after setting the defaults for the registered items You can override usrSetDefaults() in derived classes if you have special requirements If you need more fine-grained control of setting the default values of the registered items you can override setDefaults() in a derived class"}, {"type": "function", "name": "KCoreConfigSkeleton::setSharedConfig", "url": "classKCoreConfigSkeleton.html#a3d0b13aec08f7a44cb49d675bb09917e", "keyword": "setSharedConfig KCoreConfigSkeleton::setSharedConfig KCoreConfigSkeleton setSharedConfig KCoreConfigSkeleton::setSharedConfig KCoreConfigSkeleton setSharedConfig KCoreConfigSkeleton::setSharedConfig KCoreConfigSkeleton", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::sharedConfig", "url": "classKCoreConfigSkeleton.html#a4e9d94f64fedd4f1efd67485dc19aa18", "keyword": "sharedConfig KCoreConfigSkeleton::sharedConfig KCoreConfigSkeleton sharedConfig KCoreConfigSkeleton::sharedConfig KCoreConfigSkeleton sharedConfig KCoreConfigSkeleton::sharedConfig KCoreConfigSkeleton", "text": "5.0"}, {"type": "function", "name": "KCoreConfigSkeleton::useDefaults", "url": "classKCoreConfigSkeleton.html#af5bacb5caefaee5b3cd14a60fc3fe033", "keyword": "useDefaults KCoreConfigSkeleton::useDefaults KCoreConfigSkeleton useDefaults KCoreConfigSkeleton::useDefaults KCoreConfigSkeleton useDefaults KCoreConfigSkeleton::useDefaults KCoreConfigSkeleton", "text": "This method is implemented by usrUseDefaults() which can be overridden in derived classes if you have special requirements and can call usrUseDefaults() directly If you don t have control whether useDefaults() or usrUseDefaults() is called override useDefaults() directly b true to make this object reflect the default values false to make it reflect the actual values The state prior to this call"}, {"type": "function", "name": "KConfigLoader::usrWriteConfig", "url": "classKConfigLoader.html#af383b00e58a7d084c98208b96eb2b42d", "keyword": "usrWriteConfig KConfigLoader::usrWriteConfig KConfigLoader", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::usrRead", "url": "classKCoreConfigSkeleton.html#a6570979330a585622404982a9388a391", "keyword": "usrRead KCoreConfigSkeleton::usrRead KCoreConfigSkeleton usrRead KCoreConfigSkeleton::usrRead KCoreConfigSkeleton usrRead KCoreConfigSkeleton::usrRead KCoreConfigSkeleton", "text": "Override in derived classes to read special config values Called from read()"}, {"type": "function", "name": "KCoreConfigSkeleton::usrReadConfig", "url": "classKCoreConfigSkeleton.html#ae159276732b152c91856ab5e4355d338", "keyword": "usrReadConfig KCoreConfigSkeleton::usrReadConfig KCoreConfigSkeleton usrReadConfig KCoreConfigSkeleton::usrReadConfig KCoreConfigSkeleton usrReadConfig KCoreConfigSkeleton::usrReadConfig KCoreConfigSkeleton", "text": "since 5.0 override usrRead instead This method is still called from usrRead for compatibility"}, {"type": "function", "name": "KCoreConfigSkeleton::usrSave", "url": "classKCoreConfigSkeleton.html#a59caaded7618fab92ca1e78430b5f39a", "keyword": "usrSave KCoreConfigSkeleton::usrSave KCoreConfigSkeleton usrSave KCoreConfigSkeleton::usrSave KCoreConfigSkeleton usrSave KCoreConfigSkeleton::usrSave KCoreConfigSkeleton", "text": "Override in derived classes to write special config values Called from writeConfig()"}, {"type": "function", "name": "KCoreConfigSkeleton::usrSetDefaults", "url": "classKCoreConfigSkeleton.html#a30f35a964000753ecd0e29d602ab4a20", "keyword": "usrSetDefaults KCoreConfigSkeleton::usrSetDefaults KCoreConfigSkeleton usrSetDefaults KCoreConfigSkeleton::usrSetDefaults KCoreConfigSkeleton usrSetDefaults KCoreConfigSkeleton::usrSetDefaults KCoreConfigSkeleton", "text": "Override in derived classes to set special default values Called from setDefaults()"}, {"type": "function", "name": "KCoreConfigSkeleton::usrUseDefaults", "url": "classKCoreConfigSkeleton.html#a4b433f2ef260af720f7b0408888e98f0", "keyword": "usrUseDefaults KCoreConfigSkeleton::usrUseDefaults KCoreConfigSkeleton usrUseDefaults KCoreConfigSkeleton::usrUseDefaults KCoreConfigSkeleton usrUseDefaults KCoreConfigSkeleton::usrUseDefaults KCoreConfigSkeleton", "text": "It replaces the default values with the actual values and vice versa Called from useDefaults() b true to make this object reflect the default values false to make it reflect the actual values The state prior to this call"}, {"type": "signal", "name": "KCoreConfigSkeleton::configChanged", "url": "classKCoreConfigSkeleton.html#a52ee5dd5f7ce864d2c39765c4b0e3380", "keyword": "configChanged KCoreConfigSkeleton::configChanged KCoreConfigSkeleton configChanged KCoreConfigSkeleton::configChanged KCoreConfigSkeleton configChanged KCoreConfigSkeleton::configChanged KCoreConfigSkeleton", "text": ""}, {"type": "slot", "name": "KCoreConfigSkeleton::save", "url": "classKCoreConfigSkeleton.html#aad9cf9023be2d670cd0e680684e9cca1", "keyword": "save KCoreConfigSkeleton::save KCoreConfigSkeleton save KCoreConfigSkeleton::save KCoreConfigSkeleton save KCoreConfigSkeleton::save KCoreConfigSkeleton", "text": "The values of all registered items are written to disk This method calls usrSave() after writing the settings from the registered items to the KConfig You can override usrSave() in derived classes if you have special requirements"}, {"type": "slot", "name": "KCoreConfigSkeleton::writeConfig", "url": "classKCoreConfigSkeleton.html#aaadbfe6595ac75d554034385d090f91c", "keyword": "writeConfig KCoreConfigSkeleton::writeConfig KCoreConfigSkeleton writeConfig KCoreConfigSkeleton::writeConfig KCoreConfigSkeleton writeConfig KCoreConfigSkeleton::writeConfig KCoreConfigSkeleton", "text": "since 5.0 call save() instead"}, {"type": "class", "name": "KConfigSkeleton", "url": "classKConfigSkeleton.html", "keyword": "KConfigSkeleton", "text": "Cornelius Schumacher This class extends KCoreConfigSkeleton by support for GUI types"}, {"type": "function", "name": "KCoreConfigSkeleton::usrWriteConfig", "url": "classKCoreConfigSkeleton.html#a473dd78d25660808bbb7056deb78a1ed", "keyword": "usrWriteConfig KCoreConfigSkeleton::usrWriteConfig KCoreConfigSkeleton usrWriteConfig KCoreConfigSkeleton::usrWriteConfig KCoreConfigSkeleton", "text": "since 5.0 override usrSave instead This method is still called from usrSave for compatibility"}, {"type": "class", "name": "KConfigSkeleton::ItemColor", "url": "classKConfigSkeleton_1_1ItemColor.html", "keyword": "ItemColor", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemColor::ItemColor", "url": "classKConfigSkeleton_1_1ItemColor.html#a98a93b4c7350f58c692ed1bc532134ef", "keyword": "ItemColor KConfigSkeleton::ItemColor::ItemColor KConfigSkeleton::ItemColor", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemColor::isEqual", "url": "classKConfigSkeleton_1_1ItemColor.html#a310892947ff699babfbaaa049e90fb9b", "keyword": "isEqual KConfigSkeleton::ItemColor::isEqual KConfigSkeleton::ItemColor", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemColor::property", "url": "classKConfigSkeleton_1_1ItemColor.html#abdf2f1946e666d9600acd771dfcf27c6", "keyword": "property KConfigSkeleton::ItemColor::property KConfigSkeleton::ItemColor", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemColor::readConfig", "url": "classKConfigSkeleton_1_1ItemColor.html#a06fc0a4997337d4490dc09e039815223", "keyword": "readConfig KConfigSkeleton::ItemColor::readConfig KConfigSkeleton::ItemColor", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemColor::setProperty", "url": "classKConfigSkeleton_1_1ItemColor.html#a680aa92b6980985fb8cf5b3ff73a5857", "keyword": "setProperty KConfigSkeleton::ItemColor::setProperty KConfigSkeleton::ItemColor", "text": ""}, {"type": "class", "name": "KConfigSkeleton::ItemFont", "url": "classKConfigSkeleton_1_1ItemFont.html", "keyword": "ItemFont", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemFont::ItemFont", "url": "classKConfigSkeleton_1_1ItemFont.html#a6c823b260b3979b3f2b45de6affbfcb1", "keyword": "ItemFont KConfigSkeleton::ItemFont::ItemFont KConfigSkeleton::ItemFont", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemFont::isEqual", "url": "classKConfigSkeleton_1_1ItemFont.html#a84fe19461695d01afea81c19ccf97627", "keyword": "isEqual KConfigSkeleton::ItemFont::isEqual KConfigSkeleton::ItemFont", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemFont::property", "url": "classKConfigSkeleton_1_1ItemFont.html#a53da553492bce3327d01f766db9ed8ee", "keyword": "property KConfigSkeleton::ItemFont::property KConfigSkeleton::ItemFont", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemFont::readConfig", "url": "classKConfigSkeleton_1_1ItemFont.html#ab3abcc5979e835552f2a50c9d748f98b", "keyword": "readConfig KConfigSkeleton::ItemFont::readConfig KConfigSkeleton::ItemFont", "text": ""}, {"type": "function", "name": "KConfigSkeleton::ItemFont::setProperty", "url": "classKConfigSkeleton_1_1ItemFont.html#a276b32a26940d60ba42711854d04fa9c", "keyword": "setProperty KConfigSkeleton::ItemFont::setProperty KConfigSkeleton::ItemFont", "text": ""}, {"type": "class", "name": "KConfigSkeletonChangeNotifyingItem", "url": "classKConfigSkeletonChangeNotifyingItem.html", "keyword": "KConfigSkeletonChangeNotifyingItem", "text": "Alex Richardson KConfigSkeletonItem This class wraps a KConfigSkeletonItem and invokes a function whenever the value changes That function must take one quint64 parameter Whenever the property value of the wrapped KConfigSkeletonItem changes this function will be invoked with the stored user data passed in the constructor It does not call a function with the new value since this class is designed solely for the kconfig_compiler generated code and is therefore probably not suited for any other usecases"}, {"type": "class", "name": "KConfigSkeletonItem", "url": "classKConfigSkeletonItem.html", "keyword": "KConfigSkeletonItem", "text": "Cornelius Schumacher KCoreConfigSkeleton This class represents one preferences setting as used by KCoreConfigSkeleton Subclasses of KConfigSkeletonItem implement storage functions for a certain type of setting Normally you don t have to use this class directly Use the special addItem() functions of KCoreConfigSkeleton instead If you subclass this class you will have to register instances with the function KCoreConfigSkeleton::addItem()"}, {"type": "function", "name": "KConfigSkeletonItem::KConfigSkeletonItem", "url": "classKConfigSkeletonItem.html#a0f314bf8fa0ffd16e5af81767485a5ab", "keyword": "KConfigSkeletonItem KConfigSkeletonItem::KConfigSkeletonItem KConfigSkeletonItem", "text": "_group Config file group _key Config file key"}, {"type": "function", "name": "KConfigSkeletonItem::~KConfigSkeletonItem", "url": "classKConfigSkeletonItem.html#a5882c8c1dbe47e7b4629cfc0978523d8", "keyword": "KConfigSkeletonItem::~KConfigSkeletonItem KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::group", "url": "classKConfigSkeletonItem.html#ab63925c645dccb6c2fc0cfe65c9b3808", "keyword": "group KConfigSkeletonItem::group KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::isEqual", "url": "classKConfigSkeletonItem.html#a170380c40bb88f3ddcbecb66782c87fa", "keyword": "isEqual KConfigSkeletonItem::isEqual KConfigSkeletonItem", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KConfigSkeletonItem::isImmutable", "url": "classKConfigSkeletonItem.html#a178a0b97045176571f6ea4b05119af01", "keyword": "isImmutable KConfigSkeletonItem::isImmutable KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::key", "url": "classKConfigSkeletonItem.html#a78250254d62330596fd2ee5715beb769", "keyword": "key KConfigSkeletonItem::key KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::label", "url": "classKConfigSkeletonItem.html#ac4df657d81061b7399002e14d2e471c6", "keyword": "label KConfigSkeletonItem::label KConfigSkeletonItem", "text": "See setLabel()"}, {"type": "function", "name": "KConfigSkeletonItem::maxValue", "url": "classKConfigSkeletonItem.html#aca4d21c9de1de61243a037fceb858b69", "keyword": "maxValue KConfigSkeletonItem::maxValue KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::minValue", "url": "classKConfigSkeletonItem.html#a1ae44c471594090c2622a33e17cdb62b", "keyword": "minValue KConfigSkeletonItem::minValue KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::name", "url": "classKConfigSkeletonItem.html#a3150515876a423c0093b69ad872dffbf", "keyword": "name KConfigSkeletonItem::name KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::property", "url": "classKConfigSkeletonItem.html#ad6d6b6b5f7c9e5d80f2487c5baf41d1d", "keyword": "property KConfigSkeletonItem::property KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::readConfig", "url": "classKConfigSkeletonItem.html#ac14daaad22fd956d76b5f5babb7eafc2", "keyword": "readConfig KConfigSkeletonItem::readConfig KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::readDefault", "url": "classKConfigSkeletonItem.html#a70701764611bfd8be214940d992f9c71", "keyword": "readDefault KConfigSkeletonItem::readDefault KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::setDefault", "url": "classKConfigSkeletonItem.html#a80dc5cf41a9f8ec959809ba24edf15b0", "keyword": "setDefault KConfigSkeletonItem::setDefault KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::setGroup", "url": "classKConfigSkeletonItem.html#a785d46f0016478f97e136538aa752c4e", "keyword": "setGroup KConfigSkeletonItem::setGroup KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::setKey", "url": "classKConfigSkeletonItem.html#ab851716f7cd4746a2ccc9c6500096731", "keyword": "setKey KConfigSkeletonItem::setKey KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::setLabel", "url": "classKConfigSkeletonItem.html#a88978a68f6346876f51e010794915c78", "keyword": "setLabel KConfigSkeletonItem::setLabel KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::setName", "url": "classKConfigSkeletonItem.html#a831906de7dff37e70b8fad1970f8b763", "keyword": "setName KConfigSkeletonItem::setName KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::setProperty", "url": "classKConfigSkeletonItem.html#ab67a0cc4c3784c7bed0941baab6919ac", "keyword": "setProperty KConfigSkeletonItem::setProperty KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::setToolTip", "url": "classKConfigSkeletonItem.html#a5e477b55316e0c7be090cd2163e23dcf", "keyword": "setToolTip KConfigSkeletonItem::setToolTip KConfigSkeletonItem", "text": "4.2"}, {"type": "function", "name": "KConfigSkeletonItem::setWhatsThis", "url": "classKConfigSkeletonItem.html#ad37174350d64aede5af460fe7eea9916", "keyword": "setWhatsThis KConfigSkeletonItem::setWhatsThis KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::swapDefault", "url": "classKConfigSkeletonItem.html#a6d0b4411a4570aa8dd2fd924b0282267", "keyword": "swapDefault KConfigSkeletonItem::swapDefault KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::toolTip", "url": "classKConfigSkeletonItem.html#ab0957a5eb9ffa6db7c62217f7896a6dd", "keyword": "toolTip KConfigSkeletonItem::toolTip KConfigSkeletonItem", "text": "See setToolTip() 4.2"}, {"type": "function", "name": "KConfigSkeletonItem::whatsThis", "url": "classKConfigSkeletonItem.html#a99d86c3d1359ca0a891722a083bd7d0c", "keyword": "whatsThis KConfigSkeletonItem::whatsThis KConfigSkeletonItem", "text": "See setWhatsThis()"}, {"type": "function", "name": "KConfigSkeletonItem::writeConfig", "url": "classKConfigSkeletonItem.html#a201f7a629431e5db6aba390277f77f96", "keyword": "writeConfig KConfigSkeletonItem::writeConfig KConfigSkeletonItem", "text": ""}, {"type": "function", "name": "KConfigSkeletonItem::readImmutability", "url": "classKConfigSkeletonItem.html#a4f909c782b32c77a1d77b1a6f2006a74", "keyword": "readImmutability KConfigSkeletonItem::readImmutability KConfigSkeletonItem", "text": "group KConfigGroup to check if mKey is immutable in"}, {"type": "variable", "name": "KConfigSkeletonItem::mGroup", "url": "classKConfigSkeletonItem.html#aa63707a25d261d8403f2e9380c27a3b0", "keyword": "mGroup KConfigSkeletonItem::mGroup KConfigSkeletonItem", "text": ""}, {"type": "variable", "name": "KConfigSkeletonItem::mKey", "url": "classKConfigSkeletonItem.html#a6ef8aa3edde08d7c1589fb474f777bed", "keyword": "mKey KConfigSkeletonItem::mKey KConfigSkeletonItem", "text": ""}, {"type": "variable", "name": "KConfigSkeletonItem::mName", "url": "classKConfigSkeletonItem.html#ad826e6cd034a1f3b6c9137daac0dfa4a", "keyword": "mName KConfigSkeletonItem::mName KConfigSkeletonItem", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton", "url": "classKCoreConfigSkeleton.html", "keyword": "KCoreConfigSkeleton", "text": "Cornelius Schumacher KConfigSkeletonItem This class provides an interface to preferences settings Preferences items can be registered by the addItem() function corresponding to the data type of the setting KCoreConfigSkeleton then handles reading and writing of config files and setting of default values Normally you will subclass KCoreConfigSkeleton add data members for the preferences settings and register the members in the constructor of the subclass Example It might be convenient in many cases to make this subclass of KCoreConfigSkeleton a singleton for global access from all over the application without passing references to the KCoreConfigSkeleton object around You can write the data to the configuration file by calling save() and read the data from the configuration file by calling readConfig() If you want to watch for config changes use configChanged() signal If you have items which are not covered by the existing addItem() functions you can add customized code for reading writing and default setting by implementing the functions usrUseDefaults() usrRead() and usrSave() Internally preferences settings are stored in instances of subclasses of KConfigSkeletonItem You can also add KConfigSkeletonItem subclasses for your own types and call the generic addItem() to register them In many cases you don t have to write the specific KCoreConfigSkeleton subclasses yourself but you can use The KDE Configuration Compiler to automatically generate the C++ code from an XML description of the configuration options Use KConfigSkeleton if you need GUI types as well"}, {"type": "class", "name": "KCoreConfigSkeleton::ItemBool", "url": "classKCoreConfigSkeleton_1_1ItemBool.html", "keyword": "ItemBool", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemBool::ItemBool", "url": "classKCoreConfigSkeleton_1_1ItemBool.html#a60d80a1c514f6a46703183c0ef847504", "keyword": "ItemBool KCoreConfigSkeleton::ItemBool::ItemBool KCoreConfigSkeleton::ItemBool", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemBool::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemBool.html#a5cc3ef9ab8c8dbe2b60b48245444d03c", "keyword": "isEqual KCoreConfigSkeleton::ItemBool::isEqual KCoreConfigSkeleton::ItemBool", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemBool::property", "url": "classKCoreConfigSkeleton_1_1ItemBool.html#a53c252a20db46d556e104c722774de24", "keyword": "property KCoreConfigSkeleton::ItemBool::property KCoreConfigSkeleton::ItemBool", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemBool::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemBool.html#a863d5d240a22236eb0b5391d18d2270a", "keyword": "readConfig KCoreConfigSkeleton::ItemBool::readConfig KCoreConfigSkeleton::ItemBool", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemBool::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemBool.html#a80a55b90549a3d66b2967d0c5bc020a8", "keyword": "setProperty KCoreConfigSkeleton::ItemBool::setProperty KCoreConfigSkeleton::ItemBool", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemDateTime", "url": "classKCoreConfigSkeleton_1_1ItemDateTime.html", "keyword": "ItemDateTime", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDateTime::ItemDateTime", "url": "classKCoreConfigSkeleton_1_1ItemDateTime.html#a128fad0065842458b17c58c8ca5d70d3", "keyword": "ItemDateTime KCoreConfigSkeleton::ItemDateTime::ItemDateTime KCoreConfigSkeleton::ItemDateTime", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDateTime::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemDateTime.html#a5d4eaffb1c135472cc9636cafc7d3b30", "keyword": "isEqual KCoreConfigSkeleton::ItemDateTime::isEqual KCoreConfigSkeleton::ItemDateTime", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDateTime::property", "url": "classKCoreConfigSkeleton_1_1ItemDateTime.html#a4f1e8829054c46a972115d3132e08ead", "keyword": "property KCoreConfigSkeleton::ItemDateTime::property KCoreConfigSkeleton::ItemDateTime", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDateTime::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemDateTime.html#a3ca8ac09cc53fa5e0f32e4e31939eae9", "keyword": "readConfig KCoreConfigSkeleton::ItemDateTime::readConfig KCoreConfigSkeleton::ItemDateTime", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDateTime::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemDateTime.html#a0effc943586cf71f24cb09e444c3f494", "keyword": "setProperty KCoreConfigSkeleton::ItemDateTime::setProperty KCoreConfigSkeleton::ItemDateTime", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemDouble", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html", "keyword": "ItemDouble", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::ItemDouble", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#a27c32aed2c78358c051c4ec1d459dbf7", "keyword": "ItemDouble KCoreConfigSkeleton::ItemDouble::ItemDouble KCoreConfigSkeleton::ItemDouble", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#a4305f7a18a17e1acfd77e0ea7c473f40", "keyword": "isEqual KCoreConfigSkeleton::ItemDouble::isEqual KCoreConfigSkeleton::ItemDouble", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::maxValue", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#af2ca539cb3b48c618eca173a53cf4c39", "keyword": "maxValue KCoreConfigSkeleton::ItemDouble::maxValue KCoreConfigSkeleton::ItemDouble", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::minValue", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#a90bbfb51f589895dc1b45de6c635d520", "keyword": "minValue KCoreConfigSkeleton::ItemDouble::minValue KCoreConfigSkeleton::ItemDouble", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::property", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#a1fc32f776c1dc3268a690eceac842099", "keyword": "property KCoreConfigSkeleton::ItemDouble::property KCoreConfigSkeleton::ItemDouble", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#a4099897a75ecc7ec53e0edb80bded5ad", "keyword": "readConfig KCoreConfigSkeleton::ItemDouble::readConfig KCoreConfigSkeleton::ItemDouble", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::setMaxValue", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#ae39a245d8688472d246ca3e1c7b13e78", "keyword": "setMaxValue KCoreConfigSkeleton::ItemDouble::setMaxValue KCoreConfigSkeleton::ItemDouble", "text": "maxValue"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::setMinValue", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#aa4958acba4a6adf8ce718b599705abc2", "keyword": "setMinValue KCoreConfigSkeleton::ItemDouble::setMinValue KCoreConfigSkeleton::ItemDouble", "text": "minValue()"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemDouble::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemDouble.html#ade51c190c08e11ddb9aa2e93e33dba40", "keyword": "setProperty KCoreConfigSkeleton::ItemDouble::setProperty KCoreConfigSkeleton::ItemDouble", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemEnum", "url": "classKCoreConfigSkeleton_1_1ItemEnum.html", "keyword": "ItemEnum", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemEnum::ItemEnum", "url": "classKCoreConfigSkeleton_1_1ItemEnum.html#ab839804af0531604cbfb0b39cf7e6131", "keyword": "ItemEnum KCoreConfigSkeleton::ItemEnum::ItemEnum KCoreConfigSkeleton::ItemEnum", "text": "choices The list of enums that can be stored in this item"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemEnum::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemEnum.html#aa1706e3ad927e912ea294cea23c3a546", "keyword": "readConfig KCoreConfigSkeleton::ItemEnum::readConfig KCoreConfigSkeleton::ItemEnum", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemEnum::writeConfig", "url": "classKCoreConfigSkeleton_1_1ItemEnum.html#a6581b417f89564fafa7a97be6d18384b", "keyword": "writeConfig KCoreConfigSkeleton::ItemEnum::writeConfig KCoreConfigSkeleton::ItemEnum", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::ItemInt", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#ac2100120ba014e9eab1c7bd7027e33f6", "keyword": "ItemInt KCoreConfigSkeleton::ItemInt::ItemInt KCoreConfigSkeleton::ItemInt ItemInt KCoreConfigSkeleton::ItemInt::ItemInt KCoreConfigSkeleton::ItemInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#a210efa00e5b9c7d2382d43283ad34862", "keyword": "isEqual KCoreConfigSkeleton::ItemInt::isEqual KCoreConfigSkeleton::ItemInt isEqual KCoreConfigSkeleton::ItemInt::isEqual KCoreConfigSkeleton::ItemInt", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::maxValue", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#a16dd87a029e146ad177c5dfb5063d236", "keyword": "maxValue KCoreConfigSkeleton::ItemInt::maxValue KCoreConfigSkeleton::ItemInt maxValue KCoreConfigSkeleton::ItemInt::maxValue KCoreConfigSkeleton::ItemInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::minValue", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#a1afb7ccc9713d7093aa17f1811253b40", "keyword": "minValue KCoreConfigSkeleton::ItemInt::minValue KCoreConfigSkeleton::ItemInt minValue KCoreConfigSkeleton::ItemInt::minValue KCoreConfigSkeleton::ItemInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::property", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#ae8f8b49d4ba7078cedd66b22a2f812d0", "keyword": "property KCoreConfigSkeleton::ItemInt::property KCoreConfigSkeleton::ItemInt property KCoreConfigSkeleton::ItemInt::property KCoreConfigSkeleton::ItemInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::setMaxValue", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#a130dbd1fcb57759fd33a0f3a7bd741fe", "keyword": "setMaxValue KCoreConfigSkeleton::ItemInt::setMaxValue KCoreConfigSkeleton::ItemInt setMaxValue KCoreConfigSkeleton::ItemInt::setMaxValue KCoreConfigSkeleton::ItemInt", "text": "maxValue"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::setMinValue", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#a8dd9f4423a381707c30374a47d60b903", "keyword": "setMinValue KCoreConfigSkeleton::ItemInt::setMinValue KCoreConfigSkeleton::ItemInt setMinValue KCoreConfigSkeleton::ItemInt::setMinValue KCoreConfigSkeleton::ItemInt", "text": "minValue()"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#aa0819fb12245e980f369df8de5c6bad2", "keyword": "setProperty KCoreConfigSkeleton::ItemInt::setProperty KCoreConfigSkeleton::ItemInt setProperty KCoreConfigSkeleton::ItemInt::setProperty KCoreConfigSkeleton::ItemInt", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemInt", "url": "classKCoreConfigSkeleton_1_1ItemInt.html", "keyword": "ItemInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemInt::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemInt.html#aa5b8b861f3d97215953d9dfb5da45164", "keyword": "readConfig KCoreConfigSkeleton::ItemInt::readConfig KCoreConfigSkeleton::ItemInt", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemIntList", "url": "classKCoreConfigSkeleton_1_1ItemIntList.html", "keyword": "ItemIntList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemIntList::ItemIntList", "url": "classKCoreConfigSkeleton_1_1ItemIntList.html#a7d3e7fc7bdf22990a370d697bf276dea", "keyword": "ItemIntList KCoreConfigSkeleton::ItemIntList::ItemIntList KCoreConfigSkeleton::ItemIntList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemIntList::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemIntList.html#a498bdbf10455517f8d5a375faa1ad915", "keyword": "isEqual KCoreConfigSkeleton::ItemIntList::isEqual KCoreConfigSkeleton::ItemIntList", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemIntList::property", "url": "classKCoreConfigSkeleton_1_1ItemIntList.html#a116751090eb45c75d63aa7c4f09ad9bd", "keyword": "property KCoreConfigSkeleton::ItemIntList::property KCoreConfigSkeleton::ItemIntList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemIntList::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemIntList.html#a8a6d8bca3d327c67334056269c5047e2", "keyword": "readConfig KCoreConfigSkeleton::ItemIntList::readConfig KCoreConfigSkeleton::ItemIntList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemIntList::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemIntList.html#ab044368bbb3ac6d83ab6fc5af4f195f7", "keyword": "setProperty KCoreConfigSkeleton::ItemIntList::setProperty KCoreConfigSkeleton::ItemIntList", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemLongLong", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html", "keyword": "ItemLongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::ItemLongLong", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#a5c078b33971d5c45b55e0987d2409af6", "keyword": "ItemLongLong KCoreConfigSkeleton::ItemLongLong::ItemLongLong KCoreConfigSkeleton::ItemLongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#aa580883a37b84035d16859e117ca23c9", "keyword": "isEqual KCoreConfigSkeleton::ItemLongLong::isEqual KCoreConfigSkeleton::ItemLongLong", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::maxValue", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#a02e908c7690330011973f1d5d1cd9b61", "keyword": "maxValue KCoreConfigSkeleton::ItemLongLong::maxValue KCoreConfigSkeleton::ItemLongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::minValue", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#ae07f0d192387b9df9a783c5ea121e35a", "keyword": "minValue KCoreConfigSkeleton::ItemLongLong::minValue KCoreConfigSkeleton::ItemLongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::property", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#a39096b8ceae2d9f01dd9df41fa075aee", "keyword": "property KCoreConfigSkeleton::ItemLongLong::property KCoreConfigSkeleton::ItemLongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#ae2b70ecfdbbf269912457078fec88eda", "keyword": "readConfig KCoreConfigSkeleton::ItemLongLong::readConfig KCoreConfigSkeleton::ItemLongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::setMaxValue", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#a4666a3a05343ae992d469f8a20759058", "keyword": "setMaxValue KCoreConfigSkeleton::ItemLongLong::setMaxValue KCoreConfigSkeleton::ItemLongLong", "text": "maxValue"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::setMinValue", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#ab0c1d523602c1a79643de83430befd8d", "keyword": "setMinValue KCoreConfigSkeleton::ItemLongLong::setMinValue KCoreConfigSkeleton::ItemLongLong", "text": "minValue()"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemLongLong::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemLongLong.html#a468eab145703d6e4d7f204c8b977d980", "keyword": "setProperty KCoreConfigSkeleton::ItemLongLong::setProperty KCoreConfigSkeleton::ItemLongLong", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemPassword", "url": "classKCoreConfigSkeleton_1_1ItemPassword.html", "keyword": "ItemPassword", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPassword::ItemPassword", "url": "classKCoreConfigSkeleton_1_1ItemPassword.html#acc1c3969036a033a0c26a219dc6a347f", "keyword": "ItemPassword KCoreConfigSkeleton::ItemPassword::ItemPassword KCoreConfigSkeleton::ItemPassword", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemString::ItemString", "url": "classKCoreConfigSkeleton_1_1ItemString.html#a44f1dc6e9f4ac5c9d3a2ddee5b52e38e", "keyword": "ItemString KCoreConfigSkeleton::ItemString::ItemString KCoreConfigSkeleton::ItemString ItemString KCoreConfigSkeleton::ItemString::ItemString KCoreConfigSkeleton::ItemString ItemString KCoreConfigSkeleton::ItemString::ItemString KCoreConfigSkeleton::ItemString", "text": "type The type of string held by the item"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemString::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemString.html#a014cce21c060e9ffdb82c873487dc9a5", "keyword": "isEqual KCoreConfigSkeleton::ItemString::isEqual KCoreConfigSkeleton::ItemString isEqual KCoreConfigSkeleton::ItemString::isEqual KCoreConfigSkeleton::ItemString isEqual KCoreConfigSkeleton::ItemString::isEqual KCoreConfigSkeleton::ItemString", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemString::property", "url": "classKCoreConfigSkeleton_1_1ItemString.html#a1d7a42aefca86e33fccdc50c72e6c6d2", "keyword": "property KCoreConfigSkeleton::ItemString::property KCoreConfigSkeleton::ItemString property KCoreConfigSkeleton::ItemString::property KCoreConfigSkeleton::ItemString property KCoreConfigSkeleton::ItemString::property KCoreConfigSkeleton::ItemString", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemString::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemString.html#ab240717fbf3a19627166870075cdfd3d", "keyword": "readConfig KCoreConfigSkeleton::ItemString::readConfig KCoreConfigSkeleton::ItemString readConfig KCoreConfigSkeleton::ItemString::readConfig KCoreConfigSkeleton::ItemString readConfig KCoreConfigSkeleton::ItemString::readConfig KCoreConfigSkeleton::ItemString", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemString::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemString.html#a51fcb8e275f3aa0f6c9458e3c4e7193f", "keyword": "setProperty KCoreConfigSkeleton::ItemString::setProperty KCoreConfigSkeleton::ItemString setProperty KCoreConfigSkeleton::ItemString::setProperty KCoreConfigSkeleton::ItemString setProperty KCoreConfigSkeleton::ItemString::setProperty KCoreConfigSkeleton::ItemString", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemString::writeConfig", "url": "classKCoreConfigSkeleton_1_1ItemString.html#ad2b5da3e46fb276a28fdddc477340183", "keyword": "writeConfig KCoreConfigSkeleton::ItemString::writeConfig KCoreConfigSkeleton::ItemString writeConfig KCoreConfigSkeleton::ItemString::writeConfig KCoreConfigSkeleton::ItemString writeConfig KCoreConfigSkeleton::ItemString::writeConfig KCoreConfigSkeleton::ItemString", "text": ""}, {"type": "enum", "name": "KCoreConfigSkeleton::ItemString::Type", "url": "classKCoreConfigSkeleton_1_1ItemString.html#a1b8a1faf9574b41b48bb873968acda1f", "keyword": "Type KCoreConfigSkeleton::ItemString::Type KCoreConfigSkeleton::ItemString Type KCoreConfigSkeleton::ItemString::Type KCoreConfigSkeleton::ItemString Type KCoreConfigSkeleton::ItemString::Type KCoreConfigSkeleton::ItemString", "text": ""}, {"type": "enumvalue", "name": "KCoreConfigSkeleton::ItemString::Normal", "url": "classKCoreConfigSkeleton_1_1ItemString.html#a1b8a1faf9574b41b48bb873968acda1fadaa891d7d422b0c59ccbece86b9fd2e5", "keyword": "Normal KCoreConfigSkeleton::ItemString::Normal KCoreConfigSkeleton::ItemString Normal KCoreConfigSkeleton::ItemString::Normal KCoreConfigSkeleton::ItemString Normal KCoreConfigSkeleton::ItemString::Normal KCoreConfigSkeleton::ItemString", "text": "A normal string"}, {"type": "enumvalue", "name": "KCoreConfigSkeleton::ItemString::Password", "url": "classKCoreConfigSkeleton_1_1ItemString.html#a1b8a1faf9574b41b48bb873968acda1fa73ae4c15ffb4b93ec6b4704ab9fde8f3", "keyword": "Password KCoreConfigSkeleton::ItemString::Password KCoreConfigSkeleton::ItemString Password KCoreConfigSkeleton::ItemString::Password KCoreConfigSkeleton::ItemString Password KCoreConfigSkeleton::ItemString::Password KCoreConfigSkeleton::ItemString", "text": "A password string"}, {"type": "enumvalue", "name": "KCoreConfigSkeleton::ItemString::Path", "url": "classKCoreConfigSkeleton_1_1ItemString.html#a1b8a1faf9574b41b48bb873968acda1fa65ba06fd046bb0119ff76aa0c5724c37", "keyword": "Path KCoreConfigSkeleton::ItemString::Path KCoreConfigSkeleton::ItemString Path KCoreConfigSkeleton::ItemString::Path KCoreConfigSkeleton::ItemString Path KCoreConfigSkeleton::ItemString::Path KCoreConfigSkeleton::ItemString", "text": "A path to a file or directory"}, {"type": "class", "name": "KCoreConfigSkeleton::ItemPath", "url": "classKCoreConfigSkeleton_1_1ItemPath.html", "keyword": "ItemPath", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPath::ItemPath", "url": "classKCoreConfigSkeleton_1_1ItemPath.html#a97467e2d9178faacb83627231e3570d9", "keyword": "ItemPath KCoreConfigSkeleton::ItemPath::ItemPath KCoreConfigSkeleton::ItemPath", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemPathList", "url": "classKCoreConfigSkeleton_1_1ItemPathList.html", "keyword": "ItemPathList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPathList::ItemPathList", "url": "classKCoreConfigSkeleton_1_1ItemPathList.html#acdc78b5d9148cb918bf48acf4b75f9c6", "keyword": "ItemPathList KCoreConfigSkeleton::ItemPathList::ItemPathList KCoreConfigSkeleton::ItemPathList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPathList::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemPathList.html#a3f2b6fb9ff271ff2c28085103f9fd6a9", "keyword": "readConfig KCoreConfigSkeleton::ItemPathList::readConfig KCoreConfigSkeleton::ItemPathList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPathList::writeConfig", "url": "classKCoreConfigSkeleton_1_1ItemPathList.html#ac63eea84eb5e628b40f15bff1512124c", "keyword": "writeConfig KCoreConfigSkeleton::ItemPathList::writeConfig KCoreConfigSkeleton::ItemPathList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemStringList::ItemStringList", "url": "classKCoreConfigSkeleton_1_1ItemStringList.html#a5c47578d72974a5f4baa402bf1173fbf", "keyword": "ItemStringList KCoreConfigSkeleton::ItemStringList::ItemStringList KCoreConfigSkeleton::ItemStringList ItemStringList KCoreConfigSkeleton::ItemStringList::ItemStringList KCoreConfigSkeleton::ItemStringList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemStringList::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemStringList.html#a801b73b71ca5ab66badee69a505c0425", "keyword": "isEqual KCoreConfigSkeleton::ItemStringList::isEqual KCoreConfigSkeleton::ItemStringList isEqual KCoreConfigSkeleton::ItemStringList::isEqual KCoreConfigSkeleton::ItemStringList", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemStringList::property", "url": "classKCoreConfigSkeleton_1_1ItemStringList.html#ac57b943b25432eb5bef7fdc902d41133", "keyword": "property KCoreConfigSkeleton::ItemStringList::property KCoreConfigSkeleton::ItemStringList property KCoreConfigSkeleton::ItemStringList::property KCoreConfigSkeleton::ItemStringList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemStringList::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemStringList.html#ad12fcdaba0488d71e7b05b75f2c73c0e", "keyword": "setProperty KCoreConfigSkeleton::ItemStringList::setProperty KCoreConfigSkeleton::ItemStringList setProperty KCoreConfigSkeleton::ItemStringList::setProperty KCoreConfigSkeleton::ItemStringList", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemPoint", "url": "classKCoreConfigSkeleton_1_1ItemPoint.html", "keyword": "ItemPoint", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPoint::ItemPoint", "url": "classKCoreConfigSkeleton_1_1ItemPoint.html#a9de642bdbe3de248f8a6a74477029b5b", "keyword": "ItemPoint KCoreConfigSkeleton::ItemPoint::ItemPoint KCoreConfigSkeleton::ItemPoint", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPoint::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemPoint.html#a46ba63784126ef01c5f5a06198528fd1", "keyword": "isEqual KCoreConfigSkeleton::ItemPoint::isEqual KCoreConfigSkeleton::ItemPoint", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPoint::property", "url": "classKCoreConfigSkeleton_1_1ItemPoint.html#aaf8dddc6c03202b27e726f91bff45bdf", "keyword": "property KCoreConfigSkeleton::ItemPoint::property KCoreConfigSkeleton::ItemPoint", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPoint::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemPoint.html#ae29fb2abbeb6f36d6c31cf9a2d021459", "keyword": "readConfig KCoreConfigSkeleton::ItemPoint::readConfig KCoreConfigSkeleton::ItemPoint", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemPoint::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemPoint.html#ae08f6af8dcd4660f256a458a3784ba1b", "keyword": "setProperty KCoreConfigSkeleton::ItemPoint::setProperty KCoreConfigSkeleton::ItemPoint", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemProperty", "url": "classKCoreConfigSkeleton_1_1ItemProperty.html", "keyword": "ItemProperty", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemProperty::ItemProperty", "url": "classKCoreConfigSkeleton_1_1ItemProperty.html#aa1bf39d84eccd0305b52813a35f192c4", "keyword": "ItemProperty KCoreConfigSkeleton::ItemProperty::ItemProperty KCoreConfigSkeleton::ItemProperty", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemProperty::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemProperty.html#a92b00417152bf5646aebd37cada40334", "keyword": "isEqual KCoreConfigSkeleton::ItemProperty::isEqual KCoreConfigSkeleton::ItemProperty", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemProperty::property", "url": "classKCoreConfigSkeleton_1_1ItemProperty.html#a0c5b645ac9a2cc3c6e1e3dd3a4e0c066", "keyword": "property KCoreConfigSkeleton::ItemProperty::property KCoreConfigSkeleton::ItemProperty", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemProperty::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemProperty.html#a828d9a46dfb83bea9d65fd85f6b8be6b", "keyword": "readConfig KCoreConfigSkeleton::ItemProperty::readConfig KCoreConfigSkeleton::ItemProperty", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemProperty::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemProperty.html#a14af38b0908902f3254d4da9317a8c13", "keyword": "setProperty KCoreConfigSkeleton::ItemProperty::setProperty KCoreConfigSkeleton::ItemProperty", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemRect", "url": "classKCoreConfigSkeleton_1_1ItemRect.html", "keyword": "ItemRect", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemRect::ItemRect", "url": "classKCoreConfigSkeleton_1_1ItemRect.html#a0f876d6b89210ec9ef5cdf0f0bff2efd", "keyword": "ItemRect KCoreConfigSkeleton::ItemRect::ItemRect KCoreConfigSkeleton::ItemRect", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemRect::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemRect.html#a9455098a17315b1a55768833b47a1d25", "keyword": "isEqual KCoreConfigSkeleton::ItemRect::isEqual KCoreConfigSkeleton::ItemRect", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemRect::property", "url": "classKCoreConfigSkeleton_1_1ItemRect.html#a29fe7a0d52cbf16f55ad24a835bdacac", "keyword": "property KCoreConfigSkeleton::ItemRect::property KCoreConfigSkeleton::ItemRect", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemRect::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemRect.html#ab526fb9e1f155bd8aee228d49d5d7dcb", "keyword": "readConfig KCoreConfigSkeleton::ItemRect::readConfig KCoreConfigSkeleton::ItemRect", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemRect::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemRect.html#a0d18d3ade0f0c557cf0f544fb98a9ce4", "keyword": "setProperty KCoreConfigSkeleton::ItemRect::setProperty KCoreConfigSkeleton::ItemRect", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemSize", "url": "classKCoreConfigSkeleton_1_1ItemSize.html", "keyword": "ItemSize", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemSize::ItemSize", "url": "classKCoreConfigSkeleton_1_1ItemSize.html#af35fbab4669009dacd28d266915d07bc", "keyword": "ItemSize KCoreConfigSkeleton::ItemSize::ItemSize KCoreConfigSkeleton::ItemSize", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemSize::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemSize.html#af598b9bcae34f2c1aa12ba8ff29998ae", "keyword": "isEqual KCoreConfigSkeleton::ItemSize::isEqual KCoreConfigSkeleton::ItemSize", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemSize::property", "url": "classKCoreConfigSkeleton_1_1ItemSize.html#ad4700508ece6bd9bb3688e7d06b1fe0b", "keyword": "property KCoreConfigSkeleton::ItemSize::property KCoreConfigSkeleton::ItemSize", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemSize::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemSize.html#a38c82645ce0c69f45b4208a9323057b8", "keyword": "readConfig KCoreConfigSkeleton::ItemSize::readConfig KCoreConfigSkeleton::ItemSize", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemSize::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemSize.html#ae629165fb8d0dc2b0c8257cea9f883f3", "keyword": "setProperty KCoreConfigSkeleton::ItemSize::setProperty KCoreConfigSkeleton::ItemSize", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemString", "url": "classKCoreConfigSkeleton_1_1ItemString.html", "keyword": "ItemString", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemStringList", "url": "classKCoreConfigSkeleton_1_1ItemStringList.html", "keyword": "ItemStringList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemStringList::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemStringList.html#a5dcf3be24cb45140deab31625e74e007", "keyword": "readConfig KCoreConfigSkeleton::ItemStringList::readConfig KCoreConfigSkeleton::ItemStringList", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemUInt", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html", "keyword": "ItemUInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::ItemUInt", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#a191d29f6c27c29f3bb0963356571e8cf", "keyword": "ItemUInt KCoreConfigSkeleton::ItemUInt::ItemUInt KCoreConfigSkeleton::ItemUInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#a6ce1e81966a1333d1a5bff44b4abc5ad", "keyword": "isEqual KCoreConfigSkeleton::ItemUInt::isEqual KCoreConfigSkeleton::ItemUInt", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::maxValue", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#af29ba634dbb3ceea13fef447a0674a05", "keyword": "maxValue KCoreConfigSkeleton::ItemUInt::maxValue KCoreConfigSkeleton::ItemUInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::minValue", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#a6686b9e37ffc31ea74dd3993b6eb401d", "keyword": "minValue KCoreConfigSkeleton::ItemUInt::minValue KCoreConfigSkeleton::ItemUInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::property", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#a22208e95e35fced3152ca556ae4ac14f", "keyword": "property KCoreConfigSkeleton::ItemUInt::property KCoreConfigSkeleton::ItemUInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#aeba71e5a8c94c602ac72ad8030d27392", "keyword": "readConfig KCoreConfigSkeleton::ItemUInt::readConfig KCoreConfigSkeleton::ItemUInt", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::setMaxValue", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#a9adcc51b3598e0c8f5ddb967b79cea0f", "keyword": "setMaxValue KCoreConfigSkeleton::ItemUInt::setMaxValue KCoreConfigSkeleton::ItemUInt", "text": "maxValue"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::setMinValue", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#a56c80fe19841a8004daa1126ddc070b6", "keyword": "setMinValue KCoreConfigSkeleton::ItemUInt::setMinValue KCoreConfigSkeleton::ItemUInt", "text": "minValue()"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUInt::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemUInt.html#ad1b25a016ec99a195c0cef7a3b5a3740", "keyword": "setProperty KCoreConfigSkeleton::ItemUInt::setProperty KCoreConfigSkeleton::ItemUInt", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemULongLong", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html", "keyword": "ItemULongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::ItemULongLong", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#a04fb8520c070f76bada6098f67eb38a3", "keyword": "ItemULongLong KCoreConfigSkeleton::ItemULongLong::ItemULongLong KCoreConfigSkeleton::ItemULongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#a1a304e47c040b0d72f929cf982356217", "keyword": "isEqual KCoreConfigSkeleton::ItemULongLong::isEqual KCoreConfigSkeleton::ItemULongLong", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::maxValue", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#a01116970c3aa52ca418431b1ee05a0e9", "keyword": "maxValue KCoreConfigSkeleton::ItemULongLong::maxValue KCoreConfigSkeleton::ItemULongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::minValue", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#afeecb27fe3e98ff596dd807492f98bde", "keyword": "minValue KCoreConfigSkeleton::ItemULongLong::minValue KCoreConfigSkeleton::ItemULongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::property", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#af45d947d656037832542a6801970a4d0", "keyword": "property KCoreConfigSkeleton::ItemULongLong::property KCoreConfigSkeleton::ItemULongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#ab569555f6a158bb47cdfd6c13448c43f", "keyword": "readConfig KCoreConfigSkeleton::ItemULongLong::readConfig KCoreConfigSkeleton::ItemULongLong", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::setMaxValue", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#a0f36f7c01730209514f63652689a82ee", "keyword": "setMaxValue KCoreConfigSkeleton::ItemULongLong::setMaxValue KCoreConfigSkeleton::ItemULongLong", "text": "maxValue"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::setMinValue", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#ac2c01f39ef1360ede5873131748ee423", "keyword": "setMinValue KCoreConfigSkeleton::ItemULongLong::setMinValue KCoreConfigSkeleton::ItemULongLong", "text": "minValue()"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemULongLong::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemULongLong.html#a8739e696d8d6831bcc3341895974148b", "keyword": "setProperty KCoreConfigSkeleton::ItemULongLong::setProperty KCoreConfigSkeleton::ItemULongLong", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemUrl", "url": "classKCoreConfigSkeleton_1_1ItemUrl.html", "keyword": "ItemUrl", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrl::ItemUrl", "url": "classKCoreConfigSkeleton_1_1ItemUrl.html#ab928189731e1577062db729827549220", "keyword": "ItemUrl KCoreConfigSkeleton::ItemUrl::ItemUrl KCoreConfigSkeleton::ItemUrl", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrl::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemUrl.html#af19bd1a50d1b73254479b3f24972a0e0", "keyword": "isEqual KCoreConfigSkeleton::ItemUrl::isEqual KCoreConfigSkeleton::ItemUrl", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrl::property", "url": "classKCoreConfigSkeleton_1_1ItemUrl.html#a51ec4db249620cd8c19451937ab1b7cb", "keyword": "property KCoreConfigSkeleton::ItemUrl::property KCoreConfigSkeleton::ItemUrl", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrl::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemUrl.html#a4a43bef81afd014d047d62c5478e0b50", "keyword": "readConfig KCoreConfigSkeleton::ItemUrl::readConfig KCoreConfigSkeleton::ItemUrl", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrl::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemUrl.html#a20e61afd0d74e617afc7b898ec1848aa", "keyword": "setProperty KCoreConfigSkeleton::ItemUrl::setProperty KCoreConfigSkeleton::ItemUrl", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrl::writeConfig", "url": "classKCoreConfigSkeleton_1_1ItemUrl.html#aa322e98486ab68795f7903dac65c44c7", "keyword": "writeConfig KCoreConfigSkeleton::ItemUrl::writeConfig KCoreConfigSkeleton::ItemUrl", "text": ""}, {"type": "class", "name": "KCoreConfigSkeleton::ItemUrlList", "url": "classKCoreConfigSkeleton_1_1ItemUrlList.html", "keyword": "ItemUrlList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrlList::ItemUrlList", "url": "classKCoreConfigSkeleton_1_1ItemUrlList.html#ace050105270efb2d9bbee6393609e3f9", "keyword": "ItemUrlList KCoreConfigSkeleton::ItemUrlList::ItemUrlList KCoreConfigSkeleton::ItemUrlList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrlList::isEqual", "url": "classKCoreConfigSkeleton_1_1ItemUrlList.html#af6b8d50b481e7760ff4b9f35f06c4142", "keyword": "isEqual KCoreConfigSkeleton::ItemUrlList::isEqual KCoreConfigSkeleton::ItemUrlList", "text": "Use this function to compare items that use custom types because QVariant::operator== will not work for those p QVariant to compare to true if the item is equal to p false otherwise"}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrlList::property", "url": "classKCoreConfigSkeleton_1_1ItemUrlList.html#a3c8d0ca0616c27c02903e75e863e57d3", "keyword": "property KCoreConfigSkeleton::ItemUrlList::property KCoreConfigSkeleton::ItemUrlList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrlList::readConfig", "url": "classKCoreConfigSkeleton_1_1ItemUrlList.html#aa711d5fdcfb416a09a5f31aed813d2e7", "keyword": "readConfig KCoreConfigSkeleton::ItemUrlList::readConfig KCoreConfigSkeleton::ItemUrlList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrlList::setProperty", "url": "classKCoreConfigSkeleton_1_1ItemUrlList.html#a3049f259186f46a9e2bd1f54b748579c", "keyword": "setProperty KCoreConfigSkeleton::ItemUrlList::setProperty KCoreConfigSkeleton::ItemUrlList", "text": ""}, {"type": "function", "name": "KCoreConfigSkeleton::ItemUrlList::writeConfig", "url": "classKCoreConfigSkeleton_1_1ItemUrlList.html#a333a1f460fae8db3e899987920735e27", "keyword": "writeConfig KCoreConfigSkeleton::ItemUrlList::writeConfig KCoreConfigSkeleton::ItemUrlList", "text": ""}, {"type": "class", "name": "KDesktopFile", "url": "classKDesktopFile.html", "keyword": "KDesktopFile", "text": "This class implements KDE s support for the freedesktop.org Desktop Entry Spec Pietro Iglio KConfigBase KConfig Desktop Entry Spec"}, {"type": "function", "name": "KDesktopFile::KDesktopFile", "url": "classKDesktopFile.html#a61ad276b710390565354baa2891d820c", "keyword": "KDesktopFile KDesktopFile::KDesktopFile KDesktopFile", "text": "See QStandardPaths for more information on resources resourceType Allows you to change what sort of resource to search for if fileName is not absolute For instance you might want to specify GenericConfigLocation fileName The name or path of the desktop file If it is not absolute it will be located using the resource type resType"}, {"type": "function", "name": "KDesktopFile::KDesktopFile", "url": "classKDesktopFile.html#afde4ded96109931c5b3a6512b6912331", "keyword": "KDesktopFile KDesktopFile::KDesktopFile KDesktopFile", "text": "See QStandardPaths for more information on resources fileName The name or path of the desktop file If it is not absolute it will be located using the resource type ApplicationsLocation"}, {"type": "function", "name": "KDesktopFile::~KDesktopFile", "url": "classKDesktopFile.html#a7725762f352a8a2f34cf5148c6913e24", "keyword": "KDesktopFile::~KDesktopFile KDesktopFile", "text": "Writes back any dirty configuration entries"}, {"type": "function", "name": "KDesktopFile::actionGroup", "url": "classKDesktopFile.html#a0a4b444afe66b4b42b4591312968f1ec", "keyword": "actionGroup KDesktopFile::actionGroup KDesktopFile", "text": "group the new action group"}, {"type": "function", "name": "KDesktopFile::copyTo", "url": "classKDesktopFile.html#a431a46ce974274427ce97867ae61ba2f", "keyword": "copyTo KDesktopFile::copyTo KDesktopFile", "text": "Actual saving to file happens when the returned object is destructed or when sync() is called upon it file the new KDesktopFile object it will save itself to"}, {"type": "function", "name": "KDesktopFile::hasActionGroup", "url": "classKDesktopFile.html#abb5537565f26fe40924e15f8b08932d0", "keyword": "hasActionGroup KDesktopFile::hasActionGroup KDesktopFile", "text": "group the action group to test true if the action group exists"}, {"type": "function", "name": "KDesktopFile::hasApplicationType", "url": "classKDesktopFile.html#a070da8bce5f333357c21942acdb7bbb3", "keyword": "hasApplicationType KDesktopFile::hasApplicationType KDesktopFile", "text": "true if there is a entry"}, {"type": "function", "name": "KDesktopFile::hasDeviceType", "url": "classKDesktopFile.html#a3938cd1014b15777e12b7e6ce05c7d35", "keyword": "hasDeviceType KDesktopFile::hasDeviceType KDesktopFile", "text": "true if there is a entry"}, {"type": "function", "name": "KDesktopFile::hasLinkType", "url": "classKDesktopFile.html#a9a86253052cb081995e5673db885f9e9", "keyword": "hasLinkType KDesktopFile::hasLinkType KDesktopFile", "text": "The link points to the entry true if there is a entry"}, {"type": "function", "name": "KDesktopFile::noDisplay", "url": "classKDesktopFile.html#a56bf03afb28b491af949c8aecc3a11ac", "keyword": "noDisplay KDesktopFile::noDisplay KDesktopFile", "text": "This handles the NoDisplay key but also OnlyShowIn NotShowIn true to suppress this service 4.1"}, {"type": "function", "name": "KDesktopFile::readActions", "url": "classKDesktopFile.html#ad5227f360527be865a9a5fce5d06e82a", "keyword": "readActions KDesktopFile::readActions KDesktopFile", "text": "the list of actions"}, {"type": "function", "name": "KDesktopFile::readComment", "url": "classKDesktopFile.html#a57e4d5a7a7f03ac2ba3c828638e64326", "keyword": "readComment KDesktopFile::readComment KDesktopFile", "text": "the comment or QString() if not specified"}, {"type": "function", "name": "KDesktopFile::readDevice", "url": "classKDesktopFile.html#ac95f883091c8195607b572c81aac2a59", "keyword": "readDevice KDesktopFile::readDevice KDesktopFile", "text": "the device or QString() if not specified"}, {"type": "function", "name": "KDesktopFile::readDocPath", "url": "classKDesktopFile.html#ab27ff64afee31cf39a8267b8f55dabda", "keyword": "readDocPath KDesktopFile::readDocPath KDesktopFile", "text": "The value of the Or entry"}, {"type": "function", "name": "KDesktopFile::readGenericName", "url": "classKDesktopFile.html#a12a2d0fda1e5e5438f2abfdaa8eaa381", "keyword": "readGenericName KDesktopFile::readGenericName KDesktopFile", "text": "the generic name or QString() if not specified"}, {"type": "function", "name": "KDesktopFile::readIcon", "url": "classKDesktopFile.html#ab70c254d7a9f662cde2958586d49d357", "keyword": "readIcon KDesktopFile::readIcon KDesktopFile", "text": "the icon or QString() if not specified"}, {"type": "function", "name": "KDesktopFile::readMimeTypes", "url": "classKDesktopFile.html#a1ead9392d02c90c0ed60cd5bca84efd2", "keyword": "readMimeTypes KDesktopFile::readMimeTypes KDesktopFile", "text": "the list of mime types 5.15"}, {"type": "function", "name": "KDesktopFile::readName", "url": "classKDesktopFile.html#a3ce7e0db9f40a08a3ecf8965b956e413", "keyword": "readName KDesktopFile::readName KDesktopFile", "text": "the name or QString() if not specified"}, {"type": "function", "name": "KDesktopFile::readPath", "url": "classKDesktopFile.html#a0830116f99ed083e62075ab9a332bcc8", "keyword": "readPath KDesktopFile::readPath KDesktopFile", "text": "the path or QString() if not specified"}, {"type": "function", "name": "KDesktopFile::readType", "url": "classKDesktopFile.html#ac17fb495bc3c2c14d01ae91a6b271a22", "keyword": "readType KDesktopFile::readType KDesktopFile", "text": "the type or QString() if not specified"}, {"type": "function", "name": "KDesktopFile::readUrl", "url": "classKDesktopFile.html#ab2cac75fc55171d12f2722512b425fa1", "keyword": "readUrl KDesktopFile::readUrl KDesktopFile", "text": "the URL or QString() if not specified"}, {"type": "function", "name": "KDesktopFile::sortOrder", "url": "classKDesktopFile.html#a08e5512d3b112c5a8861bcbebbc38912", "keyword": "sortOrder KDesktopFile::sortOrder KDesktopFile", "text": "the value of the entry the filename as passed to the constructor the resource type as passed to the constructor"}, {"type": "function", "name": "KDesktopFile::tryExec", "url": "classKDesktopFile.html#aa06d7040107559f2565e5b4b724bcdf9", "keyword": "tryExec KDesktopFile::tryExec KDesktopFile", "text": "true if TryExec contains an existing binary"}, {"type": "function", "name": "KDesktopFile::isAuthorizedDesktopFile", "url": "classKDesktopFile.html#ab9222da1ca239fc3847d31833bc45552", "keyword": "isAuthorizedDesktopFile KDesktopFile::isAuthorizedDesktopFile KDesktopFile", "text": "By default users are authorized to run all desktop files but the KIOSK framework can be used to activate certain restrictions See README.kiosk for more information Note that desktop files that are not in a standard location as specified by XDG_DATA_DIRS must have their executable bit set to be authorized regardless of KIOSK settings to prevent users from inadvertently running trojan desktop files path the file to check true if the user is authorized to run the file"}, {"type": "function", "name": "KDesktopFile::isDesktopFile", "url": "classKDesktopFile.html#a67faa4b905daaef5ad4e76a863cc2652", "keyword": "isDesktopFile KDesktopFile::isDesktopFile KDesktopFile", "text": "The check is performed looking at the file extension the file is not opened Currently the only valid extension is path the path of the file to check true if the file appears to be a desktop file"}, {"type": "function", "name": "KDesktopFile::locateLocal", "url": "classKDesktopFile.html#aab2e125209675bf946248645f57c4ff8", "keyword": "locateLocal KDesktopFile::locateLocal KDesktopFile", "text": ""}, {"type": "class", "name": "KEMailSettings", "url": "classKEMailSettings.html", "keyword": "KEMailSettings", "text": "The default profile is automatically selected in the constructor Alex Zepeda"}, {"type": "enum", "name": "KEMailSettings::Extension", "url": "classKEMailSettings.html#a293d6b856ecd4d6bcd13cf0e97a1e344", "keyword": "Extension KEMailSettings::Extension KEMailSettings", "text": ""}, {"type": "enum", "name": "KEMailSettings::Setting", "url": "classKEMailSettings.html#ae12254329b6bedfeb8de5f439f8bcb9e", "keyword": "Setting KEMailSettings::Setting KEMailSettings", "text": "Any extra settings thought of later can be accessed easily with getExtendedSetting and setExtendedSetting getSetting() setSetting() getExtendedSetting() setExtendedSetting()"}, {"type": "enumvalue", "name": "KEMailSettings::OutServerType", "url": "classKEMailSettings.html#ae12254329b6bedfeb8de5f439f8bcb9eac69f79475289bbd683451ba1dd8e0fab", "keyword": "OutServerType KEMailSettings::OutServerType KEMailSettings", "text": "since Frameworks 5.0"}, {"type": "enumvalue", "name": "KEMailSettings::OutServerCommand", "url": "classKEMailSettings.html#ae12254329b6bedfeb8de5f439f8bcb9ea52cfaee88974b0347886e1340c8b9ee6", "keyword": "OutServerCommand KEMailSettings::OutServerCommand KEMailSettings", "text": "since Frameworks 5.0"}, {"type": "enumvalue", "name": "KEMailSettings::OutServerTLS", "url": "classKEMailSettings.html#ae12254329b6bedfeb8de5f439f8bcb9eaf8c879419c6054ef15ec1233a17b5288", "keyword": "OutServerTLS KEMailSettings::OutServerTLS KEMailSettings", "text": "since Frameworks 5.0"}, {"type": "enumvalue", "name": "KEMailSettings::InServerType", "url": "classKEMailSettings.html#ae12254329b6bedfeb8de5f439f8bcb9ea4821bdf09bafdda2728de8984f6c6058", "keyword": "InServerType KEMailSettings::InServerType KEMailSettings", "text": "since Frameworks 5.0"}, {"type": "enumvalue", "name": "KEMailSettings::InServerMBXType", "url": "classKEMailSettings.html#ae12254329b6bedfeb8de5f439f8bcb9ea6b0fbb4a55e425cc79ad23105fed06cc", "keyword": "InServerMBXType KEMailSettings::InServerMBXType KEMailSettings", "text": "since Frameworks 5.0"}, {"type": "enumvalue", "name": "KEMailSettings::InServerTLS", "url": "classKEMailSettings.html#ae12254329b6bedfeb8de5f439f8bcb9ea3557ae020df67a1d180298bc35818982", "keyword": "InServerTLS KEMailSettings::InServerTLS KEMailSettings", "text": "since Frameworks 5.0"}, {"type": "function", "name": "KEMailSettings::KEMailSettings", "url": "classKEMailSettings.html#aaec0deff9964f388cccdb1c6194031a2", "keyword": "KEMailSettings KEMailSettings::KEMailSettings KEMailSettings", "text": ""}, {"type": "function", "name": "KEMailSettings::~KEMailSettings", "url": "classKEMailSettings.html#ac14ce7bf4378d7e191e2237f4bdd6dc0", "keyword": "KEMailSettings::~KEMailSettings KEMailSettings", "text": ""}, {"type": "function", "name": "KEMailSettings::currentProfileName", "url": "classKEMailSettings.html#a3362a5a5429275ed26b2b17ec4a28d3d", "keyword": "currentProfileName KEMailSettings::currentProfileName KEMailSettings", "text": "since Frameworks 5.0 Returns the name of the current profile what profile we re currently using"}, {"type": "function", "name": "KEMailSettings::defaultProfileName", "url": "classKEMailSettings.html#a8577e058d405a3a2d9fdd0710c3bd3a6", "keyword": "defaultProfileName KEMailSettings::defaultProfileName KEMailSettings", "text": "the name of the one that s currently default QString() if none"}, {"type": "function", "name": "KEMailSettings::getSetting", "url": "classKEMailSettings.html#a4871481fa711fdf339c68dcefe2921db", "keyword": "getSetting KEMailSettings::getSetting KEMailSettings", "text": "s the setting to get the value of the setting or QString() if not set"}, {"type": "function", "name": "KEMailSettings::profiles", "url": "classKEMailSettings.html#ab2c941efb85abe7500094332a8d5bb5b", "keyword": "profiles KEMailSettings::profiles KEMailSettings", "text": "the list of profiles"}, {"type": "function", "name": "KEMailSettings::setDefault", "url": "classKEMailSettings.html#af30b061c764e3085a473e4950b16431d", "keyword": "setDefault KEMailSettings::setDefault KEMailSettings", "text": "def the new default"}, {"type": "function", "name": "KEMailSettings::setProfile", "url": "classKEMailSettings.html#a58b8a0bafc83a6aaf6935fe777a76df4", "keyword": "setProfile KEMailSettings::setProfile KEMailSettings", "text": "s the name of the new profile"}, {"type": "function", "name": "KEMailSettings::setSetting", "url": "classKEMailSettings.html#a827d4e15aed11ef52592a8f5397bee7d", "keyword": "setSetting KEMailSettings::setSetting KEMailSettings", "text": "s the setting to set v the new value of the setting or QString() to unset"}, {"type": "struct", "name": "KEntry", "url": "structKEntry.html", "keyword": "KEntry", "text": ""}, {"type": "function", "name": "KEntry::KEntry", "url": "structKEntry.html#a4b79ffb8cda65c7567b5826e0e0b0528", "keyword": "KEntry KEntry::KEntry KEntry", "text": ""}, {"type": "variable", "name": "KEntry::bDeleted", "url": "structKEntry.html#accd73af842318df06b1ce2e10229683d", "keyword": "bDeleted KEntry::bDeleted KEntry", "text": ""}, {"type": "variable", "name": "KEntry::bDirty", "url": "structKEntry.html#a8d1936142d224febe2ab1810a9beb4b7", "keyword": "bDirty KEntry::bDirty KEntry", "text": ""}, {"type": "variable", "name": "KEntry::bExpand", "url": "structKEntry.html#a74ff0d2fe59eb0bd8f8550d2d1b0130e", "keyword": "bExpand KEntry::bExpand KEntry", "text": ""}, {"type": "variable", "name": "KEntry::bGlobal", "url": "structKEntry.html#a6cd73aa253368b94a1cc88923f9a6c32", "keyword": "bGlobal KEntry::bGlobal KEntry", "text": ""}, {"type": "variable", "name": "KEntry::bImmutable", "url": "structKEntry.html#a1b391d253964a47eb0944bf149658883", "keyword": "bImmutable KEntry::bImmutable KEntry", "text": ""}, {"type": "variable", "name": "KEntry::bLocalizedCountry", "url": "structKEntry.html#af36d00adf757d6d1efb2f99fcf4752f7", "keyword": "bLocalizedCountry KEntry::bLocalizedCountry KEntry", "text": "If false the value references just language e.g if true the value references language and country e.g"}, {"type": "variable", "name": "KEntry::bReverted", "url": "structKEntry.html#aac8977c00242849dbdec695466dee5ff", "keyword": "bReverted KEntry::bReverted KEntry", "text": ""}, {"type": "variable", "name": "KEntry::mValue", "url": "structKEntry.html#acd62263eac6f8f0c51e5397a0c3fe9c5", "keyword": "mValue KEntry::mValue KEntry", "text": ""}, {"type": "typedef", "name": "KEntry::KEntryMapConstIterator", "url": "structKEntry.html#ab7fb5ad53460c90249a7db81f28b24f6", "keyword": "KEntryMapConstIterator KEntry::KEntryMapConstIterator KEntry", "text": "type for iterating over keys in a KEntryMap in sorted order It is const thus you cannot change the entries in the iterator only examine them"}, {"type": "typedef", "name": "KEntry::KEntryMapIterator", "url": "structKEntry.html#a5185dae734c5a7597d9e1fb38b8ef3b5", "keyword": "KEntryMapIterator KEntry::KEntryMapIterator KEntry", "text": "type for iterating over keys in a KEntryMap in sorted order"}, {"type": "struct", "name": "KEntryKey", "url": "structKEntryKey.html", "keyword": "KEntryKey", "text": ""}, {"type": "function", "name": "KEntryKey::KEntryKey", "url": "structKEntryKey.html#a5f54d6bd4cf0e96a1f69aa3ead83a4e7", "keyword": "KEntryKey KEntryKey::KEntryKey KEntryKey", "text": ""}, {"type": "variable", "name": "KEntryKey::bDefault", "url": "structKEntryKey.html#a1aa02e66ff1a3c5a9b1f48984f25220b", "keyword": "bDefault KEntryKey::bDefault KEntryKey", "text": ""}, {"type": "variable", "name": "KEntryKey::bLocal", "url": "structKEntryKey.html#a457839125794297576e713c160f083ac", "keyword": "bLocal KEntryKey::bLocal KEntryKey", "text": ""}, {"type": "variable", "name": "KEntryKey::bRaw", "url": "structKEntryKey.html#a2c6ba455b9f5732b939fb4dc1152ff47", "keyword": "bRaw KEntryKey::bRaw KEntryKey", "text": "Key is a raw unprocessed key this should only be set during merging never for normal use"}, {"type": "variable", "name": "KEntryKey::mGroup", "url": "structKEntryKey.html#a35b4c91ad97c52306f8b786ca3e049f9", "keyword": "mGroup KEntryKey::mGroup KEntryKey", "text": ""}, {"type": "variable", "name": "KEntryKey::mKey", "url": "structKEntryKey.html#a04bd261317889136881da8975861f14d", "keyword": "mKey KEntryKey::mKey KEntryKey", "text": ""}, {"type": "class", "name": "KEntryMap", "url": "classKEntryMap.html", "keyword": "KEntryMap", "text": "type specifying a map of entries key value pairs The keys are actually a key in a particular config file group together with the group name"}, {"type": "function", "name": "KEntryMap::setEntry", "url": "classKEntryMap.html#abf59c4947de3956a9abf32fc7836025d", "keyword": "setEntry KEntryMap::setEntry KEntryMap", "text": ""}, {"type": "class", "name": "KSharedConfig", "url": "classKSharedConfig.html", "keyword": "KSharedConfig", "text": "KSharedConfig provides a shared reference counted variant of KConfig This allows you to use manipulate the same configuration files from different places in your code without worrying about accidentally overwriting changes The openConfig() method is threadsafe every thread gets a separate repository of shared KConfig objects This means however that you ll be responsible for synchronizing the instances of KConfig for the same filename between threads using reparseConfiguration after a manual change notification just like you have to do between processes"}, {"type": "function", "name": "KSharedConfig::openConfig", "url": "classKSharedConfig.html#a328208649f2e3f0ee895c9b11aa82205", "keyword": "openConfig KSharedConfig::openConfig KSharedConfig", "text": "If an absolute path is specified for fileName that file will be used as the store for the configuration settings If a non-absolute path is provided the file will be looked for in the standard directory specified by resourceType If no path is provided a default configuration file will be used based on the name of the main application component mode determines whether the user or global settings will be allowed to influence the values returned by this object See KConfig::OpenFlags for more details fileName the configuration file to open If empty it will be determined automatically from config on the command line otherwise from the application name mode how global settings should affect the configuration options exposed by this KConfig object resourceType The standard directory to look for the configuration file in see QStandardPaths KConfig"}, {"type": "namespace", "name": "KAuthorized", "url": "namespaceKAuthorized.html", "keyword": "KAuthorized", "text": "The relevant settings are read from the application s KSharedConfig instance so actions can be disabled on a per-application or global basis by using the kdeglobals file"}, {"type": "function", "name": "KAuthorized::authorize", "url": "namespaceKAuthorized.html#a5e242f5ecea86fbdc3151669b1db6db6", "keyword": "authorize KAuthorized::authorize KAuthorized", "text": "All settings are read from the group For example if kdeglobals contains then will return false This method is intended for actions that do not necessarily have a one-to-one correspondence with a menu or toolbar item ie a KAction in a KXMLGui application is an example of such a action The convention for actions like is to prepend the action name with for example This is what authorizeKAction() does action The name of the action true if the action is authorized false otherwise authorizeKAction()"}, {"type": "function", "name": "KAuthorized::authorizeAction", "url": "namespaceKAuthorized.html#af6f59884deb7660aacc9eaead74e89ea", "keyword": "authorizeAction KAuthorized::authorizeAction KAuthorized", "text": "This behaves like authorize() except that is prepended to action So if kdeglobals contains then will return false KXMLGui-based applications should not normally need to call this function as KActionCollection will do it automatically action The name of a QAction action true if the QAction is authorized false otherwise 5.24 authorize()"}, {"type": "function", "name": "KAuthorized::authorizeControlModule", "url": "namespaceKAuthorized.html#a04fa2e938a8af09d733c6b6325db3793", "keyword": "authorizeControlModule KAuthorized::authorizeControlModule KAuthorized", "text": "All settings are read from the group For example if kdeglobals contains then will return false menuId The desktop menu ID for the control module true if access to the module is authorized false otherwise authorizeControlModules()"}, {"type": "function", "name": "KAuthorized::authorizeControlModules", "url": "namespaceKAuthorized.html#a0d2ea48fee3810f36a941093a3db0ab9", "keyword": "authorizeControlModules KAuthorized::authorizeControlModules KAuthorized", "text": "menuIds A list of desktop menu IDs for control modules The entries in menuIds for which authorizeControlModule() returns true authorizeControlModule()"}, {"type": "function", "name": "KAuthorized::authorizeKAction", "url": "namespaceKAuthorized.html#a8e2b27b5690d1f132bde791352a18fa9", "keyword": "authorizeKAction KAuthorized::authorizeKAction KAuthorized", "text": "This behaves like authorize() except that is prepended to action So if kdeglobals contains then will return false KXMLGui-based applications should not normally need to call this function as KActionCollection will do it automatically action The name of a KAction action true if the KAction is authorized false otherwise authorize() since 5.24 use authorizeAction() instead"}, {"type": "namespace", "name": "KConfigGui", "url": "namespaceKConfigGui.html", "keyword": "KConfigGui", "text": ""}, {"type": "function", "name": "KConfigGui::hasSessionConfig", "url": "namespaceKConfigGui.html#a9ff8fa1870409e421d5b10b9da777e3b", "keyword": "hasSessionConfig KConfigGui::hasSessionConfig KConfigGui", "text": "if sessionConfig() got called at least once true if a sessionConfig object was created false otherwise"}, {"type": "function", "name": "KConfigGui::sessionConfig", "url": "namespaceKConfigGui.html#a36d66204429764d84f4f7728dfb0805e", "keyword": "sessionConfig KConfigGui::sessionConfig KConfigGui", "text": "A pointer to the application s instance specific KConfig object KConfig"}, {"type": "function", "name": "KConfigGui::sessionConfigName", "url": "namespaceKConfigGui.html#ac89bd9cff47317d2060f8154b7608098", "keyword": "sessionConfigName KConfigGui::sessionConfigName KConfigGui", "text": "the application session name since 5.11 use sessionConfig() name()"}, {"type": "function", "name": "KConfigGui::setSessionConfig", "url": "namespaceKConfigGui.html#a1ff09fc10ecb0e0b8f09aec6ccf8d137", "keyword": "setSessionConfig KConfigGui::setSessionConfig KConfigGui", "text": "id new session id key new session key 5.11"}, {"type": "namespace", "name": "KStandardShortcut", "url": "namespaceKStandardShortcut.html", "keyword": "KStandardShortcut", "text": "These are the standard keybindings that should be used in all KDE applications They will be configurable so do not hardcode the default behavior"}, {"type": "enum", "name": "KStandardShortcut::StandardShortcut", "url": "namespaceKStandardShortcut.html#afc4fa78a9029f199d4a2d2ff198eebe6", "keyword": "StandardShortcut KStandardShortcut::StandardShortcut KStandardShortcut", "text": ""}, {"type": "function", "name": "KStandardShortcut::addBookmark", "url": "namespaceKStandardShortcut.html#a4abd3c1b86438efcba0de5c0b2d88411", "keyword": "addBookmark KStandardShortcut::addBookmark KStandardShortcut", "text": "Default Ctrl+B the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::back", "url": "namespaceKStandardShortcut.html#ae213b897621bb35a7b768f6c858c5204", "keyword": "back KStandardShortcut::back KStandardShortcut", "text": "Default Alt+Left the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::backwardWord", "url": "namespaceKStandardShortcut.html#a7b47c5dd285dca895af100e7376e6278", "keyword": "backwardWord KStandardShortcut::backwardWord KStandardShortcut", "text": "Default Ctrl+Left the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::begin", "url": "namespaceKStandardShortcut.html#a177f361b905d43cabad8e9a163fa9a38", "keyword": "begin KStandardShortcut::begin KStandardShortcut", "text": "Default Ctrl-Home the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::beginningOfLine", "url": "namespaceKStandardShortcut.html#a0313d75d3be149d5ca73b7ac2633904b", "keyword": "beginningOfLine KStandardShortcut::beginningOfLine KStandardShortcut", "text": "Default Home the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::close", "url": "namespaceKStandardShortcut.html#a1decacdf93c345273761be4042a01efb", "keyword": "close KStandardShortcut::close KStandardShortcut", "text": "Default Ctrl-w the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::completion", "url": "namespaceKStandardShortcut.html#a8a9f11ff9e1fd4ba233ac3ce68b3bfc6", "keyword": "completion KStandardShortcut::completion KStandardShortcut", "text": "Default Ctrl+E the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::copy", "url": "namespaceKStandardShortcut.html#a73174761151b61bd14dc97dd0eb66804", "keyword": "copy KStandardShortcut::copy KStandardShortcut", "text": "Default Ctrl-c the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::cut", "url": "namespaceKStandardShortcut.html#a25cff9d943fcd41704f9a1b6df0f5318", "keyword": "cut KStandardShortcut::cut KStandardShortcut", "text": "Default Ctrl-x the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::deleteFile", "url": "namespaceKStandardShortcut.html#a9e682ccab1f730d9eb199102cf2f8f24", "keyword": "deleteFile KStandardShortcut::deleteFile KStandardShortcut", "text": "Default Shift+Delete the shortcut of the standard accelerator 5.25"}, {"type": "function", "name": "KStandardShortcut::deleteWordBack", "url": "namespaceKStandardShortcut.html#a50c19afbd9d064514f3f0d2613ce083f", "keyword": "deleteWordBack KStandardShortcut::deleteWordBack KStandardShortcut", "text": "Default Ctrl-Backspace the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::deleteWordForward", "url": "namespaceKStandardShortcut.html#ad4c89d4d38df181e142311d1968e0956", "keyword": "deleteWordForward KStandardShortcut::deleteWordForward KStandardShortcut", "text": "Default Ctrl-Delete the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::end", "url": "namespaceKStandardShortcut.html#a65aa5d5620adc7966005fedfdd5c0f37", "keyword": "end KStandardShortcut::end KStandardShortcut", "text": "Default Ctrl-End the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::endOfLine", "url": "namespaceKStandardShortcut.html#a7e73605406aa708ac66cd005c77757d8", "keyword": "endOfLine KStandardShortcut::endOfLine KStandardShortcut", "text": "Default End the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::find", "url": "namespaceKStandardShortcut.html#a592495890dd134f3b662ed498a8520a8", "keyword": "find KStandardShortcut::find KStandardShortcut", "text": "This is used by class KKeyChooser keySeq the key sequence to search the id of the standard accelerator or AccelNone if there is none"}, {"type": "function", "name": "KStandardShortcut::find", "url": "namespaceKStandardShortcut.html#afa21e76358c853130e45c444bc743b3f", "keyword": "find KStandardShortcut::find KStandardShortcut", "text": "This is used by class KKeyChooser keyName the key sequence to search the id of the standard accelerator or AccelNone if there is none"}, {"type": "function", "name": "KStandardShortcut::find", "url": "namespaceKStandardShortcut.html#a569d532b69b15e269421383f8a5c22cc", "keyword": "find KStandardShortcut::find KStandardShortcut", "text": "Default Ctrl-f the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::findNext", "url": "namespaceKStandardShortcut.html#adbe0d3e77cc61107bc4c268e907cf748", "keyword": "findNext KStandardShortcut::findNext KStandardShortcut", "text": "Default F3 the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::findPrev", "url": "namespaceKStandardShortcut.html#a8db6426edbaae98866d01a73d11e6acc", "keyword": "findPrev KStandardShortcut::findPrev KStandardShortcut", "text": "Default Shift-F3 the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::forward", "url": "namespaceKStandardShortcut.html#a5a4322b32e230c23a3b426f5f3466794", "keyword": "forward KStandardShortcut::forward KStandardShortcut", "text": "Default ALT+Right the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::forwardWord", "url": "namespaceKStandardShortcut.html#a825e51fb8bb084e9cf8118eb03b51f26", "keyword": "forwardWord KStandardShortcut::forwardWord KStandardShortcut", "text": "Default Ctrl+Right the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::fullScreen", "url": "namespaceKStandardShortcut.html#a64fb2d2f26a3c807d3cfd864c2683db9", "keyword": "fullScreen KStandardShortcut::fullScreen KStandardShortcut", "text": "Default Ctrl+Shift+F the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::gotoLine", "url": "namespaceKStandardShortcut.html#af01cfa3f3bae5f77111c46210e4b5b79", "keyword": "gotoLine KStandardShortcut::gotoLine KStandardShortcut", "text": "Default Ctrl+G the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::guardedStandardShortcutInfo", "url": "namespaceKStandardShortcut.html#a8428d7e49024a33ced05a47699f53336", "keyword": "guardedStandardShortcutInfo KStandardShortcut::guardedStandardShortcutInfo KStandardShortcut", "text": "Return a dummy entry with no name and an empty shortcut if id is invalid"}, {"type": "function", "name": "KStandardShortcut::hardcodedDefaultShortcut", "url": "namespaceKStandardShortcut.html#aaffdb4e07a11237546ec6a334350b379", "keyword": "hardcodedDefaultShortcut KStandardShortcut::hardcodedDefaultShortcut KStandardShortcut", "text": "This does not take into account the user s configuration id the id of the accelerator the default shortcut of the accelerator"}, {"type": "function", "name": "KStandardShortcut::help", "url": "namespaceKStandardShortcut.html#af8a395206b33392ebc8420a7813e731a", "keyword": "help KStandardShortcut::help KStandardShortcut", "text": "Default F1 the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::home", "url": "namespaceKStandardShortcut.html#a6d695ed1b80a77760c6ffd765997623a", "keyword": "home KStandardShortcut::home KStandardShortcut", "text": "Default Alt-Home the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::initialize", "url": "namespaceKStandardShortcut.html#a0aa77fb99899ea190f208d288e47f4e8", "keyword": "initialize KStandardShortcut::initialize KStandardShortcut", "text": "On X11 if QApplication was initialized with GUI disabled the default will always be used"}, {"type": "function", "name": "KStandardShortcut::label", "url": "namespaceKStandardShortcut.html#a63445efadde63d1ca114d0dd74c12a71", "keyword": "label KStandardShortcut::label KStandardShortcut", "text": "id the id of the accelerator a localized label for the accelerator"}, {"type": "function", "name": "KStandardShortcut::moveToTrash", "url": "namespaceKStandardShortcut.html#a95995c90b4bec9d2a20e47ed1b04aaa0", "keyword": "moveToTrash KStandardShortcut::moveToTrash KStandardShortcut", "text": "Default Delete the shortcut of the standard accelerator 5.25"}, {"type": "function", "name": "KStandardShortcut::name", "url": "namespaceKStandardShortcut.html#a690a745dc43a235fb7960c486b9dff1c", "keyword": "name KStandardShortcut::name KStandardShortcut", "text": "id the id of the accelerator the unique name of the accelerator"}, {"type": "function", "name": "KStandardShortcut::next", "url": "namespaceKStandardShortcut.html#a4e4bbc9e165bcb3f8f227270c3b535b7", "keyword": "next KStandardShortcut::next KStandardShortcut", "text": "Default Next the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::nextCompletion", "url": "namespaceKStandardShortcut.html#a0958546689ddea409a34c2a35ecab428", "keyword": "nextCompletion KStandardShortcut::nextCompletion KStandardShortcut", "text": "Default Ctrl+Down the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::open", "url": "namespaceKStandardShortcut.html#aacaa096bf5f591dcf542ae925ffd100e", "keyword": "open KStandardShortcut::open KStandardShortcut", "text": "Default Ctrl-o the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::openNew", "url": "namespaceKStandardShortcut.html#ad988cc98664bd4baa109104563f938b9", "keyword": "openNew KStandardShortcut::openNew KStandardShortcut", "text": "Default Ctrl-n the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::paste", "url": "namespaceKStandardShortcut.html#a604e3ba8b1f5b83726c0e797aa6220a1", "keyword": "paste KStandardShortcut::paste KStandardShortcut", "text": "Default Ctrl-v the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::pasteSelection", "url": "namespaceKStandardShortcut.html#af125c818da75896f24ea907f006064a2", "keyword": "pasteSelection KStandardShortcut::pasteSelection KStandardShortcut", "text": "Default Ctrl-Shift-Insert the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::prevCompletion", "url": "namespaceKStandardShortcut.html#ac1f782ff555cc67a2e94bc3b8b0d3d17", "keyword": "prevCompletion KStandardShortcut::prevCompletion KStandardShortcut", "text": "Default Ctrl+Up the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::print", "url": "namespaceKStandardShortcut.html#a3e2d9452b76b785fdac5b96619267b58", "keyword": "print KStandardShortcut::print KStandardShortcut", "text": "Default Ctrl-p the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::prior", "url": "namespaceKStandardShortcut.html#addefa7a6b21409ab40aef55503e88250", "keyword": "prior KStandardShortcut::prior KStandardShortcut", "text": "Default Prior the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::quit", "url": "namespaceKStandardShortcut.html#aa96f590eb19fb3cf4dda62cf61708757", "keyword": "quit KStandardShortcut::quit KStandardShortcut", "text": "Default Ctrl-q the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::redo", "url": "namespaceKStandardShortcut.html#af8579f36b8347265a1991d911c19efe7", "keyword": "redo KStandardShortcut::redo KStandardShortcut", "text": "Default Shift-Ctrl-z the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::reload", "url": "namespaceKStandardShortcut.html#a244301b4e1d4a4b5edca28d3b5d567b5", "keyword": "reload KStandardShortcut::reload KStandardShortcut", "text": "Default F5 the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::renameFile", "url": "namespaceKStandardShortcut.html#a7dfa067f878dc8dee95f39cb2d9a346c", "keyword": "renameFile KStandardShortcut::renameFile KStandardShortcut", "text": "Default F2 the shortcut of the standard accelerator 5.25"}, {"type": "function", "name": "KStandardShortcut::replace", "url": "namespaceKStandardShortcut.html#ae97554c9fc46418ea61e0127e15369e4", "keyword": "replace KStandardShortcut::replace KStandardShortcut", "text": "Default Ctrl-r the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::rotateDown", "url": "namespaceKStandardShortcut.html#a1997a843fe851f7205b6e162e893f0fb", "keyword": "rotateDown KStandardShortcut::rotateDown KStandardShortcut", "text": "Default Down the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::rotateUp", "url": "namespaceKStandardShortcut.html#af9ade7102723d380e7deb313addd1b7a", "keyword": "rotateUp KStandardShortcut::rotateUp KStandardShortcut", "text": "Default Up the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::save", "url": "namespaceKStandardShortcut.html#a6bc512d6be9dd9a1d81c781cd4c6430e", "keyword": "save KStandardShortcut::save KStandardShortcut", "text": "Default Ctrl-s the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::saveShortcut", "url": "namespaceKStandardShortcut.html#acd4056ca53c464ece9b63b4332240a95", "keyword": "saveShortcut KStandardShortcut::saveShortcut KStandardShortcut", "text": ""}, {"type": "function", "name": "KStandardShortcut::selectAll", "url": "namespaceKStandardShortcut.html#ae7fd3417aa26ed0ce39b07c7d3672757", "keyword": "selectAll KStandardShortcut::selectAll KStandardShortcut", "text": "Default Ctrl-A the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::shortcut", "url": "namespaceKStandardShortcut.html#ac267c82dcd08d8f98c582f4f87c62b53", "keyword": "shortcut KStandardShortcut::shortcut KStandardShortcut", "text": "On X11 if QApplication was initialized with GUI disabled the default keybinding will always be returned id the id of the accelerator"}, {"type": "function", "name": "KStandardShortcut::showMenubar", "url": "namespaceKStandardShortcut.html#ab855eead64cf665c321eec06d8312ec9", "keyword": "showMenubar KStandardShortcut::showMenubar KStandardShortcut", "text": "Default Ctrl-M the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::substringCompletion", "url": "namespaceKStandardShortcut.html#a1e02d32a34caa8a95bab577da9e4b734", "keyword": "substringCompletion KStandardShortcut::substringCompletion KStandardShortcut", "text": "Default Ctrl-T the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::tabNext", "url": "namespaceKStandardShortcut.html#a9262eb609e9ad994d7b913eb715e004e", "keyword": "tabNext KStandardShortcut::tabNext KStandardShortcut", "text": "Default Ctrl- the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::tabPrev", "url": "namespaceKStandardShortcut.html#a74a978efe91c66dd7585aca8e925ca42", "keyword": "tabPrev KStandardShortcut::tabPrev KStandardShortcut", "text": "Default Ctrl- the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::undo", "url": "namespaceKStandardShortcut.html#a38bc08f3697ee70dcf981eee6d788305", "keyword": "undo KStandardShortcut::undo KStandardShortcut", "text": "Default Ctrl-z the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::up", "url": "namespaceKStandardShortcut.html#a772051af4489a188be79fdc519e050b6", "keyword": "up KStandardShortcut::up KStandardShortcut", "text": "Default Alt+Up the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::whatsThis", "url": "namespaceKStandardShortcut.html#a0df74edb68a79939607c3952f72f505f", "keyword": "whatsThis KStandardShortcut::whatsThis KStandardShortcut", "text": "id the id of the accelerator a localized description of the accelerator"}, {"type": "function", "name": "KStandardShortcut::whatsThis", "url": "namespaceKStandardShortcut.html#a54f106c39e96abf0b0d78bf72fe54841", "keyword": "whatsThis KStandardShortcut::whatsThis KStandardShortcut", "text": "Default Shift+F1 the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::zoomIn", "url": "namespaceKStandardShortcut.html#a3bd865ff652af7f66e8e0d4e57292c8d", "keyword": "zoomIn KStandardShortcut::zoomIn KStandardShortcut", "text": "Default Ctrl-Plus the shortcut of the standard accelerator"}, {"type": "function", "name": "KStandardShortcut::zoomOut", "url": "namespaceKStandardShortcut.html#a4089275f2d0b531c39b071441be48f37", "keyword": "zoomOut KStandardShortcut::zoomOut KStandardShortcut", "text": "Default Ctrl-Minus the shortcut of the standard accelerator"}, {"type": "variable", "name": "KStandardShortcut::g_infoStandardShortcut", "url": "namespaceKStandardShortcut.html#ae2216f9e2bd0970df48e2dcda42c5463", "keyword": "g_infoStandardShortcut KStandardShortcut::g_infoStandardShortcut KStandardShortcut", "text": "Each enum value from StandardShortcut should appear in this table"}, {"type": "namespace", "name": "KWindowConfig", "url": "namespaceKWindowConfig.html", "keyword": "KWindowConfig", "text": ""}, {"type": "function", "name": "KWindowConfig::restoreWindowSize", "url": "namespaceKWindowConfig.html#ae2f91744d732d35e0575f3faf1812b53", "keyword": "restoreWindowSize KWindowConfig::restoreWindowSize KWindowConfig", "text": "the group must be set before calling dialog The dialog to restore size config The config group to read from 5.0"}, {"type": "function", "name": "KWindowConfig::saveWindowSize", "url": "namespaceKWindowConfig.html#a25b744b4289045bf7efacfb37cd45573", "keyword": "saveWindowSize KWindowConfig::saveWindowSize KWindowConfig", "text": "the group must be set before calling window The window to save size config The config group to read from options passed to KConfigGroup::writeEntry() 5.0"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KConfig Persistent platform-independent application settings Introduction KConfig provides an advanced configuration system It is made of two parts KConfigCore and KConfigGui KConfigCore provides access to the configuration files themselves It features Code generation describe your configuration in an XML file and use to generate classes that read and write configuration entries Cascading configuration files global settings overridden by local settings Optional shell expansion support see docs/options md The ability to lock down configuration options see docs/options md KConfigGui provides a way to hook widgets to the configuration so that they are automatically initialized from the configuration and automatically propagate their changes to their respective configuration files"}]}