<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">source</field>
    <field name="name">__init__.py</field>
    <field name="url">____init_____8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">__init__.py</field>
    <field name="url">depdiagram_2____init_____8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">argparserutils.py</field>
    <field name="url">argparserutils_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">parse_args argparse.ArgumentParser add_sources_group group.add_argument group.add_argument add_output_group add_qt_doc_group add_paths_group add_misc_group parser.parse_args check_common_args args.depdiagram_dot_dir logging.error exit os.path.isdir args.sourcesdir logging.error args.sourcesdir exit add_sources_group parser.add_argument_group add_output_group parser.add_argument_group group.add_argument group.add_argument group.add_argument group.add_argument group.add_argument group.add_argument add_qt_doc_group parser.add_argument_group group.add_argument group.add_argument group.add_argument add_paths_group parser.add_argument_group group.add_argument group.add_argument add_misc_group os.path.dirname os.path.realpath os.path.join parser.add_argument_group group.add_argument group.add_argument check_common_args _is_doxdatadir args.doxdatadir logging.error format args.doxdatadir sys.exit _is_doxdatadir os.path.exists os.path.join</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">block.py</field>
    <field name="url">block_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">Block object __init__ writeln write Block.INDENT_SIZE write_attrs attrs.items format write_list_attrs attrs.items b.writeln format write_nodes sorted format block Block block.write_attrs square_block curly_block cluster_block quote quote format</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">doxyfilewriter.py</field>
    <field name="url">doxyfilewriter_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">_quote DoxyfileWriter object __init__ write_entry isinstance join _quote isinstance _quote str write write_entries kwargs.items</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">framework.py</field>
    <field name="url">framework_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">Framework object __init__ add_target set add_target_dependency add get_targets keys has_target get_all_target_dependencies values set reduce x.union get_dependencies_for_target add_extra_framework append get_extra_frameworks __repr__</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">frameworkdb.py</field>
    <field name="url">frameworkdb_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">preprocess gv.read open read gvutils.get_node_list gvutils.Node node.label.replace node.shape targets.append txt.replace node.name re.sub _add_extra_dependencies dct.get fw.add_extra_framework DotFileParser object __init__ parse os.path.basename replace Framework preprocess _init_fw_from_dot_data target_from_node node.name.replace gv.readstring set gvutils.get_node_list gvutils.Node node.shape target_from_node targets.add fw.add_target gvutils.get_edge_list gvutils.Edge target_from_node edge.tail edge.head target_from_node edge.head fw.add_target_dependency _want node.shape node.shape node.name fnmatch.fnmatchcase node.name name.startswith FrameworkDb object __init__ populate DotFileParser dot_file.replace open yaml.load dot_file.encode parser.parse _add_extra_dependencies append _update_fw_for_target fw.get_targets find_by_name fw.name remove_unused_frameworks add_to_set fw_set.add wanted_fw.get_all_target_dependencies get add_to_set wanted_fw.get_extra_frameworks logging.warning format add_to_set set add_to_set list find_external_targets set set fw_targets.update fw.get_targets all_targets.update fw.get_all_target_dependencies all_targets.difference get_framework_for_target __iter__ iter</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">generate.py</field>
    <field name="url">generate_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">kapidox.depdiagram.block kapidox.depdiagram.framework kapidox.depdiagram.frameworkdb dict dict dict dict dict dict dict FrameworkCmp object __init__ set __call__ depends_on depender_fw.get_all_target_dependencies provider_fw.has_target get_framework_for_target DotWriter Block __init__ Block.__init__ write root.write_list_attrs find_external_targets set x.startswith other_targets.difference_update root.cluster_block b.write_list_attrs b.write_nodes root.cluster_block b.write_list_attrs b.write_nodes sorted x.tier itertools.groupby x.tier format root.cluster_block tier_block.write_list_attrs list sorted FrameworkCmp write_framework tier_block.write_list_attrs quote fw.name tier_block.write_nodes fw.name set fw.get_all_target_dependencies get_framework_for_target target_fw.name edges.add fw.name fw.get_extra_frameworks edges.add fw.name tier_block.writeln format write_detailed_framework tier_block.cluster_block fw.name fw_block.write_attrs fw_block.write_list_attrs sorted fw.get_targets fw_block.write_nodes fw.get_dependencies_for_target sorted fw_block.writeln format generate FrameworkDb db.populate db.find_by_name logging.error format db.remove_unused_frameworks DotWriter writer.write</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">generator.py</field>
    <field name="url">generator_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">xml.etree.ElementTree sys.version_info.major urllib.parse xml.etree.ElementTree Context object __init__ args.title args.doxdatadir args.man_pages args.qhp args.searchengine args.api_searchbox args.doxygen args.qhelpgenerator hasattr setattr kwargs.get create_jinja_environment jinja2.FileSystemLoader os.path.join jinja2.Environment process_toplevel_html_file products.sort x.fancyname.lower create_jinja_environment get_template codecs.open outf.write tmpl.render create_jinja_environment get_template codecs.open outf.write tmpl2.render process_subgroup_html_files group.fancyname sorted os.path.isdir group.name os.mkdir group.name group.name create_jinja_environment get_template codecs.open outf.write tmpl.render create_jinja_environment get_template group.name codecs.open outf.write tmpl2.render create_dirs ctx.htmldir os.path.join ctx.outputdir ctx.tagfile os.path.join ctx.htmldir ctx.fwinfo.fancyname os.path.exists ctx.outputdir os.makedirs ctx.outputdir os.path.exists ctx.htmldir shutil.rmtree ctx.htmldir os.makedirs ctx.htmldir load_template codecs.open read jinja2.Template jinja2.exceptions.TemplateSyntaxError logging.error format find_tagfiles os.path.isdir smartjoin pathorurl1.endswith urljoin os.path.join nestedlink smartjoin os.listdir os.path.join os.path.isfile e.endswith tagfiles.append os.path.isdir find_tagfiles nestedlink search_for_tagfiles os.path.isdir logging.warning find_tagfiles len logging.warning find_tagfiles len logging.info menu_items list filter os.path.isfile os.path.join parse_dox_html parse_key_value_block line.split skip_head extract_body body.append stream.readline rstrip parser join postprocess_internal os.listdir name.endswith os.path.join name.startswith split codecs.open parse_dox_html codecs.open tmpl.render logging.error format outf.write os.remove os.rename build_classmap xml.etree.ElementTree ET.parse tree.getroot compound.get compound.find compound.find mapping.append name_el.text filename_el.text write_mapping_to_php logging.info codecs.open f.write f.write f.write f.write generate_dependencies_page os.path.join os.path.join load_template codecs.open tmpl.render os.path.basename outf.write generate_apidocs find_src_subdir os.path.join ctx.fwinfo.path os.path.join os.path.isdir os.path.isfile returnlist.append os.path.isfile ctx.fwinfo.path input_list.append ctx.fwinfo.path os.path.isfile ctx.fwinfo.path input_list.append ctx.fwinfo.path input_list.extend find_src_subdir ctx.fwinfo.srcdirs input_list.extend find_src_subdir ctx.fwinfo.docdir ctx.dependency_diagram input_list.append generate_dependencies_page ctx.doxdatadir ctx.modulename ctx.dependency_diagram image_path_list.append ctx.dependency_diagram os.path.join codecs.open codecs.open os.path.join ctx.doxdatadir doxyfile.write DoxyfileWriter writer.write_entry ctx.fancyname image_path_list.extend find_src_subdir ctx.fwinfo.docdir writer.write_entries find_src_subdir ctx.fwinfo.docdir find_src_subdir ctx.fwinfo.exampledir writer.write_entry ctx.tagfiles writer.write_entries ctx.outputdir ctx.tagfile os.path.join ctx.outputdir writer.write_entries ctx.doxdatadir ctx.doxdatadir writer.write_entries ctx.doxdatadir writer.write_entries ctx.modulename ctx.modulename ctx.qhelpgenerator writer.write_entries ctx.man_pages ctx.qhp writer.write_entries find_src_subdir ctx.fwinfo.docdir os.path.join find_src_subdir ctx.fwinfo.docdir os.path.isfile codecs.open doxyfile.write logging.info subprocess.call ctx.doxygen postprocess ctx.resourcedir ctx.title ctx.fwinfo ctx.copyright ctx.api_searchbox menu_items ctx.htmldir ctx.modulename utils.get_kapidox_version mapping.update logging.info create_jinja_environment ctx.doxdatadir get_template postprocess_internal ctx.htmldir generate_diagram run_cmd subprocess.check_call subprocess.CalledProcessError logging.error format exc.returncode logging.info os.path.join open depdiagram.generate logging.error logging.info os.path.join open run_cmd logging.info run_cmd os.unlink os.unlink create_fw_context lib.part_of_group range len startswith startswith corrected_tagfiles.append corrected_tagfiles.append Context lib.name lib.fancyname lib.part_of_group lib.dependency_diagram lib.outputdir gen_fw_apidocs create_dirs tempfile.mkdtemp ctx.modulename generate_apidocs dict create_fw_tagfile_tuple os.path.abspath os.path.join lib.outputdir lib.fancyname lib.part_of_group lib.outputdir finish_fw_apidocs build_classmap ctx.tagfile ctx.fwinfo.part_of_group entries.append ctx.fwinfo.product.fancyname entries.append ctx.fancyname str datetime.date.today ctx.resourcedir ctx.title ctx.fwinfo ctx.api_searchbox menu_items ctx.htmldir ctx.modulename utils.get_kapidox_version mapping.update logging.info create_jinja_environment ctx.doxdatadir get_template postprocess_internal ctx.htmldir create_jinja_environment ctx.doxdatadir get_template ctx.fwinfo.outputdir codecs.open outf.write tmpl2.render indexer xmlET.parse lib.outputdir tree.getroot child.attrib child.text child.text child.attrib child.text child.attrib child.text child.attrib child.text child.attrib child.text child.text doclist.append lib.name lib.fancyname open lib.outputdir json.JSONEncoder iterencode f.write create_product_index product.libraries open lib.outputdir json.load lib.part_of_group lib.name doclist.append product.name product.fancyname open product.outputdir json.JSONEncoder iterencode f.write create_global_index open product.outputdir json.load product.name doclist.append open json.JSONEncoder iterencode f.write create_qch ET.ElementTree ET.Element tree_out.getroot root_out.set ET.SubElement namespace.text product.name ET.SubElement virtualFolder.text product.name ET.SubElement ET.SubElement filterAttribute.text ET.SubElement ET.SubElement len product.libraries product.libraries ET.SubElement product.name product.fancyname ET.SubElement sorted product.libraries lib.name ET.parse lib.outputdir tree.getroot root.findall lib.part_of_group child.attrib lib.name child.attrib child.attrib child.attrib child.attrib product.name child.attrib root.find print child.attrib lib.part_of_group product_indexSection.append toc.append root.find keywords.append product.name product.name lib.name product.name product.name product.name product.name product.name product.name lib.name product.name lib.name product.name lib.name product.name lib.name ET.SubElement file_elem.text os.path.isdir os.mkdir product.name product.name tree_out.write subprocess.call os.remove</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">gvutils.py</field>
    <field name="url">gvutils_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">Node object __init__ name gv.nameof label gv.getv shape gv.getv Edge object __init__ head gv.headof Node tail gv.tailof Node get_node_list gv.firstnode gv.ok gv.nextnode get_edge_list gv.firstedge gv.ok gv.nextedge</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">hlfunctions.py</field>
    <field name="url">hlfunctions_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">sys.version_info.major urllib.request do_it utils.setup_logging argparserutils.parse_args generator.search_for_tagfiles args.qtdoc_dir args.qtdoc_link args.qtdoc_flatten_links args.sourcesdir preprocessing.parse_tree preprocessing.sort_metainfo os.path.join args.doxdatadir os.path.isdir shutil.rmtree shutil.copytree os.rename generator.process_toplevel_html_file args.doxdatadir args.title args.api_searchbox generator.process_subgroup_html_files args.doxdatadir args.title args.api_searchbox tempfile.mkdtemp args.depdiagram_dot_dir utils.find_dot_files args.depdiagram_dot_dir assert logging.info format lib.fancyname args.depdiagram_dot_dir os.path.join lib.name generator.generate_diagram lib.fancyname lib.dependency_diagram generator.create_fw_context generator.gen_fw_apidocs tagfiles.append generator.create_fw_tagfile_tuple logging.info format lib.fancyname shutil.rmtree lib.outputdir generator.create_fw_context generator.gen_fw_apidocs generator.finish_fw_apidocs logging.info generator.indexer logging.info generator.create_product_index product.logo_url os.path.dirname product.logo_url os.path.isdir os.mkdir shutil.copy product.logo_url_src product.logo_url generator.create_global_index args.qhp generator.create_qch args.keep_temp_dirs logging.info format shutil.rmtree</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">models.py</field>
    <field name="url">models_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">os.path Library object __init__ utils.serialize_name utils.serialize_name Product logging.warning format utils.serialize_name ValueError format sp.name utils.serialize_name logging.warning format libraries.append libraries.append metainfo.get utils.set_maintainers metainfo.get lower utils.tolist metainfo.get utils.tolist metainfo.get utils.tolist metainfo.get metainfo.get metainfo.get metainfo.get metainfo.get metainfo.get metainfo.get metainfo.get _extend_parent getattr getattr _set_outputdir outputdir.lower Product object __init__ utils.serialize_name get metainfo.get get string.capwords get get utils.set_maintainers get get get get utils.serialize_name metainfo.get utils.set_maintainers metainfo.get metainfo.get ValueError format _extract_subproducts subproducts.append Subproduct _set_logo os.path.splitext _set_logo_src os.path.join os.path.isfile logging.warning format Subproduct object __init__ utils.serialize_name sginfo.get sginfo.get</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">preprocessing.py</field>
    <field name="url">preprocessing_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">urllib.request urllib.error kapidox.models expand_platform_all create_metainfo os.path.isdir os.path.join os.path.isfile yaml.load open print logging.warning format logging.warning format logging.warning format os.path.basename utils.parse_fancyname logging.warning format capitalize metainfo.update metainfo.get parse_tree os.walk create_metainfo metalist.append logging.warning format sort_metainfo dict set extract_product product.name available_platforms.update set logging.warning format dict dict x.get expand_platform_all Library libraries.append products.copy len groups.append list products.values extract_product Product logging.error</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">utils.py</field>
    <field name="url">utils_8py_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">setup_logging logging.basicConfig logging.DEBUG tolist type serialize_name join name.lower split set_maintainers isinstance map all_maintainers.get all_maintainers.get parse_fancyname os.path.join os.path.exists logging.error format re.compile re.I open f.readlines project_re.search match.group logging.error format cache_dir sys.platform os.path.join NSSearchPathForDirectoriesInDomains os.name os.environ os.path.exists os.environ os.path.join os.environ os.name os.environ os.path.exists os.environ os.path.join os.environ os.path.join tempfile.gettempdir os.path.isdir os.makedirs svn_export svn.core svn.client logging.debug svn.client.create_context ctx.auth_baton svn.core.svn_auth_open svn.core.svn_opt_revision_t latest.type svn.core.svn_opt_revision_head svn.client.export logging.debug cmd.append subprocess.check_call subprocess.STDOUT subprocess.CalledProcessError subprocess.StandardException e.output logging.debug os.utime copy_dir_contents shutil.ignore_patterns os.listdir os.path.join os.path.isfile fnmatch shutil.copy os.path.isdir os.path.join os.path.isdir shutil.rmtree shutil.copytree get_kapidox_version os.path.dirname sys.argv os.path.join os.path.isdir os.path.join os.path.isfile logging.warning format open readline line.split strip open os.path.join f.read strip logging.warning format find_dot_files os.walk lst.extend os.path.join x.endswith</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">depdiagrams</field>
    <field name="url">depdiagrams.html</field>
    <field name="keywords"></field>
    <field name="text">Dependency diagrams Introduction In most case you just want to call kapidox with the option However if you want finer-grained control over diagram generation or want to work on its code read on depdiagram tools Dependency diagram generation is done using two tools src/depdiagram-prepare and src/depdiagram-generate The way you use it is as follow 1 Prepare dot files You need to prepare Graphviz dot files for all frameworks with src/depdiagram-prepare You can prepare dot files for all frameworks at once using This will generate many dot files in Or you can prepare dot files for a single framework with 2 Generate the diagrams You can now generate the dependency diagrams with src/depdiagram-generate This tool accepts a list of dot files and output a combined dot file to stdout Here is how to generate a dependency diagram for all the frameworks The diagram might be very hard to read though For complex diagrams you may want to pipe the output through the tred tool You can also generate the diagram for one particular framework using the option To include Qt libs use the option And to include targets within the framework use the option Useful 3rd-party tools tred mentioned in the previous section reduces clutter in dot files xdot can be used instead of dot to display the graph Generating all diagrams at once You can use the depdiagram-generate-all tool to generate diagrams for all frameworks at once This command creates two pngs for each framework and same diagram ran through tred It also creates a diagram for all of the frameworks named</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">metainfo_syntax</field>
    <field name="url">metainfo_syntax.html</field>
    <field name="keywords"></field>
    <field name="text">Description of the metainfo.yml syntax The name is the folder name The fancyname is the project name used in CMake Each group must contain one and only one library with the group_info block If more are defined the behavior is unknown Be sure to to set public_lib to true or the library will be ignored Most of the other keys are optionals See below for a simplier example All possible keys description Library doing X and Y fancyname The FancyName optional else replaced by the project() value of the CMakeLists.txt maintainer ochurlaud optional replaced by The KDE Community group frameworks optional subgroup tier 1 optional a group must be defined type functional optional logo relative/path/to/logo.png Used only if not part of a group platforms optional name accepted all Linux Windows MacOSX name Linux note Functional only with running BlueZ 5 optional public_lib true if not defined the library is ignored public_source_dirs optional default to src must be a list src1 src2 public_doc_dir docs optional default to docs public_example_dir examples optional default to examples portingAid true/false optional default to false deprecated true/false optional default to false libraries KF5::MyLib optional libraries optional qmake BluezQt cmake KF5::BluezQt cmakename KF5BluezQt optional irc kde optional overwrite group field if both not defined default to kde-devel mailinglist mylib-dev optional overwrite group field if both not defined default to kde-devel group_info optional only once per group name frameworks optional else the name is defined by the group key above fancyname The KDE Frameworks maintainer dfaure irc kde-devel mailinglist kde-core-devel platforms Linux Windows partial MacOSX partial description Providing everything from simple utility classes to logo relative/path/to/logo.png long_description optional one item per paragraph html authorized The KDE Frameworks build on the Qt framework providing everything from simple utility classes such as those in KCoreAddons to integrated solutions for common requirements of desktop applications such as KNewStuff for fetching downloadable add-on content in an application or the powerful KIO multi-protocol file access framework subgroups every subgroup must be declared here or will be ignored name Tier 1 description Tier 1 frameworks depend only on Qt and possibly a small number of other third-party libraries so can easily be used by an Qt-based project name Tier 2 description Tier 2 frameworks additionally depend on tier 1 frameworks but still have easily manageable dependencies Simple example 2 In this case the libraries X and Y are part of the same group XY and the source is in src libX libY</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">index</field>
    <field name="url">index.html</field>
    <field name="keywords"></field>
    <field name="text">KDE Doxygen Tools Introduction This framework contains scripts and data for building API documentation dox in a standard format and style The Doxygen tool is used to do the actual documentation extraction and formatting but this framework provides a wrapper script to make generating the documentation more convenient including reading settings from the target framework or other module and a standard template for the generated documentation Dependencies Required Python 2 or 3 is required to run the scripts Whichever version of python you use needs to have the jinja2 and yaml or pyyaml modules The following command should install them for the current user Of course you need Doxygen! Optional Doxyqml and doxypypy might be needed to let doxygen document respectevely qml and python sources To generate the dependency diagrams you need the Graphviz Python bindings They are currently not available from pip but most distributions provide them You can get binaries and source archives from Installation Unlike almost every other KDE module kapidox does not use CMake This is because it is purely written in Python and so uses distutils While it does not need to be installed to be used see below you can install kapidox with Note For consistency kapidox provides a CMakeLists.txt file but this is just a wrapper around the setup.py script Writing documentation Writing dox is beyond the scope of this documentation see the notes at and the doxygen manual However the script expects certain things to be present in the directory it is run on README.md Most importantly there should be a README.md file like this page backward compatibility also authorize Mainpage.dox files The first line of this file is particularly important as it will be used as the title of the documentation metainfo.yaml A metainfo.yaml file is needed for the library to be generated It should contain some metainformations about the library itself its maintainers where the sources are etc A very simple example can be A comprehensive list of the available keys can be found on this page By default the source of the public library must be in src if the documentation refers to any dot files these should be in docs/dot Images should be in docs/pics and snippets of example code should be in examples See the doxygen documentation for help on how to refer to these files from the dox comments in the source files If you need to override any doxygen settings put them in docs/Doxyfile.local A global settings file is defined in src/kapidox/data/Doxyfile.global Generating the documentation The tool for generating dox is src/kapidox_generate Simply point it at the folder you want to generate dox for such as a framework checkout For example if you have a checkout of KCoreAddons at you could run and it would create a documentation in the current directory The folders are recursively walked through so you can also run it on or For a lot of libraries the generation can last 15-30 minutes and be several hundreds of Mb so be prepared! Pass the help argument to see options that control the behaviour of the script Note that on Windows you will need to run something like Specific to frameworks for now You can ask kgenframeworksapidox to generate dependency diagrams for all the frameworks To do so you must first generate Graphviz dot files for all frameworks with the depdiagram-prepare tool like this Then call kgenframeworksapidox with the option like this More fine-grained tools are available for dependency diagrams You can learn about them in depdiagrams Examples of generated pages KDE API documentation</field>
  </doc>
</add>
