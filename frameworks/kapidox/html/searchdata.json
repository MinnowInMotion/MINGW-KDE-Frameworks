{"name": "kapidox", "fancyname": "KApiDox", "docfields": [{"type": "page", "name": "depdiagrams", "url": "depdiagrams.html", "keyword": null, "text": "Dependency diagrams Introduction In most case you just want to call kapidox with the option However if you want finer-grained control over diagram generation or want to work on its code read on depdiagram tools Dependency diagram generation is done using two tools src/depdiagram-prepare and src/depdiagram-generate The way you use it is as follow 1 Prepare dot files You need to prepare Graphviz dot files for all frameworks with src/depdiagram-prepare You can prepare dot files for all frameworks at once using This will generate many dot files in Or you can prepare dot files for a single framework with 2 Generate the diagrams You can now generate the dependency diagrams with src/depdiagram-generate This tool accepts a list of dot files and output a combined dot file to stdout Here is how to generate a dependency diagram for all the frameworks The diagram might be very hard to read though For complex diagrams you may want to pipe the output through the tred tool You can also generate the diagram for one particular framework using the option To include Qt libs use the option And to include targets within the framework use the option Useful 3rd-party tools tred mentioned in the previous section reduces clutter in dot files xdot can be used instead of dot to display the graph Generating all diagrams at once You can use the depdiagram-generate-all tool to generate diagrams for all frameworks at once This command creates two pngs for each framework and same diagram ran through tred It also creates a diagram for all of the frameworks named"}, {"type": "page", "name": "metainfo_syntax", "url": "metainfo_syntax.html", "keyword": null, "text": "Description of the metainfo.yml syntax The name is the folder name The fancyname is the project name used in CMake Each group must contain one and only one library with the group_info block If more are defined the behavior is unknown Be sure to to set public_lib to true or the library will be ignored Most of the other keys are optionals See below for a simplier example All possible keys description Library doing X and Y fancyname The FancyName optional else replaced by the project() value of the CMakeLists.txt maintainer ochurlaud optional replaced by The KDE Community group frameworks optional subgroup tier 1 optional a group must be defined type functional optional logo relative/path/to/logo.png Used only if not part of a group platforms optional name accepted all Linux Windows MacOSX name Linux note Functional only with running BlueZ 5 optional public_lib true if not defined the library is ignored public_source_dirs optional default to src must be a list src1 src2 public_doc_dir docs optional default to docs public_example_dir examples optional default to examples portingAid true/false optional default to false deprecated true/false optional default to false libraries KF5::MyLib optional libraries optional qmake BluezQt cmake KF5::BluezQt cmakename KF5BluezQt optional irc kde optional overwrite group field if both not defined default to kde-devel mailinglist mylib-dev optional overwrite group field if both not defined default to kde-devel group_info optional only once per group name frameworks optional else the name is defined by the group key above fancyname The KDE Frameworks maintainer dfaure irc kde-devel mailinglist kde-core-devel platforms Linux Windows partial MacOSX partial description Providing everything from simple utility classes to logo relative/path/to/logo.png long_description optional one item per paragraph html authorized The KDE Frameworks build on the Qt framework providing everything from simple utility classes such as those in KCoreAddons to integrated solutions for common requirements of desktop applications such as KNewStuff for fetching downloadable add-on content in an application or the powerful KIO multi-protocol file access framework subgroups every subgroup must be declared here or will be ignored name Tier 1 description Tier 1 frameworks depend only on Qt and possibly a small number of other third-party libraries so can easily be used by an Qt-based project name Tier 2 description Tier 2 frameworks additionally depend on tier 1 frameworks but still have easily manageable dependencies Simple example 2 In this case the libraries X and Y are part of the same group XY and the source is in src libX libY"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KDE Doxygen Tools Introduction This framework contains scripts and data for building API documentation dox in a standard format and style The Doxygen tool is used to do the actual documentation extraction and formatting but this framework provides a wrapper script to make generating the documentation more convenient including reading settings from the target framework or other module and a standard template for the generated documentation Dependencies Required Python 2 or 3 is required to run the scripts Whichever version of python you use needs to have the jinja2 and yaml or pyyaml modules The following command should install them for the current user Of course you need Doxygen! Optional Doxyqml and doxypypy might be needed to let doxygen document respectevely qml and python sources To generate the dependency diagrams you need the Graphviz Python bindings They are currently not available from pip but most distributions provide them You can get binaries and source archives from Installation Unlike almost every other KDE module kapidox does not use CMake This is because it is purely written in Python and so uses distutils While it does not need to be installed to be used see below you can install kapidox with Note For consistency kapidox provides a CMakeLists.txt file but this is just a wrapper around the setup.py script Writing documentation Writing dox is beyond the scope of this documentation see the notes at and the doxygen manual However the script expects certain things to be present in the directory it is run on README.md Most importantly there should be a README.md file like this page backward compatibility also authorize Mainpage.dox files The first line of this file is particularly important as it will be used as the title of the documentation metainfo.yaml A metainfo.yaml file is needed for the library to be generated It should contain some metainformations about the library itself its maintainers where the sources are etc A very simple example can be A comprehensive list of the available keys can be found on this page By default the source of the public library must be in src if the documentation refers to any dot files these should be in docs/dot Images should be in docs/pics and snippets of example code should be in examples See the doxygen documentation for help on how to refer to these files from the dox comments in the source files If you need to override any doxygen settings put them in docs/Doxyfile.local A global settings file is defined in src/kapidox/data/Doxyfile.global Generating the documentation The tool for generating dox is src/kapidox_generate Simply point it at the folder you want to generate dox for such as a framework checkout For example if you have a checkout of KCoreAddons at you could run and it would create a documentation in the current directory The folders are recursively walked through so you can also run it on or For a lot of libraries the generation can last 15-30 minutes and be several hundreds of Mb so be prepared! Pass the help argument to see options that control the behaviour of the script Note that on Windows you will need to run something like Specific to frameworks for now You can ask kgenframeworksapidox to generate dependency diagrams for all the frameworks To do so you must first generate Graphviz dot files for all frameworks with the depdiagram-prepare tool like this Then call kgenframeworksapidox with the option like this More fine-grained tools are available for dependency diagrams You can learn about them in depdiagrams Examples of generated pages KDE API documentation"}]}