{"name": "solid-5.26.0", "fancyname": "Solid", "docfields": [{"type": "page", "name": "song", "url": "song.html", "keyword": null, "text": "A Solid Song And for HAL s sake each mistake ah you forgave And soon both of us learned to trust Not run away it was no time to play We built it up and built it up and committed it And now it s solid Solid as a rock That s what this code is That s what we ve got oh mmm Solid Oh Solid as a rock And nothing s changed it Ooh The code is still hot hot hot hot hot hot hot hot"}, {"type": "page", "name": "deprecated", "url": "deprecated.html", "keyword": null, "text": "Deprecated List Member Solid Battery isPlugged const since Solid 5.0 Use isPresent instead"}, {"type": "namespace", "name": "Solid", "url": "namespaceSolid.html", "keyword": "Solid", "text": ""}, {"type": "class", "name": "Solid::AbstractInhibition", "url": "classSolid_1_1AbstractInhibition.html", "keyword": "AbstractInhibition", "text": "When implementing this class take into account that the inhibition should be stopped upon object deletion so stateChanged should be emitted on it"}, {"type": "class", "name": "Solid::Battery", "url": "classSolid_1_1Battery.html", "keyword": "Battery", "text": ""}, {"type": "enum", "name": "Solid::Battery::BatteryType", "url": "classSolid_1_1Battery.html#a1fcf11b5b40bb857e6233c3ef6fe849a", "keyword": "BatteryType Solid::Battery::BatteryType Solid::Battery", "text": "PdaBattery A battery in a Personal Digital Assistant UpsBattery A battery in an Uninterruptible Power Supply PrimaryBattery A primary battery for the system for example laptop battery MouseBattery A battery in a mouse KeyboardBattery A battery in a keyboard KeyboardMouseBattery A battery in a combined keyboard and mouse CameraBattery A battery in a camera PhoneBattery A battery in a phone MonitorBattery A battery in a monitor UnknownBattery A battery in an unknown device"}, {"type": "enum", "name": "Solid::Battery::ChargeState", "url": "classSolid_1_1Battery.html#ad734c47beb8dd3f789d7b6249f514bf6", "keyword": "ChargeState Solid::Battery::ChargeState Solid::Battery", "text": "NoCharge Battery charge is stable not charging or discharging or the state is Unknown Charging Battery is charging Discharging Battery is discharging FullyCharged The battery is fully charged a battery not neccessarily charges up to 100"}, {"type": "enum", "name": "Solid::Battery::Technology", "url": "classSolid_1_1Battery.html#a51dd2479193b09f2d828761c70e32129", "keyword": "Technology Solid::Battery::Technology Solid::Battery", "text": "0 Unknown 1 Lithium ion 2 Lithium polymer 3 Lithium iron phosphate 4 Lead acid 5 Nickel cadmium 6 Nickel metal hydride"}, {"type": "enum", "name": "Solid::DeviceInterface::Type", "url": "classSolid_1_1DeviceInterface.html#a2cdcf915c8dd5f635e7348d541412239", "keyword": "Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface Type Solid::DeviceInterface::Type Solid::DeviceInterface", "text": "Unknown An undetermined device interface Processor A processor Block A block device StorageAccess A mechanism to access data on a storage device StorageDrive A storage drive OpticalDrive An optical drive CD-ROM DVD StorageVolume A volume OpticalDisc An optical disc Camera A digital camera PortableMediaPlayer A portable media player NetworkShare A network share interface"}, {"type": "signal", "name": "Solid::Battery::capacityChanged", "url": "classSolid_1_1Battery.html#a2f574bd58688c750b8a1c0a383845107", "keyword": "capacityChanged Solid::Battery::capacityChanged Solid::Battery", "text": "value the new capacity of the battery udi the UDI of the battery with the new capacity 4.11"}, {"type": "signal", "name": "Solid::Battery::chargePercentChanged", "url": "classSolid_1_1Battery.html#acf7bf64c35c14a4154399bbb7477e034", "keyword": "chargePercentChanged Solid::Battery::chargePercentChanged Solid::Battery", "text": "value the new charge percent value of the battery udi the UDI of the battery with the new charge percent"}, {"type": "signal", "name": "Solid::Battery::chargeStateChanged", "url": "classSolid_1_1Battery.html#ad30df1b8ad48607f0949946e66ce875e", "keyword": "chargeStateChanged Solid::Battery::chargeStateChanged Solid::Battery", "text": "newState the new charge state of the battery it s one of the type Solid::Battery::ChargeState Solid::Battery::ChargeState udi the UDI of the battery with the new charge state"}, {"type": "signal", "name": "Solid::Battery::energyChanged", "url": "classSolid_1_1Battery.html#a03936cace0d62878ecd48929f2db19c0", "keyword": "energyChanged Solid::Battery::energyChanged Solid::Battery", "text": "energy the new energy value of the battery udi the UDI of the battery with the new energy value"}, {"type": "signal", "name": "Solid::Battery::energyFullChanged", "url": "classSolid_1_1Battery.html#a5ba442f6d490c618609c186933dde215", "keyword": "energyFullChanged Solid::Battery::energyFullChanged Solid::Battery", "text": "energy the new energy full value of the battery udi the UDI of the battery with the new energy full value"}, {"type": "signal", "name": "Solid::Battery::energyFullDesignChanged", "url": "classSolid_1_1Battery.html#a3e44bb6c0c829ef4657e5c89c93bfbd7", "keyword": "energyFullDesignChanged Solid::Battery::energyFullDesignChanged Solid::Battery", "text": "energy the new energy full design value of the battery udi the UDI of the battery with the new energy full design value"}, {"type": "signal", "name": "Solid::Battery::energyRateChanged", "url": "classSolid_1_1Battery.html#a1b31eb7a04eb230ac80e0359a620f0d9", "keyword": "energyRateChanged Solid::Battery::energyRateChanged Solid::Battery", "text": "If positive the source is being discharged if negative it s being charged energyRate the new energy rate value of the battery udi the UDI of the battery with the new charge percent"}, {"type": "signal", "name": "Solid::Battery::powerSupplyStateChanged", "url": "classSolid_1_1Battery.html#a970f82f69e08de6d3ef845c50e5f8633", "keyword": "powerSupplyStateChanged Solid::Battery::powerSupplyStateChanged Solid::Battery", "text": "newState the new power supply state type is boolean udi the UDI of the battery with the new power supply state 4.11"}, {"type": "signal", "name": "Solid::Battery::presentStateChanged", "url": "classSolid_1_1Battery.html#a9a469f3d1201992c01d44ac08c0b425b", "keyword": "presentStateChanged Solid::Battery::presentStateChanged Solid::Battery", "text": "newState the new plugging state of the battery type is boolean udi the UDI of the battery with thew new plugging state"}, {"type": "signal", "name": "Solid::Battery::remainingTimeChanged", "url": "classSolid_1_1Battery.html#aba8da55a5edc3dd877b3459515139ab6", "keyword": "remainingTimeChanged Solid::Battery::remainingTimeChanged Solid::Battery", "text": "time the new remaining time udi the UDI of the battery with the new remaining time 5.8"}, {"type": "signal", "name": "Solid::Battery::temperatureChanged", "url": "classSolid_1_1Battery.html#a0088cc7b4ae2df31175b666f0841253c", "keyword": "temperatureChanged Solid::Battery::temperatureChanged Solid::Battery", "text": "temperature the new temperature of the battery in degrees Celsius udi the UDI of the battery with the new temperature 5.0"}, {"type": "signal", "name": "Solid::Battery::timeToEmptyChanged", "url": "classSolid_1_1Battery.html#a592be8e76df3090502af64e991e5c7da", "keyword": "timeToEmptyChanged Solid::Battery::timeToEmptyChanged Solid::Battery", "text": "time the new remaining time udi the UDI of the battery with the new remaining time 5.0"}, {"type": "signal", "name": "Solid::Battery::timeToFullChanged", "url": "classSolid_1_1Battery.html#aa7a02bd344f6c1c44742d4ef7cd3a6f4", "keyword": "timeToFullChanged Solid::Battery::timeToFullChanged Solid::Battery", "text": "time the new remaining time udi the UDI of the battery with the new remaining time 5.0"}, {"type": "signal", "name": "Solid::Battery::voltageChanged", "url": "classSolid_1_1Battery.html#aeb16ec76e0384402ecb353efb8eb47f4", "keyword": "voltageChanged Solid::Battery::voltageChanged Solid::Battery", "text": "voltage the new voltage of the cell udi the UDI of the battery with the new voltage 5.0"}, {"type": "function", "name": "Solid::Battery::~Battery", "url": "classSolid_1_1Battery.html#a7fe27e34c8bb4f2c3966ca981fa8f291", "keyword": "Solid::Battery::~Battery Solid::Battery", "text": ""}, {"type": "function", "name": "Solid::Battery::capacity", "url": "classSolid_1_1Battery.html#a8e8b317e1226434ae4f7d763b3a07787", "keyword": "capacity Solid::Battery::capacity Solid::Battery", "text": "The capacity of the battery will reduce with age A capacity value less than 75 is usually a sign that you should renew your battery 4.11 the battery capacity normalised to percent"}, {"type": "function", "name": "Solid::Battery::chargePercent", "url": "classSolid_1_1Battery.html#a1fe7af3e27d66cbde9aa9309bc9d5c06", "keyword": "chargePercent Solid::Battery::chargePercent Solid::Battery", "text": "the current charge level normalised to percent"}, {"type": "function", "name": "Solid::Battery::chargeState", "url": "classSolid_1_1Battery.html#a2f80091eade85380ed87c58b47b78898", "keyword": "chargeState Solid::Battery::chargeState Solid::Battery", "text": "It can be in a stable state no charge charging or discharging the current battery charge state Solid::Battery::ChargeState"}, {"type": "function", "name": "Solid::Battery::energy", "url": "classSolid_1_1Battery.html#af10b6ed11f02f5a010f759159e16a02a", "keyword": "energy Solid::Battery::energy Solid::Battery", "text": "amount of battery energy in Wh"}, {"type": "function", "name": "Solid::Battery::energyFull", "url": "classSolid_1_1Battery.html#a818ff51a1d54ef8aa43150c4bc7b5e04", "keyword": "energyFull Solid::Battery::energyFull Solid::Battery", "text": "amount of battery energy when full in Wh 5.7"}, {"type": "function", "name": "Solid::Battery::energyFullDesign", "url": "classSolid_1_1Battery.html#a8b8966beae74cefc647b0f42b509a1c0", "keyword": "energyFullDesign Solid::Battery::energyFullDesign Solid::Battery", "text": "amount of battery energy when full by design in Wh 5.7"}, {"type": "function", "name": "Solid::Battery::energyRate", "url": "classSolid_1_1Battery.html#a0e2fdfacc3af083dae24ad0ce78a754a", "keyword": "energyRate Solid::Battery::energyRate Solid::Battery", "text": "If positive the source is being discharged if negative it s being charged battery rate in Watts"}, {"type": "function", "name": "Solid::Battery::isPlugged", "url": "classSolid_1_1Battery.html#a003ac183478fe9085bbf260ffb7ebd3d", "keyword": "isPlugged Solid::Battery::isPlugged Solid::Battery", "text": "since Solid 5.0 Use isPresent instead"}, {"type": "function", "name": "Solid::Battery::isPowerSupply", "url": "classSolid_1_1Battery.html#acbc64ef56b531e5f04451c24d587e22a", "keyword": "isPowerSupply Solid::Battery::isPowerSupply Solid::Battery", "text": "true if the battery is powersupply false otherwise"}, {"type": "function", "name": "Solid::Battery::isPresent", "url": "classSolid_1_1Battery.html#a375570ba9bbf8eee77628462d3fc1b7f", "keyword": "isPresent Solid::Battery::isPresent Solid::Battery", "text": "true if the battery is present false otherwise"}, {"type": "function", "name": "Solid::Battery::isRecalled", "url": "classSolid_1_1Battery.html#ac5ba5c6041e3c456c1e9457851203ccc", "keyword": "isRecalled Solid::Battery::isRecalled Solid::Battery", "text": "true if the battery has been recalled false otherwise 5.0"}, {"type": "function", "name": "Solid::Battery::isRechargeable", "url": "classSolid_1_1Battery.html#aa509bb9cf8e7e0a9dab3e678af614703", "keyword": "isRechargeable Solid::Battery::isRechargeable Solid::Battery", "text": "true if the battery is rechargeable false otherwise one time usage"}, {"type": "function", "name": "Solid::Battery::recallUrl", "url": "classSolid_1_1Battery.html#a144ce643300923e6030830a16ff1e069", "keyword": "recallUrl Solid::Battery::recallUrl Solid::Battery", "text": "the website URL of the vendor that has recalled the battery 5.0"}, {"type": "function", "name": "Solid::Battery::recallVendor", "url": "classSolid_1_1Battery.html#a9ed46d8a7b18ee39f570a02befbfda5f", "keyword": "recallVendor Solid::Battery::recallVendor Solid::Battery", "text": "the vendor name that has recalled the battery 5.0"}, {"type": "function", "name": "Solid::Battery::remainingTime", "url": "classSolid_1_1Battery.html#a7919c0fa0afa35e9c5062670cf653d1e", "keyword": "remainingTime Solid::Battery::remainingTime Solid::Battery", "text": "the current global estimated remaining time in seconds 5.8"}, {"type": "function", "name": "Solid::Battery::serial", "url": "classSolid_1_1Battery.html#a1fcd8f0adfdf43f2217dc10d7d1f07da", "keyword": "serial Solid::Battery::serial Solid::Battery", "text": "the serial number of the battery 5.0"}, {"type": "function", "name": "Solid::Battery::technology", "url": "classSolid_1_1Battery.html#aaa9c0d7f84cf8f00b34603d9dff34f8e", "keyword": "technology Solid::Battery::technology Solid::Battery", "text": "the battery technology Solid::Battery::Technology"}, {"type": "function", "name": "Solid::Battery::temperature", "url": "classSolid_1_1Battery.html#a4ea09456085eac8feb47f59b29b8a201", "keyword": "temperature Solid::Battery::temperature Solid::Battery", "text": "the battery temperature in degrees Celsius 5.0"}, {"type": "function", "name": "Solid::Battery::timeToEmpty", "url": "classSolid_1_1Battery.html#a4e2438032ef7848f004236dbe31d907e", "keyword": "timeToEmpty Solid::Battery::timeToEmpty Solid::Battery", "text": "time until the battery is empty 5.0"}, {"type": "function", "name": "Solid::Battery::timeToFull", "url": "classSolid_1_1Battery.html#abc216af6a9254ea2bbd31020eaa96485", "keyword": "timeToFull Solid::Battery::timeToFull Solid::Battery", "text": "time until the battery is full 5.0"}, {"type": "function", "name": "Solid::Battery::type", "url": "classSolid_1_1Battery.html#a1465fe97e027e24038676b21b552aaae", "keyword": "type Solid::Battery::type Solid::Battery", "text": "the type of device holding this battery Solid::Battery::BatteryType"}, {"type": "function", "name": "Solid::Battery::voltage", "url": "classSolid_1_1Battery.html#ae37240153f3eed39c5ef1c0d8869a7ca", "keyword": "voltage Solid::Battery::voltage Solid::Battery", "text": "voltage in Volts"}, {"type": "function", "name": "Solid::DeviceInterface::~DeviceInterface", "url": "classSolid_1_1DeviceInterface.html#a183eccdda251569716edc2ad8a405e57", "keyword": "Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface Solid::DeviceInterface::~DeviceInterface Solid::DeviceInterface", "text": ""}, {"type": "function", "name": "Solid::DeviceInterface::isValid", "url": "classSolid_1_1DeviceInterface.html#a360b56c1802259ff2fb7bb977cdda40b", "keyword": "isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface isValid Solid::DeviceInterface::isValid Solid::DeviceInterface", "text": "A device interface is considered valid if the device it is referring is available in the system true if this device interface s device is available false otherwise"}, {"type": "function", "name": "Solid::Battery::deviceInterfaceType", "url": "classSolid_1_1Battery.html#adda33848ddc83d988aaab34d7e43f075", "keyword": "deviceInterfaceType Solid::Battery::deviceInterfaceType Solid::Battery", "text": "the Battery device interface type Solid::DeviceInterface::Type"}, {"type": "function", "name": "Solid::DeviceInterface::stringToType", "url": "classSolid_1_1DeviceInterface.html#aaabf2f7173600f93617b038b00a4447a", "keyword": "stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface stringToType Solid::DeviceInterface::stringToType Solid::DeviceInterface", "text": "the device interface type for the given class name"}, {"type": "function", "name": "Solid::DeviceInterface::typeDescription", "url": "classSolid_1_1DeviceInterface.html#af98329b4bbde7728a27841c8707f63a0", "keyword": "typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface typeDescription Solid::DeviceInterface::typeDescription Solid::DeviceInterface", "text": "a description suitable to display in the UI of the device interface type 4.4"}, {"type": "function", "name": "Solid::DeviceInterface::typeToString", "url": "classSolid_1_1DeviceInterface.html#a0df89dcf52405b84f103d52c36d755a5", "keyword": "typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface typeToString Solid::DeviceInterface::typeToString Solid::DeviceInterface", "text": "the class name of the device interface type"}, {"type": "function", "name": "Solid::DeviceInterface::DeviceInterface", "url": "classSolid_1_1DeviceInterface.html#abf615a9b2c6eb2988b6e3c055bbcc8e9", "keyword": "DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface DeviceInterface Solid::DeviceInterface::DeviceInterface Solid::DeviceInterface", "text": "Creates a new DeviceInterface object dd the private d member It will take care of deleting it upon destruction backendObject the device interface object provided by the backend"}, {"type": "class", "name": "Solid::Block", "url": "classSolid_1_1Block.html", "keyword": "Block", "text": "A block device is an adressable device such as drive or partition It is possible to interact with such a device using a special file in the system"}, {"type": "function", "name": "Solid::Block::~Block", "url": "classSolid_1_1Block.html#a8f4785d965c1c82ca5885f3f5bad9b19", "keyword": "Solid::Block::~Block Solid::Block", "text": ""}, {"type": "function", "name": "Solid::Block::device", "url": "classSolid_1_1Block.html#a543c2cea3cac1b7d98d10ced2ee688a2", "keyword": "device Solid::Block::device Solid::Block", "text": "the absolute path of the special file to interact with the device"}, {"type": "function", "name": "Solid::Block::deviceMajor", "url": "classSolid_1_1Block.html#ae8142ea433a33a2d09cc2bc87ac699ad", "keyword": "deviceMajor Solid::Block::deviceMajor Solid::Block", "text": "the device major number"}, {"type": "function", "name": "Solid::Block::deviceMinor", "url": "classSolid_1_1Block.html#a365f3afa7060d27384e97694896a8b08", "keyword": "deviceMinor Solid::Block::deviceMinor Solid::Block", "text": "the device minor number"}, {"type": "function", "name": "Solid::Block::deviceInterfaceType", "url": "classSolid_1_1Block.html#aa7f9a5ef1f45f19c10143bd3229683e5", "keyword": "deviceInterfaceType Solid::Block::deviceInterfaceType Solid::Block", "text": "the Block device interface type Solid::Ifaces::Enums::DeviceInterface::Type"}, {"type": "class", "name": "Solid::Camera", "url": "classSolid_1_1Camera.html", "keyword": "Camera", "text": "A digital camera is a device used to transform images into data Nowaday most digital cameras are multifunctional and able to take photographs video or sound On the system side they are a particular type of device holding data the access method can be different from the typical storage device hence why it s a separate device interface"}, {"type": "function", "name": "Solid::Camera::~Camera", "url": "classSolid_1_1Camera.html#a5310b5117f9ed7c73b107ab98d9d01a4", "keyword": "Solid::Camera::~Camera Solid::Camera", "text": ""}, {"type": "function", "name": "Solid::Camera::driverHandle", "url": "classSolid_1_1Camera.html#a6c2cd264d26ebe614237b9668f316f77", "keyword": "driverHandle Solid::Camera::driverHandle Solid::Camera", "text": "For example for the driver it will return a list of the form vendor_id product_id the driver specific data"}, {"type": "function", "name": "Solid::Camera::supportedDrivers", "url": "classSolid_1_1Camera.html#aa074c69bc7aa02412de68ceec3fc537f", "keyword": "supportedDrivers Solid::Camera::supportedDrivers Solid::Camera", "text": "If protocol is blank returns a list of all drivers supporting the device protocol The protocol to get drivers for a list of installed drivers meeting the criteria"}, {"type": "function", "name": "Solid::Camera::supportedProtocols", "url": "classSolid_1_1Camera.html#a0ce6e977c09dd970419923f19e2fcc28", "keyword": "supportedProtocols Solid::Camera::supportedProtocols Solid::Camera", "text": "This list may be dependent on installed device driver libraries a list of known protocols this device can speak"}, {"type": "function", "name": "Solid::Camera::deviceInterfaceType", "url": "classSolid_1_1Camera.html#a7d5a8bbb73d5f344adcc0b286f8125d5", "keyword": "deviceInterfaceType Solid::Camera::deviceInterfaceType Solid::Camera", "text": "the Camera device interface type Solid::DeviceInterface::Type"}, {"type": "class", "name": "Solid::Device", "url": "classSolid_1_1Device.html", "keyword": "Device", "text": "Device stores a reference to device data provided by the backend Device objects are designed to be used by value Copying these objects is quite cheap so using pointers to the me is generally not needed Kevin Ottens"}, {"type": "function", "name": "Solid::Device::Device", "url": "classSolid_1_1Device.html#aba97769c79708b5b23c60359b0743c2b", "keyword": "Device Solid::Device::Device Solid::Device", "text": "udi the udi of the device to create"}, {"type": "function", "name": "Solid::Device::Device", "url": "classSolid_1_1Device.html#a82575ea01f3be683fd21d625a941cef0", "keyword": "Device Solid::Device::Device Solid::Device", "text": "device the device to copy"}, {"type": "function", "name": "Solid::Device::~Device", "url": "classSolid_1_1Device.html#a782a03b2b1ad1bc3f25b17ea69ea0a1e", "keyword": "Solid::Device::~Device Solid::Device", "text": ""}, {"type": "function", "name": "Solid::Device::as", "url": "classSolid_1_1Device.html#aa81649e145f309cb574017f39c477f51", "keyword": "as Solid::Device::as Solid::Device", "text": "a pointer to the device interface if it exists 0 otherwise"}, {"type": "function", "name": "Solid::Device::as", "url": "classSolid_1_1Device.html#a6483179fb70645760031d28d198909f0", "keyword": "as Solid::Device::as Solid::Device", "text": "a pointer to the device interface if it exists 0 otherwise"}, {"type": "function", "name": "Solid::Device::asDeviceInterface", "url": "classSolid_1_1Device.html#a95c931fd0f2809a770cfa3a5e8061961", "keyword": "asDeviceInterface Solid::Device::asDeviceInterface Solid::Device", "text": "type the device interface type a pointer to the device interface interface if it exists 0 otherwise"}, {"type": "function", "name": "Solid::Device::asDeviceInterface", "url": "classSolid_1_1Device.html#ace2d7df826bf73eb620b1033c678fc2e", "keyword": "asDeviceInterface Solid::Device::asDeviceInterface Solid::Device", "text": "type the device interface type a pointer to the device interface interface if it exists 0 otherwise"}, {"type": "function", "name": "Solid::Device::description", "url": "classSolid_1_1Device.html#a071ae8f46627eb30b3c78b2f1f4a5f6e", "keyword": "description Solid::Device::description Solid::Device", "text": "the description 4.4"}, {"type": "function", "name": "Solid::Device::emblems", "url": "classSolid_1_1Device.html#a237456bd26c7c0b19f6881d19fffb792", "keyword": "emblems Solid::Device::emblems Solid::Device", "text": "The naming follows the freedesktop.org specification the emblem names 4.4"}, {"type": "function", "name": "Solid::Device::icon", "url": "classSolid_1_1Device.html#a6525c195cdabf01e19a18701622d1318", "keyword": "icon Solid::Device::icon Solid::Device", "text": "The naming follows the freedesktop.org specification the icon name"}, {"type": "function", "name": "Solid::Device::is", "url": "classSolid_1_1Device.html#add62a98e2dbd895c209c2fd01f332365", "keyword": "is Solid::Device::is Solid::Device", "text": "true if the interface is available false otherwise"}, {"type": "function", "name": "Solid::Device::isDeviceInterface", "url": "classSolid_1_1Device.html#a8aad00d76d58251b445facc0967d5281", "keyword": "isDeviceInterface Solid::Device::isDeviceInterface Solid::Device", "text": "type the device interface type to query true if the device interface is available false otherwise"}, {"type": "function", "name": "Solid::Device::isValid", "url": "classSolid_1_1Device.html#aea96740201bc479f938fc761774bc60a", "keyword": "isValid Solid::Device::isValid Solid::Device", "text": "A device is considered valid if it s available in the system true if this device is available false otherwise"}, {"type": "function", "name": "Solid::Device::operator=", "url": "classSolid_1_1Device.html#a35cc596f4de03351395cb22b1f06d86d", "keyword": "operator= Solid::Device::operator= Solid::Device", "text": "device the device to assign a reference to the device"}, {"type": "function", "name": "Solid::Device::parent", "url": "classSolid_1_1Device.html#a925def27ebd1491339f2123842a20a2b", "keyword": "parent Solid::Device::parent Solid::Device", "text": "the device s parent parentUdi()"}, {"type": "function", "name": "Solid::Device::parentUdi", "url": "classSolid_1_1Device.html#a5d0c73b02837f04b61ed938594b36921", "keyword": "parentUdi Solid::Device::parentUdi Solid::Device", "text": "the udi of the device s parent"}, {"type": "function", "name": "Solid::Device::product", "url": "classSolid_1_1Device.html#aecd2109c660cc012fc47369583bb6e54", "keyword": "product Solid::Device::product Solid::Device", "text": "the product name"}, {"type": "function", "name": "Solid::Device::udi", "url": "classSolid_1_1Device.html#a341db42a3ec1e02148e9dd76281a23ab", "keyword": "udi Solid::Device::udi Solid::Device", "text": "Don t use the UDI for anything except communication with Solid Also don t store UDIs as there s no guarantee that the UDI stays the same when the hardware setup changed The UDI is a unique identifier that is local to the computer in question and for the current boot session The UDIs may change after a reboot Similar hardware in other computers may have different values different hardware could have the same UDI the udi of the device"}, {"type": "function", "name": "Solid::Device::vendor", "url": "classSolid_1_1Device.html#ac3900500ac15e5df40b7692ede0931a1", "keyword": "vendor Solid::Device::vendor Solid::Device", "text": "the vendor name"}, {"type": "function", "name": "Solid::Device::allDevices", "url": "classSolid_1_1Device.html#a73bdcc239e42a68df922423cbc28897d", "keyword": "allDevices Solid::Device::allDevices Solid::Device", "text": "the list of the devices available"}, {"type": "function", "name": "Solid::Device::listFromQuery", "url": "classSolid_1_1Device.html#add8a34e47abc9c79aa77c1bc9f54c562", "keyword": "listFromQuery Solid::Device::listFromQuery Solid::Device", "text": "predicate Predicate that the devices we re searching for must verify parentUdi UDI of the parent of the devices we re searching for or QString() if there s no constraint on the parent the list of devices corresponding to the given constraints Solid::Predicate"}, {"type": "function", "name": "Solid::Device::listFromQuery", "url": "classSolid_1_1Device.html#aba5277f8de300bbd08fa0f0b1b52d6a6", "keyword": "listFromQuery Solid::Device::listFromQuery Solid::Device", "text": "predicate parentUdi the list of devices"}, {"type": "function", "name": "Solid::Device::listFromType", "url": "classSolid_1_1Device.html#a04d6081cd0e72aa0f7f6f4ede623cddb", "keyword": "listFromType Solid::Device::listFromType Solid::Device", "text": "type device interface type available on the devices we re looking for or DeviceInterface::Unknown if there s no constraint on the device interfaces parentUdi UDI of the parent of the devices we re searching for or QString() if there s no constraint on the parent the list of devices corresponding to the given constraints Solid::Predicate"}, {"type": "class", "name": "Solid::DeviceInterface", "url": "classSolid_1_1DeviceInterface.html", "keyword": "DeviceInterface", "text": "A device interface describes what a device can do A device generally has a set of device interfaces"}, {"type": "class", "name": "Solid::DeviceNotifier", "url": "classSolid_1_1DeviceNotifier.html", "keyword": "DeviceNotifier", "text": "It s the unique entry point for hardware discovery Applications should use it to find devices or to be notified about hardware changes Note that it s implemented as a singleton and encapsulates the backend logic Kevin Ottens"}, {"type": "signal", "name": "Solid::DeviceNotifier::deviceAdded", "url": "classSolid_1_1DeviceNotifier.html#a6eb8e3736acd84a1a46cb43b0eaba5d6", "keyword": "deviceAdded Solid::DeviceNotifier::deviceAdded Solid::DeviceNotifier", "text": "udi the new device UDI"}, {"type": "signal", "name": "Solid::DeviceNotifier::deviceRemoved", "url": "classSolid_1_1DeviceNotifier.html#a2c3241940003980f6695879f833c5905", "keyword": "deviceRemoved Solid::DeviceNotifier::deviceRemoved Solid::DeviceNotifier", "text": "udi the old device UDI"}, {"type": "class", "name": "Solid::Devices", "url": "classSolid_1_1Devices.html", "keyword": "Devices", "text": "It behaves similarly to Solid::DeviceNotifier but adds some convenience methods which allow it to watch only the devices matching a specified query formatted for Solid::Predicate It is intended to be used from QML like this Solid.Devices id allDevices Solid.Devices id networkShares query Solid.Devices id mice query Text text allDevices.count Text text networkShares.device networkShares.devices 0 url"}, {"type": "signal", "name": "Solid::Devices::countChanged", "url": "classSolid_1_1Devices.html#a49316c868361d66b6a299684f108e308", "keyword": "countChanged Solid::Devices::countChanged Solid::Devices", "text": "count new device count"}, {"type": "signal", "name": "Solid::Devices::deviceAdded", "url": "classSolid_1_1Devices.html#a76a34a0462b5e806be999b8650828d29", "keyword": "deviceAdded Solid::Devices::deviceAdded Solid::Devices", "text": "udi UDI of the new device"}, {"type": "signal", "name": "Solid::Devices::deviceRemoved", "url": "classSolid_1_1Devices.html#aa98a0f745433c9ebdb4af93f7f22629d", "keyword": "deviceRemoved Solid::Devices::deviceRemoved Solid::Devices", "text": "udi UDI of the device"}, {"type": "signal", "name": "Solid::Devices::devicesChanged", "url": "classSolid_1_1Devices.html#a9700c0889d484258187d0d65a4a839a7", "keyword": "devicesChanged Solid::Devices::devicesChanged Solid::Devices", "text": "devices list of UDIs"}, {"type": "signal", "name": "Solid::Devices::emptyChanged", "url": "classSolid_1_1Devices.html#a46057634207b0dd53f3904d3db2763d0", "keyword": "emptyChanged Solid::Devices::emptyChanged Solid::Devices", "text": "empty is the device list empty"}, {"type": "signal", "name": "Solid::Devices::queryChanged", "url": "classSolid_1_1Devices.html#af32de68fa0787808a272e3577e05ff8e", "keyword": "queryChanged Solid::Devices::queryChanged Solid::Devices", "text": "query new query"}, {"type": "slot", "name": "Solid::Devices::device", "url": "classSolid_1_1Devices.html#ac5025a4c85eb3ccf2d3e60c1c46b531f", "keyword": "device Solid::Devices::device Solid::Devices", "text": "udi udi of the desired device type how to interpret the device Solid::Device::asDeviceInterface"}, {"type": "function", "name": "Solid::Devices::count", "url": "classSolid_1_1Devices.html#aac701a0b60e2fc07e52d873a70b8d7bf", "keyword": "count Solid::Devices::count Solid::Devices", "text": "device count"}, {"type": "function", "name": "Solid::Devices::devices", "url": "classSolid_1_1Devices.html#a6ed5509ba2c0e1f207191add888d6961", "keyword": "devices Solid::Devices::devices Solid::Devices", "text": ""}, {"type": "function", "name": "Solid::Devices::isEmpty", "url": "classSolid_1_1Devices.html#a4e4f89e16ccbeb050f06ac413e2377b3", "keyword": "isEmpty Solid::Devices::isEmpty Solid::Devices", "text": "true if there are no matching devices"}, {"type": "function", "name": "Solid::Devices::query", "url": "classSolid_1_1Devices.html#ad64bcb2d2d9b5ca57fcc094232e78769", "keyword": "query Solid::Devices::query Solid::Devices", "text": "It needs to be formatted for Solid::Predicate Solid::Predicate"}, {"type": "function", "name": "Solid::Devices::setQuery", "url": "classSolid_1_1Devices.html#ae598bd6ffca39ae9c850bb10e732b890", "keyword": "setQuery Solid::Devices::setQuery Solid::Devices", "text": "query new query"}, {"type": "class", "name": "Solid::GenericInterface", "url": "classSolid_1_1GenericInterface.html", "keyword": "GenericInterface", "text": "It exposes a set of properties and is organized as a key/value set Warning Using this class could expose some backend specific details and lead to non portable code Use it at your own risk or during transitional phases when the provided device interfaces don t provide the necessary methods"}, {"type": "enum", "name": "Solid::GenericInterface::PropertyChange", "url": "classSolid_1_1GenericInterface.html#ae132db41bc661dfff3455f9e800bbc54", "keyword": "PropertyChange Solid::GenericInterface::PropertyChange Solid::GenericInterface", "text": "PropertyModified A property value has changed in the device PropertyAdded A new property has been added to the device PropertyRemoved A property has been removed from the device"}, {"type": "signal", "name": "Solid::GenericInterface::conditionRaised", "url": "classSolid_1_1GenericInterface.html#a13151c07c61b8339309c0e1bffc98414", "keyword": "conditionRaised Solid::GenericInterface::conditionRaised Solid::GenericInterface", "text": "For example when a button is pressed condition the condition name reason a message explaining why the condition has been raised"}, {"type": "signal", "name": "Solid::GenericInterface::propertyChanged", "url": "classSolid_1_1GenericInterface.html#ad8276ad16ed7a378dd9c799fd4dbd518", "keyword": "propertyChanged Solid::GenericInterface::propertyChanged Solid::GenericInterface", "text": "changes the map describing the property changes that occurred in the device keys are property name and values describe the kind of change done on the device property added/removed/modified it s one of the type Solid::Device::PropertyChange"}, {"type": "function", "name": "Solid::GenericInterface::~GenericInterface", "url": "classSolid_1_1GenericInterface.html#ac9de633a2e343dfed4fec718f3c9e769", "keyword": "Solid::GenericInterface::~GenericInterface Solid::GenericInterface", "text": ""}, {"type": "function", "name": "Solid::GenericInterface::allProperties", "url": "classSolid_1_1GenericInterface.html#ad4f5caa99d1239d03b9a67da973f9f66", "keyword": "allProperties Solid::GenericInterface::allProperties Solid::GenericInterface", "text": "Warning Using this method could expose some backend specific details and lead to non portable code Use it at your own risk or during transitional phases when the provided device interfaces don t provide the necessary methods all the properties of the device"}, {"type": "function", "name": "Solid::GenericInterface::property", "url": "classSolid_1_1GenericInterface.html#a821399a07434edfed0fa1c59872adf46", "keyword": "property Solid::GenericInterface::property Solid::GenericInterface", "text": "Warning Using this method could expose some backend specific details and lead to non portable code Use it at your own risk or during transitional phases when the provided device interfaces don t provide the necessary methods key the property key the actual value of the property or QVariant() if the property is unknown"}, {"type": "function", "name": "Solid::GenericInterface::propertyExists", "url": "classSolid_1_1GenericInterface.html#a8ed48a4d7de4daf011a93ab1a3499420", "keyword": "propertyExists Solid::GenericInterface::propertyExists Solid::GenericInterface", "text": "Warning Using this method could expose some backend specific details and lead to non portable code Use it at your own risk or during transitional phases when the provided device interfaces don t provide the necessary methods key the property key true if the property is available in the device false otherwise"}, {"type": "function", "name": "Solid::GenericInterface::deviceInterfaceType", "url": "classSolid_1_1GenericInterface.html#a4dde0eabea50febaafcf043b63267337", "keyword": "deviceInterfaceType Solid::GenericInterface::deviceInterfaceType Solid::GenericInterface", "text": "the Processor device interface type Solid::Ifaces::Enums::DeviceInterface::Type"}, {"type": "class", "name": "Solid::Inhibition", "url": "classSolid_1_1Inhibition.html", "keyword": "Inhibition", "text": "This object is returned by Power::InhibitionJob::inhibition and it holds a reference to the inhibition that has been performed When this object is deleted the inhibition will be released"}, {"type": "slot", "name": "Solid::Inhibition::start", "url": "classSolid_1_1Inhibition.html#aa261594d32df50b6f2ade9f0e1d3a679", "keyword": "start Solid::Inhibition::start Solid::Inhibition", "text": "In case state() is Stopped it will resume the inhibition This happens asynchronously so connect to stateChanged() signal to know when start() has changed the state"}, {"type": "slot", "name": "Solid::Inhibition::stop", "url": "classSolid_1_1Inhibition.html#a848ba540e4aaf6b0fb43b32fda3791f2", "keyword": "stop Solid::Inhibition::stop Solid::Inhibition", "text": "In case the state() is Started it will stop the inhibition This happens asynchronously so connect to stateChanged() signal to know when stop() has changed the state"}, {"type": "function", "name": "Solid::Inhibition::Inhibition", "url": "classSolid_1_1Inhibition.html#a212d6ca45c0ebcd5abc5b43f904c7a42", "keyword": "Inhibition Solid::Inhibition::Inhibition Solid::Inhibition", "text": "AbstractInhibition is not part of Solid public API so this constructor is meant to be used only by backends"}, {"type": "function", "name": "Solid::Inhibition::state", "url": "classSolid_1_1Inhibition.html#a90728e4c8d5dd0a23ffeda292e87b7c0", "keyword": "state Solid::Inhibition::state Solid::Inhibition", "text": "The initial value is Started since that is how InhibitionJob will return it The state can be modified by calling stop() and start() Also stateChanged() signal is available"}, {"type": "class", "name": "Solid::Job", "url": "classSolid_1_1Job.html", "keyword": "Job", "text": "There are two ways of using this class one is via exec() which will block the thread until a result is fetched the other is via connecting to the signal result() Please think twice before using exec() it should be used only in either unittest or cli apps Job and its subclasses are meant to be used in a fire-and-forget way Jobs will delete themselves when they finish using deleteLater() Even given their asynchronous nature Jobs are still executed in the main thread so any blocking code executed in it will block the app calling it"}, {"type": "enum", "name": "Solid::Job::Error", "url": "classSolid_1_1Job.html#a8ce86f86a6fe0b359f423d8e365e2232", "keyword": "Error Solid::Job::Error Solid::Job Error Solid::Job::Error Solid::Job Error Solid::Job::Error Solid::Job", "text": ""}, {"type": "enumvalue", "name": "Solid::Job::NoError", "url": "classSolid_1_1Job.html#a8ce86f86a6fe0b359f423d8e365e2232a443445fc1bedb6e986734e8eff16b816", "keyword": "NoError Solid::Job::NoError Solid::Job NoError Solid::Job::NoError Solid::Job NoError Solid::Job::NoError Solid::Job", "text": "Indicates there is no error"}, {"type": "enumvalue", "name": "Solid::Job::UserDefinedError", "url": "classSolid_1_1Job.html#a8ce86f86a6fe0b359f423d8e365e2232a38fe1f2bb514ebbbef4ba7c8dc3721f6", "keyword": "UserDefinedError Solid::Job::UserDefinedError Solid::Job UserDefinedError Solid::Job::UserDefinedError Solid::Job UserDefinedError Solid::Job::UserDefinedError Solid::Job", "text": "Subclasses should define error codes starting at this value"}, {"type": "slot", "name": "Solid::Job::start", "url": "classSolid_1_1Job.html#a1e1752f8e61d0c6ae3eb2ee82f58a3d9", "keyword": "start Solid::Job::start Solid::Job start Solid::Job::start Solid::Job start Solid::Job::start Solid::Job", "text": "This method will schedule doStart() to be executed in the next loop This is done so this method returns as soon as possible When the job is finished result() is emitted"}, {"type": "function", "name": "Solid::Job::error", "url": "classSolid_1_1Job.html#a1d1c8f4eb319420ed24c499bbecbc67b", "keyword": "error Solid::Job::error Solid::Job error Solid::Job::error Solid::Job error Solid::Job::error Solid::Job", "text": "Make sure to call this once result() has been emitted the error code for this job 0 if no error"}, {"type": "function", "name": "Solid::Job::errorText", "url": "classSolid_1_1Job.html#ace05fb8efb4946520499b0de4008c857", "keyword": "errorText Solid::Job::errorText Solid::Job errorText Solid::Job::errorText Solid::Job errorText Solid::Job::errorText Solid::Job", "text": "Only call if error is not 0 This is usually some extra data associated with the error such as a URL Use errorString() to get a human-readable translated message a string to help understand the error"}, {"type": "function", "name": "Solid::Job::exec", "url": "classSolid_1_1Job.html#ac28348897ed4f4ece3d2fd60ac620f26", "keyword": "exec Solid::Job::exec Solid::Job exec Solid::Job::exec Solid::Job exec Solid::Job::exec Solid::Job", "text": "This will start a nested QEventLoop internally Nested event loop can be dangerous and can have unintended side effects you should avoid calling exec() whenever you can and use the asynchronous interface of SolidJob instead Should you indeed call this method you need to make sure that all callers are reentrant so that events delivered by the inner event loop don t cause non-reentrant functions to be called which usually wreaks havoc Note that the event loop started by this method does not process user input events which means your user interface will effectively be blocked Other events like paint or network events are still being processed The advantage of not processing user input events is that the chance of accidental reentrancy is greatly reduced Still you should avoid calling this function true if the job has been executed without error false otherwise"}, {"type": "function", "name": "Solid::Job::emitResult", "url": "classSolid_1_1Job.html#a2e0d3c5a52308ac85d197194b0c901b6", "keyword": "emitResult Solid::Job::emitResult Solid::Job emitResult Solid::Job::emitResult Solid::Job emitResult Solid::Job::emitResult Solid::Job", "text": "Deletes this job using deleteLater() result()"}, {"type": "function", "name": "Solid::Job::setError", "url": "classSolid_1_1Job.html#ab726717935e9e09c36142f083e6140f7", "keyword": "setError Solid::Job::setError Solid::Job setError Solid::Job::setError Solid::Job setError Solid::Job::setError Solid::Job", "text": "It should be called when an error is encountered in the job just before calling emitResult() You should define an enum of error codes with values starting at KJob::UserDefinedError and use those For example errorCode the error code emitResult()"}, {"type": "function", "name": "Solid::Job::setErrorText", "url": "classSolid_1_1Job.html#aa2fbdf7aaaac34d40100b5b10fdb49fd", "keyword": "setErrorText Solid::Job::setErrorText Solid::Job setErrorText Solid::Job::setErrorText Solid::Job setErrorText Solid::Job::setErrorText Solid::Job", "text": "It should be called when an error is encountered in the job just before calling emitResult() Provides extra information about the error that cannot be determined directly from the error code For example a URL or filename This string is not normally translatable errorText the error text emitResult() setError()"}, {"type": "class", "name": "Solid::NetworkShare", "url": "classSolid_1_1NetworkShare.html", "keyword": "NetworkShare", "text": "a NetworkShare interface is used to determine the type of network access 4.7"}, {"type": "enum", "name": "Solid::NetworkShare::ShareType", "url": "classSolid_1_1NetworkShare.html#a664e0ec3c787be3ea6760c187d2ed65a", "keyword": "ShareType Solid::NetworkShare::ShareType Solid::NetworkShare", "text": "Unknown a unsupported network protocol Nfs nfs protocol Cifs samba protocol"}, {"type": "function", "name": "Solid::NetworkShare::~NetworkShare", "url": "classSolid_1_1NetworkShare.html#a8bc8da88ac5a260d5950c2dd3afb627c", "keyword": "Solid::NetworkShare::~NetworkShare Solid::NetworkShare", "text": ""}, {"type": "function", "name": "Solid::NetworkShare::type", "url": "classSolid_1_1NetworkShare.html#a6f0faf1b3097f8df96b569bfa8c5ad79", "keyword": "type Solid::NetworkShare::type Solid::NetworkShare", "text": "the type of network share"}, {"type": "function", "name": "Solid::NetworkShare::url", "url": "classSolid_1_1NetworkShare.html#a23cb48bb04cad0e7fd2d9e8d371e9b77", "keyword": "url Solid::NetworkShare::url Solid::NetworkShare", "text": "the url of network share"}, {"type": "function", "name": "Solid::NetworkShare::deviceInterfaceType", "url": "classSolid_1_1NetworkShare.html#a5dfec660d98f86aabeea2347345221aa", "keyword": "deviceInterfaceType Solid::NetworkShare::deviceInterfaceType Solid::NetworkShare", "text": "the NetworkShare device interface type Solid::DeviceInterface::Type"}, {"type": "class", "name": "Solid::OpticalDisc", "url": "classSolid_1_1OpticalDisc.html", "keyword": "OpticalDisc", "text": "An optical disc is a volume that can be inserted in CD-R* DVD* Blu-Ray HD-DVD drives"}, {"type": "enum", "name": "Solid::OpticalDisc::ContentType", "url": "classSolid_1_1OpticalDisc.html#ae00eadba9efec8b80b6ed11d4a2da0ab", "keyword": "ContentType Solid::OpticalDisc::ContentType Solid::OpticalDisc", "text": "Audio A disc containing audio Data A disc containing data VideoCd A Video Compact Disc VCD SuperVideoCd A Super Video Compact Disc SVCD VideoDvd A Video Digital Versatile Disc DVD-Video"}, {"type": "enum", "name": "Solid::OpticalDisc::DiscType", "url": "classSolid_1_1OpticalDisc.html#a2801fe1a2fa7c99a02f49240bc8d5bac", "keyword": "DiscType Solid::OpticalDisc::DiscType Solid::OpticalDisc", "text": "This enum type defines the type of optical disc it can be UnknownDiscType An undetermined disc type CdRom A Compact Disc Read-Only Memory CD-ROM CdRecordable A Compact Disc Recordable CD-R CdRewritable A Compact Disc ReWritable CD-RW DvdRom A Digital Versatile Disc Read-Only Memory DVD-ROM DvdRam A Digital Versatile Disc Random Access Memory DVD-RAM DvdRecordable A Digital Versatile Disc Recordable DVD-R DvdRewritable A Digital Versatile Disc ReWritable DVD-RW DvdPlusRecordable A Digital Versatile Disc Recordable DVD+R DvdPlusRewritable A Digital Versatile Disc ReWritable DVD+RW DvdPlusRecordableDuallayer A Digital Versatile Disc Recordable Dual-Layer DVD+R DL DvdPlusRewritableDuallayer A Digital Versatile Disc ReWritable Dual-Layer DVD+RW DL BluRayRom A Blu-ray Disc BD BluRayRecordable A Blu-ray Disc Recordable BD-R BluRayRewritable A Blu-ray Disc BD-RE HdDvdRom A High Density Digital Versatile Disc HD DVD HdDvdRecordable A High Density Digital Versatile Disc Recordable HD DVD-R HdDvdRewritable A High Density Digital Versatile Disc ReWritable HD DVD-RW"}, {"type": "enum", "name": "Solid::StorageVolume::UsageType", "url": "classSolid_1_1StorageVolume.html#aeed11994e9e3b81a3e60261364deeeb6", "keyword": "UsageType Solid::StorageVolume::UsageType Solid::StorageVolume UsageType Solid::StorageVolume::UsageType Solid::StorageVolume", "text": "FileSystem A mountable filesystem volume PartitionTable A volume containing a partition table Raid A volume member of a raid set not mountable Other A not mountable volume like a swap partition Unused An unused or free volume"}, {"type": "function", "name": "Solid::OpticalDisc::~OpticalDisc", "url": "classSolid_1_1OpticalDisc.html#a3c78d36fbf0146522eabb8075ec9a585", "keyword": "Solid::OpticalDisc::~OpticalDisc Solid::OpticalDisc", "text": ""}, {"type": "function", "name": "Solid::OpticalDisc::availableContent", "url": "classSolid_1_1OpticalDisc.html#a27cbe93b1b924187925727d458b16c96", "keyword": "availableContent Solid::OpticalDisc::availableContent Solid::OpticalDisc", "text": "the flag set indicating the available contents Solid::OpticalDisc::ContentType"}, {"type": "function", "name": "Solid::OpticalDisc::capacity", "url": "classSolid_1_1OpticalDisc.html#a4035f8c6245dd587afa0343c43223afd", "keyword": "capacity Solid::OpticalDisc::capacity Solid::OpticalDisc", "text": "the capacity of the disc in bytes"}, {"type": "function", "name": "Solid::OpticalDisc::discType", "url": "classSolid_1_1OpticalDisc.html#aa2a9e18080f5d4c86efaf7c00e31c6dc", "keyword": "discType Solid::OpticalDisc::discType Solid::OpticalDisc", "text": "the disc type"}, {"type": "function", "name": "Solid::OpticalDisc::isAppendable", "url": "classSolid_1_1OpticalDisc.html#a0d040d9b677363dd2237a4c00dd1726e", "keyword": "isAppendable Solid::OpticalDisc::isAppendable Solid::OpticalDisc", "text": "true if the disc is appendable false otherwise"}, {"type": "function", "name": "Solid::OpticalDisc::isBlank", "url": "classSolid_1_1OpticalDisc.html#a7da2a601c43ca98ee9bf4d41634f1bbc", "keyword": "isBlank Solid::OpticalDisc::isBlank Solid::OpticalDisc", "text": "true if the disc is blank false otherwise"}, {"type": "function", "name": "Solid::OpticalDisc::isRewritable", "url": "classSolid_1_1OpticalDisc.html#a7ec7faac1769373737517bcc2623e0d9", "keyword": "isRewritable Solid::OpticalDisc::isRewritable Solid::OpticalDisc", "text": "A disc is rewritable if you can write on it several times true if the disc is rewritable false otherwise"}, {"type": "function", "name": "Solid::StorageVolume::~StorageVolume", "url": "classSolid_1_1StorageVolume.html#aabdc52692c58780548ab17ba662818d7", "keyword": "Solid::StorageVolume::~StorageVolume Solid::StorageVolume Solid::StorageVolume::~StorageVolume Solid::StorageVolume", "text": ""}, {"type": "function", "name": "Solid::StorageVolume::encryptedContainer", "url": "classSolid_1_1StorageVolume.html#aa8d2f8b16859bf2c59aa20d1c10ecc7e", "keyword": "encryptedContainer Solid::StorageVolume::encryptedContainer Solid::StorageVolume encryptedContainer Solid::StorageVolume::encryptedContainer Solid::StorageVolume", "text": "the encrypted volume containing the current volume if appliable an invalid device otherwise"}, {"type": "function", "name": "Solid::StorageVolume::fsType", "url": "classSolid_1_1StorageVolume.html#aa76c394f3640b9a4bfd50fefa5a51ddf", "keyword": "fsType Solid::StorageVolume::fsType Solid::StorageVolume fsType Solid::StorageVolume::fsType Solid::StorageVolume", "text": "FIXME It s a platform dependent string maybe we should switch to an enum the filesystem type if applicable QString() otherwise"}, {"type": "function", "name": "Solid::StorageVolume::isIgnored", "url": "classSolid_1_1StorageVolume.html#ad78770b2369ac1cb0fb2a1826d041572", "keyword": "isIgnored Solid::StorageVolume::isIgnored Solid::StorageVolume isIgnored Solid::StorageVolume::isIgnored Solid::StorageVolume", "text": "If it should be ignored it generally means that it should be invisible to the user It s useful for firmware partitions or OS reinstall partitions on some systems true if the volume should be ignored"}, {"type": "function", "name": "Solid::StorageVolume::label", "url": "classSolid_1_1StorageVolume.html#a094a95d69bbc85972e60f7fabd7251db", "keyword": "label Solid::StorageVolume::label Solid::StorageVolume label Solid::StorageVolume::label Solid::StorageVolume", "text": "the volume label if available QString() otherwise"}, {"type": "function", "name": "Solid::StorageVolume::size", "url": "classSolid_1_1StorageVolume.html#a3dbc5da5e727269b99f86851473c9ff3", "keyword": "size Solid::StorageVolume::size Solid::StorageVolume size Solid::StorageVolume::size Solid::StorageVolume", "text": "the size of this volume"}, {"type": "function", "name": "Solid::StorageVolume::usage", "url": "classSolid_1_1StorageVolume.html#a9765a23187209d0bfaec62314cfcdfa0", "keyword": "usage Solid::StorageVolume::usage Solid::StorageVolume usage Solid::StorageVolume::usage Solid::StorageVolume", "text": "the usage type Solid::StorageVolume::UsageType"}, {"type": "function", "name": "Solid::StorageVolume::uuid", "url": "classSolid_1_1StorageVolume.html#ab4499608d8f3bcfeb178b0d2affd1b16", "keyword": "uuid Solid::StorageVolume::uuid Solid::StorageVolume uuid Solid::StorageVolume::uuid Solid::StorageVolume", "text": "You can generally assume that this identifier is unique with reasonable confidence Except if the volume UUID has been forged to intentionally provoke a collision the probability to have two volumes having the same UUID is low the Universal Unique IDentifier if available QString() otherwise"}, {"type": "function", "name": "Solid::OpticalDisc::deviceInterfaceType", "url": "classSolid_1_1OpticalDisc.html#a94119ccc302c04e2a098ee6b38bf9a51", "keyword": "deviceInterfaceType Solid::OpticalDisc::deviceInterfaceType Solid::OpticalDisc", "text": "the OpticalDisc device interface type Solid::Ifaces::Enums::DeviceInterface::Type"}, {"type": "function", "name": "Solid::StorageVolume::deviceInterfaceType", "url": "classSolid_1_1StorageVolume.html#ac253c4758e0fe55dbc9d6cb713c6c928", "keyword": "deviceInterfaceType Solid::StorageVolume::deviceInterfaceType Solid::StorageVolume deviceInterfaceType Solid::StorageVolume::deviceInterfaceType Solid::StorageVolume", "text": "the StorageVolume device interface type Solid::DeviceInterface::Type"}, {"type": "function", "name": "Solid::StorageVolume::StorageVolume", "url": "classSolid_1_1StorageVolume.html#acb79d1eb335563084caf54e713c2b76f", "keyword": "StorageVolume Solid::StorageVolume::StorageVolume Solid::StorageVolume StorageVolume Solid::StorageVolume::StorageVolume Solid::StorageVolume", "text": ""}, {"type": "class", "name": "Solid::OpticalDrive", "url": "classSolid_1_1OpticalDrive.html", "keyword": "OpticalDrive", "text": "An OpticalDrive is a storage that can handle optical discs"}, {"type": "enum", "name": "Solid::OpticalDrive::MediumType", "url": "classSolid_1_1OpticalDrive.html#a7ea3e1c2ad7c0ca44ed36208c742defa", "keyword": "MediumType Solid::OpticalDrive::MediumType Solid::OpticalDrive", "text": "Cdr A Recordable Compact Disc CD-R Cdrw A ReWritable Compact Disc CD-RW Dvd A Digital Versatile Disc DVD Dvdr A Recordable Digital Versatile Disc DVD-R Dvdrw A ReWritable Digital Versatile Disc DVD-RW Dvdram A Random Access Memory Digital Versatile Disc DVD-RAM Dvdplusr A Recordable Digital Versatile Disc DVD+R Dvdplusrw A ReWritable Digital Versatile Disc DVD+RW Dvdplusdl A Dual Layer Digital Versatile Disc DVD+R DL Dvdplusdlrw A Dual Layer Digital Versatile Disc DVD+RW DL Bd A Blu-ray Disc BD Bdr A Blu-ray Disc Recordable BD-R Bdre A Blu-ray Disc Recordable and Eraseable BD-RE HdDvd A High Density Digital Versatile Disc HD DVD HdDvdr A High Density Digital Versatile Disc Recordable HD DVD-R HdDvdrw A High Density Digital Versatile Disc ReWritable HD DVD-RW"}, {"type": "enum", "name": "Solid::StorageDrive::Bus", "url": "classSolid_1_1StorageDrive.html#acc84968d1114d892ba86de0348ca5a43", "keyword": "Bus Solid::StorageDrive::Bus Solid::StorageDrive Bus Solid::StorageDrive::Bus Solid::StorageDrive", "text": "Ide An Integrated Drive Electronics IDE bus also known as ATA Usb An Universal Serial Bus USB Ieee1394 An Ieee1394 bus also known as Firewire Scsi A Small Computer System Interface bus Sata A Serial Advanced Technology Attachment SATA bus Platform A legacy bus that is part of the underlying platform"}, {"type": "enum", "name": "Solid::StorageDrive::DriveType", "url": "classSolid_1_1StorageDrive.html#a58e59752bb61b9214e72f1de8a685920", "keyword": "DriveType Solid::StorageDrive::DriveType Solid::StorageDrive DriveType Solid::StorageDrive::DriveType Solid::StorageDrive", "text": "HardDisk A hard disk CdromDrive An optical drive Floppy A floppy disk drive Tape A tape drive CompactFlash A Compact Flash card reader MemoryStick A Memory Stick card reader SmartMedia A Smart Media card reader SdMmc A SecureDigital/MultiMediaCard card reader Xd A xD card reader"}, {"type": "signal", "name": "Solid::OpticalDrive::ejectDone", "url": "classSolid_1_1OpticalDrive.html#a70e4412161cab5570234e3b7af6b2e1a", "keyword": "ejectDone Solid::OpticalDrive::ejectDone Solid::OpticalDrive", "text": "The signal might be spontaneous i.e it can be triggered by another process error type of error that occurred if any errorData more information about the error if any udi the UDI of the volume"}, {"type": "signal", "name": "Solid::OpticalDrive::ejectPressed", "url": "classSolid_1_1OpticalDrive.html#ad976b76f19fe3dd86c7903beb899bce8", "keyword": "ejectPressed Solid::OpticalDrive::ejectPressed Solid::OpticalDrive", "text": "Please note that some broken drives doesn t report this event udi the UDI of the drive"}, {"type": "signal", "name": "Solid::OpticalDrive::ejectRequested", "url": "classSolid_1_1OpticalDrive.html#ab27c1d24c85b3a226742640227ce8fab", "keyword": "ejectRequested Solid::OpticalDrive::ejectRequested Solid::OpticalDrive", "text": "The signal might be spontaneous i.e it can be triggered by another process udi the UDI of the volume"}, {"type": "function", "name": "Solid::OpticalDrive::~OpticalDrive", "url": "classSolid_1_1OpticalDrive.html#a263915c60efc92ebe8a46a9fc8c0e2b9", "keyword": "Solid::OpticalDrive::~OpticalDrive Solid::OpticalDrive", "text": ""}, {"type": "function", "name": "Solid::OpticalDrive::eject", "url": "classSolid_1_1OpticalDrive.html#a3309563f914c143754f048323b425c29", "keyword": "eject Solid::OpticalDrive::eject Solid::OpticalDrive", "text": "If this drive is empty but has a tray it ll be opened the status of the eject operation"}, {"type": "function", "name": "Solid::OpticalDrive::readSpeed", "url": "classSolid_1_1OpticalDrive.html#a79fc72bffe11399db6492015c7dda74b", "keyword": "readSpeed Solid::OpticalDrive::readSpeed Solid::OpticalDrive", "text": "the maximum read speed"}, {"type": "function", "name": "Solid::OpticalDrive::supportedMedia", "url": "classSolid_1_1OpticalDrive.html#aef3cc855397fe61905695afcdc5a374f", "keyword": "supportedMedia Solid::OpticalDrive::supportedMedia Solid::OpticalDrive", "text": "the flag set indicating the supported medium types"}, {"type": "function", "name": "Solid::OpticalDrive::writeSpeed", "url": "classSolid_1_1OpticalDrive.html#aa4d1ed7c3428658b68799023839463ad", "keyword": "writeSpeed Solid::OpticalDrive::writeSpeed Solid::OpticalDrive", "text": "the maximum write speed"}, {"type": "function", "name": "Solid::OpticalDrive::writeSpeeds", "url": "classSolid_1_1OpticalDrive.html#a3175ce5f31c053da69ddc4ae14fbdeb4", "keyword": "writeSpeeds Solid::OpticalDrive::writeSpeeds Solid::OpticalDrive", "text": "the list of supported write speeds"}, {"type": "function", "name": "Solid::StorageDrive::~StorageDrive", "url": "classSolid_1_1StorageDrive.html#ae935fb2f1b3d98e6a085c1325a3e5cce", "keyword": "Solid::StorageDrive::~StorageDrive Solid::StorageDrive Solid::StorageDrive::~StorageDrive Solid::StorageDrive", "text": ""}, {"type": "function", "name": "Solid::StorageDrive::bus", "url": "classSolid_1_1StorageDrive.html#a0a454a55fa86214d050279e8aa5273fe", "keyword": "bus Solid::StorageDrive::bus Solid::StorageDrive bus Solid::StorageDrive::bus Solid::StorageDrive", "text": "the bus type Solid::StorageDrive::Bus"}, {"type": "function", "name": "Solid::StorageDrive::driveType", "url": "classSolid_1_1StorageDrive.html#ac1531d5911d5461ee5f2cfa8fb9b8149", "keyword": "driveType Solid::StorageDrive::driveType Solid::StorageDrive driveType Solid::StorageDrive::driveType Solid::StorageDrive", "text": "the drive type Solid::StorageDrive::DriveType"}, {"type": "function", "name": "Solid::StorageDrive::isHotpluggable", "url": "classSolid_1_1StorageDrive.html#a4d255807ca7fda2a1e6e9446940a15f3", "keyword": "isHotpluggable Solid::StorageDrive::isHotpluggable Solid::StorageDrive isHotpluggable Solid::StorageDrive::isHotpluggable Solid::StorageDrive", "text": "true if this storage supports hotplug false otherwise"}, {"type": "function", "name": "Solid::StorageDrive::isInUse", "url": "classSolid_1_1StorageDrive.html#a05dc0b480f662833f2cf7d565701f816", "keyword": "isInUse Solid::StorageDrive::isInUse Solid::StorageDrive isInUse Solid::StorageDrive::isInUse Solid::StorageDrive", "text": "if at least one child storage access is mounted true if at least one child storage access is mounted"}, {"type": "function", "name": "Solid::StorageDrive::isRemovable", "url": "classSolid_1_1StorageDrive.html#a9dd9973747645d3fdb6973a03e7c1e6f", "keyword": "isRemovable Solid::StorageDrive::isRemovable Solid::StorageDrive isRemovable Solid::StorageDrive::isRemovable Solid::StorageDrive", "text": "For example memory card can be removed from the drive by the user while partitions can t be removed from hard disks true if media can be removed false otherwise"}, {"type": "function", "name": "Solid::StorageDrive::size", "url": "classSolid_1_1StorageDrive.html#a99cdfb70049655b5f84b11e90f419aff", "keyword": "size Solid::StorageDrive::size Solid::StorageDrive size Solid::StorageDrive::size Solid::StorageDrive", "text": "the size of this drive"}, {"type": "function", "name": "Solid::OpticalDrive::deviceInterfaceType", "url": "classSolid_1_1OpticalDrive.html#a5c3c973adff1f69b373e6cf44b3ad863", "keyword": "deviceInterfaceType Solid::OpticalDrive::deviceInterfaceType Solid::OpticalDrive", "text": "the OpticalDrive device interface type Solid::Ifaces::Enums::DeviceInterface::Type"}, {"type": "function", "name": "Solid::StorageDrive::deviceInterfaceType", "url": "classSolid_1_1StorageDrive.html#aa9c98474a098e91ed7aba680384c2c33", "keyword": "deviceInterfaceType Solid::StorageDrive::deviceInterfaceType Solid::StorageDrive deviceInterfaceType Solid::StorageDrive::deviceInterfaceType Solid::StorageDrive", "text": "the StorageDrive device interface type Solid::DeviceInterface::Type"}, {"type": "function", "name": "Solid::StorageDrive::StorageDrive", "url": "classSolid_1_1StorageDrive.html#ac83745edf39337b6a1729ba547acbd74", "keyword": "StorageDrive Solid::StorageDrive::StorageDrive Solid::StorageDrive StorageDrive Solid::StorageDrive::StorageDrive Solid::StorageDrive", "text": ""}, {"type": "class", "name": "Solid::PortableMediaPlayer", "url": "classSolid_1_1PortableMediaPlayer.html", "keyword": "PortableMediaPlayer", "text": "A portable media player is a portable device able to play multimedia files Some of them have even recording capabilities Davide Bettio"}, {"type": "function", "name": "Solid::PortableMediaPlayer::~PortableMediaPlayer", "url": "classSolid_1_1PortableMediaPlayer.html#a501f702d7c3a29f3bafb563f3c4e3508", "keyword": "Solid::PortableMediaPlayer::~PortableMediaPlayer Solid::PortableMediaPlayer", "text": ""}, {"type": "function", "name": "Solid::PortableMediaPlayer::driverHandle", "url": "classSolid_1_1PortableMediaPlayer.html#a6e9bd1d4d0409c1279b6562cf79c5977", "keyword": "driverHandle Solid::PortableMediaPlayer::driverHandle Solid::PortableMediaPlayer", "text": "For example for the driver it will return the serial number of the device the driver specific data"}, {"type": "function", "name": "Solid::PortableMediaPlayer::supportedDrivers", "url": "classSolid_1_1PortableMediaPlayer.html#a52699919a3202edc37dad9c3ae02165b", "keyword": "supportedDrivers Solid::PortableMediaPlayer::supportedDrivers Solid::PortableMediaPlayer", "text": "If protocol is blank returns a list of all drivers supporting the device protocol The protocol to get drivers for a list of installed drivers meeting the criteria"}, {"type": "function", "name": "Solid::PortableMediaPlayer::supportedProtocols", "url": "classSolid_1_1PortableMediaPlayer.html#a44b48aa6ffc65bc100cdaf30e02a46a6", "keyword": "supportedProtocols Solid::PortableMediaPlayer::supportedProtocols Solid::PortableMediaPlayer", "text": "This list may be dependent on installed device driver libraries a list of known protocols this device can speak"}, {"type": "function", "name": "Solid::PortableMediaPlayer::deviceInterfaceType", "url": "classSolid_1_1PortableMediaPlayer.html#a265e91c24a8857d7e7ee2d98c7deca9b", "keyword": "deviceInterfaceType Solid::PortableMediaPlayer::deviceInterfaceType Solid::PortableMediaPlayer", "text": "the PortableMediaPlayer device interface type Solid::DeviceInterface::Type"}, {"type": "class", "name": "Solid::Predicate", "url": "classSolid_1_1Predicate.html", "keyword": "Predicate", "text": "A predicate is a logical condition that a given device can match or not It s a constraint about the value a property must have in a given device interface or any combination conjunction disjunction of such constraints FIXME Add an example"}, {"type": "enum", "name": "Solid::Predicate::ComparisonOperator", "url": "classSolid_1_1Predicate.html#a88e5bbd97d7528a897b6a60683c36c4b", "keyword": "ComparisonOperator Solid::Predicate::ComparisonOperator Solid::Predicate", "text": "Equals the property and the value will match for strict equality Mask the property and the value will match if the bitmasking is not null"}, {"type": "enum", "name": "Solid::Predicate::Type", "url": "classSolid_1_1Predicate.html#aad2fd2f39c890338aa2dc1388197cef0", "keyword": "Type Solid::Predicate::Type Solid::Predicate", "text": "PropertyCheck the predicate contains a comparison that needs to be matched using a ComparisonOperator Conjunction the two contained predicates need to be true for this predicate to be true Disjunction either of the two contained predicates may be true for this predicate to be true InterfaceCheck the device type is compared"}, {"type": "function", "name": "Solid::Predicate::Predicate", "url": "classSolid_1_1Predicate.html#a3386a480760c9224c969120828a637ab", "keyword": "Predicate Solid::Predicate::Predicate Solid::Predicate", "text": ""}, {"type": "function", "name": "Solid::Predicate::Predicate", "url": "classSolid_1_1Predicate.html#a8f3c2eae645d0f049429e9992b2842a2", "keyword": "Predicate Solid::Predicate::Predicate Solid::Predicate", "text": "other the predicate to copy"}, {"type": "function", "name": "Solid::Predicate::Predicate", "url": "classSolid_1_1Predicate.html#aef75762f51dda658bd419381a960cf10", "keyword": "Predicate Solid::Predicate::Predicate Solid::Predicate", "text": "ifaceType the device interface type the device must have property the property name of the device interface value the value the property must have to make the device match compOperator the operator to apply between the property and the value when matching"}, {"type": "function", "name": "Solid::Predicate::Predicate", "url": "classSolid_1_1Predicate.html#abaa292596786f2e5c97d31a03f195110", "keyword": "Predicate Solid::Predicate::Predicate Solid::Predicate", "text": "ifaceName the name of the device interface the device must have property the property name of the device interface value the value the property must have to make the device match compOperator the operator to apply between the property and the value when matching"}, {"type": "function", "name": "Solid::Predicate::Predicate", "url": "classSolid_1_1Predicate.html#ac7c4f2a5a2a354e8173d14138ea691dd", "keyword": "Predicate Solid::Predicate::Predicate Solid::Predicate", "text": "ifaceType the device interface the device must have"}, {"type": "function", "name": "Solid::Predicate::Predicate", "url": "classSolid_1_1Predicate.html#af430631cb156bb2d7a5868efa1f06286", "keyword": "Predicate Solid::Predicate::Predicate Solid::Predicate", "text": "ifaceName the name of the device interface the device must have"}, {"type": "function", "name": "Solid::Predicate::~Predicate", "url": "classSolid_1_1Predicate.html#adbd08003638121a50abad6c42b8010c1", "keyword": "Solid::Predicate::~Predicate Solid::Predicate", "text": ""}, {"type": "function", "name": "Solid::Predicate::comparisonOperator", "url": "classSolid_1_1Predicate.html#a17f3055ffd6f13b932b3da60d53b9d33", "keyword": "comparisonOperator Solid::Predicate::comparisonOperator Solid::Predicate", "text": "4.4 This is only valid for Conjunction and Disjunction types the comparison operator used"}, {"type": "function", "name": "Solid::Predicate::firstOperand", "url": "classSolid_1_1Predicate.html#aa8140022607420fe2d077478f60b5f22", "keyword": "firstOperand Solid::Predicate::firstOperand Solid::Predicate", "text": "4.4 This is only valid for Conjunction and Disjunction types The predicate used for the first operand"}, {"type": "function", "name": "Solid::Predicate::interfaceType", "url": "classSolid_1_1Predicate.html#aa9a910a322c252a63ed5c748b9e22560", "keyword": "interfaceType Solid::Predicate::interfaceType Solid::Predicate", "text": "This is only valid for InterfaceCheck and PropertyCheck types 4.4 a device interface type used by the predicate"}, {"type": "function", "name": "Solid::Predicate::isValid", "url": "classSolid_1_1Predicate.html#a667fab3a97dd7bd5cc979b552d639ad1", "keyword": "isValid Solid::Predicate::isValid Solid::Predicate", "text": "Predicate() is the only invalid predicate true if the predicate is valid false otherwise"}, {"type": "function", "name": "Solid::Predicate::matches", "url": "classSolid_1_1Predicate.html#a057768fa96300f04ae5290fe0133da7a", "keyword": "matches Solid::Predicate::matches Solid::Predicate", "text": "device the device to match against the predicate true if the given device matches the predicate false otherwise"}, {"type": "function", "name": "Solid::Predicate::matchingValue", "url": "classSolid_1_1Predicate.html#a94e7259c5216621cdcae9a19dd4d5f20", "keyword": "matchingValue Solid::Predicate::matchingValue Solid::Predicate", "text": "This is only valid for the PropertyCheck type 4.4 the value used"}, {"type": "function", "name": "Solid::Predicate::operator&", "url": "classSolid_1_1Predicate.html#ae867d0ff2074bd2f930a53db78b6088d", "keyword": "operator& Solid::Predicate::operator& Solid::Predicate", "text": "other the second operand a new and predicate having this and other as operands"}, {"type": "function", "name": "Solid::Predicate::operator&=", "url": "classSolid_1_1Predicate.html#a3261213a9cf9e3fc50bf9752601bc842", "keyword": "operator&= Solid::Predicate::operator&= Solid::Predicate", "text": "other the second operand assigns to this a new and predicate having this and other as operands"}, {"type": "function", "name": "Solid::Predicate::operator=", "url": "classSolid_1_1Predicate.html#ab583522bf29ac3cb941bdaa526002add", "keyword": "operator= Solid::Predicate::operator= Solid::Predicate", "text": "other the predicate to assign this predicate after having assigned other to it"}, {"type": "function", "name": "Solid::Predicate::operator|", "url": "classSolid_1_1Predicate.html#a3f9c9dbdbccb7f950f9eae41f7561e10", "keyword": "operator| Solid::Predicate::operator| Solid::Predicate", "text": "other the second operand a new or predicate having this and other as operands"}, {"type": "function", "name": "Solid::Predicate::operator|=", "url": "classSolid_1_1Predicate.html#adba2f7f07a086de23be75d9ef83de6a0", "keyword": "operator|= Solid::Predicate::operator|= Solid::Predicate", "text": "other the second operand assigns to this a new or predicate having this and other as operands"}, {"type": "function", "name": "Solid::Predicate::propertyName", "url": "classSolid_1_1Predicate.html#a7152967ffcb44a1171d320d8bf2aee24", "keyword": "propertyName Solid::Predicate::propertyName Solid::Predicate", "text": "This is only valid for the PropertyCheck type 4.4 a property name"}, {"type": "function", "name": "Solid::Predicate::secondOperand", "url": "classSolid_1_1Predicate.html#a6d302ab6223876863a1aba3a5cbb3ed7", "keyword": "secondOperand Solid::Predicate::secondOperand Solid::Predicate", "text": "4.4 This is only valid for Conjunction and Disjunction types The predicate used for the second operand"}, {"type": "function", "name": "Solid::Predicate::toString", "url": "classSolid_1_1Predicate.html#a45c0446531064ad19b7d4a6d0ca7043f", "keyword": "toString Solid::Predicate::toString Solid::Predicate", "text": "a string representation of the predicate"}, {"type": "function", "name": "Solid::Predicate::type", "url": "classSolid_1_1Predicate.html#af68cc8c81f7dd57698367e4ab338786d", "keyword": "type Solid::Predicate::type Solid::Predicate", "text": "4.4 the predicate type"}, {"type": "function", "name": "Solid::Predicate::usedTypes", "url": "classSolid_1_1Predicate.html#ae9cce9a04129893d4433f3adc4eac1fc", "keyword": "usedTypes Solid::Predicate::usedTypes Solid::Predicate", "text": "all the device interface types used in this predicate"}, {"type": "function", "name": "Solid::Predicate::fromString", "url": "classSolid_1_1Predicate.html#aea54fd739b594a077314cf2b8eb25cb6", "keyword": "fromString Solid::Predicate::fromString Solid::Predicate", "text": "predicate the string to convert a new valid predicate if the given string is syntactically correct Predicate() otherwise"}, {"type": "class", "name": "Solid::Processor", "url": "classSolid_1_1Processor.html", "keyword": "Processor", "text": ""}, {"type": "enum", "name": "Solid::Processor::InstructionSet", "url": "classSolid_1_1Processor.html#a4fb6ace7db56d9ec92f8ff69af957235", "keyword": "InstructionSet Solid::Processor::InstructionSet Solid::Processor", "text": ""}, {"type": "function", "name": "Solid::Processor::~Processor", "url": "classSolid_1_1Processor.html#a2f22889c57cd2590ea4537f06b152135", "keyword": "Solid::Processor::~Processor Solid::Processor", "text": ""}, {"type": "function", "name": "Solid::Processor::canChangeFrequency", "url": "classSolid_1_1Processor.html#aee2d5d4cc8d76733beea70112ab3bb10", "keyword": "canChangeFrequency Solid::Processor::canChangeFrequency Solid::Processor", "text": "True if a processor is able to change its own CPU frequency generally for power management true if the processor can change CPU frequency false otherwise"}, {"type": "function", "name": "Solid::Processor::instructionSets", "url": "classSolid_1_1Processor.html#a792cc9d26b72580cbcd5f4f6dc82695e", "keyword": "instructionSets Solid::Processor::instructionSets Solid::Processor", "text": "the extensions supported by the CPU Solid::Processor::InstructionSet"}, {"type": "function", "name": "Solid::Processor::maxSpeed", "url": "classSolid_1_1Processor.html#a44f7ee36d699ad1a9529eccfffbbf4d7", "keyword": "maxSpeed Solid::Processor::maxSpeed Solid::Processor", "text": "the maximum speed in MHz or 0 if the device can t be queried for this information"}, {"type": "function", "name": "Solid::Processor::number", "url": "classSolid_1_1Processor.html#a085d23925ed86532ca0e9231fd7de551", "keyword": "number Solid::Processor::number Solid::Processor", "text": "the internal processor number in the system starting from zero"}, {"type": "function", "name": "Solid::Processor::deviceInterfaceType", "url": "classSolid_1_1Processor.html#af7374d8369c37469a64966ed315a3f1f", "keyword": "deviceInterfaceType Solid::Processor::deviceInterfaceType Solid::Processor", "text": "the Processor device interface type Solid::Ifaces::Enums::DeviceInterface::Type"}, {"type": "class", "name": "Solid::RequestStateJob", "url": "classSolid_1_1RequestStateJob.html", "keyword": "RequestStateJob", "text": "On success this job will contain no error and the device will be set to the desired state for example Sleep On error use error() and errorText() to know more about the issue In some devices changing the system state might happen too fast for the callee of this job to be notified for example the system might suspend before result() is emitted"}, {"type": "signal", "name": "Solid::RequestStateJob::result", "url": "classSolid_1_1RequestStateJob.html#a8668c7621f4e1e4bff2ca8f5a0a1c25d", "keyword": "result Solid::RequestStateJob::result Solid::RequestStateJob", "text": ""}, {"type": "class", "name": "Solid::StatesJob", "url": "classSolid_1_1StatesJob.html", "keyword": "StatesJob", "text": "Different devices and different operating systems support a different set of states such Sleep or Hibernation"}, {"type": "signal", "name": "Solid::StatesJob::result", "url": "classSolid_1_1StatesJob.html#a807c779f9e6c70a407a7543824a3f597", "keyword": "result Solid::StatesJob::result Solid::StatesJob", "text": ""}, {"type": "function", "name": "Solid::StatesJob::states", "url": "classSolid_1_1StatesJob.html#a568d40bb4e27bfd5f2366cc348a4f749", "keyword": "states Solid::StatesJob::states Solid::StatesJob", "text": ""}, {"type": "class", "name": "Solid::StorageAccess", "url": "classSolid_1_1StorageAccess.html", "keyword": "StorageAccess", "text": "mount or unmount them A volume is anything that can contain data partition optical disc memory card It s a particular kind of block device"}, {"type": "signal", "name": "Solid::StorageAccess::accessibilityChanged", "url": "classSolid_1_1StorageAccess.html#a7273d60eff31620620eea1ffe9dfc08b", "keyword": "accessibilityChanged Solid::StorageAccess::accessibilityChanged Solid::StorageAccess", "text": "accessible true if the volume is accessible false otherwise udi the UDI of the volume"}, {"type": "signal", "name": "Solid::StorageAccess::setupDone", "url": "classSolid_1_1StorageAccess.html#ae58d855de4fe07aaf4639ebdc2c95989", "keyword": "setupDone Solid::StorageAccess::setupDone Solid::StorageAccess", "text": "The signal might be spontaneous i.e it can be triggered by another process error type of error that occurred if any errorData more information about the error if any udi the UDI of the volume"}, {"type": "signal", "name": "Solid::StorageAccess::setupRequested", "url": "classSolid_1_1StorageAccess.html#a4fb362f8f49f712f9920606be3d4ebf3", "keyword": "setupRequested Solid::StorageAccess::setupRequested Solid::StorageAccess", "text": "The signal might be spontaneous i.e it can be triggered by another process udi the UDI of the volume"}, {"type": "signal", "name": "Solid::StorageAccess::teardownDone", "url": "classSolid_1_1StorageAccess.html#a9f34f50cfbaa06eb27d92633b866b31b", "keyword": "teardownDone Solid::StorageAccess::teardownDone Solid::StorageAccess", "text": "The signal might be spontaneous i.e it can be triggered by another process error type of error that occurred if any errorData more information about the error if any udi the UDI of the volume"}, {"type": "signal", "name": "Solid::StorageAccess::teardownRequested", "url": "classSolid_1_1StorageAccess.html#a7d7d7324ab4793be41dbe43adefc910e", "keyword": "teardownRequested Solid::StorageAccess::teardownRequested Solid::StorageAccess", "text": "The signal might be spontaneous i.e it can be triggered by another process udi the UDI of the volume"}, {"type": "function", "name": "Solid::StorageAccess::~StorageAccess", "url": "classSolid_1_1StorageAccess.html#af7b8e207a7433cb667cd6e7f3693747a", "keyword": "Solid::StorageAccess::~StorageAccess Solid::StorageAccess", "text": ""}, {"type": "function", "name": "Solid::StorageAccess::filePath", "url": "classSolid_1_1StorageAccess.html#a67216193dc57f89c7d47b8826d98428a", "keyword": "filePath Solid::StorageAccess::filePath Solid::StorageAccess", "text": "the absolute path to the mount point if the volume is mounted QString() otherwise"}, {"type": "function", "name": "Solid::StorageAccess::isAccessible", "url": "classSolid_1_1StorageAccess.html#a7f791e3992045625511f833c291445ac", "keyword": "isAccessible Solid::StorageAccess::isAccessible Solid::StorageAccess", "text": "true if the volume is mounted"}, {"type": "function", "name": "Solid::StorageAccess::isIgnored", "url": "classSolid_1_1StorageAccess.html#ab9310cbb95b5f930e3736af5bf2a03e6", "keyword": "isIgnored Solid::StorageAccess::isIgnored Solid::StorageAccess", "text": "If it should be ignored it generally means that it should be invisible to the user It s useful for firmware partitions or OS reinstall partitions on some systems true if the volume should be ignored"}, {"type": "function", "name": "Solid::StorageAccess::setup", "url": "classSolid_1_1StorageAccess.html#aa46fb8a7a104927168ffc3b29817fde9", "keyword": "setup Solid::StorageAccess::setup Solid::StorageAccess", "text": "false if the operation is not supported true if the operation is attempted"}, {"type": "function", "name": "Solid::StorageAccess::teardown", "url": "classSolid_1_1StorageAccess.html#a9530651a7d29c0c8d4baffbccb970f41", "keyword": "teardown Solid::StorageAccess::teardown Solid::StorageAccess", "text": "false if the operation is not supported true if the operation is attempted"}, {"type": "function", "name": "Solid::StorageAccess::deviceInterfaceType", "url": "classSolid_1_1StorageAccess.html#a5ba4f15b824ac4c4bf372075c2eb9b69", "keyword": "deviceInterfaceType Solid::StorageAccess::deviceInterfaceType Solid::StorageAccess", "text": "the StorageVolume device interface type Solid::Ifaces::Enums::DeviceInterface::Type"}, {"type": "function", "name": "Solid::StorageAccess::StorageAccess", "url": "classSolid_1_1StorageAccess.html#a2af0dc87eebabd0e281962b9b0e3c5fb", "keyword": "StorageAccess Solid::StorageAccess::StorageAccess Solid::StorageAccess", "text": ""}, {"type": "class", "name": "Solid::StorageDrive", "url": "classSolid_1_1StorageDrive.html", "keyword": "StorageDrive", "text": "A storage is anything that can contain a set of volumes card reader hard disk cdrom drive It s a particular kind of block device"}, {"type": "class", "name": "Solid::StorageVolume", "url": "classSolid_1_1StorageVolume.html", "keyword": "StorageVolume", "text": "A volume is anything that can contain data partition optical disc memory card It s a particular kind of block device"}, {"type": "class", "name": "Solid::Backends::Fake::FakeManager", "url": "classSolid_1_1Backends_1_1Fake_1_1FakeManager.html", "keyword": "FakeManager", "text": "This fake manager is used for unit tests and developers Micha\u00ebl Larouche"}, {"type": "function", "name": "Solid::Backends::Fake::FakeManager::allDevices", "url": "classSolid_1_1Backends_1_1Fake_1_1FakeManager.html#a7e21d04962dbd98c2830df971c6e1a65", "keyword": "allDevices Solid::Backends::Fake::FakeManager::allDevices Solid::Backends::Fake::FakeManager", "text": ""}, {"type": "function", "name": "Solid::Backends::Fake::FakeManager::createDevice", "url": "classSolid_1_1Backends_1_1Fake_1_1FakeManager.html#a449152043fac42feaa8af9cf59689c73", "keyword": "createDevice Solid::Backends::Fake::FakeManager::createDevice Solid::Backends::Fake::FakeManager", "text": "udi the identifier of the device instantiated a new Device object if there s a device having the given UDI 0 otherwise"}, {"type": "function", "name": "Solid::Backends::Fake::FakeManager::devicesFromQuery", "url": "classSolid_1_1Backends_1_1Fake_1_1FakeManager.html#a0a5bd3c50edc605196182288c54b3432", "keyword": "devicesFromQuery Solid::Backends::Fake::FakeManager::devicesFromQuery Solid::Backends::Fake::FakeManager", "text": "parentUdi UDI of the parent of the devices we re searching for or QString() if there s no constraint on the parent type DeviceInterface type available on the devices we re looking for or DeviceInterface::Unknown if there s no constraint on the device interfaces the UDIs of all the devices having the given parent and device interface"}, {"type": "function", "name": "Solid::Backends::Fake::FakeManager::supportedInterfaces", "url": "classSolid_1_1Backends_1_1Fake_1_1FakeManager.html#abad61aac2a4e08a10c9a7c6c299f2da0", "keyword": "supportedInterfaces Solid::Backends::Fake::FakeManager::supportedInterfaces Solid::Backends::Fake::FakeManager", "text": ""}, {"type": "function", "name": "Solid::Backends::Fake::FakeManager::udiPrefix", "url": "classSolid_1_1Backends_1_1Fake_1_1FakeManager.html#ab81af91ba31f3b9fcff4a08ccf7bda75", "keyword": "udiPrefix Solid::Backends::Fake::FakeManager::udiPrefix Solid::Backends::Fake::FakeManager", "text": ""}, {"type": "function", "name": "Solid::Ifaces::DeviceManager::DeviceManager", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#a7fac5d0bfa6bc7eabd1fdc24c6a4eb6d", "keyword": "DeviceManager Solid::Ifaces::DeviceManager::DeviceManager Solid::Ifaces::DeviceManager DeviceManager Solid::Ifaces::DeviceManager::DeviceManager Solid::Ifaces::DeviceManager", "text": ""}, {"type": "function", "name": "Solid::Ifaces::DeviceManager::~DeviceManager", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#af348d81ef42391cc640db264ba19ca67", "keyword": "Solid::Ifaces::DeviceManager::~DeviceManager Solid::Ifaces::DeviceManager Solid::Ifaces::DeviceManager::~DeviceManager Solid::Ifaces::DeviceManager", "text": ""}, {"type": "signal", "name": "Solid::Ifaces::DeviceManager::deviceAdded", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#a45f413228e11cef0559a18ebcc656d31", "keyword": "deviceAdded Solid::Ifaces::DeviceManager::deviceAdded Solid::Ifaces::DeviceManager deviceAdded Solid::Ifaces::DeviceManager::deviceAdded Solid::Ifaces::DeviceManager", "text": "udi the new device identifier"}, {"type": "signal", "name": "Solid::Ifaces::DeviceManager::deviceRemoved", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#a56ad631be34c77855d0e7c1d5af40628", "keyword": "deviceRemoved Solid::Ifaces::DeviceManager::deviceRemoved Solid::Ifaces::DeviceManager deviceRemoved Solid::Ifaces::DeviceManager::deviceRemoved Solid::Ifaces::DeviceManager", "text": "udi the old device identifier"}, {"type": "class", "name": "Solid::Ifaces::Battery", "url": "classSolid_1_1Ifaces_1_1Battery.html", "keyword": "Battery", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Battery::~Battery", "url": "classSolid_1_1Ifaces_1_1Battery.html#ac32ffd4493e1f9726ac3cc96c1f8af14", "keyword": "Solid::Ifaces::Battery::~Battery Solid::Ifaces::Battery", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Battery::capacity", "url": "classSolid_1_1Ifaces_1_1Battery.html#a5c7b0b3d25fe316b8453043de1a5d7a4", "keyword": "capacity Solid::Ifaces::Battery::capacity Solid::Ifaces::Battery", "text": "The capacity of the battery will reduce with age A capacity value less than 75 is usually a sign that you should renew your battery 4.11 the battery capacity normalised to percent"}, {"type": "function", "name": "Solid::Ifaces::Battery::chargePercent", "url": "classSolid_1_1Ifaces_1_1Battery.html#a66e2fb3b8fe12e44859764abece897fd", "keyword": "chargePercent Solid::Ifaces::Battery::chargePercent Solid::Ifaces::Battery", "text": "the current charge level normalised to percent"}, {"type": "function", "name": "Solid::Ifaces::Battery::chargeState", "url": "classSolid_1_1Ifaces_1_1Battery.html#af9dd256e3d78ed33e7411736cb51e07e", "keyword": "chargeState Solid::Ifaces::Battery::chargeState Solid::Ifaces::Battery", "text": "It can be in a stable state no charge charging or discharging the current battery charge state Solid::Battery::ChargeState"}, {"type": "function", "name": "Solid::Ifaces::Battery::energy", "url": "classSolid_1_1Ifaces_1_1Battery.html#a959af8a04ffe57e5455d507c035e80b2", "keyword": "energy Solid::Ifaces::Battery::energy Solid::Ifaces::Battery", "text": "amount of battery energy in Wh"}, {"type": "function", "name": "Solid::Ifaces::Battery::energyFull", "url": "classSolid_1_1Ifaces_1_1Battery.html#a38972f7bcd6eff0ce30133f48c41c2d0", "keyword": "energyFull Solid::Ifaces::Battery::energyFull Solid::Ifaces::Battery", "text": "amount of battery energy when full in Wh 5.7"}, {"type": "function", "name": "Solid::Ifaces::Battery::energyFullDesign", "url": "classSolid_1_1Ifaces_1_1Battery.html#a3dc2a15098b491e0cdc4be83fa3124e9", "keyword": "energyFullDesign Solid::Ifaces::Battery::energyFullDesign Solid::Ifaces::Battery", "text": "amount of battery energy when full by design in Wh 5.7"}, {"type": "function", "name": "Solid::Ifaces::Battery::energyRate", "url": "classSolid_1_1Ifaces_1_1Battery.html#ab713bde2019f2655142373d2173086d1", "keyword": "energyRate Solid::Ifaces::Battery::energyRate Solid::Ifaces::Battery", "text": "If positive the source is being discharged if negative it s being charged battery rate in Watts"}, {"type": "function", "name": "Solid::Ifaces::Battery::isPowerSupply", "url": "classSolid_1_1Ifaces_1_1Battery.html#aa6b52a6a811b0b64e2ddcad3782313fe", "keyword": "isPowerSupply Solid::Ifaces::Battery::isPowerSupply Solid::Ifaces::Battery", "text": "true if the battery is powersupply false otherwise"}, {"type": "function", "name": "Solid::Ifaces::Battery::isPresent", "url": "classSolid_1_1Ifaces_1_1Battery.html#acb72a3c5f152f28605ec4328117e1ed5", "keyword": "isPresent Solid::Ifaces::Battery::isPresent Solid::Ifaces::Battery", "text": "true if the battery is present false otherwise"}, {"type": "function", "name": "Solid::Ifaces::Battery::isRecalled", "url": "classSolid_1_1Ifaces_1_1Battery.html#af0d6aa7575c77cda21ab31cd23a1306c", "keyword": "isRecalled Solid::Ifaces::Battery::isRecalled Solid::Ifaces::Battery", "text": "true if the battery has been recalled false otherwise 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::isRechargeable", "url": "classSolid_1_1Ifaces_1_1Battery.html#a783d1763c29da6a328a33ef72059bb7a", "keyword": "isRechargeable Solid::Ifaces::Battery::isRechargeable Solid::Ifaces::Battery", "text": "true if the battery is rechargeable false otherwise one time usage"}, {"type": "function", "name": "Solid::Ifaces::Battery::recallUrl", "url": "classSolid_1_1Ifaces_1_1Battery.html#ab5fa824f8213b755132de7c1133dee99", "keyword": "recallUrl Solid::Ifaces::Battery::recallUrl Solid::Ifaces::Battery", "text": "the website URL of the vendor that has recalled the battery 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::recallVendor", "url": "classSolid_1_1Ifaces_1_1Battery.html#a30344d826d0b5e78b8eea12e5030b144", "keyword": "recallVendor Solid::Ifaces::Battery::recallVendor Solid::Ifaces::Battery", "text": "the vendor name that has recalled the battery 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::remainingTime", "url": "classSolid_1_1Ifaces_1_1Battery.html#ad011ce3597426456072dad2c53faec1c", "keyword": "remainingTime Solid::Ifaces::Battery::remainingTime Solid::Ifaces::Battery", "text": "the current global estimated remaining time in seconds 5.8"}, {"type": "function", "name": "Solid::Ifaces::Battery::serial", "url": "classSolid_1_1Ifaces_1_1Battery.html#a18e0f733184ceb5e62375b0b47e11fca", "keyword": "serial Solid::Ifaces::Battery::serial Solid::Ifaces::Battery", "text": "the serial number of the battery 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::technology", "url": "classSolid_1_1Ifaces_1_1Battery.html#a17708c7e865d066800e22529aa119625", "keyword": "technology Solid::Ifaces::Battery::technology Solid::Ifaces::Battery", "text": "the battery technology Solid::Battery::Technology"}, {"type": "function", "name": "Solid::Ifaces::Battery::temperature", "url": "classSolid_1_1Ifaces_1_1Battery.html#aa82831b99a31b22373104269b455d9dc", "keyword": "temperature Solid::Ifaces::Battery::temperature Solid::Ifaces::Battery", "text": "the battery temperature in degrees Celsius 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::timeToEmpty", "url": "classSolid_1_1Ifaces_1_1Battery.html#a9fd3323debdab6be0b9646680a234455", "keyword": "timeToEmpty Solid::Ifaces::Battery::timeToEmpty Solid::Ifaces::Battery", "text": "time until the battery is empty 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::timeToFull", "url": "classSolid_1_1Ifaces_1_1Battery.html#a6b5f66e222412357b77e0f6fbf7a3562", "keyword": "timeToFull Solid::Ifaces::Battery::timeToFull Solid::Ifaces::Battery", "text": "time until the battery is full 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::type", "url": "classSolid_1_1Ifaces_1_1Battery.html#a711f8f2f41db9204fc6ffff4419eb6ea", "keyword": "type Solid::Ifaces::Battery::type Solid::Ifaces::Battery", "text": "the type of device holding this battery Solid::Battery::BatteryType"}, {"type": "function", "name": "Solid::Ifaces::Battery::voltage", "url": "classSolid_1_1Ifaces_1_1Battery.html#aa6056ab7c3a0c5e06329821e062b86a1", "keyword": "voltage Solid::Ifaces::Battery::voltage Solid::Ifaces::Battery", "text": "voltage in Volts"}, {"type": "function", "name": "Solid::Ifaces::DeviceInterface::~DeviceInterface", "url": "classSolid_1_1Ifaces_1_1DeviceInterface.html#a0f5049ddaf4abd13dcd7f34bb5dd092d", "keyword": "Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface Solid::Ifaces::DeviceInterface::~DeviceInterface Solid::Ifaces::DeviceInterface", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Battery::capacityChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a06d98f1f72326cb130d69bde4bf9763e", "keyword": "capacityChanged Solid::Ifaces::Battery::capacityChanged Solid::Ifaces::Battery", "text": "value the new capacity of the battery udi the UDI of the battery with the new capacity 4.11"}, {"type": "function", "name": "Solid::Ifaces::Battery::chargePercentChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a6373596d3e7e15194782d5eec9ab5572", "keyword": "chargePercentChanged Solid::Ifaces::Battery::chargePercentChanged Solid::Ifaces::Battery", "text": "value the new charge percent value of the battery udi the UDI of the battery with the new charge percent"}, {"type": "function", "name": "Solid::Ifaces::Battery::chargeStateChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a52555a5191e3fb6e26c93967671da557", "keyword": "chargeStateChanged Solid::Ifaces::Battery::chargeStateChanged Solid::Ifaces::Battery", "text": "newState the new charge state of the battery it s one of the type Solid::Battery::ChargeState Solid::Battery::ChargeState udi the UDI of the battery with the new charge state"}, {"type": "function", "name": "Solid::Ifaces::Battery::energyChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a6ea10adfb3f54296d1c0c594e9f358c5", "keyword": "energyChanged Solid::Ifaces::Battery::energyChanged Solid::Ifaces::Battery", "text": "energy the new energy value of the battery udi the UDI of the battery with the new energy value"}, {"type": "function", "name": "Solid::Ifaces::Battery::energyFullChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a39b342977910e6c8b30a4e85aa8762b6", "keyword": "energyFullChanged Solid::Ifaces::Battery::energyFullChanged Solid::Ifaces::Battery", "text": "energy the new energy full value of the battery udi the UDI of the battery with the new energy full value"}, {"type": "function", "name": "Solid::Ifaces::Battery::energyFullDesignChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a27543e3e757b80fea68f03990c666ad3", "keyword": "energyFullDesignChanged Solid::Ifaces::Battery::energyFullDesignChanged Solid::Ifaces::Battery", "text": "energy the new energy full design value of the battery udi the UDI of the battery with the new energy full design value"}, {"type": "function", "name": "Solid::Ifaces::Battery::energyRateChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#ad53e4efd61bba64b9b6516d430cb14c1", "keyword": "energyRateChanged Solid::Ifaces::Battery::energyRateChanged Solid::Ifaces::Battery", "text": "If positive the source is being discharged if negative it s being charged energyRate the new energy rate value of the battery udi the UDI of the battery with the new charge percent"}, {"type": "function", "name": "Solid::Ifaces::Battery::powerSupplyStateChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a5524f81e69127fe8e8bf3e43b88a881c", "keyword": "powerSupplyStateChanged Solid::Ifaces::Battery::powerSupplyStateChanged Solid::Ifaces::Battery", "text": "newState the new power supply state type is boolean udi the UDI of the battery with the new power supply state 4.11"}, {"type": "function", "name": "Solid::Ifaces::Battery::presentStateChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#af08f3508065faed61df46fe1e52b7ade", "keyword": "presentStateChanged Solid::Ifaces::Battery::presentStateChanged Solid::Ifaces::Battery", "text": "newState the new plugging state of the battery type is boolean udi the UDI of the battery with thew new plugging state"}, {"type": "function", "name": "Solid::Ifaces::Battery::remainingTimeChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a61ce355ae3d9c52a25b22cdb149cf586", "keyword": "remainingTimeChanged Solid::Ifaces::Battery::remainingTimeChanged Solid::Ifaces::Battery", "text": "time the new remaining time udi the UDI of the battery with the new remaining time 5.8"}, {"type": "function", "name": "Solid::Ifaces::Battery::temperatureChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a55ed977c9be195fde73df297149e9f64", "keyword": "temperatureChanged Solid::Ifaces::Battery::temperatureChanged Solid::Ifaces::Battery", "text": "temperature the new temperature of the battery in degrees Celsius udi the UDI of the battery with the new temperature 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::timeToEmptyChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#ad55dbdcacbc78061b7c50f13773ee857", "keyword": "timeToEmptyChanged Solid::Ifaces::Battery::timeToEmptyChanged Solid::Ifaces::Battery", "text": "time the new remaining time udi the UDI of the battery with the new remaining time 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::timeToFullChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a20581834856cf3611316f152e220d095", "keyword": "timeToFullChanged Solid::Ifaces::Battery::timeToFullChanged Solid::Ifaces::Battery", "text": "time the new remaining time udi the UDI of the battery with the new remaining time 5.0"}, {"type": "function", "name": "Solid::Ifaces::Battery::voltageChanged", "url": "classSolid_1_1Ifaces_1_1Battery.html#a2ab85e79f8455c5ef0366e6b6bab6768", "keyword": "voltageChanged Solid::Ifaces::Battery::voltageChanged Solid::Ifaces::Battery", "text": "voltage the new voltage of the cell udi the UDI of the battery with the new voltage 5.0"}, {"type": "class", "name": "Solid::Ifaces::Block", "url": "classSolid_1_1Ifaces_1_1Block.html", "keyword": "Block", "text": "A block device is an adressable device such as drive or partition It is possible to interact with such a device using a special file in the system"}, {"type": "function", "name": "Solid::Ifaces::Block::~Block", "url": "classSolid_1_1Ifaces_1_1Block.html#a0cdcf6b84b85643edcfce1fd261aa76a", "keyword": "Solid::Ifaces::Block::~Block Solid::Ifaces::Block Solid::Ifaces::Block::~Block Solid::Ifaces::Block Solid::Ifaces::Block::~Block Solid::Ifaces::Block Solid::Ifaces::Block::~Block Solid::Ifaces::Block Solid::Ifaces::Block::~Block Solid::Ifaces::Block", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Block::device", "url": "classSolid_1_1Ifaces_1_1Block.html#a5718d36fc8a166c9fa63df4102e27184", "keyword": "device Solid::Ifaces::Block::device Solid::Ifaces::Block device Solid::Ifaces::Block::device Solid::Ifaces::Block device Solid::Ifaces::Block::device Solid::Ifaces::Block device Solid::Ifaces::Block::device Solid::Ifaces::Block device Solid::Ifaces::Block::device Solid::Ifaces::Block", "text": "the absolute path of the special file to interact with the device"}, {"type": "function", "name": "Solid::Ifaces::Block::deviceMajor", "url": "classSolid_1_1Ifaces_1_1Block.html#aea39706399af2f3f00a6068e68d32eff", "keyword": "deviceMajor Solid::Ifaces::Block::deviceMajor Solid::Ifaces::Block deviceMajor Solid::Ifaces::Block::deviceMajor Solid::Ifaces::Block deviceMajor Solid::Ifaces::Block::deviceMajor Solid::Ifaces::Block deviceMajor Solid::Ifaces::Block::deviceMajor Solid::Ifaces::Block deviceMajor Solid::Ifaces::Block::deviceMajor Solid::Ifaces::Block", "text": "the device major number"}, {"type": "function", "name": "Solid::Ifaces::Block::deviceMinor", "url": "classSolid_1_1Ifaces_1_1Block.html#a7e9ffebebe1ea9b51726dae0ca7bf6ab", "keyword": "deviceMinor Solid::Ifaces::Block::deviceMinor Solid::Ifaces::Block deviceMinor Solid::Ifaces::Block::deviceMinor Solid::Ifaces::Block deviceMinor Solid::Ifaces::Block::deviceMinor Solid::Ifaces::Block deviceMinor Solid::Ifaces::Block::deviceMinor Solid::Ifaces::Block deviceMinor Solid::Ifaces::Block::deviceMinor Solid::Ifaces::Block", "text": "the device minor number"}, {"type": "class", "name": "Solid::Ifaces::Camera", "url": "classSolid_1_1Ifaces_1_1Camera.html", "keyword": "Camera", "text": "A digital camera is a device used to transform images into data Nowaday most digital cameras are multifunctional and able to take photographs video or sound On the system side they are a particular type of device holding data the access method can be different from the typical storage device hence why it s a separate device interface"}, {"type": "function", "name": "Solid::Ifaces::Camera::~Camera", "url": "classSolid_1_1Ifaces_1_1Camera.html#a3f9e3d338f1533f9c5bc8c89ca0ccd42", "keyword": "Solid::Ifaces::Camera::~Camera Solid::Ifaces::Camera", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Camera::driverHandle", "url": "classSolid_1_1Ifaces_1_1Camera.html#a4d8524275f24da1c3fa86817d44b05fe", "keyword": "driverHandle Solid::Ifaces::Camera::driverHandle Solid::Ifaces::Camera", "text": "For example for the driver it will return a list of the form vendor_id product_id the driver specific data"}, {"type": "function", "name": "Solid::Ifaces::Camera::supportedDrivers", "url": "classSolid_1_1Ifaces_1_1Camera.html#ac3c8a21356b316afa7e909516767dc32", "keyword": "supportedDrivers Solid::Ifaces::Camera::supportedDrivers Solid::Ifaces::Camera", "text": "protocol The protocol to get drivers for a list of known device drivers that can handle this device"}, {"type": "function", "name": "Solid::Ifaces::Camera::supportedProtocols", "url": "classSolid_1_1Ifaces_1_1Camera.html#a43e235b61118c026c5144a9b1d9c3b4a", "keyword": "supportedProtocols Solid::Ifaces::Camera::supportedProtocols Solid::Ifaces::Camera", "text": "This list may be dependent on installed device driver libraries a list of known protocols this device can speak"}, {"type": "class", "name": "Solid::Ifaces::Device", "url": "classSolid_1_1Ifaces_1_1Device.html", "keyword": "Device", "text": "Backends will have to implement it to gather and modify data in the underlying system Each device has a set of key/values pair describing its properties It has also a list of interfaces describing what the device actually is a cdrom drive a portable media player etc Kevin Ottens"}, {"type": "function", "name": "Solid::Ifaces::Device::Device", "url": "classSolid_1_1Ifaces_1_1Device.html#a4bf114657a5c26369f0fb1f34e025215", "keyword": "Device Solid::Ifaces::Device::Device Solid::Ifaces::Device", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Device::~Device", "url": "classSolid_1_1Ifaces_1_1Device.html#a3c7b88bde52493e8ca308870436fb2c3", "keyword": "Solid::Ifaces::Device::~Device Solid::Ifaces::Device", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Device::broadcastActionDone", "url": "classSolid_1_1Ifaces_1_1Device.html#a5fcafd2cee883f23919b34ef7dc4fa75", "keyword": "broadcastActionDone Solid::Ifaces::Device::broadcastActionDone Solid::Ifaces::Device", "text": "actionName name of the action which just completed error error code if the action failed errorString message describing a potential error"}, {"type": "function", "name": "Solid::Ifaces::Device::broadcastActionRequested", "url": "classSolid_1_1Ifaces_1_1Device.html#a3644245ca0b87335cc5b7680755f2bce", "keyword": "broadcastActionRequested Solid::Ifaces::Device::broadcastActionRequested Solid::Ifaces::Device", "text": "actionName name of the action which just completed"}, {"type": "function", "name": "Solid::Ifaces::Device::createDeviceInterface", "url": "classSolid_1_1Ifaces_1_1Device.html#ad471412f986ff6ef81cb1d2d4a02ef3a", "keyword": "createDeviceInterface Solid::Ifaces::Device::createDeviceInterface Solid::Ifaces::Device", "text": "type the device interface type a pointer to the device interface if supported by the device 0 otherwise"}, {"type": "function", "name": "Solid::Ifaces::Device::description", "url": "classSolid_1_1Ifaces_1_1Device.html#a40fe0d3272ace347b89b3a8a961c36a4", "keyword": "description Solid::Ifaces::Device::description Solid::Ifaces::Device", "text": "the description"}, {"type": "function", "name": "Solid::Ifaces::Device::emblems", "url": "classSolid_1_1Ifaces_1_1Device.html#a6bef4d4f56d499fa56a6c7cec93f4cfb", "keyword": "emblems Solid::Ifaces::Device::emblems Solid::Ifaces::Device", "text": "The naming follows the freedesktop.org specification the emblem names"}, {"type": "function", "name": "Solid::Ifaces::Device::icon", "url": "classSolid_1_1Ifaces_1_1Device.html#ad76d5750dd8a8e0721bf4bb845c662ff", "keyword": "icon Solid::Ifaces::Device::icon Solid::Ifaces::Device", "text": "The naming follows the freedesktop.org specification the icon name"}, {"type": "function", "name": "Solid::Ifaces::Device::parentUdi", "url": "classSolid_1_1Ifaces_1_1Device.html#a7815343f4b35606a88a91f2012f3ec46", "keyword": "parentUdi Solid::Ifaces::Device::parentUdi Solid::Ifaces::Device", "text": "the Universal Device Identifier of the parent device"}, {"type": "function", "name": "Solid::Ifaces::Device::product", "url": "classSolid_1_1Ifaces_1_1Device.html#a6cb9034c4b70501f93c9cac29d12385a", "keyword": "product Solid::Ifaces::Device::product Solid::Ifaces::Device", "text": "the product name"}, {"type": "function", "name": "Solid::Ifaces::Device::queryDeviceInterface", "url": "classSolid_1_1Ifaces_1_1Device.html#a130d6a2f73a633d3dffd098b10d6da13", "keyword": "queryDeviceInterface Solid::Ifaces::Device::queryDeviceInterface Solid::Ifaces::Device", "text": "type the device interface type true if the device interface is provided by this device false otherwise"}, {"type": "function", "name": "Solid::Ifaces::Device::registerAction", "url": "classSolid_1_1Ifaces_1_1Device.html#a9de5a5e50495d0ddab1924957a942723", "keyword": "registerAction Solid::Ifaces::Device::registerAction Solid::Ifaces::Device", "text": "Each time the same device in another process broadcast the begin or the end of such action the corresponding slots will be called in the current process actionName name of the action to register dest the object receiving the messages when the action begins and ends requestSlot the slot processing the message when the action begins doneSlot the slot processing the message when the action ends"}, {"type": "function", "name": "Solid::Ifaces::Device::udi", "url": "classSolid_1_1Ifaces_1_1Device.html#ad7dfff557f24a7fd8a09fae946fe9c54", "keyword": "udi Solid::Ifaces::Device::udi Solid::Ifaces::Device", "text": "This identifier is unique for each device in the system the Universal Device Identifier of the current device"}, {"type": "function", "name": "Solid::Ifaces::Device::vendor", "url": "classSolid_1_1Ifaces_1_1Device.html#a7cb7664051ccbced46076f3289c5a77a", "keyword": "vendor Solid::Ifaces::Device::vendor Solid::Ifaces::Device", "text": "the vendor name"}, {"type": "class", "name": "Solid::Ifaces::DeviceInterface", "url": "classSolid_1_1Ifaces_1_1DeviceInterface.html", "keyword": "DeviceInterface", "text": "A device interface describes what a device can do A device generally has a set of device interfaces Solid::Ifaces::AbstractDeviceInterface"}, {"type": "class", "name": "Solid::Ifaces::DeviceManager", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html", "keyword": "DeviceManager", "text": "A device manager allows to query the underlying platform to discover the available devices It has also the responsibility to notify when a device appears or disappears"}, {"type": "function", "name": "Solid::Ifaces::DeviceManager::allDevices", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#a12161bd16c91b15a8c7666b1187fa104", "keyword": "allDevices Solid::Ifaces::DeviceManager::allDevices Solid::Ifaces::DeviceManager", "text": "This identifier is unique for each device in the system the UDIs of all the devices in the system"}, {"type": "function", "name": "Solid::Ifaces::DeviceManager::createDevice", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#a58403e5d7c3a6f253c9c001cffd73590", "keyword": "createDevice Solid::Ifaces::DeviceManager::createDevice Solid::Ifaces::DeviceManager", "text": "udi the identifier of the device instantiated a new Device object if there s a device having the given UDI 0 otherwise"}, {"type": "function", "name": "Solid::Ifaces::DeviceManager::devicesFromQuery", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#acc4b84abc82c8acf3348aade1c1d23de", "keyword": "devicesFromQuery Solid::Ifaces::DeviceManager::devicesFromQuery Solid::Ifaces::DeviceManager", "text": "parentUdi UDI of the parent of the devices we re searching for or QString() if there s no constraint on the parent type DeviceInterface type available on the devices we re looking for or DeviceInterface::Unknown if there s no constraint on the device interfaces the UDIs of all the devices having the given parent and device interface"}, {"type": "function", "name": "Solid::Ifaces::DeviceManager::supportedInterfaces", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#afc9cf9e8078da1cbeff7745c94864c8e", "keyword": "supportedInterfaces Solid::Ifaces::DeviceManager::supportedInterfaces Solid::Ifaces::DeviceManager", "text": ""}, {"type": "function", "name": "Solid::Ifaces::DeviceManager::udiPrefix", "url": "classSolid_1_1Ifaces_1_1DeviceManager.html#a0036dd8c051023f5ace5512993efbf11", "keyword": "udiPrefix Solid::Ifaces::DeviceManager::udiPrefix Solid::Ifaces::DeviceManager", "text": ""}, {"type": "class", "name": "Solid::Ifaces::GenericInterface", "url": "classSolid_1_1Ifaces_1_1GenericInterface.html", "keyword": "GenericInterface", "text": "It exposes a set of properties and is organized a a key/value set Warning Using this class could expose some backend specific details and lead to non portable code Use it at your own risk or during transitional phases when the provided device interfaces don t provide the necessary methods"}, {"type": "function", "name": "Solid::Ifaces::GenericInterface::~GenericInterface", "url": "classSolid_1_1Ifaces_1_1GenericInterface.html#af2ecc2b864bf95dc5ae65121f0efe0e6", "keyword": "Solid::Ifaces::GenericInterface::~GenericInterface Solid::Ifaces::GenericInterface", "text": ""}, {"type": "function", "name": "Solid::Ifaces::GenericInterface::allProperties", "url": "classSolid_1_1Ifaces_1_1GenericInterface.html#a960c00385baf9c0a70eff2738c8b11b3", "keyword": "allProperties Solid::Ifaces::GenericInterface::allProperties Solid::Ifaces::GenericInterface", "text": "all properties in a map"}, {"type": "function", "name": "Solid::Ifaces::GenericInterface::property", "url": "classSolid_1_1Ifaces_1_1GenericInterface.html#a0ae20721eb6c154f5099faa7dcdfd5da", "keyword": "property Solid::Ifaces::GenericInterface::property Solid::Ifaces::GenericInterface", "text": "key the property name the property value or QVariant() if the property doesn t exist"}, {"type": "function", "name": "Solid::Ifaces::GenericInterface::propertyExists", "url": "classSolid_1_1Ifaces_1_1GenericInterface.html#aca257532268916251733fe8930005c0d", "keyword": "propertyExists Solid::Ifaces::GenericInterface::propertyExists Solid::Ifaces::GenericInterface", "text": "key the property name true if the property exists in this device false otherwise"}, {"type": "function", "name": "Solid::Ifaces::GenericInterface::conditionRaised", "url": "classSolid_1_1Ifaces_1_1GenericInterface.html#a2b396fd5db14f8845122d5553c9440c1", "keyword": "conditionRaised Solid::Ifaces::GenericInterface::conditionRaised Solid::Ifaces::GenericInterface", "text": "For example when a button is pressed condition the condition name reason a message explaining why the condition has been raised"}, {"type": "function", "name": "Solid::Ifaces::GenericInterface::propertyChanged", "url": "classSolid_1_1Ifaces_1_1GenericInterface.html#a17e94fd5957a39e5a7d0d50adca42cfb", "keyword": "propertyChanged Solid::Ifaces::GenericInterface::propertyChanged Solid::Ifaces::GenericInterface", "text": "changes the map describing the property changes that occurred in the device keys are property name and values describe the kind of change done on the device property added/removed/modified it s one of the type Solid::Device::PropertyChange"}, {"type": "class", "name": "Solid::Ifaces::NetworkShare", "url": "classSolid_1_1Ifaces_1_1NetworkShare.html", "keyword": "NetworkShare", "text": "a NetworkShare interface is used to determine the type of network access"}, {"type": "function", "name": "Solid::Ifaces::NetworkShare::~NetworkShare", "url": "classSolid_1_1Ifaces_1_1NetworkShare.html#a89f0e35bf93df88f0d4ad0ec8404a5e7", "keyword": "Solid::Ifaces::NetworkShare::~NetworkShare Solid::Ifaces::NetworkShare", "text": ""}, {"type": "function", "name": "Solid::Ifaces::NetworkShare::type", "url": "classSolid_1_1Ifaces_1_1NetworkShare.html#af4f0173aa7ecae137405c6faa102a082", "keyword": "type Solid::Ifaces::NetworkShare::type Solid::Ifaces::NetworkShare", "text": "the type of network"}, {"type": "function", "name": "Solid::Ifaces::NetworkShare::url", "url": "classSolid_1_1Ifaces_1_1NetworkShare.html#ab4f81f46611bf5fd373fc68e43981c23", "keyword": "url Solid::Ifaces::NetworkShare::url Solid::Ifaces::NetworkShare", "text": "the url of network share"}, {"type": "class", "name": "Solid::Ifaces::OpticalDisc", "url": "classSolid_1_1Ifaces_1_1OpticalDisc.html", "keyword": "OpticalDisc", "text": "An optical disc is a volume that can be inserted in a cdrom drive"}, {"type": "function", "name": "Solid::Ifaces::OpticalDisc::~OpticalDisc", "url": "classSolid_1_1Ifaces_1_1OpticalDisc.html#ab5cbcc54ef95e04105a035807db0b00f", "keyword": "Solid::Ifaces::OpticalDisc::~OpticalDisc Solid::Ifaces::OpticalDisc", "text": ""}, {"type": "function", "name": "Solid::Ifaces::OpticalDisc::availableContent", "url": "classSolid_1_1Ifaces_1_1OpticalDisc.html#a51b28a172b8f4745ecb14a8b6b26207f", "keyword": "availableContent Solid::Ifaces::OpticalDisc::availableContent Solid::Ifaces::OpticalDisc", "text": "the flag set indicating the available contents"}, {"type": "function", "name": "Solid::Ifaces::OpticalDisc::capacity", "url": "classSolid_1_1Ifaces_1_1OpticalDisc.html#aaf2e714aec1a9f716dfe5e6f1b85cf81", "keyword": "capacity Solid::Ifaces::OpticalDisc::capacity Solid::Ifaces::OpticalDisc", "text": "the capacity of the disc in bytes"}, {"type": "function", "name": "Solid::Ifaces::OpticalDisc::discType", "url": "classSolid_1_1Ifaces_1_1OpticalDisc.html#aa4bad9b0a82310c1feb037db8e28e71b", "keyword": "discType Solid::Ifaces::OpticalDisc::discType Solid::Ifaces::OpticalDisc", "text": "the disc type"}, {"type": "function", "name": "Solid::Ifaces::OpticalDisc::isAppendable", "url": "classSolid_1_1Ifaces_1_1OpticalDisc.html#ab7424e5143d3be83bd967677cbc5ba16", "keyword": "isAppendable Solid::Ifaces::OpticalDisc::isAppendable Solid::Ifaces::OpticalDisc", "text": "true if the disc is appendable false otherwise"}, {"type": "function", "name": "Solid::Ifaces::OpticalDisc::isBlank", "url": "classSolid_1_1Ifaces_1_1OpticalDisc.html#a1380ba07738bda1a02c589103255f428", "keyword": "isBlank Solid::Ifaces::OpticalDisc::isBlank Solid::Ifaces::OpticalDisc", "text": "true if the disc is blank false otherwise"}, {"type": "function", "name": "Solid::Ifaces::OpticalDisc::isRewritable", "url": "classSolid_1_1Ifaces_1_1OpticalDisc.html#a3c3f5a8524150011be92150d2423ea17", "keyword": "isRewritable Solid::Ifaces::OpticalDisc::isRewritable Solid::Ifaces::OpticalDisc", "text": "A disc is rewritable if you can write on it several times true if the disc is rewritable false otherwise"}, {"type": "function", "name": "Solid::Ifaces::StorageVolume::~StorageVolume", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html#aa9bf00d9be8053840ce003e9c495fea4", "keyword": "Solid::Ifaces::StorageVolume::~StorageVolume Solid::Ifaces::StorageVolume Solid::Ifaces::StorageVolume::~StorageVolume Solid::Ifaces::StorageVolume", "text": ""}, {"type": "function", "name": "Solid::Ifaces::StorageVolume::encryptedContainerUdi", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html#a3e20bc8eb6596760f24a4393f4f73844", "keyword": "encryptedContainerUdi Solid::Ifaces::StorageVolume::encryptedContainerUdi Solid::Ifaces::StorageVolume encryptedContainerUdi Solid::Ifaces::StorageVolume::encryptedContainerUdi Solid::Ifaces::StorageVolume", "text": "the encrypted volume UDI containing the current volume if appliable an empty string otherwise"}, {"type": "function", "name": "Solid::Ifaces::StorageVolume::fsType", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html#a239789d14e61e3705f413450b072aae0", "keyword": "fsType Solid::Ifaces::StorageVolume::fsType Solid::Ifaces::StorageVolume fsType Solid::Ifaces::StorageVolume::fsType Solid::Ifaces::StorageVolume", "text": "the filesystem type if applicable QString() otherwise"}, {"type": "function", "name": "Solid::Ifaces::StorageVolume::isIgnored", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html#abf9dd7e3759ed0f144f5ff76ae7a5bc4", "keyword": "isIgnored Solid::Ifaces::StorageVolume::isIgnored Solid::Ifaces::StorageVolume isIgnored Solid::Ifaces::StorageVolume::isIgnored Solid::Ifaces::StorageVolume", "text": "If it should be ignored it generally means that it should be invisible to the user It s useful for firmware partitions or OS reinstall partitions on some systems true if the volume should be ignored"}, {"type": "function", "name": "Solid::Ifaces::StorageVolume::label", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html#a11040636405ea5d0de77dbb061cced8c", "keyword": "label Solid::Ifaces::StorageVolume::label Solid::Ifaces::StorageVolume label Solid::Ifaces::StorageVolume::label Solid::Ifaces::StorageVolume", "text": "the volume lavel if available QString() otherwise"}, {"type": "function", "name": "Solid::Ifaces::StorageVolume::size", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html#afb960c0dd0fdf436380bb93f4578d348", "keyword": "size Solid::Ifaces::StorageVolume::size Solid::Ifaces::StorageVolume size Solid::Ifaces::StorageVolume::size Solid::Ifaces::StorageVolume", "text": "the size of this volume"}, {"type": "function", "name": "Solid::Ifaces::StorageVolume::usage", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html#a809aa18b8d3b5f9ec6cdc296662793a2", "keyword": "usage Solid::Ifaces::StorageVolume::usage Solid::Ifaces::StorageVolume usage Solid::Ifaces::StorageVolume::usage Solid::Ifaces::StorageVolume", "text": "the usage type Solid::StorageVolume::UsageType"}, {"type": "function", "name": "Solid::Ifaces::StorageVolume::uuid", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html#a3a9989da25c65e907de33ae683b34bb1", "keyword": "uuid Solid::Ifaces::StorageVolume::uuid Solid::Ifaces::StorageVolume uuid Solid::Ifaces::StorageVolume::uuid Solid::Ifaces::StorageVolume", "text": "You can generally assume that this identifier is unique with reasonable confidence Except if the volume UUID has been forged to intentionally provoke a collision the probability to have two volumes having the same UUID is low the Universal Unique IDentifier if available QString() otherwise"}, {"type": "class", "name": "Solid::Ifaces::OpticalDrive", "url": "classSolid_1_1Ifaces_1_1OpticalDrive.html", "keyword": "OpticalDrive", "text": "A Cdrom is a storage that can handle optical discs"}, {"type": "function", "name": "Solid::Ifaces::OpticalDrive::~OpticalDrive", "url": "classSolid_1_1Ifaces_1_1OpticalDrive.html#a87d88b414c8e0ffbb8ddbeb631a7e38c", "keyword": "Solid::Ifaces::OpticalDrive::~OpticalDrive Solid::Ifaces::OpticalDrive", "text": ""}, {"type": "function", "name": "Solid::Ifaces::OpticalDrive::eject", "url": "classSolid_1_1Ifaces_1_1OpticalDrive.html#acc138d21480f9f11fd1849c566d7ca9b", "keyword": "eject Solid::Ifaces::OpticalDrive::eject Solid::Ifaces::OpticalDrive", "text": "If this drive is empty but has a tray it ll be opened"}, {"type": "function", "name": "Solid::Ifaces::OpticalDrive::readSpeed", "url": "classSolid_1_1Ifaces_1_1OpticalDrive.html#a7f4df8d2cca8d5be03e709bc9cbb191c", "keyword": "readSpeed Solid::Ifaces::OpticalDrive::readSpeed Solid::Ifaces::OpticalDrive", "text": "the maximum read speed"}, {"type": "function", "name": "Solid::Ifaces::OpticalDrive::supportedMedia", "url": "classSolid_1_1Ifaces_1_1OpticalDrive.html#a291fd165a77275fb238b23930ff56bf0", "keyword": "supportedMedia Solid::Ifaces::OpticalDrive::supportedMedia Solid::Ifaces::OpticalDrive", "text": "the flag set indicating the supported medium types"}, {"type": "function", "name": "Solid::Ifaces::OpticalDrive::writeSpeed", "url": "classSolid_1_1Ifaces_1_1OpticalDrive.html#a64350faab2fe2245dc27fc4f9c0ae30a", "keyword": "writeSpeed Solid::Ifaces::OpticalDrive::writeSpeed Solid::Ifaces::OpticalDrive", "text": "the maximum write speed"}, {"type": "function", "name": "Solid::Ifaces::OpticalDrive::writeSpeeds", "url": "classSolid_1_1Ifaces_1_1OpticalDrive.html#a9571b5d8dfb62ec7a290bbbae0024f13", "keyword": "writeSpeeds Solid::Ifaces::OpticalDrive::writeSpeeds Solid::Ifaces::OpticalDrive", "text": "the list of supported write speeds"}, {"type": "function", "name": "Solid::Ifaces::StorageDrive::~StorageDrive", "url": "classSolid_1_1Ifaces_1_1StorageDrive.html#a7d7eed1009aac4ff99650d45ca3f233d", "keyword": "Solid::Ifaces::StorageDrive::~StorageDrive Solid::Ifaces::StorageDrive Solid::Ifaces::StorageDrive::~StorageDrive Solid::Ifaces::StorageDrive", "text": ""}, {"type": "function", "name": "Solid::Ifaces::StorageDrive::bus", "url": "classSolid_1_1Ifaces_1_1StorageDrive.html#ab161dcd6d22da1987c68b2e0842e8ee7", "keyword": "bus Solid::Ifaces::StorageDrive::bus Solid::Ifaces::StorageDrive bus Solid::Ifaces::StorageDrive::bus Solid::Ifaces::StorageDrive", "text": "the bus type Solid::StorageDrive::Bus"}, {"type": "function", "name": "Solid::Ifaces::StorageDrive::driveType", "url": "classSolid_1_1Ifaces_1_1StorageDrive.html#a9758b6241fc7595bea5b02d56d4e3125", "keyword": "driveType Solid::Ifaces::StorageDrive::driveType Solid::Ifaces::StorageDrive driveType Solid::Ifaces::StorageDrive::driveType Solid::Ifaces::StorageDrive", "text": "the drive type Solid::StorageDrive::DriveType"}, {"type": "function", "name": "Solid::Ifaces::StorageDrive::isHotpluggable", "url": "classSolid_1_1Ifaces_1_1StorageDrive.html#ac3ed5fe8e5f4458f6740248d37960781", "keyword": "isHotpluggable Solid::Ifaces::StorageDrive::isHotpluggable Solid::Ifaces::StorageDrive isHotpluggable Solid::Ifaces::StorageDrive::isHotpluggable Solid::Ifaces::StorageDrive", "text": "true if this storage supports hotplug false otherwise"}, {"type": "function", "name": "Solid::Ifaces::StorageDrive::isRemovable", "url": "classSolid_1_1Ifaces_1_1StorageDrive.html#a6df90ffe662aae79ed4c3ec3ba87c4ea", "keyword": "isRemovable Solid::Ifaces::StorageDrive::isRemovable Solid::Ifaces::StorageDrive isRemovable Solid::Ifaces::StorageDrive::isRemovable Solid::Ifaces::StorageDrive", "text": "For example memory card can be removed from the drive by the user while partitions can t be removed from hard disks true if media can be removed false otherwise"}, {"type": "function", "name": "Solid::Ifaces::StorageDrive::size", "url": "classSolid_1_1Ifaces_1_1StorageDrive.html#acf08fb19708206168c8402a4382d56cb", "keyword": "size Solid::Ifaces::StorageDrive::size Solid::Ifaces::StorageDrive size Solid::Ifaces::StorageDrive::size Solid::Ifaces::StorageDrive", "text": "the size of this drive"}, {"type": "function", "name": "Solid::Ifaces::OpticalDrive::ejectPressed", "url": "classSolid_1_1Ifaces_1_1OpticalDrive.html#a94d4fa7d0f85a4b999fca385bdd12915", "keyword": "ejectPressed Solid::Ifaces::OpticalDrive::ejectPressed Solid::Ifaces::OpticalDrive", "text": "Please note that some broken drives doesn t report this event udi the UDI of the drive"}, {"type": "class", "name": "Solid::Ifaces::PortableMediaPlayer", "url": "classSolid_1_1Ifaces_1_1PortableMediaPlayer.html", "keyword": "PortableMediaPlayer", "text": "A portable media player is a portable device able to play multimedia files Some of them have even recording capabilities Davide Bettio"}, {"type": "function", "name": "Solid::Ifaces::PortableMediaPlayer::~PortableMediaPlayer", "url": "classSolid_1_1Ifaces_1_1PortableMediaPlayer.html#a13baf125e63d24685f7c166f135d2a85", "keyword": "Solid::Ifaces::PortableMediaPlayer::~PortableMediaPlayer Solid::Ifaces::PortableMediaPlayer", "text": ""}, {"type": "function", "name": "Solid::Ifaces::PortableMediaPlayer::driverHandle", "url": "classSolid_1_1Ifaces_1_1PortableMediaPlayer.html#ac7833bc860f815adfd5cb7ab744f21da", "keyword": "driverHandle Solid::Ifaces::PortableMediaPlayer::driverHandle Solid::Ifaces::PortableMediaPlayer", "text": "For example for the driver it will return the serial number of the device and driver will return 40-digit device UUID the driver specific data"}, {"type": "function", "name": "Solid::Ifaces::PortableMediaPlayer::supportedDrivers", "url": "classSolid_1_1Ifaces_1_1PortableMediaPlayer.html#a60ca4dbced3de52021c82be0c63b65d3", "keyword": "supportedDrivers Solid::Ifaces::PortableMediaPlayer::supportedDrivers Solid::Ifaces::PortableMediaPlayer", "text": "Possible drivers usb device is talked to using USB This driver alone does not specify which particular USB service/protocol should be used usbmux device supports AFC Apple File Connection and usbmuxd daemon is ready on socket on UNIX and localhost 27015 port on Windows protocol The protocol to get drivers for Specify empty protocol to get drivers for all possible protocols a list of known device drivers that can handle this device"}, {"type": "function", "name": "Solid::Ifaces::PortableMediaPlayer::supportedProtocols", "url": "classSolid_1_1Ifaces_1_1PortableMediaPlayer.html#afa4b5df2f7710259202dfb5ceeeb40e8", "keyword": "supportedProtocols Solid::Ifaces::PortableMediaPlayer::supportedProtocols Solid::Ifaces::PortableMediaPlayer", "text": "This list may be dependent on installed device driver libraries Possible protocols storage filesystem-based device can browse and play media files stored on its volume iPod-like devices can have both storage and ipod protocol set you should use more specific ipod protocol in this case ipod iPod-like device where media files are stored on filesystem but these need an entry in device database in order to be playable mtp Media Transfer Protocol-compatible devices a list of known protocols this device can speak"}, {"type": "class", "name": "Solid::Ifaces::Processor", "url": "classSolid_1_1Ifaces_1_1Processor.html", "keyword": "Processor", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Processor::~Processor", "url": "classSolid_1_1Ifaces_1_1Processor.html#a61c8cdbdcb0784e15ae2068c112c0f96", "keyword": "Solid::Ifaces::Processor::~Processor Solid::Ifaces::Processor", "text": ""}, {"type": "function", "name": "Solid::Ifaces::Processor::canChangeFrequency", "url": "classSolid_1_1Ifaces_1_1Processor.html#ace1b6d51f07004fd87e37e66c5bf66ef", "keyword": "canChangeFrequency Solid::Ifaces::Processor::canChangeFrequency Solid::Ifaces::Processor", "text": "True if a processor is able to change its own CPU frequency generally for power management true if the processor can change CPU frequency false otherwise"}, {"type": "function", "name": "Solid::Ifaces::Processor::instructionSets", "url": "classSolid_1_1Ifaces_1_1Processor.html#af4c21a1fec0ff69e23283f45cd3d3fd6", "keyword": "instructionSets Solid::Ifaces::Processor::instructionSets Solid::Ifaces::Processor", "text": "the extensions supported by the CPU"}, {"type": "function", "name": "Solid::Ifaces::Processor::maxSpeed", "url": "classSolid_1_1Ifaces_1_1Processor.html#a6be89ffd9dcb56b586799ecaa1c64e75", "keyword": "maxSpeed Solid::Ifaces::Processor::maxSpeed Solid::Ifaces::Processor", "text": "the maximum speed in MHz"}, {"type": "function", "name": "Solid::Ifaces::Processor::number", "url": "classSolid_1_1Ifaces_1_1Processor.html#afdbcbc45e2ade2283eff14bbab07a8bf", "keyword": "number Solid::Ifaces::Processor::number Solid::Ifaces::Processor", "text": "the internal processor number in the system starting from zero"}, {"type": "class", "name": "Solid::Ifaces::StorageAccess", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html", "keyword": "StorageAccess", "text": "A volume is anything that can contain data partition optical disc memory card It s a particular kind of block device"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::~StorageAccess", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#a1279ea30bb2491e9b2b3a94866779643", "keyword": "Solid::Ifaces::StorageAccess::~StorageAccess Solid::Ifaces::StorageAccess", "text": ""}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::filePath", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#ae3d68c3fe674a865d42842a538632856", "keyword": "filePath Solid::Ifaces::StorageAccess::filePath Solid::Ifaces::StorageAccess", "text": "the absolute path to the mount point if the volume is mounted QString() otherwise"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::isAccessible", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#aceeb1f907d51849241e1e9d4ce9e9d1a", "keyword": "isAccessible Solid::Ifaces::StorageAccess::isAccessible Solid::Ifaces::StorageAccess", "text": "true if the volume is mounted"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::isIgnored", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#a0a9bcfda5c69ed25f05d749ced3a648a", "keyword": "isIgnored Solid::Ifaces::StorageAccess::isIgnored Solid::Ifaces::StorageAccess", "text": "If it should be ignored it generally means that it should be invisible to the user It s useful for firmware partitions or OS reinstall partitions on some systems true if the volume should be ignored"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::setup", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#afce0fc2aaa76df0ea57b8492445b8588", "keyword": "setup Solid::Ifaces::StorageAccess::setup Solid::Ifaces::StorageAccess", "text": "the job handling the operation"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::teardown", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#ad7201f86246296b65a4bf7d8d2bdc66e", "keyword": "teardown Solid::Ifaces::StorageAccess::teardown Solid::Ifaces::StorageAccess", "text": "the job handling the operation"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::accessibilityChanged", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#a3a37f7e29d4d0344059601c64bc282e1", "keyword": "accessibilityChanged Solid::Ifaces::StorageAccess::accessibilityChanged Solid::Ifaces::StorageAccess", "text": "newState true if the volume is mounted false otherwise udi the UDI of the volume"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::setupDone", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#acdff3a9c24196ffaa08f39bf5f315919", "keyword": "setupDone Solid::Ifaces::StorageAccess::setupDone Solid::Ifaces::StorageAccess", "text": "newState true if the volume is mounted false otherwise udi the UDI of the volume"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::setupRequested", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#a9042b3de25da017e9c30a3dca52f7dba", "keyword": "setupRequested Solid::Ifaces::StorageAccess::setupRequested Solid::Ifaces::StorageAccess", "text": "The signal might be spontaneous i.e it can be triggered by another process udi the UDI of the volume"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::teardownDone", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#ac46afff60cd04dd82fb9341a029f8e5b", "keyword": "teardownDone Solid::Ifaces::StorageAccess::teardownDone Solid::Ifaces::StorageAccess", "text": "newState true if the volume is mounted false otherwise udi the UDI of the volume"}, {"type": "function", "name": "Solid::Ifaces::StorageAccess::teardownRequested", "url": "classSolid_1_1Ifaces_1_1StorageAccess.html#a234e6fc7265255bca670782604cec8a0", "keyword": "teardownRequested Solid::Ifaces::StorageAccess::teardownRequested Solid::Ifaces::StorageAccess", "text": "The signal might be spontaneous i.e it can be triggered by another process udi the UDI of the volume"}, {"type": "class", "name": "Solid::Ifaces::StorageDrive", "url": "classSolid_1_1Ifaces_1_1StorageDrive.html", "keyword": "StorageDrive", "text": "A storage is anything that can contain a set of volumes card reader hard disk cdrom drive It s a particular kind of block device"}, {"type": "class", "name": "Solid::Ifaces::StorageVolume", "url": "classSolid_1_1Ifaces_1_1StorageVolume.html", "keyword": "StorageVolume", "text": "A volume is anything that can contain data partition optical disc memory card It s a particular kind of block device"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "Solid Desktop hardware abstraction Introduction Solid is a device integration framework It provides a way of querying and interacting with hardware independently of the underlying operating system It provides the following features for application developers Hardware Discovery Power Management Network Management Usage If you are using CMake you need to have or similar in your CMakeLists.txt file and you need to link to KF5::Solid See the documentation for the Solid namespace and the tutorials on TechBase There is also a Solid song"}]}