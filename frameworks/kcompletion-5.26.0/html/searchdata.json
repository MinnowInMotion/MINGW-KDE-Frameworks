{"name": "kcompletion-5.26.0", "fancyname": "KCompletion", "docfields": [{"type": "page", "name": "deprecated", "url": "deprecated.html", "keyword": null, "text": "Deprecated List Member KComboBox insertURL const QUrl url int index since 4.5 Member KComboBox setContextMenuEnabled bool showMenu since 4.5 use setContextMenuPolicy instead Member KComboBox setUrlDropsEnabled bool enable since 5.0 Use lineEdit() installEventFilter with a LineEditUrlDropEventFilter Member KCompletion slotMakeCompletion const QString string since 5.0 use makeCompletion() instead Member KCompletion slotNextMatch since 5.0 use nextMatch() instead Member KCompletion slotPreviousMatch since 5.0 use previousMatch() instead Member KCompletionBase getKeyBinding KeyBindingType item const since 5.0 use keyBinding instead Member KCompletionBase getKeyBindings const since 5.0 use keyBindingMap instead Member KCompletionBox sizeAndPosition since 5.0 use resizeAndReposition instead Member KLineEdit clickMessage const since 5.0 use QLineEdit::placeholderText instead Member KLineEdit isContextMenuEnabled const since 4.5 use contextMenuPolicy instead Member KLineEdit setClickMessage const QString msg since 5.0 use QLineEdit::setPlaceholderText instead Member KLineEdit setContextMenuEnabled bool showMenu since 4.5 use setContextMenuPolicy instead Member KLineEdit userTextChanged const QString since 4.5 You probably want to connect to textEdited() instead which is emitted whenever the text is actually changed by the user by typing or accepting autocompletion without side effects from suggested autocompletion either userTextChanged isn t needed anymore Member KSortableItem T Key index const use key()"}, {"type": "class", "name": "KComboBox", "url": "classKComboBox.html", "keyword": "KComboBox", "text": "This widget inherits from QComboBox and implements the following additional features a completion object that provides both automatic and manual text completion as well as text rotation configurable key bindings to activate these features a popup menu item that can be used to allow the user to change the text completion mode on the fly To support these new features KComboBox emits a few additional signals such as completion(const QString&) and textRotation(KeyBindingType) The completion signal can be connected to a slot that will assist the user in filling out the remaining text while the rotation signal can be used to traverse through all possible matches whenever text completion results in multiple matches Additionally the returnPressed() and returnPressed(const QString&) signals are emitted when the user presses the Enter/Return key KCombobox by default creates a completion object when you invoke the completionObject(bool) member function for the first time or explicitly use setCompletionObject(KCompletion*, bool) to assign your own completion object Additionally to make this widget more functional KComboBox will by default handle text rotation and completion events internally whenever a completion object is created through either one of the methods mentioned above If you do not need this functionality simply use KCompletionBase::setHandleSignals(bool) or alternatively set the boolean parameter in the setCompletionObject call to false Beware The completion object can be deleted on you especially if a call such as setEditable(false) is made Store the pointer at your own risk and consider using QPointer<KCompletion> The default key bindings for completion and rotation are determined from the global settings in KStandardShortcut These values however can be overridden locally by invoking KCompletionBase::setKeyBinding() The values can easily be reverted back to the default settings by calling useGlobalSettings() An alternate method would be to default individual key bindings by using setKeyBinding() with the default second argument A non-editable combo box only has one completion mode CompletionAuto Unlike an editable combo box the CompletionAuto mode works by matching any typed key with the first letter of entries in the combo box Please note that if you call setEditable(false) to change an editable combo box to a non-editable one the text completion object associated with the combo box will no longer exist unless you created the completion object yourself and assigned it to this widget or you called setAutoDeleteCompletionObject(false) In other words do not do the following A read-only KComboBox will have the same background color as a disabled KComboBox but its foreground color will be the one used for the editable mode This differs from QComboBox s implementation and is done to give visual distinction between the three different modes disabled read-only and editable Usage To enable the basic completion feature To use your own completion object Note that you have to either delete the allocated completion object when you don t need it anymore or call setAutoDeleteCompletionObject(true) Miscellaneous function calls KDE Combo Boxes one non-editable one editable with KUrlCompletion Dawit Alemayehu"}, {"type": "signal", "name": "KComboBox::aboutToShowContextMenu", "url": "classKComboBox.html#a0baa47d14aa71fd460e22d3fe0b13ad9", "keyword": "aboutToShowContextMenu KComboBox::aboutToShowContextMenu KComboBox aboutToShowContextMenu KComboBox::aboutToShowContextMenu KComboBox", "text": "The signal allows you to add your own entries into the context menu Note that you must not store the pointer to the QPopupMenu since it is created and deleted on demand Otherwise you can crash your app contextMenu the context menu about to be displayed"}, {"type": "signal", "name": "KComboBox::completion", "url": "classKComboBox.html#aba01e87084e255186af8e5b9d23c5ad9", "keyword": "completion KComboBox::completion KComboBox completion KComboBox::completion KComboBox", "text": "The argument is the current text being edited Note that this signal is not available when the widget is non-editable or the completion mode is set to CompletionNone"}, {"type": "signal", "name": "KComboBox::completionModeChanged", "url": "classKComboBox.html#a42f757eab9404fe7b0968cfd1901c9f0", "keyword": "completionModeChanged KComboBox::completionModeChanged KComboBox completionModeChanged KComboBox::completionModeChanged KComboBox", "text": ""}, {"type": "signal", "name": "KComboBox::returnPressed", "url": "classKComboBox.html#acf72efbbe3d2ce2de2a648cf71b8f5ac", "keyword": "returnPressed KComboBox::returnPressed KComboBox returnPressed KComboBox::returnPressed KComboBox", "text": "Note that this signal is only emitted when the widget is editable"}, {"type": "signal", "name": "KComboBox::returnPressed", "url": "classKComboBox.html#a016a019754037011cdf73a42651b9f3f", "keyword": "returnPressed KComboBox::returnPressed KComboBox returnPressed KComboBox::returnPressed KComboBox", "text": "The argument is the current text being edited This signal is just like returnPressed() except that it contains the current text as its argument Note that this signal is only emitted when the widget is editable"}, {"type": "signal", "name": "KComboBox::substringCompletion", "url": "classKComboBox.html#a056cb4bc158ae9688d78e067c17fecb0", "keyword": "substringCompletion KComboBox::substringCompletion KComboBox substringCompletion KComboBox::substringCompletion KComboBox", "text": ""}, {"type": "signal", "name": "KComboBox::textRotation", "url": "classKComboBox.html#a7d892aff1ad8f076ea6ab888550b8c48", "keyword": "textRotation KComboBox::textRotation KComboBox textRotation KComboBox::textRotation KComboBox", "text": "The argument indicates which key binding was pressed In this case this can be either one of four values PrevCompletionMatch NextCompletionMatch RotateUp or RotateDown Note that this signal is not emitted if the completion mode is set to CompletionNone KCompletionBase::setKeyBinding() for details"}, {"type": "slot", "name": "KComboBox::rotateText", "url": "classKComboBox.html#aebabebf3535c0cc7fbfd5704a47bb149", "keyword": "rotateText KComboBox::rotateText KComboBox rotateText KComboBox::rotateText KComboBox", "text": "Depending on the value of the argument this function either iterates through the history list of this widget or all the possible matches in whenever multiple matches result from a text completion request Note that the all-possible-match iteration will not work if there are no previous matches i.e no text has been completed and the shell history list rotation is only available if the insertion policy for this widget is set either QComobBox::AtTop or QComboBox::AtBottom For other insertion modes whatever has been typed by the user when the rotation event was initiated will be lost type The key binding invoked"}, {"type": "slot", "name": "KComboBox::setCompletedItems", "url": "classKComboBox.html#aedfe397c81e68abf8cd18a61547bfdd8", "keyword": "setCompletedItems KComboBox::setCompletedItems KComboBox setCompletedItems KComboBox::setCompletedItems KComboBox", "text": "The popup will be shown immediately"}, {"type": "slot", "name": "KComboBox::setCompletedText", "url": "classKComboBox.html#ac7e9649c248b64acd934dd614f517691", "keyword": "setCompletedText KComboBox::setCompletedText KComboBox setCompletedText KComboBox::setCompletedText KComboBox", "text": "This function is an implementation for KCompletionBase::setCompletedText"}, {"type": "slot", "name": "KComboBox::setCurrentItem", "url": "classKComboBox.html#a633c4dc51b0ea801e2efbb505e0e341d", "keyword": "setCurrentItem KComboBox::setCurrentItem KComboBox setCurrentItem KComboBox::setCurrentItem KComboBox", "text": "If there is no such item it is inserted at position index if insert is true Otherwise no item is selected"}, {"type": "function", "name": "KComboBox::KComboBox", "url": "classKComboBox.html#a1039e9d79d859bd56b5e4e343cd140f6", "keyword": "KComboBox KComboBox::KComboBox KComboBox KComboBox KComboBox::KComboBox KComboBox", "text": "parent The parent object of this widget"}, {"type": "function", "name": "KComboBox::KComboBox", "url": "classKComboBox.html#a30b12fa0cf330683f47949e44e0a204d", "keyword": "KComboBox KComboBox::KComboBox KComboBox KComboBox KComboBox::KComboBox KComboBox", "text": "rw When true widget will be editable parent The parent object of this widget"}, {"type": "function", "name": "KComboBox::~KComboBox", "url": "classKComboBox.html#a553f223552b1ac4b1217a1e611820a7e", "keyword": "KComboBox::~KComboBox KComboBox KComboBox::~KComboBox KComboBox", "text": ""}, {"type": "function", "name": "KComboBox::addUrl", "url": "classKComboBox.html#aeb872144a47bc0edcc820a8be7f8a6d6", "keyword": "addUrl KComboBox::addUrl KComboBox addUrl KComboBox::addUrl KComboBox", "text": "QUrl::toDisplayString() is used so that the url is properly decoded for displaying"}, {"type": "function", "name": "KComboBox::addUrl", "url": "classKComboBox.html#a93201230dc79f9ce29e4899cb3257b84", "keyword": "addUrl KComboBox::addUrl KComboBox addUrl KComboBox::addUrl KComboBox", "text": "QUrl::toDisplayString() is used so that the url is properly decoded for displaying"}, {"type": "function", "name": "KComboBox::autoCompletion", "url": "classKComboBox.html#a1c6c566f035822dedd54cbbfa6ef3510", "keyword": "autoCompletion KComboBox::autoCompletion KComboBox autoCompletion KComboBox::autoCompletion KComboBox", "text": "Returns true if the current completion mode is set to automatic See its more comprehensive replacement completionMode() true when completion mode is automatic"}, {"type": "function", "name": "KComboBox::changeUrl", "url": "classKComboBox.html#a769c1de3138c63b28e668ef83d0b8b2e", "keyword": "changeUrl KComboBox::changeUrl KComboBox changeUrl KComboBox::changeUrl KComboBox", "text": "QUrl::toDisplayString() is used so that the url is properly decoded for displaying"}, {"type": "function", "name": "KComboBox::changeUrl", "url": "classKComboBox.html#a922bbe0ca73203be89f6debf65b80c74", "keyword": "changeUrl KComboBox::changeUrl KComboBox changeUrl KComboBox::changeUrl KComboBox", "text": "QUrl::toDisplayString() is used so that the url is properly decoded for displaying"}, {"type": "function", "name": "KComboBox::completionBox", "url": "classKComboBox.html#acf349780217a9e85f0e20b63f023a120", "keyword": "completionBox KComboBox::completionBox KComboBox completionBox KComboBox::completionBox KComboBox", "text": "the completion box that is used in completion mode CompletionPopup and CompletionPopupAuto This method will create a completion box by calling KLineEdit::completionBox if none is there yet create Set this to false if you don t want the box to be created i.e to test if it is available"}, {"type": "function", "name": "KComboBox::contains", "url": "classKComboBox.html#a41448d6efe67c015a39e5aea99eb3075", "keyword": "contains KComboBox::contains KComboBox contains KComboBox::contains KComboBox", "text": "If text is an empty string false is returned true if an item with the string text is in the combo box"}, {"type": "function", "name": "KComboBox::cursorPosition", "url": "classKComboBox.html#ab2c7a552f8267bfa4dd72b7f9c0d1ce2", "keyword": "cursorPosition KComboBox::cursorPosition KComboBox cursorPosition KComboBox::cursorPosition KComboBox", "text": "This method always returns a if the combo box is not editable read-only Current cursor position"}, {"type": "function", "name": "KComboBox::insertURL", "url": "classKComboBox.html#ad77f6825e714b82fc44e14bc003bdc03", "keyword": "insertURL KComboBox::insertURL KComboBox insertURL KComboBox::insertURL KComboBox", "text": "since 4.5"}, {"type": "function", "name": "KComboBox::insertUrl", "url": "classKComboBox.html#a91184f32bdd3ae49a5955c372be91c7b", "keyword": "insertUrl KComboBox::insertUrl KComboBox insertUrl KComboBox::insertUrl KComboBox", "text": "QUrl::toDisplayString() is used so that the url is properly decoded for displaying"}, {"type": "function", "name": "KComboBox::insertUrl", "url": "classKComboBox.html#ab76dbc5ea0a2d1bd984a965685adf483", "keyword": "insertUrl KComboBox::insertUrl KComboBox insertUrl KComboBox::insertUrl KComboBox", "text": "QUrl::toDisplayString() is used so that the url is properly decoded for displaying"}, {"type": "function", "name": "KComboBox::setAutoCompletion", "url": "classKComboBox.html#ae14aa07f44ab4ef1767586afe592155c", "keyword": "setAutoCompletion KComboBox::setAutoCompletion KComboBox setAutoCompletion KComboBox::setAutoCompletion KComboBox", "text": "If true the completion mode will be set to automatic Otherwise it is defaulted to the global setting This method has been replaced by the more comprehensive setCompletionMode() autocomplete Flag to enable/disable automatic completion mode"}, {"type": "function", "name": "KComboBox::setContextMenuEnabled", "url": "classKComboBox.html#a5daf26b4c50406073c1c87302d7c8605", "keyword": "setContextMenuEnabled KComboBox::setContextMenuEnabled KComboBox setContextMenuEnabled KComboBox::setContextMenuEnabled KComboBox", "text": "This method only works if this widget is editable and allows you to enable/disable the context menu It does nothing if invoked for a non-editable combo box By default the context menu is created if this widget is editable Call this function with the argument set to false to disable the popup menu showMenu If true show the context menu since 4.5 use setContextMenuPolicy instead"}, {"type": "function", "name": "KComboBox::setEditable", "url": "classKComboBox.html#a924d0614f9661b116f37e0ffe4f7aefe", "keyword": "setEditable KComboBox::setEditable KComboBox setEditable KComboBox::setEditable KComboBox", "text": "Note that QComboBox::setEditable is not virtual so do not use a KComboBox in a QComboBox pointer"}, {"type": "function", "name": "KComboBox::setEditUrl", "url": "classKComboBox.html#a5cad84aaf8e8a847968ca80b70c53c44", "keyword": "setEditUrl KComboBox::setEditUrl KComboBox setEditUrl KComboBox::setEditUrl KComboBox", "text": "It uses QUrl::toDisplayString() so that the url is properly decoded for displaying"}, {"type": "function", "name": "KComboBox::setLineEdit", "url": "classKComboBox.html#afc70af07d7562b48cb370ce8f7ad336e", "keyword": "setLineEdit KComboBox::setLineEdit KComboBox setLineEdit KComboBox::setLineEdit KComboBox", "text": "API remains unaffected Note that QComboBox::setLineEdit is not virtual in Qt4 do not use a KComboBox in a QComboBox pointer NOTE Only editable combo boxes can have a line editor As such any attempt to assign a line edit to a non-editable combo box will simply be ignored"}, {"type": "function", "name": "KComboBox::setTrapReturnKey", "url": "classKComboBox.html#a8e871fd7d8d6e67539e5db44b9b9b1dd", "keyword": "setTrapReturnKey KComboBox::setTrapReturnKey KComboBox setTrapReturnKey KComboBox::setTrapReturnKey KComboBox", "text": "Call this method with trap equal to true to make KComboBox stop these events The signals will still be emitted of course Only affects editable combo boxes setTrapReturnKey()"}, {"type": "function", "name": "KComboBox::setUrlDropsEnabled", "url": "classKComboBox.html#ac75e989a53f5a2d9dbaadedfdfb6567d", "keyword": "setUrlDropsEnabled KComboBox::setUrlDropsEnabled KComboBox setUrlDropsEnabled KComboBox::setUrlDropsEnabled KComboBox", "text": "If enabled and the user drops an URL the decoded URL will be inserted Otherwise the default behavior of QComboBox is used which inserts the encoded URL enable If true insert decoded URLs since 5.0 Use lineEdit() installEventFilter with a LineEditUrlDropEventFilter"}, {"type": "function", "name": "KComboBox::trapReturnKey", "url": "classKComboBox.html#a701a0ca8e3ceb3c4da0e9ab4e4d2c2e5", "keyword": "trapReturnKey KComboBox::trapReturnKey KComboBox trapReturnKey KComboBox::trapReturnKey KComboBox", "text": "true if key events of Key_Return or Key_Enter will be stopped false if they will be propagated setTrapReturnKey"}, {"type": "function", "name": "KComboBox::urlDropsEnabled", "url": "classKComboBox.html#a71410fb7c4bf30ea750deffd9bfdf79f", "keyword": "urlDropsEnabled KComboBox::urlDropsEnabled KComboBox urlDropsEnabled KComboBox::urlDropsEnabled KComboBox", "text": ""}, {"type": "function", "name": "KCompletionBase::KCompletionBase", "url": "classKCompletionBase.html#abb765129aafb3ddc0f93396e15b5895f", "keyword": "KCompletionBase KCompletionBase::KCompletionBase KCompletionBase KCompletionBase KCompletionBase::KCompletionBase KCompletionBase KCompletionBase KCompletionBase::KCompletionBase KCompletionBase KCompletionBase KCompletionBase::KCompletionBase KCompletionBase", "text": ""}, {"type": "function", "name": "KCompletionBase::~KCompletionBase", "url": "classKCompletionBase.html#aafb6c36afdbf57a4fe2c5d2c35bec540", "keyword": "KCompletionBase::~KCompletionBase KCompletionBase KCompletionBase::~KCompletionBase KCompletionBase KCompletionBase::~KCompletionBase KCompletionBase KCompletionBase::~KCompletionBase KCompletionBase", "text": ""}, {"type": "function", "name": "KCompletionBase::completionMode", "url": "classKCompletionBase.html#aa3274a03fda14abab97517f21e0c0bc5", "keyword": "completionMode KCompletionBase::completionMode KCompletionBase completionMode KCompletionBase::completionMode KCompletionBase completionMode KCompletionBase::completionMode KCompletionBase completionMode KCompletionBase::completionMode KCompletionBase", "text": "the completion mode"}, {"type": "function", "name": "KCompletionBase::completionObject", "url": "classKCompletionBase.html#a74c9984be0f58991223870468bc1e7b1", "keyword": "completionObject KCompletionBase::completionObject KCompletionBase completionObject KCompletionBase::completionObject KCompletionBase completionObject KCompletionBase::completionObject KCompletionBase completionObject KCompletionBase::completionObject KCompletionBase", "text": "If the completion object does not exist it is automatically created and by default handles all the completion signals internally unless handleSignals is set to false It is also automatically destroyed when the destructor is called You can change this default behavior using the setAutoDeleteCompletionObject and setHandleSignals member functions See also compObj handleSignals if true handles completion signals internally a pointer to the completion object"}, {"type": "function", "name": "KCompletionBase::compObj", "url": "classKCompletionBase.html#a6149f64b6caa298f805cce30ee96be15", "keyword": "compObj KCompletionBase::compObj KCompletionBase compObj KCompletionBase::compObj KCompletionBase compObj KCompletionBase::compObj KCompletionBase compObj KCompletionBase::compObj KCompletionBase", "text": "This method is only different from completionObject() in that it does not create a new KCompletion object even if the internal pointer is NULL Use this method to get the pointer to a completion object when inheriting so that you will not inadvertently create it the completion object or NULL if one does not exist"}, {"type": "function", "name": "KCompletionBase::emitSignals", "url": "classKCompletionBase.html#a76fcf9fa0b0d67c084b7966a9dfc1f9f", "keyword": "emitSignals KCompletionBase::emitSignals KCompletionBase emitSignals KCompletionBase::emitSignals KCompletionBase emitSignals KCompletionBase::emitSignals KCompletionBase emitSignals KCompletionBase::emitSignals KCompletionBase", "text": "true if signals are emitted"}, {"type": "function", "name": "KCompletionBase::getKeyBinding", "url": "classKCompletionBase.html#a7196510e106b06597e5aaf4321005f55", "keyword": "getKeyBinding KCompletionBase::getKeyBinding KCompletionBase getKeyBinding KCompletionBase::getKeyBinding KCompletionBase getKeyBinding KCompletionBase::getKeyBinding KCompletionBase getKeyBinding KCompletionBase::getKeyBinding KCompletionBase", "text": "since 5.0 use keyBinding instead"}, {"type": "function", "name": "KCompletionBase::handleSignals", "url": "classKCompletionBase.html#a026664667cefa574456f504faf64e045", "keyword": "handleSignals KCompletionBase::handleSignals KCompletionBase handleSignals KCompletionBase::handleSignals KCompletionBase handleSignals KCompletionBase::handleSignals KCompletionBase handleSignals KCompletionBase::handleSignals KCompletionBase", "text": "true if this signals are handled internally"}, {"type": "function", "name": "KCompletionBase::isCompletionObjectAutoDeleted", "url": "classKCompletionBase.html#abdbb955ddfbb365de5fec3bd88b7e95c", "keyword": "isCompletionObjectAutoDeleted KCompletionBase::isCompletionObjectAutoDeleted KCompletionBase isCompletionObjectAutoDeleted KCompletionBase::isCompletionObjectAutoDeleted KCompletionBase isCompletionObjectAutoDeleted KCompletionBase::isCompletionObjectAutoDeleted KCompletionBase isCompletionObjectAutoDeleted KCompletionBase::isCompletionObjectAutoDeleted KCompletionBase", "text": "See setCompletionObject() and enableCompletion() for details true if the completion object will be deleted automatically"}, {"type": "function", "name": "KCompletionBase::keyBinding", "url": "classKCompletionBase.html#a01fe83bcc89f915b5cec43a38aa2ef59", "keyword": "keyBinding KCompletionBase::keyBinding KCompletionBase keyBinding KCompletionBase::keyBinding KCompletionBase keyBinding KCompletionBase::keyBinding KCompletionBase keyBinding KCompletionBase::keyBinding KCompletionBase", "text": "This method returns the key binding used to activate the feature given by item If the binding contains modifier key(s) the sum of the modifier key and the actual key code is returned item the item to check the key binding used for the feature given by item 5.0 setKeyBinding"}, {"type": "function", "name": "KCompletionBase::setAutoDeleteCompletionObject", "url": "classKCompletionBase.html#aa2481a5de4ea868b5abe05b6f2416a68", "keyword": "setAutoDeleteCompletionObject KCompletionBase::setAutoDeleteCompletionObject KCompletionBase setAutoDeleteCompletionObject KCompletionBase::setAutoDeleteCompletionObject KCompletionBase setAutoDeleteCompletionObject KCompletionBase::setAutoDeleteCompletionObject KCompletionBase setAutoDeleteCompletionObject KCompletionBase::setAutoDeleteCompletionObject KCompletionBase", "text": "If the argument is set to true the completion object is deleted when this widget s destructor is called autoDelete if true delete completion object on destruction"}, {"type": "function", "name": "KCompletionBase::setCompletedItems", "url": "classKCompletionBase.html#a3aef13c5c03d5e1813d1da2566acd0ba", "keyword": "setCompletedItems KCompletionBase::setCompletedItems KCompletionBase setCompletedItems KCompletionBase::setCompletedItems KCompletionBase setCompletedItems KCompletionBase::setCompletedItems KCompletionBase setCompletedItems KCompletionBase::setCompletedItems KCompletionBase", "text": "items the list of completed items autoSuggest if true the first element of items is automatically completed i.e preselected"}, {"type": "function", "name": "KCompletionBase::setCompletedText", "url": "classKCompletionBase.html#a4aaa12b7b3900f3ac4c0cc22774bd212", "keyword": "setCompletedText KCompletionBase::setCompletedText KCompletionBase setCompletedText KCompletionBase::setCompletedText KCompletionBase setCompletedText KCompletionBase::setCompletedText KCompletionBase setCompletedText KCompletionBase::setCompletedText KCompletionBase", "text": "This function is intended to allow external completion implementations to set completed text appropriately It is mostly relevant when the completion mode is set to CompletionAuto and CompletionManual modes See KCompletionBase::setCompletedText Does nothing in CompletionPopup mode as all available matches will be shown in the popup text the completed text to be set in the widget"}, {"type": "function", "name": "KCompletionBase::setCompletionMode", "url": "classKCompletionBase.html#a098af39b5fb14b70be93424a8e1d8baa", "keyword": "setCompletionMode KCompletionBase::setCompletionMode KCompletionBase setCompletionMode KCompletionBase::setCompletionMode KCompletionBase setCompletionMode KCompletionBase::setCompletionMode KCompletionBase", "text": "mode Completion type CompletionMode"}, {"type": "function", "name": "KCompletionBase::setCompletionObject", "url": "classKCompletionBase.html#a65cde4820556682dc0cf392ba50ade1a", "keyword": "setCompletionObject KCompletionBase::setCompletionObject KCompletionBase setCompletionObject KCompletionBase::setCompletionObject KCompletionBase setCompletionObject KCompletionBase::setCompletionObject KCompletionBase", "text": "This method assigns the completion object and sets it up to automatically handle the completion and rotation signals internally You should use this function if you want to share one completion object among your widgets or need to use a customized completion object The object assigned through this method is not deleted when this object s destructor is invoked unless you explicitly call setAutoDeleteCompletionObject after calling this method Be sure to set the bool argument to false if you want to handle the completion signals yourself completionObject a KCompletion or a derived child object handleCompletionSignals if true handles completion signals internally"}, {"type": "function", "name": "KCompletionBase::setEmitSignals", "url": "classKCompletionBase.html#a0808dfb76db6caaa923f49fef6b09eba", "keyword": "setEmitSignals KCompletionBase::setEmitSignals KCompletionBase setEmitSignals KCompletionBase::setEmitSignals KCompletionBase setEmitSignals KCompletionBase::setEmitSignals KCompletionBase setEmitSignals KCompletionBase::setEmitSignals KCompletionBase", "text": "emitRotationSignals if false disables the emission of rotation signals"}, {"type": "function", "name": "KCompletionBase::setEnableSignals", "url": "classKCompletionBase.html#ab8cdaf74f10ee3e8df4b382a93df8fda", "keyword": "setEnableSignals KCompletionBase::setEnableSignals KCompletionBase setEnableSignals KCompletionBase::setEnableSignals KCompletionBase setEnableSignals KCompletionBase::setEnableSignals KCompletionBase setEnableSignals KCompletionBase::setEnableSignals KCompletionBase", "text": "Invoking this function with enable set to false will cause the completion and rotation signals not to be emitted However unlike setting the completion object to NULL using setCompletionObject disabling the emission of the signals through this method does not affect the current completion object There is no need to invoke this function by default When a completion object is created through completionObject or setCompletionObject these signals are set to emit automatically Also note that disabling this signals will not necessarily interfere with the objects ability to handle these events internally See setHandleSignals enable if false disables the emission of completion and rotation signals"}, {"type": "function", "name": "KCompletionBase::setHandleSignals", "url": "classKCompletionBase.html#a58de94406fccd3eea9b0075e987cb309", "keyword": "setHandleSignals KCompletionBase::setHandleSignals KCompletionBase setHandleSignals KCompletionBase::setHandleSignals KCompletionBase setHandleSignals KCompletionBase::setHandleSignals KCompletionBase setHandleSignals KCompletionBase::setHandleSignals KCompletionBase", "text": "This function simply assigns a boolean value that indicates whether it should handle rotation and completion events or not Note that this does not stop the object from emitting signals when these events occur handle if true it handles completion and rotation internally"}, {"type": "function", "name": "KCompletionBase::setKeyBinding", "url": "classKCompletionBase.html#a772c270be4f369ef0fc3337cddeaf11f", "keyword": "setKeyBinding KCompletionBase::setKeyBinding KCompletionBase setKeyBinding KCompletionBase::setKeyBinding KCompletionBase setKeyBinding KCompletionBase::setKeyBinding KCompletionBase setKeyBinding KCompletionBase::setKeyBinding KCompletionBase", "text": "When the keys set by this function are pressed a signal defined by the inheriting widget will be activated If the default value or 0 is specified by the second parameter then the key binding as defined in the global setting should be used This method returns false when key is negative or the supplied key binding conflicts with another one set for another feature NOTE To use a modifier key Shift Ctrl Alt as part of the key binding simply sum up the values of the modifier and the actual key For example to use CTRL+E supply as the second argument to this function item the feature whose key binding needs to be set TextCompletion the manual completion key binding PrevCompletionMatch the previous match key for multiple completion NextCompletionMatch the next match key for for multiple completion SubstringCompletion the key for substring completion key key binding used to rotate down in a list true if key binding is successfully set keyBinding"}, {"type": "function", "name": "KCompletionBase::useGlobalKeyBindings", "url": "classKCompletionBase.html#acb5942c5dbc1e01353cc3d199226e234", "keyword": "useGlobalKeyBindings KCompletionBase::useGlobalKeyBindings KCompletionBase useGlobalKeyBindings KCompletionBase::useGlobalKeyBindings KCompletionBase useGlobalKeyBindings KCompletionBase::useGlobalKeyBindings KCompletionBase useGlobalKeyBindings KCompletionBase::useGlobalKeyBindings KCompletionBase", "text": "This method changes the values of the key bindings for rotation and completion features to the default values provided in KGlobalSettings NOTE By default inheriting widgets should use the global key bindings so that there is no need to call this method"}, {"type": "slot", "name": "KComboBox::makeCompletion", "url": "classKComboBox.html#a5135d425795f13e479871cf8110c6855", "keyword": "makeCompletion KComboBox::makeCompletion KComboBox makeCompletion KComboBox::makeCompletion KComboBox", "text": "Note this method is not invoked if the completion mode is set to CompletionNone Also if the mode is set to CompletionShell and multiple matches are found this method will complete the text to the first match with a beep to indicate that there are more matches Then any successive completion key event iterates through the remaining matches This way the rotation functionality is left to iterate through the list as usual"}, {"type": "function", "name": "KComboBox::setCompletedText", "url": "classKComboBox.html#a25f37bb5d41d483ffcccbd2cd3c5a0b5", "keyword": "setCompletedText KComboBox::setCompletedText KComboBox setCompletedText KComboBox::setCompletedText KComboBox", "text": "text The text to be set in the line edit marked Whether the text inserted should be highlighted"}, {"type": "function", "name": "KCompletionBase::delegate", "url": "classKCompletionBase.html#a003700966e3afc29239858f9a942ec37", "keyword": "delegate KCompletionBase::delegate KCompletionBase delegate KCompletionBase::delegate KCompletionBase delegate KCompletionBase::delegate KCompletionBase delegate KCompletionBase::delegate KCompletionBase", "text": "the delegation object or 0 if there is none setDelegate()"}, {"type": "function", "name": "KCompletionBase::getKeyBindings", "url": "classKCompletionBase.html#af609c46716ccb4f134a7c3cc84b9fd20", "keyword": "getKeyBindings KCompletionBase::getKeyBindings KCompletionBase getKeyBindings KCompletionBase::getKeyBindings KCompletionBase getKeyBindings KCompletionBase::getKeyBindings KCompletionBase getKeyBindings KCompletionBase::getKeyBindings KCompletionBase", "text": "since 5.0 use keyBindingMap instead"}, {"type": "function", "name": "KCompletionBase::keyBindingMap", "url": "classKCompletionBase.html#a4e92fbd2b705b0de0a3e38c70e94e62d", "keyword": "keyBindingMap KCompletionBase::keyBindingMap KCompletionBase keyBindingMap KCompletionBase::keyBindingMap KCompletionBase keyBindingMap KCompletionBase::keyBindingMap KCompletionBase keyBindingMap KCompletionBase::keyBindingMap KCompletionBase", "text": "This method is the same as getKeyBinding() except that it returns the whole keymap containing the key bindings the key binding used for the feature given by item 5.0"}, {"type": "function", "name": "KCompletionBase::setDelegate", "url": "classKCompletionBase.html#a1a0a46386d209f27653794dad5014b4c", "keyword": "setDelegate KCompletionBase::setDelegate KCompletionBase setDelegate KCompletionBase::setDelegate KCompletionBase setDelegate KCompletionBase::setDelegate KCompletionBase setDelegate KCompletionBase::setDelegate KCompletionBase", "text": "If a delegation object is set all function calls will be forwarded to the delegation object delegate the delegation object or 0 to remove it"}, {"type": "function", "name": "KCompletionBase::setKeyBindingMap", "url": "classKCompletionBase.html#ab999fe13691f295fa4c1a949e57d66bf", "keyword": "setKeyBindingMap KCompletionBase::setKeyBindingMap KCompletionBase setKeyBindingMap KCompletionBase::setKeyBindingMap KCompletionBase setKeyBindingMap KCompletionBase::setKeyBindingMap KCompletionBase setKeyBindingMap KCompletionBase::setKeyBindingMap KCompletionBase", "text": "keyBindingMap"}, {"type": "function", "name": "KCompletionBase::virtual_hook", "url": "classKCompletionBase.html#a72eb5e416deca15bac4c68419a943513", "keyword": "virtual_hook KCompletionBase::virtual_hook KCompletionBase virtual_hook KCompletionBase::virtual_hook KCompletionBase virtual_hook KCompletionBase::virtual_hook KCompletionBase virtual_hook KCompletionBase::virtual_hook KCompletionBase", "text": "Unused in this class"}, {"type": "enum", "name": "KCompletionBase::KeyBindingType", "url": "classKCompletionBase.html#afcb3584e759d233cf9acabf6a5d4ab4b", "keyword": "KeyBindingType KCompletionBase::KeyBindingType KCompletionBase KeyBindingType KCompletionBase::KeyBindingType KCompletionBase KeyBindingType KCompletionBase::KeyBindingType KCompletionBase KeyBindingType KCompletionBase::KeyBindingType KCompletionBase", "text": "The default key bindings for these items are defined in KStandardShortcut"}, {"type": "enumvalue", "name": "KCompletionBase::TextCompletion", "url": "classKCompletionBase.html#afcb3584e759d233cf9acabf6a5d4ab4bab533a930960cd953ee3300a107966697", "keyword": "TextCompletion KCompletionBase::TextCompletion KCompletionBase TextCompletion KCompletionBase::TextCompletion KCompletionBase TextCompletion KCompletionBase::TextCompletion KCompletionBase TextCompletion KCompletionBase::TextCompletion KCompletionBase", "text": "Text completion by default Ctrl-E"}, {"type": "enumvalue", "name": "KCompletionBase::PrevCompletionMatch", "url": "classKCompletionBase.html#afcb3584e759d233cf9acabf6a5d4ab4ba40960fd71ae86bb95b8c4d892fc03953", "keyword": "PrevCompletionMatch KCompletionBase::PrevCompletionMatch KCompletionBase PrevCompletionMatch KCompletionBase::PrevCompletionMatch KCompletionBase PrevCompletionMatch KCompletionBase::PrevCompletionMatch KCompletionBase PrevCompletionMatch KCompletionBase::PrevCompletionMatch KCompletionBase", "text": "Switch to previous completion by default Ctrl-Up"}, {"type": "enumvalue", "name": "KCompletionBase::NextCompletionMatch", "url": "classKCompletionBase.html#afcb3584e759d233cf9acabf6a5d4ab4ba38a04db77ca51dca3c68e95d9566b6e9", "keyword": "NextCompletionMatch KCompletionBase::NextCompletionMatch KCompletionBase NextCompletionMatch KCompletionBase::NextCompletionMatch KCompletionBase NextCompletionMatch KCompletionBase::NextCompletionMatch KCompletionBase NextCompletionMatch KCompletionBase::NextCompletionMatch KCompletionBase", "text": "Switch to next completion by default Ctrl-Down"}, {"type": "enumvalue", "name": "KCompletionBase::SubstringCompletion", "url": "classKCompletionBase.html#afcb3584e759d233cf9acabf6a5d4ab4ba381b8a3ec8dc1bf135e671adf71de719", "keyword": "SubstringCompletion KCompletionBase::SubstringCompletion KCompletionBase SubstringCompletion KCompletionBase::SubstringCompletion KCompletionBase SubstringCompletion KCompletionBase::SubstringCompletion KCompletionBase SubstringCompletion KCompletionBase::SubstringCompletion KCompletionBase", "text": "Substring completion by default Ctrl-T"}, {"type": "class", "name": "KCompletion", "url": "classKCompletion.html", "keyword": "KCompletion", "text": "This class offers easy use of or on QString objects A common use is completing filenames or URLs see KUrlCompletion() But it is not limited to URL-completion everything should be completable! The user should be able to complete email addresses telephone numbers commands SQL queries Every time your program knows what the user can type into an edit field you should offer completion With KCompletion this is very easy and if you are using a line edit widget KLineEdit it is even easier Basically you tell a KCompletion object what strings should be completable and whenever completion should be invoked you call makeCompletion() KLineEdit and an editable KComboBox even do this automatically for you KCompletion offers the completed string via the signal match() and all matching strings when the result is ambiguous via the method allMatches() Notice auto completion shell completion and manual completion work slightly differently auto completion always returns a complete item as match When more than one matching item is available it will deliver just the first one depending on sorting order Iterating over all matches is possible via nextMatch() and previousMatch() popup completion works in the same way the only difference being that the completed items are not put into the edit widget but into a separate popup box manual completion works the same way as auto completion except that it is not invoked automatically while the user is typing but only when the user presses a special key The difference of manual and auto completion is therefore only visible in UI classes KCompletion needs to know whether to deliver partial matches shell completion or whole matches auto/manual completion therefore KCompletion::CompletionMan and KCompletion::CompletionAuto have the exact same effect in KCompletion shell completion works like in a shell when multiple matches are available the longest possible string of all matches is returned i.e only a partial item Iterating over all matching items complete not partial is possible via nextMatch() and previousMatch() As an application programmer you do not normally have to worry about the different completion modes KCompletion handles that for you according to the setting setCompletionMode() The default setting is globally configured by the user and read from completionMode() A short example In shell-completion mode this will be in auto-completion mode it will be as that is alphabetically smaller If setOrder was set to Insertion would be completed in auto-completion mode as that was inserted before You can dynamically update the completable items by removing and adding them whenever you want For advanced usage you could even use multiple KCompletion objects E.g imagine an editor like kwrite with multiple open files You could store items of each file in a different KCompletion object so that you know and tell the user where a completion comes from Note KCompletion does not work with strings that contain 0x0 characters unicode null as this is used internally as a delimiter You may inherit from KCompletion and override makeCompletion() in special cases like reading directories or urls and then supplying the contents to KCompletion as KUrlCompletion does but this is usually not necessary Carsten Pfeiffer"}, {"type": "enum", "name": "KCompletion::CompletionMode", "url": "classKCompletion.html#a927c284d89e41d976412201b68ca67e9", "keyword": "CompletionMode KCompletion::CompletionMode KCompletion", "text": "See the styleguide 5.0"}, {"type": "enumvalue", "name": "KCompletion::CompletionNone", "url": "classKCompletion.html#a927c284d89e41d976412201b68ca67e9a103ff6b05ac57027f6cbd47a7806f263", "keyword": "CompletionNone KCompletion::CompletionNone KCompletion", "text": "No completion is used"}, {"type": "enumvalue", "name": "KCompletion::CompletionAuto", "url": "classKCompletion.html#a927c284d89e41d976412201b68ca67e9a75558e348f18fff4b6a0bb406625d03a", "keyword": "CompletionAuto KCompletion::CompletionAuto KCompletion", "text": "Text is automatically filled in whenever possible"}, {"type": "enumvalue", "name": "KCompletion::CompletionMan", "url": "classKCompletion.html#a927c284d89e41d976412201b68ca67e9a8cf32b45e4256834bc183a66d355b6a3", "keyword": "CompletionMan KCompletion::CompletionMan KCompletion", "text": "Same as automatic but shortest match is used for completion"}, {"type": "enumvalue", "name": "KCompletion::CompletionShell", "url": "classKCompletion.html#a927c284d89e41d976412201b68ca67e9aa62055e80f1fac714994a179f99eabc7", "keyword": "CompletionShell KCompletion::CompletionShell KCompletion", "text": "Completes text much in the same way as a typical shell would"}, {"type": "enumvalue", "name": "KCompletion::CompletionPopup", "url": "classKCompletion.html#a927c284d89e41d976412201b68ca67e9ab7d2690df288094515a12c902c00df36", "keyword": "CompletionPopup KCompletion::CompletionPopup KCompletion", "text": "Lists all possible matches in a popup list box to choose from"}, {"type": "enumvalue", "name": "KCompletion::CompletionPopupAuto", "url": "classKCompletion.html#a927c284d89e41d976412201b68ca67e9a6988c584d6699bfa473641e9720efb5e", "keyword": "CompletionPopupAuto KCompletion::CompletionPopupAuto KCompletion", "text": "Lists all possible matches in a popup list box to choose from and automatically fills the result whenever possible"}, {"type": "enum", "name": "KCompletion::CompOrder", "url": "classKCompletion.html#a88eb49b5b89f48f9296b136f6bfa9a62", "keyword": "CompOrder KCompletion::CompOrder KCompletion", "text": ""}, {"type": "enumvalue", "name": "KCompletion::Sorted", "url": "classKCompletion.html#a88eb49b5b89f48f9296b136f6bfa9a62ac0b1933cc325bb144982ab09c02376db", "keyword": "Sorted KCompletion::Sorted KCompletion", "text": "Use alphabetically sorted order"}, {"type": "enumvalue", "name": "KCompletion::Insertion", "url": "classKCompletion.html#a88eb49b5b89f48f9296b136f6bfa9a62a2011ff90476ea031ab999c12a06e548a", "keyword": "Insertion KCompletion::Insertion KCompletion", "text": "Use order of insertion"}, {"type": "enumvalue", "name": "KCompletion::Weighted", "url": "classKCompletion.html#a88eb49b5b89f48f9296b136f6bfa9a62a968d39944eede4761a23cce8a8b06f52", "keyword": "Weighted KCompletion::Weighted KCompletion", "text": "Use weighted order"}, {"type": "signal", "name": "KCompletion::match", "url": "classKCompletion.html#aa9df404d9a37d5b57ede9dd90f765116", "keyword": "match KCompletion::match KCompletion", "text": "In particular makeCompletion() previousMatch() and nextMatch() all emit this signal makeCompletion() will only emit it when a match is found but the other methods will alwasy emit it and so may emit it with an empty string item the matching item or QString() if there were no more matching items"}, {"type": "signal", "name": "KCompletion::matches", "url": "classKCompletion.html#a5b32b1facc011ba6d9cc2de31447e62b", "keyword": "matches KCompletion::matches KCompletion", "text": "matchlist the list of all matching items"}, {"type": "signal", "name": "KCompletion::multipleMatches", "url": "classKCompletion.html#a3ba213b48f41e2404150250f44626a55", "keyword": "multipleMatches KCompletion::multipleMatches KCompletion", "text": "hasMultipleMatches"}, {"type": "slot", "name": "KCompletion::addItem", "url": "classKCompletion.html#ac2e280254dc163f153077ec882f05513", "keyword": "addItem KCompletion::addItem KCompletion", "text": "Resets the current item state previousMatch() and nextMatch() won t work the next time they are called item the item to add"}, {"type": "slot", "name": "KCompletion::addItem", "url": "classKCompletion.html#a09e854a3c6d3950a9fbeb8b2cf3ecd47", "keyword": "addItem KCompletion::addItem KCompletion", "text": "Resets the current item state previousMatch() and nextMatch() won t work the next time they are called Sets the weight of the item to weight or adds it to the current weight if the item is already available The weight has to be greater than 1 to take effect default weight is 1 item the item to add weight the weight of the item default is 1"}, {"type": "slot", "name": "KCompletion::clear", "url": "classKCompletion.html#aa83d65e9084382a6ecfcf5ff2b465a9f", "keyword": "clear KCompletion::clear KCompletion", "text": ""}, {"type": "slot", "name": "KCompletion::insertItems", "url": "classKCompletion.html#a13b8fb6f3cd37d817418c873d1032c8d", "keyword": "insertItems KCompletion::insertItems KCompletion", "text": "It does the same as setItems() but without calling clear() before items the items to insert"}, {"type": "slot", "name": "KCompletion::makeCompletion", "url": "classKCompletion.html#a43b597e5d237650cc4b0e3dec50c4d2f", "keyword": "makeCompletion KCompletion::makeCompletion KCompletion", "text": "Will either return the first matching item if there is more than one match or QString() if no match is found In the latter case a sound will be emitted depending on soundsEnabled() If a match is found it will be emitted via the signal match() If this is called twice or more with the same string while no items were added or removed in the meantime all available completions will be emitted via the signal matches() This happens only in shell-completion mode string the string to complete the matching item or QString() if there is no matching item substringCompletion"}, {"type": "slot", "name": "KCompletion::nextMatch", "url": "classKCompletion.html#a0b42db3a570daa789b59f8b41474ad90", "keyword": "nextMatch KCompletion::nextMatch KCompletion", "text": "When reaching the last item the list is rotated so it will return the first match and a sound is emitted depending on soundsEnabled() the next item from the list of matching items When there is no match QString() is returned and a sound is emitted"}, {"type": "slot", "name": "KCompletion::previousMatch", "url": "classKCompletion.html#a9b293993541d8ed3c6ca4c67941554f2", "keyword": "previousMatch KCompletion::previousMatch KCompletion", "text": "When reaching the beginning the list is rotated so it will return the last match and a sound is emitted depending on soundsEnabled() the next item from the list of matching items When there is no match QString() is returned and a sound is emitted"}, {"type": "slot", "name": "KCompletion::removeItem", "url": "classKCompletion.html#a31ee8cc67ea1228ef88b0ab3e1be644d", "keyword": "removeItem KCompletion::removeItem KCompletion", "text": "Resets the current item state previousMatch() and nextMatch() won t work the next time they are called item the item to remove"}, {"type": "slot", "name": "KCompletion::setItems", "url": "classKCompletion.html#aecf680a90533b2cbdb920a848e1bb813", "keyword": "setItems KCompletion::setItems KCompletion", "text": "Removes all previous items Notice when order() Weighted then the weighting is looked up for every item in the stringlist Every item should have appended where number is an unsigned integer specifying the weighting If you don t like this call setOrder(KCompletion::Insertion) before calling setItems() itemList the list of items that are available for completion items"}, {"type": "slot", "name": "KCompletion::slotMakeCompletion", "url": "classKCompletion.html#addbbcdf12afab6f5e1de7b108ea33b62", "keyword": "slotMakeCompletion KCompletion::slotMakeCompletion KCompletion", "text": "Same as makeCompletion() but in this case as a slot string the string to complete makeCompletion since 5.0 use makeCompletion() instead"}, {"type": "slot", "name": "KCompletion::slotNextMatch", "url": "classKCompletion.html#af676f5cf491f4d90ed9f120f92300219", "keyword": "slotNextMatch KCompletion::slotNextMatch KCompletion", "text": "Same as nextMatch() but in this case as a slot nextMatch since 5.0 use nextMatch() instead"}, {"type": "slot", "name": "KCompletion::slotPreviousMatch", "url": "classKCompletion.html#a4ee5b0552fb56444b5462680eee628a8", "keyword": "slotPreviousMatch KCompletion::slotPreviousMatch KCompletion", "text": "Same as previousMatch() but in this case as a slot previousMatch since 5.0 use previousMatch() instead"}, {"type": "function", "name": "KCompletion::KCompletion", "url": "classKCompletion.html#a67121e28f073bfc134479845cd2a2a84", "keyword": "KCompletion KCompletion::KCompletion KCompletion", "text": ""}, {"type": "function", "name": "KCompletion::~KCompletion", "url": "classKCompletion.html#aed35537eb98e398d9da29df0cdbf5404", "keyword": "KCompletion::~KCompletion KCompletion", "text": ""}, {"type": "function", "name": "KCompletion::allMatches", "url": "classKCompletion.html#a5e31436d86b23b8c04b5a59a0249df65", "keyword": "allMatches KCompletion::allMatches KCompletion", "text": "It might take some time if you have a lot of items a list of all matches for the last completed string substringCompletion"}, {"type": "function", "name": "KCompletion::allMatches", "url": "classKCompletion.html#aa5ad9a50eb978b94242f060fdb68bfa3", "keyword": "allMatches KCompletion::allMatches KCompletion", "text": "string the string to match the list of all matches"}, {"type": "function", "name": "KCompletion::allWeightedMatches", "url": "classKCompletion.html#adbefa19cf6f8c44b151e6bba5f830938", "keyword": "allWeightedMatches KCompletion::allWeightedMatches KCompletion", "text": "It might take some time if you have a lot of items The matches are returned as KCompletionMatches which also keeps the weight of the matches allowing you to modify some matches or merge them with matches from another call to allWeightedMatches() and sort the matches after that in order to have the matches ordered correctly a list of all completion matches substringCompletion"}, {"type": "function", "name": "KCompletion::allWeightedMatches", "url": "classKCompletion.html#a6581be3dcb875c4c5a4b4b1b34d97773", "keyword": "allWeightedMatches KCompletion::allWeightedMatches KCompletion", "text": "string the string to match a list of all matches"}, {"type": "function", "name": "KCompletion::completionMode", "url": "classKCompletion.html#aaf79e516fa2571f4e4bb62676216e5d3", "keyword": "completionMode KCompletion::completionMode KCompletion", "text": "the current completion mode default is CompletionPopup setCompletionMode CompletionMode"}, {"type": "function", "name": "KCompletion::hasMultipleMatches", "url": "classKCompletion.html#ac6529b902b28542afec9f149ca82712e", "keyword": "hasMultipleMatches KCompletion::hasMultipleMatches KCompletion", "text": "true if there is more than one match multipleMatches"}, {"type": "function", "name": "KCompletion::ignoreCase", "url": "classKCompletion.html#ab578758792d55020b1b676dcd2cb6587", "keyword": "ignoreCase KCompletion::ignoreCase KCompletion", "text": "Default is false case sensitive true if the case will be ignored setIgnoreCase"}, {"type": "function", "name": "KCompletion::isEmpty", "url": "classKCompletion.html#a5b28387a34700956d86e7e2f509fdb98", "keyword": "isEmpty KCompletion::isEmpty KCompletion", "text": ""}, {"type": "function", "name": "KCompletion::items", "url": "classKCompletion.html#a7f51bc348dfc5bfebab12082c99bf310", "keyword": "items KCompletion::items KCompletion", "text": "This is useful if you need to save the state of a KCompletion object and restore it later Important note when order() Weighted then every item in the stringlist has its weight appended delimited by a colon E.g an item might look like where 4 is the weight This is necessary so that you can save the items along with its weighting on disk and load them back with setItems() restoring its weight as well If you really don t want the appended weightings call setOrder( KCompletion::Insertion ) before calling items() a list of all items setItems"}, {"type": "function", "name": "KCompletion::lastMatch", "url": "classKCompletion.html#ad1929345c4514c06ac6c2d860071ee14", "keyword": "lastMatch KCompletion::lastMatch KCompletion", "text": "Might be useful if you need to check whether a completion is different from the last one the last match QString() is returned when there is no last match"}, {"type": "function", "name": "KCompletion::order", "url": "classKCompletion.html#a3d9a1c98c82819e166727e744b94e1d1", "keyword": "order KCompletion::order KCompletion", "text": "the current completion order setOrder"}, {"type": "function", "name": "KCompletion::setCompletionMode", "url": "classKCompletion.html#a806d98ee8eab5262255cdc04eceec3f0", "keyword": "setCompletionMode KCompletion::setCompletionMode KCompletion", "text": "mode the completion mode CompletionMode"}, {"type": "function", "name": "KCompletion::setIgnoreCase", "url": "classKCompletion.html#a99c356a9776a61aeaec7979a242ea51f", "keyword": "setIgnoreCase KCompletion::setIgnoreCase KCompletion", "text": "E.g makeCompletion might return Default is false case sensitive ignoreCase true to ignore the case ignoreCase"}, {"type": "function", "name": "KCompletion::setOrder", "url": "classKCompletion.html#a77257091180054bb7d6cf280dae1dad2", "keyword": "setOrder KCompletion::setOrder KCompletion", "text": "in the order of insertion sorted alphabetically weighted Choosing weighted makes KCompletion perform an implicit weighting based on how often an item is inserted Imagine a web browser with a location bar where the user enters URLs The more often a URL is entered the higher priority it gets Note Setting the order to sorted only affects new inserted items already existing items will stay in the current order So you probably want to call setOrder(Sorted) before inserting items if you want everything sorted Default is insertion order order the new order order"}, {"type": "function", "name": "KCompletion::setSoundsEnabled", "url": "classKCompletion.html#a8414e207f782085f4cd38cb462542cdb", "keyword": "setSoundsEnabled KCompletion::setSoundsEnabled KCompletion", "text": "makeCompletion() can t find a match there is a partial completion multiple matches in Shell-completion mode nextMatch() or previousMatch() hit the last possible match and the list is rotated KNotifyClient() is used to emit the sounds enable true to enable sounds soundsEnabled"}, {"type": "function", "name": "KCompletion::soundsEnabled", "url": "classKCompletion.html#a4714a802d1204f38836190b44b2023bd", "keyword": "soundsEnabled KCompletion::soundsEnabled KCompletion", "text": "Default is enabled true if sounds are enabled setSoundsEnabled"}, {"type": "function", "name": "KCompletion::substringCompletion", "url": "classKCompletion.html#a8a29cf04496d576dc2489f2fb1248bfa", "keyword": "substringCompletion KCompletion::substringCompletion KCompletion", "text": "string the string to complete a list of items which contain text as a substring i.e not necessarily at the beginning makeCompletion"}, {"type": "function", "name": "KCompletion::postProcessMatch", "url": "classKCompletion.html#aa6c51f0c61d01fd4c799880d55c957a4", "keyword": "postProcessMatch KCompletion::postProcessMatch KCompletion", "text": "You can override this method to modify the string that will be emitted This is necessary e.g in KUrlCompletion() where files with spaces in their names are shown escaped but stored unescaped inside KCompletion Never delete that pointer! Default implementation does nothing match the match to process postProcessMatches"}, {"type": "function", "name": "KCompletion::postProcessMatches", "url": "classKCompletion.html#a535e00dfaffc58e29233b31d3248f0b1", "keyword": "postProcessMatches KCompletion::postProcessMatches KCompletion", "text": "You can override this method to modify the found items before match() or matches() are emitted Never delete that pointer! Default implementation does nothing matchList the matches to process postProcessMatch"}, {"type": "function", "name": "KCompletion::postProcessMatches", "url": "classKCompletion.html#a7e322919634ccc7860e70fd34c86ce08", "keyword": "postProcessMatches KCompletion::postProcessMatches KCompletion", "text": "You can override this method to modify the found items before match() or matches() are emitted Never delete that pointer! Default implementation does nothing matches the matches to process postProcessMatch"}, {"type": "class", "name": "KCompletionBase", "url": "classKCompletionBase.html", "keyword": "KCompletionBase", "text": "This is a convenience class that provides the basic functions needed to add text completion support into widgets All that is required is an implementation for the pure virtual function setCompletedText() Refer to KLineEdit or KComboBox to see how easily such support can be added using this as a base class An abstract class for adding text completion support to widgets Dawit Alemayehu"}, {"type": "class", "name": "KCompletionBox", "url": "classKCompletionBox.html", "keyword": "KCompletionBox", "text": "A little utility class for like KLineEdit or KComboBox KCompletionBox is a listbox displayed as a rectangle without any window decoration usually directly under the lineedit or combobox It is filled with all possible matches for a completion so the user can select the one he wants It is used when KCompletion::CompletionMode CompletionPopup or CompletionPopupAuto Carsten Pfeiffer"}, {"type": "signal", "name": "KCompletionBox::activated", "url": "classKCompletionBox.html#a3608a457b6466be137fd24549e4cc36a", "keyword": "activated KCompletionBox::activated KCompletionBox", "text": ""}, {"type": "signal", "name": "KCompletionBox::userCancelled", "url": "classKCompletionBox.html#a4f4c759719847ecd180e65bfd7fede86", "keyword": "userCancelled KCompletionBox::userCancelled KCompletionBox", "text": ""}, {"type": "slot", "name": "KCompletionBox::down", "url": "classKCompletionBox.html#abe15cc623385077deb1aa29a1a0de5fe", "keyword": "down KCompletionBox::down KCompletionBox", "text": ""}, {"type": "slot", "name": "KCompletionBox::end", "url": "classKCompletionBox.html#a68bcf7116f1d6c26c2683dba78fb8548", "keyword": "end KCompletionBox::end KCompletionBox", "text": ""}, {"type": "slot", "name": "KCompletionBox::home", "url": "classKCompletionBox.html#a72c17b3905949c4b47fc33cf41326049", "keyword": "home KCompletionBox::home KCompletionBox", "text": ""}, {"type": "slot", "name": "KCompletionBox::insertItems", "url": "classKCompletionBox.html#a0e7740f8acfda3c06455b4e205548419", "keyword": "insertItems KCompletionBox::insertItems KCompletionBox", "text": "Does not clear the items before index determines at which position items will be inserted defaults to appending them at the end"}, {"type": "slot", "name": "KCompletionBox::pageDown", "url": "classKCompletionBox.html#adf582e591583372153ede6a8e925dc64", "keyword": "pageDown KCompletionBox::pageDown KCompletionBox", "text": ""}, {"type": "slot", "name": "KCompletionBox::pageUp", "url": "classKCompletionBox.html#aaaf16e434ec11a1d1dadb8acd8efd55c", "keyword": "pageUp KCompletionBox::pageUp KCompletionBox", "text": ""}, {"type": "slot", "name": "KCompletionBox::popup", "url": "classKCompletionBox.html#adb114b16cd57f23985999e75deb73099", "keyword": "popup KCompletionBox::popup KCompletionBox", "text": "Depending on the screensize and the position of the parent this may be a different place however the default is to pop it up and the lower left corner of the parent Make sure to hide() the box when appropriate"}, {"type": "slot", "name": "KCompletionBox::setActivateOnSelect", "url": "classKCompletionBox.html#a95323c5f57badda9dbdda72fd065d672", "keyword": "setActivateOnSelect KCompletionBox::setActivateOnSelect KCompletionBox", "text": "By default the selected() signal is emitted doEmit false if the signal should not be emitted"}, {"type": "slot", "name": "KCompletionBox::setCancelledText", "url": "classKCompletionBox.html#a7c7607a493b4cb207c613f1abd90a28a", "keyword": "setCancelledText KCompletionBox::setCancelledText KCompletionBox", "text": "If the cancelled text is not set through this function the userCancelled signal will not be emitted userCancelled( const QString& ) text the text to be emitted if the user cancels this box"}, {"type": "slot", "name": "KCompletionBox::setItems", "url": "classKCompletionBox.html#a6b85cdf4a048565f61ce070750845de8", "keyword": "setItems KCompletionBox::setItems KCompletionBox", "text": ""}, {"type": "slot", "name": "KCompletionBox::setTabHandling", "url": "classKCompletionBox.html#ae048988dd55c5c39bd2e64c52be05bef", "keyword": "setTabHandling KCompletionBox::setTabHandling KCompletionBox", "text": "On by default but should be turned off when used in combination with KUrlCompletion When off KLineEdit handles Tab itself making it select the current item from the completion box which is particularly useful when using KUrlCompletion isTabHandling"}, {"type": "slot", "name": "KCompletionBox::setVisible", "url": "classKCompletionBox.html#aecaaa0b9390cf8905a59446c6b3a5dce", "keyword": "setVisible KCompletionBox::setVisible KCompletionBox", "text": "API is unaffected Call it only if you really need it i.e the widget was hidden before to have better performance"}, {"type": "slot", "name": "KCompletionBox::up", "url": "classKCompletionBox.html#a0789111fff26d5e7966aa8e0d4edac55", "keyword": "up KCompletionBox::up KCompletionBox", "text": ""}, {"type": "function", "name": "KCompletionBox::KCompletionBox", "url": "classKCompletionBox.html#a17f94ce41b891fc15325425be3bd7782", "keyword": "KCompletionBox KCompletionBox::KCompletionBox KCompletionBox", "text": "The parent widget is used to give the focus back when pressing the up-button on the very first item"}, {"type": "function", "name": "KCompletionBox::~KCompletionBox", "url": "classKCompletionBox.html#a7c86c4c783499bc467ea8465595427b9", "keyword": "KCompletionBox::~KCompletionBox KCompletionBox", "text": ""}, {"type": "function", "name": "KCompletionBox::activateOnSelect", "url": "classKCompletionBox.html#a4cd3f59694bcdd49cc530a42c37b7714", "keyword": "activateOnSelect KCompletionBox::activateOnSelect KCompletionBox", "text": "true if selecting an item results in the emission of the selected() signal"}, {"type": "function", "name": "KCompletionBox::cancelledText", "url": "classKCompletionBox.html#a63bf4bbca7dd4cf2e5aec93955a24a84", "keyword": "cancelledText KCompletionBox::cancelledText KCompletionBox", "text": "the text set via setCancelledText() or QString()"}, {"type": "function", "name": "KCompletionBox::isTabHandling", "url": "classKCompletionBox.html#ab0552852052c23bf30b1caf2318e27e1", "keyword": "isTabHandling KCompletionBox::isTabHandling KCompletionBox", "text": "true if this widget is handling Tab-key events to traverse the items in the dropdown list otherwise false Default is true setTabHandling"}, {"type": "function", "name": "KCompletionBox::items", "url": "classKCompletionBox.html#ac649d00b60b7a0d31fa0f547e8780b56", "keyword": "items KCompletionBox::items KCompletionBox", "text": ""}, {"type": "slot", "name": "KCompletionBox::slotActivated", "url": "classKCompletionBox.html#a1577e14b5112c4fc44fc4d6f5129ea6c", "keyword": "slotActivated KCompletionBox::slotActivated KCompletionBox", "text": "Emits activated() with the item"}, {"type": "function", "name": "KCompletionBox::calculateGeometry", "url": "classKCompletionBox.html#ae30c0d6821e6572a699fa1e2347c8003", "keyword": "calculateGeometry KCompletionBox::calculateGeometry KCompletionBox", "text": "This matches the geometry and position normally used by K/QComboBox when used with one"}, {"type": "function", "name": "KCompletionBox::eventFilter", "url": "classKCompletionBox.html#abf4dd77d21a44adb7fbbd3b365b41654", "keyword": "eventFilter KCompletionBox::eventFilter KCompletionBox", "text": ""}, {"type": "function", "name": "KCompletionBox::globalPositionHint", "url": "classKCompletionBox.html#ac150acac8743808bd1689a864098b267", "keyword": "globalPositionHint KCompletionBox::globalPositionHint KCompletionBox", "text": ""}, {"type": "function", "name": "KCompletionBox::resizeAndReposition", "url": "classKCompletionBox.html#a42a69bf36eb83fedeec330b745aa0eed", "keyword": "resizeAndReposition KCompletionBox::resizeAndReposition KCompletionBox", "text": "5.0"}, {"type": "function", "name": "KCompletionBox::sizeAndPosition", "url": "classKCompletionBox.html#a5dca87586a4128f2256409d3d71c407e", "keyword": "sizeAndPosition KCompletionBox::sizeAndPosition KCompletionBox", "text": "since 5.0 use resizeAndReposition instead"}, {"type": "class", "name": "KCompletionMatches", "url": "classKCompletionMatches.html", "keyword": "KCompletionMatches", "text": "It also keeps the weight of the matches allowing you to modify some matches or merge them with matches from another call to allWeightedMatches() and sort the matches after that in order to have the matches ordered correctly Example a simplified example of what Konqueror s completion does List for keeping matches returned from KCompletion"}, {"type": "function", "name": "KCompletionMatches::KCompletionMatches", "url": "classKCompletionMatches.html#a2871cda6b55df67ecb27e25b0efa2e18", "keyword": "KCompletionMatches KCompletionMatches::KCompletionMatches KCompletionMatches", "text": "sort if false the matches won t be sorted before the conversion use only if you re sure the sorting is not needed"}, {"type": "function", "name": "KCompletionMatches::KCompletionMatches", "url": "classKCompletionMatches.html#a8ec8720de1970a068b54c01e2bd39769", "keyword": "KCompletionMatches KCompletionMatches::KCompletionMatches KCompletionMatches", "text": ""}, {"type": "function", "name": "KCompletionMatches::KCompletionMatches", "url": "classKCompletionMatches.html#aeacdd7b074f8f6c15f8453dac959d5e7", "keyword": "KCompletionMatches KCompletionMatches::KCompletionMatches KCompletionMatches", "text": ""}, {"type": "function", "name": "KCompletionMatches::~KCompletionMatches", "url": "classKCompletionMatches.html#ac16c28e7c14738cb557affdcfd42ac57", "keyword": "KCompletionMatches::~KCompletionMatches KCompletionMatches", "text": ""}, {"type": "function", "name": "KCompletionMatches::list", "url": "classKCompletionMatches.html#a7724afe2b37033235e04fd23063fda36", "keyword": "list KCompletionMatches::list KCompletionMatches", "text": "sort if false the matches won t be sorted before the conversion use only if you re sure the sorting is not needed the list of matches"}, {"type": "function", "name": "KCompletionMatches::operator=", "url": "classKCompletionMatches.html#acb9ad7dd7f9b70881a0a222c6b86023d", "keyword": "operator= KCompletionMatches::operator= KCompletionMatches", "text": ""}, {"type": "function", "name": "KCompletionMatches::removeDuplicates", "url": "classKCompletionMatches.html#a97e81d4cbda35fc0af9e4df9421d67eb", "keyword": "removeDuplicates KCompletionMatches::removeDuplicates KCompletionMatches", "text": "Needed only when you merged several matches results and there s a possibility of duplicates"}, {"type": "function", "name": "KCompletionMatches::sorting", "url": "classKCompletionMatches.html#a9ad4dd926e220f29dfd6400220d5f8fe", "keyword": "sorting KCompletionMatches::sorting KCompletionMatches", "text": "true if the matches won t be sorted"}, {"type": "function", "name": "KSortableList::insert", "url": "classKSortableList.html#aef558054a890e60158c0a14814c95ba8", "keyword": "insert KSortableList::insert KSortableList< T, Key > insert KSortableList::insert KSortableList< T, Key >", "text": "i the first value t the second value"}, {"type": "function", "name": "KSortableList::operator[]", "url": "classKSortableList.html#ac97117e46fc1cce1458149f7750e065a", "keyword": "operator[] KSortableList::operator[] KSortableList< T, Key > operator[] KSortableList::operator[] KSortableList< T, Key >", "text": "the first value of the KSortableItem"}, {"type": "function", "name": "KSortableList::operator[]", "url": "classKSortableList.html#a37e9005eb72399ef8d9a68386c6e3ef7", "keyword": "operator[] KSortableList::operator[] KSortableList< T, Key > operator[] KSortableList::operator[] KSortableList< T, Key >", "text": "the first value of the KSortableItem"}, {"type": "function", "name": "KSortableList::sort", "url": "classKSortableList.html#abea8a8bdee279293d43521875de17e97", "keyword": "sort KSortableList::sort KSortableList< T, Key > sort KSortableList::sort KSortableList< T, Key >", "text": ""}, {"type": "class", "name": "KHistoryComboBox", "url": "classKHistoryComboBox.html", "keyword": "KHistoryComboBox", "text": "A combobox which implements a history like a unix shell You can navigate through all the items by using the Up or Down arrows configurable of course Additionally weighted completion is available So you should load and save the completion list to preserve the weighting between sessions KHistoryComboBox obeys the HISTCONTROL environment variable to determine whether duplicates in the history should be tolerated in addToHistory() or not During construction of KHistoryComboBox duplicates will be disabled when HISTCONTROL is set to or Otherwise duplicates are enabled by default KDE History Combo Box Carsten Pfeiffer"}, {"type": "signal", "name": "KHistoryComboBox::cleared", "url": "classKHistoryComboBox.html#ac2f7e9d15f33d1a2bbffd376cb84e0c5", "keyword": "cleared KHistoryComboBox::cleared KHistoryComboBox", "text": ""}, {"type": "slot", "name": "KHistoryComboBox::addToHistory", "url": "classKHistoryComboBox.html#a214c62c56b5ce6cbdaa96860134212ea", "keyword": "addToHistory KHistoryComboBox::addToHistory KHistoryComboBox", "text": "If maxCount() is reached the first item of the list will be removed If the last inserted item is the same as item it will not be inserted again If duplicatesEnabled() is false any equal existing item will be removed before item is added Note By using this method and not the Q and KComboBox insertItem() methods you make sure that the combobox stays in sync with the completion It would be annoying if completion would give an item not in the combobox and vice versa removeFromHistory QComboBox::setDuplicatesEnabled"}, {"type": "slot", "name": "KHistoryComboBox::clearHistory", "url": "classKHistoryComboBox.html#ab1583b7b2648c04b5275f1bddf460842", "keyword": "clearHistory KHistoryComboBox::clearHistory KHistoryComboBox", "text": ""}, {"type": "slot", "name": "KHistoryComboBox::reset", "url": "classKHistoryComboBox.html#af6ef37548be290c810e1603350393780", "keyword": "reset KHistoryComboBox::reset KHistoryComboBox", "text": "Call this when you manually call setCurrentItem() or clearEdit()"}, {"type": "function", "name": "KHistoryComboBox::KHistoryComboBox", "url": "classKHistoryComboBox.html#ac7afa92dab9a98253d2fab76343d4f4f", "keyword": "KHistoryComboBox KHistoryComboBox::KHistoryComboBox KHistoryComboBox", "text": "A read-only history combobox doesn t make much sense so it is only available as read-write Completion will be used automatically for the items in the combo The insertion-policy is set to NoInsert you have to add the items yourself via the slot addToHistory If you want every item added use Use QComboBox::setMaxCount() to limit the history parent the parent object of this widget"}, {"type": "function", "name": "KHistoryComboBox::KHistoryComboBox", "url": "classKHistoryComboBox.html#a7ff3ab5e95ad677b91ae46fc44b35956", "keyword": "KHistoryComboBox KHistoryComboBox::KHistoryComboBox KHistoryComboBox", "text": "If set to true KHistoryComboBox will sync the completion to the contents of the combobox"}, {"type": "function", "name": "KHistoryComboBox::~KHistoryComboBox", "url": "classKHistoryComboBox.html#abc2d06e0f649c684c1fad32526d2021a", "keyword": "KHistoryComboBox::~KHistoryComboBox KHistoryComboBox", "text": ""}, {"type": "function", "name": "KHistoryComboBox::historyItems", "url": "classKHistoryComboBox.html#aeb91c2f9abca0782f235b04799f30431", "keyword": "historyItems KHistoryComboBox::historyItems KHistoryComboBox", "text": "Empty when this is not a read-write combobox setHistoryItems"}, {"type": "function", "name": "KHistoryComboBox::pixmapProvider", "url": "classKHistoryComboBox.html#aae6e4b247f8d53b2815b87a713f6cf26", "keyword": "pixmapProvider KHistoryComboBox::pixmapProvider KHistoryComboBox", "text": "the current pixmap provider setPixmapProvider KPixmapProvider"}, {"type": "function", "name": "KHistoryComboBox::removeFromHistory", "url": "classKHistoryComboBox.html#a7386c004edbbb104299d37692f82c442", "keyword": "removeFromHistory KHistoryComboBox::removeFromHistory KHistoryComboBox", "text": "true if at least one item was removed addToHistory"}, {"type": "function", "name": "KHistoryComboBox::setHistoryItems", "url": "classKHistoryComboBox.html#acefc9d45277820fdc874826da12f6614", "keyword": "setHistoryItems KHistoryComboBox::setHistoryItems KHistoryComboBox", "text": "items might get truncated if it is longer than maxCount() historyItems"}, {"type": "function", "name": "KHistoryComboBox::setHistoryItems", "url": "classKHistoryComboBox.html#a274528d64673bbf0b7de2aff289795c8", "keyword": "setHistoryItems KHistoryComboBox::setHistoryItems KHistoryComboBox", "text": "items might get truncated if it is longer than maxCount() Set setCompletionList to true if you don t have a list of completions This tells KHistoryComboBox to use all the items for the completion object as well You won t have the benefit of weighted completion though so normally you should do something like Be sure to use different names for saving with KConfig if you have more than one KHistoryComboBox Note When setCompletionList is true the items are inserted into the KCompletion object with mode KCompletion::Insertion and the mode is set to KCompletion::Weighted afterwards historyItems KComboBox::completionObject KCompletion::setItems KCompletion::items"}, {"type": "function", "name": "KHistoryComboBox::setPixmapProvider", "url": "classKHistoryComboBox.html#a4df681db2180583f4ba5c7cec7bfa4bb", "keyword": "setPixmapProvider KHistoryComboBox::setPixmapProvider KHistoryComboBox", "text": "KPixmapProvider is just an abstract class with the one pure virtual method KPixmapProvider::pixmapFor() This method is called whenever an item is added to the KHistoryComboBoxBox Implement it to return your own custom pixmaps or use the KUrlPixmapProvider from KIO which uses KMimeType::pixmapForUrl to resolve icons Set provider to Q_NULLPTR if you want to disable pixmaps Default no pixmaps pixmapProvider"}, {"type": "function", "name": "KHistoryComboBox::insertItems", "url": "classKHistoryComboBox.html#aca5ffa5096d54c74afe664522d33f83d", "keyword": "insertItems KHistoryComboBox::insertItems KHistoryComboBox", "text": "Note duplicatesEnabled() is not honored here Called from setHistoryItems() and setPixmapProvider()"}, {"type": "function", "name": "KHistoryComboBox::keyPressEvent", "url": "classKHistoryComboBox.html#a87787c50b7dddabc67d294724286b264", "keyword": "keyPressEvent KHistoryComboBox::keyPressEvent KHistoryComboBox", "text": ""}, {"type": "function", "name": "KHistoryComboBox::useCompletion", "url": "classKHistoryComboBox.html#afa8b10e3dbb54286aafcebb9413758f3", "keyword": "useCompletion KHistoryComboBox::useCompletion KHistoryComboBox", "text": "if we can modify the completion object or not"}, {"type": "function", "name": "KHistoryComboBox::wheelEvent", "url": "classKHistoryComboBox.html#aeecc622d4b1d724b2c6f512615a7152e", "keyword": "wheelEvent KHistoryComboBox::wheelEvent KHistoryComboBox", "text": ""}, {"type": "class", "name": "KLineEdit", "url": "classKLineEdit.html", "keyword": "KLineEdit", "text": "Detail This widget inherits from QLineEdit and implements the following additional functionalities a completion object that provides both automatic and manual text completion as well as multiple match iteration features configurable key-bindings to activate these features and a popup-menu item that can be used to allow the user to set text completion modes on the fly based on their preference To support these new features KLineEdit also emits a few more additional signals These are completion( const QString& ) textRotation( KeyBindingType ) and returnPressed( const QString& ) The completion signal can be connected to a slot that will assist the user in filling out the remaining text The text rotation signal is intended to be used to iterate through the list of all possible matches whenever there is more than one match for the entered text The returnPressed( const QString& ) signals are the same as QLineEdit s except it provides the current text in the widget as its argument whenever appropriate This widget by default creates a completion object when you invoke the completionObject( bool ) member function for the first time or use setCompletionObject( KCompletion*, bool ) to assign your own completion object Additionally to make this widget more functional KLineEdit will by default handle the text rotation and completion events internally when a completion object is created through either one of the methods mentioned above If you do not need this functionality simply use KCompletionBase::setHandleSignals( bool ) or set the boolean parameter in the above functions to false The default key-bindings for completion and rotation is determined from the global settings in KStandardShortcut These values however can be overridden locally by invoking KCompletionBase::setKeyBinding() The values can easily be reverted back to the default setting by simply calling useGlobalSettings() An alternate method would be to default individual key-bindings by using setKeyBinding() with the default second argument If EchoMode for this widget is set to something other than QLineEdit::Normal the completion mode will always be defaulted to CompletionNone This is done purposefully to guard against protected entries such as passwords being cached in KCompletion s list Hence if the EchoMode is not QLineEdit::Normal the completion mode is automatically disabled A read-only KLineEdit will have the same background color as a disabled KLineEdit but its foreground color will be the one used for the read-write mode This differs from QLineEdit s implementation and is done to give visual distinction between the three different modes disabled read-only and read-write KLineEdit has also a password mode which depends of globals KDE settings Use KLineEdit::setPasswordMode instead of QLineEdit::echoMode property to have a password field Usage To enable the basic completion feature To use a customized completion objects or your own completion object Note if you specify your own completion object you have to either delete it when you don t need it anymore or you can tell KLineEdit to delete it for you Miscellaneous function calls KDE Line Edit Widgets with clear-button Dawit Alemayehu"}, {"type": "signal", "name": "KLineEdit::aboutToShowContextMenu", "url": "classKLineEdit.html#a588fed28f7e9e6d760788b6efb32a4c2", "keyword": "aboutToShowContextMenu KLineEdit::aboutToShowContextMenu KLineEdit", "text": "The signal allows you to add your own entries into the the context menu that is created on demand NOTE Do not store the pointer to the QMenu provided through since it is created and deleted on demand contextMenu the context menu about to be displayed"}, {"type": "signal", "name": "KLineEdit::clearButtonClicked", "url": "classKLineEdit.html#aac8618980ad7d3967683c70d6a47c796", "keyword": "clearButtonClicked KLineEdit::clearButtonClicked KLineEdit", "text": ""}, {"type": "signal", "name": "KLineEdit::completion", "url": "classKLineEdit.html#ab48964dc7ff75dde1559a70e44e956f5", "keyword": "completion KLineEdit::completion KLineEdit", "text": "Please note that this signal is not emitted if the completion mode is set to CompletionNone or EchoMode is normal"}, {"type": "signal", "name": "KLineEdit::completionBoxActivated", "url": "classKLineEdit.html#a9c304f4374bb8825797bab161e8ec28d", "keyword": "completionBoxActivated KLineEdit::completionBoxActivated KLineEdit", "text": ""}, {"type": "signal", "name": "KLineEdit::completionModeChanged", "url": "classKLineEdit.html#aaa7a5f573de6049b5cf63d688620364d", "keyword": "completionModeChanged KLineEdit::completionModeChanged KLineEdit", "text": ""}, {"type": "signal", "name": "KLineEdit::returnPressed", "url": "classKLineEdit.html#a8202b1e44f3250e61b2f300d387b7917", "keyword": "returnPressed KLineEdit::returnPressed KLineEdit", "text": "The argument is the current text Note that this signal is not emitted if the widget s EchoMode is set to QLineEdit::EchoMode"}, {"type": "signal", "name": "KLineEdit::substringCompletion", "url": "classKLineEdit.html#adab7821b3859d88c27447480233d8e21", "keyword": "substringCompletion KLineEdit::substringCompletion KLineEdit", "text": ""}, {"type": "signal", "name": "KLineEdit::textRotation", "url": "classKLineEdit.html#a950fcb35f90a91bbc1c54d1ea423ed21", "keyword": "textRotation KLineEdit::textRotation KLineEdit", "text": "The argument indicates which key-binding was pressed In KLineEdit s case this can be either one of two values PrevCompletionMatch or NextCompletionMatch See KCompletionBase::setKeyBinding for details Note that this signal is not emitted if the completion mode is set to CompletionNone or echoMode() is not normal"}, {"type": "signal", "name": "KLineEdit::userTextChanged", "url": "classKLineEdit.html#a04489622e43eb1416c1c284424a6ba04", "keyword": "userTextChanged KLineEdit::userTextChanged KLineEdit", "text": "But not when automatic completion changes the text temporarily 4.2.2 since 4.5 You probably want to connect to textEdited() instead which is emitted whenever the text is actually changed by the user by typing or accepting autocompletion without side effects from suggested autocompletion either userTextChanged isn t needed anymore"}, {"type": "slot", "name": "KLineEdit::passwordMode", "url": "classKLineEdit.html#a26b4a9382893b6250fe58a4768d547c1", "keyword": "passwordMode KLineEdit::passwordMode KLineEdit", "text": "returns true if the lineedit is set to password mode echoing"}, {"type": "slot", "name": "KLineEdit::rotateText", "url": "classKLineEdit.html#a38075439851dc1c7019aa182e27a7e83", "keyword": "rotateText KLineEdit::rotateText KLineEdit", "text": "This function simply iterates over all possible matches in case multiple matches are found as a result of a text completion request It will have no effect if only a single match is found type The key-binding invoked"}, {"type": "slot", "name": "KLineEdit::setCompletedItems", "url": "classKLineEdit.html#a899d28546b5a08eef009357fcbfc04b0", "keyword": "setCompletedItems KLineEdit::setCompletedItems KLineEdit", "text": "items list of completion matches to be shown in the completion box autoSuggest true if you want automatic text completion suggestion enabled"}, {"type": "slot", "name": "KLineEdit::setCompletedText", "url": "classKLineEdit.html#a08de5133f11de6694d00b48370c749e4", "keyword": "setCompletedText KLineEdit::setCompletedText KLineEdit", "text": ""}, {"type": "slot", "name": "KLineEdit::setPasswordMode", "url": "classKLineEdit.html#a4f2eb72a6c8f0226ef2a444f3652c36c", "keyword": "setPasswordMode KLineEdit::setPasswordMode KLineEdit", "text": "this change the EchoMode according to KDE preferences passwordMode true to set in password mode"}, {"type": "slot", "name": "KLineEdit::setReadOnly", "url": "classKLineEdit.html#a34dd2383e4c75489920ae65d4c0ce86e", "keyword": "setReadOnly KLineEdit::setReadOnly KLineEdit", "text": "Similar to QLineEdit::setReadOnly but also takes care of the background color and the clear button"}, {"type": "slot", "name": "KLineEdit::setSqueezedText", "url": "classKLineEdit.html#ab4899f5fd024ef5c21e87ff3ad9ae556", "keyword": "setSqueezedText KLineEdit::setSqueezedText KLineEdit", "text": "This can only be used with read-only line-edits"}, {"type": "slot", "name": "KLineEdit::setText", "url": "classKLineEdit.html#a48675b4c9e2138b7fe345ffccb9f5b66", "keyword": "setText KLineEdit::setText KLineEdit", "text": "API is not affected"}, {"type": "function", "name": "KLineEdit::KLineEdit", "url": "classKLineEdit.html#a3f69f000bc9afa8e2b12b22d834b2ef1", "keyword": "KLineEdit KLineEdit::KLineEdit KLineEdit", "text": "string Text to be shown in the edit widget parent The parent widget of the line edit"}, {"type": "function", "name": "KLineEdit::KLineEdit", "url": "classKLineEdit.html#a4d54f704935c5706322e9c5f8701f851", "keyword": "KLineEdit KLineEdit::KLineEdit KLineEdit", "text": "parent The parent widget of the line edit"}, {"type": "function", "name": "KLineEdit::~KLineEdit", "url": "classKLineEdit.html#a13dca564e4ecae77c87c4aff0ab1e964", "keyword": "KLineEdit::~KLineEdit KLineEdit", "text": ""}, {"type": "function", "name": "KLineEdit::clearButtonUsedSize", "url": "classKLineEdit.html#a337f2e9c2a309b9aa5abd0002c0cc18d", "keyword": "clearButtonUsedSize KLineEdit::clearButtonUsedSize KLineEdit", "text": "the size used by the clear button 4.1"}, {"type": "function", "name": "KLineEdit::clickMessage", "url": "classKLineEdit.html#aa8d44e0ad872934b62f10574ff09266f", "keyword": "clickMessage KLineEdit::clickMessage KLineEdit", "text": "the message set with setClickMessage since 5.0 use QLineEdit::placeholderText instead"}, {"type": "function", "name": "KLineEdit::completionBox", "url": "classKLineEdit.html#ad3bc57bfc4d530e172162c3a11e34466", "keyword": "completionBox KLineEdit::completionBox KLineEdit", "text": "the completion-box that is used in completion mode CompletionPopup This method will create a completion-box if none is there yet create Set this to false if you don t want the box to be created i.e to test if it is available"}, {"type": "function", "name": "KLineEdit::copy", "url": "classKLineEdit.html#ae7d737e48be10b3992bf0278c0423942", "keyword": "copy KLineEdit::copy KLineEdit", "text": ""}, {"type": "function", "name": "KLineEdit::doCompletion", "url": "classKLineEdit.html#ae114a102d3faa28c68695756f9e3fdd2", "keyword": "doCompletion KLineEdit::doCompletion KLineEdit", "text": "This is called automatically when typing a key for instance Emits completion() and/or calls makeCompletion() depending on emitSignals and handleSignals 4.2.1"}, {"type": "function", "name": "KLineEdit::isClearButtonShown", "url": "classKLineEdit.html#a4a7093d56bc8a4b416c70b3c28db1ab6", "keyword": "isClearButtonShown KLineEdit::isClearButtonShown KLineEdit", "text": "whether or not the clear button is shown"}, {"type": "function", "name": "KLineEdit::isContextMenuEnabled", "url": "classKLineEdit.html#aebd7d781c78fcb96e172488483b52302", "keyword": "isContextMenuEnabled KLineEdit::isContextMenuEnabled KLineEdit", "text": "since 4.5 use contextMenuPolicy instead"}, {"type": "function", "name": "KLineEdit::isSqueezedTextEnabled", "url": "classKLineEdit.html#af76d1c1083102ffa5f82897a7f26d747", "keyword": "isSqueezedTextEnabled KLineEdit::isSqueezedTextEnabled KLineEdit", "text": "This is only valid when the widget is in read-only mode"}, {"type": "function", "name": "KLineEdit::originalText", "url": "classKLineEdit.html#ac3a387b9b3ec65b9ee7801e24b856876", "keyword": "originalText KLineEdit::originalText KLineEdit", "text": "If the widget is not in mode this function returns the same thing as QLineEdit::text() QLineEdit"}, {"type": "function", "name": "KLineEdit::setClearButtonShown", "url": "classKLineEdit.html#a913223c1430d2d254a076210a8379c69", "keyword": "setClearButtonShown KLineEdit::setClearButtonShown KLineEdit", "text": "This is useful for such things as location or search bars"}, {"type": "function", "name": "KLineEdit::setClickMessage", "url": "classKLineEdit.html#a99a046759a544bdfd9b0f782cf545b2b", "keyword": "setClickMessage KLineEdit::setClickMessage KLineEdit", "text": "It is often used as indication about the purpose of the line edit since 5.0 use QLineEdit::setPlaceholderText instead"}, {"type": "function", "name": "KLineEdit::setCompletionBox", "url": "classKLineEdit.html#a674b01f26e0f6e1ee16b68295380afe4", "keyword": "setCompletionBox KLineEdit::setCompletionBox KLineEdit", "text": "This will do nothing if a completion-box already exists box The KCompletionBox to set"}, {"type": "function", "name": "KLineEdit::setCompletionMode", "url": "classKLineEdit.html#a14d0b257525152d33508f416ed2a9b27", "keyword": "setCompletionMode KLineEdit::setCompletionMode KLineEdit", "text": "This function is re-implemented in order to make sure that the EchoMode is acceptable before we set the completion mode See KCompletionBase::setCompletionMode"}, {"type": "function", "name": "KLineEdit::setCompletionModeDisabled", "url": "classKLineEdit.html#ab994396c5de277cdef20462a2a4777f3", "keyword": "setCompletionModeDisabled KLineEdit::setCompletionModeDisabled KLineEdit", "text": "The context menu allows to change the completion mode This method allows to disable some modes"}, {"type": "function", "name": "KLineEdit::setCompletionObject", "url": "classKLineEdit.html#a3a8fd676f4407c177b3e691b3051c5df", "keyword": "setCompletionObject KLineEdit::setCompletionObject KLineEdit", "text": ""}, {"type": "function", "name": "KLineEdit::setContextMenuEnabled", "url": "classKLineEdit.html#a08a90926858de58b16bed7db318da4c9", "keyword": "setContextMenuEnabled KLineEdit::setContextMenuEnabled KLineEdit", "text": "This method only works if this widget is editable i.e read-write and allows you to enable/disable the context menu It does nothing if invoked for a none-editable combo-box By default the context menu is created if this widget is editable Call this function with the argument set to false to disable the popup menu showMenu If true show the context menu since 4.5 use setContextMenuPolicy instead"}, {"type": "function", "name": "KLineEdit::setSqueezedTextEnabled", "url": "classKLineEdit.html#a36ff757ba9713009672b53648f2bc6e7", "keyword": "setSqueezedTextEnabled KLineEdit::setSqueezedTextEnabled KLineEdit", "text": "Only works for mode Note that once text squeezing is enabled QLineEdit::text() and QLineEdit::displayText() return the squeezed text If you want the original text use originalText QLineEdit"}, {"type": "function", "name": "KLineEdit::setTrapReturnKey", "url": "classKLineEdit.html#a2c2d71612ffc771001d817908d4e7911", "keyword": "setTrapReturnKey KLineEdit::setTrapReturnKey KLineEdit", "text": "Call this method with trap true to make KLineEdit stop these events The signals will still be emitted of course trapReturnKey()"}, {"type": "function", "name": "KLineEdit::setUrl", "url": "classKLineEdit.html#a219a32bf9fe467a7b21db706a0614c9f", "keyword": "setUrl KLineEdit::setUrl KLineEdit", "text": "It uses QUrl::toDisplayString() so that the url is properly decoded for displaying"}, {"type": "function", "name": "KLineEdit::setUrlDropsEnabled", "url": "classKLineEdit.html#aaa093c035a4cb233bb99da6cf78ac48f", "keyword": "setUrlDropsEnabled KLineEdit::setUrlDropsEnabled KLineEdit", "text": "If enabled and the user drops an URL the decoded URL will be inserted Otherwise the default behavior of QLineEdit is used which inserts the encoded URL Call setUrlDropsEnabled(false) if you need dropEvent to be called in a KLineEdit subclass enable If true insert decoded URLs"}, {"type": "function", "name": "KLineEdit::trapReturnKey", "url": "classKLineEdit.html#a1255cf7ec392edeaebc45d112b31c68d", "keyword": "trapReturnKey KLineEdit::trapReturnKey KLineEdit", "text": "true if keyevents of Key_Return or Key_Enter will be stopped or if they will be propagated setTrapReturnKey"}, {"type": "function", "name": "KLineEdit::urlDropsEnabled", "url": "classKLineEdit.html#a83fe16b22812743af7230243f73ca4b4", "keyword": "urlDropsEnabled KLineEdit::urlDropsEnabled KLineEdit", "text": ""}, {"type": "function", "name": "KLineEdit::userText", "url": "classKLineEdit.html#a23d9215182ca3691d2c894b2f48c44fa", "keyword": "userText KLineEdit::userText KLineEdit", "text": "not autocompleted if the widget has autocompletion disabled this function returns the same as QLineEdit::text() 4.2.2"}, {"type": "slot", "name": "KLineEdit::makeCompletion", "url": "classKLineEdit.html#afca8254520ccc29dca6f616ed0d5926b", "keyword": "makeCompletion KLineEdit::makeCompletion KLineEdit", "text": ""}, {"type": "slot", "name": "KLineEdit::userCancelled", "url": "classKLineEdit.html#af21fbd1c21ee9dcaeb09b7621e587bbf", "keyword": "userCancelled KLineEdit::userCancelled KLineEdit", "text": "Call this function to revert a text completion if the user cancels the request Mostly applies to popup completions"}, {"type": "function", "name": "KLineEdit::autoSuggest", "url": "classKLineEdit.html#a89b231730dd0d88cee2c8c4ccab98c60", "keyword": "autoSuggest KLineEdit::autoSuggest KLineEdit", "text": ""}, {"type": "function", "name": "KLineEdit::contextMenuEvent", "url": "classKLineEdit.html#aa8d61394c4d63f0634a338c5f43713db", "keyword": "contextMenuEvent KLineEdit::contextMenuEvent KLineEdit", "text": "API not affected See QLineEdit::contextMenuEvent()"}, {"type": "function", "name": "KLineEdit::createStandardContextMenu", "url": "classKLineEdit.html#a4346719b587e5017728c32af22d5a082", "keyword": "createStandardContextMenu KLineEdit::createStandardContextMenu KLineEdit", "text": "API not affected See QLineEdit::createStandardContextMenu()"}, {"type": "function", "name": "KLineEdit::event", "url": "classKLineEdit.html#a07e9cc315c982c74d2044a37b5aad27a", "keyword": "event KLineEdit::event KLineEdit", "text": "API not affected"}, {"type": "function", "name": "KLineEdit::keyPressEvent", "url": "classKLineEdit.html#a59a3025ce79c9c216bc8725a92934e38", "keyword": "keyPressEvent KLineEdit::keyPressEvent KLineEdit", "text": "API not affected See QLineEdit::keyPressEvent()"}, {"type": "function", "name": "KLineEdit::mouseDoubleClickEvent", "url": "classKLineEdit.html#ad24e4785b1caaab4651cb26a9f475461", "keyword": "mouseDoubleClickEvent KLineEdit::mouseDoubleClickEvent KLineEdit", "text": "API not affected See QWidget::mouseDoubleClickEvent()"}, {"type": "function", "name": "KLineEdit::mousePressEvent", "url": "classKLineEdit.html#ad6c758d97f2dd76e366ea19463dd0d97", "keyword": "mousePressEvent KLineEdit::mousePressEvent KLineEdit", "text": "API not affected See QLineEdit::mousePressEvent()"}, {"type": "function", "name": "KLineEdit::mouseReleaseEvent", "url": "classKLineEdit.html#aaf0cb7a3b593494cef4400c074a7ac7d", "keyword": "mouseReleaseEvent KLineEdit::mouseReleaseEvent KLineEdit", "text": "API not affected See QLineEdit::mouseReleaseEvent()"}, {"type": "function", "name": "KLineEdit::resizeEvent", "url": "classKLineEdit.html#a9895249ac860baf5d1c1fa7355707e6e", "keyword": "resizeEvent KLineEdit::resizeEvent KLineEdit", "text": "API not affected See QLineEdit::resizeEvent()"}, {"type": "function", "name": "KLineEdit::setCompletedText", "url": "classKLineEdit.html#afc57840fc4dce94cd0a8c3f32a08895c", "keyword": "setCompletedText KLineEdit::setCompletedText KLineEdit", "text": "text marked"}, {"type": "function", "name": "KLineEdit::setUserSelection", "url": "classKLineEdit.html#a6edd34d42e54a6803984c47de8c305dd", "keyword": "setUserSelection KLineEdit::setUserSelection KLineEdit", "text": "This changes the colors of selections"}, {"type": "class", "name": "KPixmapProvider", "url": "classKPixmapProvider.html", "keyword": "KPixmapProvider", "text": "It will be called whenever an icon is searched for text Used e.g by KHistoryComboBox Carsten Pfeiffer an abstract interface for looking up icons"}, {"type": "function", "name": "KPixmapProvider::pixmapFor", "url": "classKPixmapProvider.html#a79cc0e193d4dfd991de27b87633b03af", "keyword": "pixmapFor KPixmapProvider::pixmapFor KPixmapProvider", "text": "text the text that is associated with the pixmap size the size of the icon in pixels 0 for defaylt size See KIconLoader::StdSize the pixmap for the arguments or null if there is none"}, {"type": "function", "name": "KPixmapProvider::virtual_hook", "url": "classKPixmapProvider.html#a4561de78171af97335cbbdc0dbc7c674", "keyword": "virtual_hook KPixmapProvider::virtual_hook KPixmapProvider", "text": "Unused in this class"}, {"type": "class", "name": "KSortableItem", "url": "classKSortableItem.html", "keyword": "KSortableItem", "text": "KSortableList"}, {"type": "function", "name": "KSortableItem::KSortableItem", "url": "classKSortableItem.html#aa95ff307da319cf3a52cf9ebe0c5d407", "keyword": "KSortableItem KSortableItem::KSortableItem KSortableItem< T, Key >", "text": "i the first value the key t the second value the item"}, {"type": "function", "name": "KSortableItem::KSortableItem", "url": "classKSortableItem.html#a2a0bbe66e512de03666b7f8de35f4d59", "keyword": "KSortableItem KSortableItem::KSortableItem KSortableItem< T, Key >", "text": "rhs the other item to copy"}, {"type": "function", "name": "KSortableItem::KSortableItem", "url": "classKSortableItem.html#ae175f517752ed8835fbfab13a16c5b75", "keyword": "KSortableItem KSortableItem::KSortableItem KSortableItem< T, Key >", "text": ""}, {"type": "function", "name": "KSortableItem::index", "url": "classKSortableItem.html#a61916acb9410eec028b69d8f85c77a17", "keyword": "index KSortableItem::index KSortableItem< T, Key >", "text": "the first value the key use key()"}, {"type": "function", "name": "KSortableItem::key", "url": "classKSortableItem.html#a13e229fb82b0aa46ccbee79b0c0ef36a", "keyword": "key KSortableItem::key KSortableItem< T, Key >", "text": "the first value"}, {"type": "function", "name": "KSortableItem::operator!=", "url": "classKSortableItem.html#a0b7496cb352dccfe8b1eb29a8a696e5b", "keyword": "operator!= KSortableItem::operator!= KSortableItem< T, Key >", "text": "This implementation only compares the first value"}, {"type": "function", "name": "KSortableItem::operator<", "url": "classKSortableItem.html#ae83a540d2cc1a323ceec615017ebb52c", "keyword": "operator< KSortableItem::operator< KSortableItem< T, Key >", "text": "This implementation only compares the first value"}, {"type": "function", "name": "KSortableItem::operator<=", "url": "classKSortableItem.html#a7da0c4fe251da1b1275cb51f1ceddb33", "keyword": "operator<= KSortableItem::operator<= KSortableItem< T, Key >", "text": "This implementation only compares the first value"}, {"type": "function", "name": "KSortableItem::operator=", "url": "classKSortableItem.html#a38b20a88f121adb95f13e559fd7901bc", "keyword": "operator= KSortableItem::operator= KSortableItem< T, Key >", "text": ""}, {"type": "function", "name": "KSortableItem::operator==", "url": "classKSortableItem.html#ab535233ca0769f695ed5cf23065d3389", "keyword": "operator== KSortableItem::operator== KSortableItem< T, Key >", "text": "This implementation only compares the first value"}, {"type": "function", "name": "KSortableItem::operator>", "url": "classKSortableItem.html#a7b5bef77af0975621730cdf35930ae9b", "keyword": "operator> KSortableItem::operator> KSortableItem< T, Key >", "text": "This implementation only compares the first value"}, {"type": "function", "name": "KSortableItem::operator>=", "url": "classKSortableItem.html#af12fae5e489f22c1a35cf6ec051b0a63", "keyword": "operator>= KSortableItem::operator>= KSortableItem< T, Key >", "text": "This implementation only compares the first value"}, {"type": "function", "name": "KSortableItem::value", "url": "classKSortableItem.html#a7a2aaa7fe3c58c156e6d7cd741b70b70", "keyword": "value KSortableItem::value KSortableItem< T, Key >", "text": "the second value the item"}, {"type": "function", "name": "KSortableItem::value", "url": "classKSortableItem.html#ab4a3683238577db970452e347c8244af", "keyword": "value KSortableItem::value KSortableItem< T, Key >", "text": "the second value the item"}, {"type": "class", "name": "KSortableList", "url": "classKSortableList.html", "keyword": "KSortableList", "text": "This key is used for sorting when calling sort() This allows to temporarily calculate a key and use it for sorting without having to store that key in the items or calculate that key many times for the same item during sorting if that calculation is expensive"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KCompletion Powerful completion framework including completion-enabled lineedit and combobox Introduction When typing filenames email addresses and other text where the user often wants to select from existing data including what they previously typed rather than enter anything wholly original users often find it helpful if they only need to type the first few characters and then have the application offer them a set of choices or attempt to finish off what they were typing Email clients shells and dialogs often provide this functionality This framework helps implement this in Qt-based applications You can use one of the completion-ready widgets provided by this framework or integrate it into your application s other widgets directly Usage The easiest way to get started is to use a KComboBox KHistoryComboBox or KLineEdit If you want to integrate completion into other parts of the user interface you can use KCompletion to manage and select the possible completions"}]}