{"name": "kwindowsystem-5.26.0", "fancyname": "KWindowSystem", "docfields": [{"type": "page", "name": "deprecated", "url": "deprecated.html", "keyword": null, "text": "Deprecated List Member KStartupInfo KStartupInfo bool clean_on_cantdetect QObject 0 since 5.0 Member KStartupInfo sendChangeX Display const KStartupInfoId id const KStartupInfoData data since 5.18 use sendChangeXcb Member KStartupInfo sendFinishX Display const KStartupInfoId id const KStartupInfoData data since 5.18 use sendFinishXcb Member KStartupInfo sendFinishX Display const KStartupInfoId id since 5.18 use sendFinishXcb Member KStartupInfo sendStartupX Display const KStartupInfoId id const KStartupInfoData data since 5.18 use sendStartupXcb Member KWindowSystem groupLeader WId window Use KWindowInfo::groupLeader Member KWindowSystem minimizeWindow WId win bool animation since 5.0 the animation is ignored Member KWindowSystem transientFor WId window Use KWindowInfo::transientFor Member KWindowSystem unminimizeWindow WId win bool animation since 5.0 the animation is ignored Member KWindowSystem windowChanged WId id const unsigned long since 5.0 use windowChanged(WId, NET::Properties, NET::Properties2) Member KWindowSystem windowChanged WId id unsigned int properties The window changed Member KWindowSystem windowInfo WId win NET::Properties properties NET::Properties2 properties2 0 use KWindowInfo directly Member KXMessages broadcastMessageX Display const char const QString message int screen since 5.0 use xcb variant Member NET Override has unclear meaning and is KDE-only Member NET StaysOnTop This is an obsolete name for KeepAbove Member NETRootInfo event xcb_generic_event_t unsigned long int properties_size since 5.0 use event(xcb_generic_event_t*, NET::Properties*, NET::Properties2*) Class NETStrut use NETExtendedStrut Member NETWinInfo event xcb_generic_event_t unsigned long int properties_size since 5.0 use event(xcb_generic_event_t*, NET::Properties*, NET::Properties2*) Member NETWinInfo NETWinInfo xcb_connection_t xcb_window_t window xcb_window_t rootWindow NET::Properties properties Role role Client since 5.0 use above ctor Member NETWinInfo setStrut NETStrut strut use setExtendedStrut() Set the strut for the application window Member NETWinInfo strut const use strutPartial() Returns the strut specified by this client"}, {"type": "class", "name": "KSelectionOwner", "url": "classKSelectionOwner.html", "keyword": "KSelectionOwner", "text": "The selection atom is passed to the constructor claim() attemps to claim ownership of the selection release() gives up the selection ownership Signal lostOwnership() is emitted when the selection is claimed by another owner ICCCM manager selection owner This class is only useful on the xcb platform On other platforms the code is only functional if the constructor overloads taking an xcb_connection_t are used In case you inherit from this class ensure that you don t use xcb and/or XLib without verifying the platform"}, {"type": "signal", "name": "KSelectionOwner::claimedOwnership", "url": "classKSelectionOwner.html#a850f95606e259ec5782a34dee81151d9", "keyword": "claimedOwnership KSelectionOwner::claimedOwnership KSelectionOwner", "text": ""}, {"type": "signal", "name": "KSelectionOwner::failedToClaimOwnership", "url": "classKSelectionOwner.html#a587d9e43f65da3743bca98b3194628d5", "keyword": "failedToClaimOwnership KSelectionOwner::failedToClaimOwnership KSelectionOwner", "text": ""}, {"type": "signal", "name": "KSelectionOwner::lostOwnership", "url": "classKSelectionOwner.html#ab8ce76fb9a643416242ba45420c8b260", "keyword": "lostOwnership KSelectionOwner::lostOwnership KSelectionOwner", "text": "IMPORTANT It s not safe to delete the instance in a slot connected to this signal"}, {"type": "function", "name": "KSelectionOwner::KSelectionOwner", "url": "classKSelectionOwner.html#a9ba1fbe497e7bec7f8e5cc9003134bd7", "keyword": "KSelectionOwner KSelectionOwner::KSelectionOwner KSelectionOwner", "text": "selection atom representing the manager selection screen X screen or for default parent parent object or NULL if there is none"}, {"type": "function", "name": "KSelectionOwner::KSelectionOwner", "url": "classKSelectionOwner.html#a46cd860a3e62f3599bc37b483eecfefc", "keyword": "KSelectionOwner KSelectionOwner::KSelectionOwner KSelectionOwner", "text": "selection name of the manager selection screen X screen or for default parent parent object or NULL if there is none"}, {"type": "function", "name": "KSelectionOwner::KSelectionOwner", "url": "classKSelectionOwner.html#a50f2c2bf5fbdad7b7c6ee4cb886e703a", "keyword": "KSelectionOwner KSelectionOwner::KSelectionOwner KSelectionOwner", "text": "Otherwise this constructor behaves like the similar one without the xcb_connection_t selection atom representing the manager selection c the xcb connection this KSelectionWatcher should use root the root window this KSelectionWatcher should use parent parent object or NULL if there is none 5.8"}, {"type": "function", "name": "KSelectionOwner::KSelectionOwner", "url": "classKSelectionOwner.html#a2583b55cc0c30c7e4feb0c485757bd29", "keyword": "KSelectionOwner KSelectionOwner::KSelectionOwner KSelectionOwner", "text": "Otherwise this constructor behaves like the similar one without the xcb_connection_t selection name of the manager selection c the xcb connection this KSelectionWatcher should use root the root window this KSelectionWatcher should use parent parent object or NULL if there is none 5.8"}, {"type": "function", "name": "KSelectionOwner::~KSelectionOwner", "url": "classKSelectionOwner.html#a15673162d1adae28e855bc9d8c2691ba", "keyword": "KSelectionOwner::~KSelectionOwner KSelectionOwner", "text": "Calls release()"}, {"type": "function", "name": "KSelectionOwner::claim", "url": "classKSelectionOwner.html#aae7de74271def7cfb3075b69eecbb5c2", "keyword": "claim KSelectionOwner::claim KSelectionOwner", "text": "This function returns immediately but it may take up to one second for the claim to succeed or fail at which point either the claimedOwnership() or failedToClaimOwnership() signal is emitted The claim will not be completed until the caller has returned to the event loop If force is false and the selection is already owned the selection is not claimed and failedToClaimOwnership() is emitted If force is true and the selection is owned by another client the client will be given one second to relinquish ownership of the selection If force_kill is true and the previous owner fails to disown the selection in time it will be forcibly killed"}, {"type": "function", "name": "KSelectionOwner::filterEvent", "url": "classKSelectionOwner.html#ae1abaab1b03179ed7a6e59fd4660f6ca", "keyword": "filterEvent KSelectionOwner::filterEvent KSelectionOwner", "text": ""}, {"type": "function", "name": "KSelectionOwner::ownerWindow", "url": "classKSelectionOwner.html#a4070624e3733be27195f4e34b2e66880", "keyword": "ownerWindow KSelectionOwner::ownerWindow KSelectionOwner", "text": ""}, {"type": "function", "name": "KSelectionOwner::release", "url": "classKSelectionOwner.html#a209f6993ec407d44c5c363c3b75558a3", "keyword": "release KSelectionOwner::release KSelectionOwner", "text": ""}, {"type": "function", "name": "KSelectionOwner::timerEvent", "url": "classKSelectionOwner.html#a5eadd8947302aea87abcfd5b7345cc10", "keyword": "timerEvent KSelectionOwner::timerEvent KSelectionOwner", "text": ""}, {"type": "function", "name": "KSelectionOwner::genericReply", "url": "classKSelectionOwner.html#a0ede03a255665f463fef6b2c5eae3eae", "keyword": "genericReply KSelectionOwner::genericReply KSelectionOwner", "text": "If true is returned the event is filtered out Called when a SelectionRequest event is received A reply should be sent using the selection handling mechanism described in the ICCCM section 2 target requested target type property property to use for the reply data requestor requestor window"}, {"type": "function", "name": "KSelectionOwner::getAtoms", "url": "classKSelectionOwner.html#aba05e98469b6178d4aca6c518f8596a5", "keyword": "getAtoms KSelectionOwner::getAtoms KSelectionOwner", "text": "The default implementation must be called if reimplemented This method may be called repeatedly"}, {"type": "function", "name": "KSelectionOwner::replyTargets", "url": "classKSelectionOwner.html#ae56f45844958115800d8a34015294b89", "keyword": "replyTargets KSelectionOwner::replyTargets KSelectionOwner", "text": "The default implementation announces the required targets MULTIPLE TIMESTAMP and TARGETS"}, {"type": "function", "name": "KSelectionOwner::setData", "url": "classKSelectionOwner.html#a23943c7a17a0452a6dfb61708f680c57", "keyword": "setData KSelectionOwner::setData KSelectionOwner", "text": "These extra data are in data.l 3 and data.l 4 fields of the XClientMessage"}, {"type": "class", "name": "KSelectionWatcher", "url": "classKSelectionWatcher.html", "keyword": "KSelectionWatcher", "text": "It emits signal newOwner() when a new owner claim the selection and emits lostOwner() when the selection ownership is given up To find out current owner of the selection owner() can be used ICCCM manager selection watching This class is only useful on the xcb platform On other platforms the code is only functional if the constructor overloads taking an xcb_connection_t are used In case you inherit from this class ensure that you don t use xcb and/or XLib without verifying the platform"}, {"type": "signal", "name": "KSelectionWatcher::lostOwner", "url": "classKSelectionWatcher.html#aca52c5ecffb48923807f6aa79eebe11b", "keyword": "lostOwner KSelectionWatcher::lostOwner KSelectionWatcher", "text": "there s no owner Note that the selection may be immediatelly claimed again so the newOwner() signal may be emitted right after this one It s safe to delete the instance in a slot connected to this signal"}, {"type": "signal", "name": "KSelectionWatcher::newOwner", "url": "classKSelectionWatcher.html#a1a881308a9a3adde593ef16044907f0e", "keyword": "newOwner KSelectionWatcher::newOwner KSelectionWatcher", "text": "owner the new owner of the selection"}, {"type": "function", "name": "KSelectionWatcher::KSelectionWatcher", "url": "classKSelectionWatcher.html#acf708d83e63f2a22bed3218459358fb2", "keyword": "KSelectionWatcher KSelectionWatcher::KSelectionWatcher KSelectionWatcher", "text": "selection atom representing the manager selection screen X screen or for default parent parent object or NULL if there is none"}, {"type": "function", "name": "KSelectionWatcher::KSelectionWatcher", "url": "classKSelectionWatcher.html#ae4cab470a9133063db2b7118a552d406", "keyword": "KSelectionWatcher KSelectionWatcher::KSelectionWatcher KSelectionWatcher", "text": "selection name of the manager selection screen X screen or for default parent parent object or NULL if there is none"}, {"type": "function", "name": "KSelectionWatcher::KSelectionWatcher", "url": "classKSelectionWatcher.html#ae816d65596d60f37dbeea798d48a5e27", "keyword": "KSelectionWatcher KSelectionWatcher::KSelectionWatcher KSelectionWatcher", "text": "Otherwise this constructor behaves like the similar one without the xcb_connection_t selection atom representing the manager selection c the xcb connection this KSelectionWatcher should use root the root window this KSelectionWatcher should use 5.8"}, {"type": "function", "name": "KSelectionWatcher::KSelectionWatcher", "url": "classKSelectionWatcher.html#a09cd63e700cd01ba5f04f2374ee8209f", "keyword": "KSelectionWatcher KSelectionWatcher::KSelectionWatcher KSelectionWatcher", "text": "Otherwise this constructor behaves like the similar one without the xcb_connection_t selection name of the manager selection c the xcb connection this KSelectionWatcher should use root the root window this KSelectionWatcher should use 5.8"}, {"type": "function", "name": "KSelectionWatcher::filterEvent", "url": "classKSelectionWatcher.html#a6834171daf84f90e055514ecb9102d2f", "keyword": "filterEvent KSelectionWatcher::filterEvent KSelectionWatcher", "text": ""}, {"type": "function", "name": "KSelectionWatcher::owner", "url": "classKSelectionWatcher.html#a38fb4d7370bf7aeca691a676e292e76c", "keyword": "owner KSelectionWatcher::owner KSelectionWatcher", "text": "Note that if the event informing about the owner change is still in the input queue newOwner() might have been emitted yet"}, {"type": "class", "name": "KStartupInfo", "url": "classKStartupInfo.html", "keyword": "KStartupInfo", "text": "This class can be used to send information about started application change the information and receive this information For detailed description see kdelibs/kdecore/README.kstartupinfo You usually don t need to use this class for sending the notification information as KDE libraries should do this when an application is started e.g KRun class For receiving the startup notification info create an instance and connect to its slots It will automatically detect started applications and when they are ready KStartupInfoId KStartupInfoData Lubos Lunak"}, {"type": "enum", "name": "KStartupInfo::startup_t", "url": "classKStartupInfo.html#a14ff94e935414facd7bea4177eb15843", "keyword": "startup_t KStartupInfo::startup_t KStartupInfo", "text": "NoMatch the window doesn t match any existing startup notification Match the window matches an existing startup notification CantDetect unable to detect if the window matches any existing startup notification"}, {"type": "signal", "name": "KStartupInfo::gotNewStartup", "url": "classKStartupInfo.html#ac29b6cd75f0bdccd369c154ccec3a151", "keyword": "gotNewStartup KStartupInfo::gotNewStartup KStartupInfo", "text": "a new application is being started id the notification identification data the notification data"}, {"type": "signal", "name": "KStartupInfo::gotRemoveStartup", "url": "classKStartupInfo.html#ab9787fe944af2b30199be271603300d3", "keyword": "gotRemoveStartup KStartupInfo::gotRemoveStartup KStartupInfo", "text": "id the notification identification data the notification data"}, {"type": "signal", "name": "KStartupInfo::gotStartupChange", "url": "classKStartupInfo.html#ac1855325159c211974108c8ae8a20be4", "keyword": "gotStartupChange KStartupInfo::gotStartupChange KStartupInfo", "text": "id the notification identification data the notification data"}, {"type": "function", "name": "KStartupInfo::KStartupInfo", "url": "classKStartupInfo.html#af2a53237d3ab8da943acab51e5387105", "keyword": "KStartupInfo KStartupInfo::KStartupInfo KStartupInfo", "text": "The various flags passed may be CleanOnCantDetect when a new unknown window appears all startup notifications for applications that are not compliant with the startup protocol are removed DisableKWinModule KWinModule which is normally used to detect new windows is disabled With this flag checkStartup() must be called in order to check newly mapped windows AnnounceSilenceChanges normally startup notifications are when they re silenced and when they re resumed With this flag the change is normally announced with gotStartupChange() flags OR-ed combination of flags parent the parent of this QObject can be 0 for no parent"}, {"type": "function", "name": "KStartupInfo::KStartupInfo", "url": "classKStartupInfo.html#ac6c746f4d2985e3f2ba025390e032682", "keyword": "KStartupInfo KStartupInfo::KStartupInfo KStartupInfo", "text": "clean_on_cantdetect if true and a new unknown window appears removes all notification for applications that are not compliant with the app startup protocol parent the parent of this QObject can be 0 for no parent since 5.0"}, {"type": "function", "name": "KStartupInfo::checkStartup", "url": "classKStartupInfo.html#a61c33eed3ee1f4d69cfb5060f7e508e6", "keyword": "checkStartup KStartupInfo::checkStartup KStartupInfo", "text": "w the window id to check the result of the operation"}, {"type": "function", "name": "KStartupInfo::checkStartup", "url": "classKStartupInfo.html#aad51fa046e21cced1f4a91b2417e56ce", "keyword": "checkStartup KStartupInfo::checkStartup KStartupInfo", "text": "w the window id to check id if found the id of the startup notification will be written here the result of the operation"}, {"type": "function", "name": "KStartupInfo::checkStartup", "url": "classKStartupInfo.html#a4cfb827f30b159551567af8ed0d350af", "keyword": "checkStartup KStartupInfo::checkStartup KStartupInfo", "text": "w the window id to check data if found the data of the startup notification will be written here the result of the operation"}, {"type": "function", "name": "KStartupInfo::checkStartup", "url": "classKStartupInfo.html#a05213eec48eba279c0ac25db55107dd3", "keyword": "checkStartup KStartupInfo::checkStartup KStartupInfo", "text": "w the window id to check id if found the id of the startup notification will be written here data if found the data of the startup notification will be written here the result of the operation"}, {"type": "function", "name": "KStartupInfo::setTimeout", "url": "classKStartupInfo.html#a032993d3c40202e63745c4aebb9f642d", "keyword": "setTimeout KStartupInfo::setTimeout KStartupInfo", "text": "secs the new timeout in seconds"}, {"type": "function", "name": "KStartupInfo::appStarted", "url": "classKStartupInfo.html#a24a4ac3828a06c65af8090d48a49e5d1", "keyword": "appStarted KStartupInfo::appStarted KStartupInfo", "text": "If you do not map a toplevel window then startup notification will not disappear for the application until a timeout You can use this as an alternative method in this case"}, {"type": "function", "name": "KStartupInfo::appStarted", "url": "classKStartupInfo.html#aab7534b0cad55284ff055442952c64ab", "keyword": "appStarted KStartupInfo::appStarted KStartupInfo", "text": ""}, {"type": "function", "name": "KStartupInfo::createNewStartupId", "url": "classKStartupInfo.html#afaa020835e66680c117747c8ad313ace", "keyword": "createNewStartupId KStartupInfo::createNewStartupId KStartupInfo", "text": "The id includes properly setup user timestamp On the X11 platform the current timestamp will be fetched from the X-Server If the caller has an adaquat timestamp e.g from a QMouseEvent it should prefer using createNewStartupIdForTimestamp to not trigger a roundtrip to the X-Server createNewStartupIdForTimestamp"}, {"type": "function", "name": "KStartupInfo::createNewStartupIdForTimestamp", "url": "classKStartupInfo.html#a9ac981279a3a7a3d87ae4a917a5a8ac8", "keyword": "createNewStartupIdForTimestamp KStartupInfo::createNewStartupIdForTimestamp KStartupInfo", "text": "timestamp The timestamp for the startup id createNewStartupId 5.5"}, {"type": "function", "name": "KStartupInfo::currentStartupIdEnv", "url": "classKStartupInfo.html#ad0eb915555d8c3d984bde4b32406387e", "keyword": "currentStartupIdEnv KStartupInfo::currentStartupIdEnv KStartupInfo", "text": "Note that KApplication constructor unsets the variable and you have to use KApplication::startupId the current startup notification identification"}, {"type": "function", "name": "KStartupInfo::resetStartupEnv", "url": "classKStartupInfo.html#a8e8cfdb428f0e74c915d5577fb0dfe10", "keyword": "resetStartupEnv KStartupInfo::resetStartupEnv KStartupInfo", "text": ""}, {"type": "function", "name": "KStartupInfo::sendChange", "url": "classKStartupInfo.html#a6dd6155a22a516f6f84eab701f115dc1", "keyword": "sendChange KStartupInfo::sendChange KStartupInfo", "text": "This is used for updating the notification info if no notification for this identification exists it s ignored id the id of the application data the application s data true if successful false otherwise KStartupInfoId KStartupInfoData"}, {"type": "function", "name": "KStartupInfo::sendChangeX", "url": "classKStartupInfo.html#a8a1e24c1d875f70c0dffc21aff246b0b", "keyword": "sendChangeX KStartupInfo::sendChangeX KStartupInfo", "text": "dpy the display of the application id the id of the application data the application s data true if successful false otherwise since 5.18 use sendChangeXcb"}, {"type": "function", "name": "KStartupInfo::sendChangeXcb", "url": "classKStartupInfo.html#aa19be0587024f62ebf3e7d1dfebce853", "keyword": "sendChangeXcb KStartupInfo::sendChangeXcb KStartupInfo", "text": "conn the xcb connection of the application screen The x11 screen the connection belongs to id the id of the application data the application s data true if successful false otherwise 5.18"}, {"type": "function", "name": "KStartupInfo::sendFinish", "url": "classKStartupInfo.html#ad91e250a9fa439d2fc95299e68e3a4bd", "keyword": "sendFinish KStartupInfo::sendFinish KStartupInfo", "text": "id the id of the application true if successful false otherwise"}, {"type": "function", "name": "KStartupInfo::sendFinish", "url": "classKStartupInfo.html#a30d700c99705bf17888769e80fd175e6", "keyword": "sendFinish KStartupInfo::sendFinish KStartupInfo", "text": "PIDs of processes for this startup notification that exited id the id of the application data the application s data true if successful false otherwise"}, {"type": "function", "name": "KStartupInfo::sendFinishX", "url": "classKStartupInfo.html#aad4f7c3403919e32ab55a418d408649e", "keyword": "sendFinishX KStartupInfo::sendFinishX KStartupInfo", "text": "dpy the display of the application id the id of the application true if successful false otherwise since 5.18 use sendFinishXcb"}, {"type": "function", "name": "KStartupInfo::sendFinishX", "url": "classKStartupInfo.html#a1e003438b913cf0f2696b76917b45104", "keyword": "sendFinishX KStartupInfo::sendFinishX KStartupInfo", "text": "dpy the display of the application id the id of the application data the application s data true if successful false otherwise since 5.18 use sendFinishXcb"}, {"type": "function", "name": "KStartupInfo::sendFinishXcb", "url": "classKStartupInfo.html#adb81d1aae0254d760b9690e131f46953", "keyword": "sendFinishXcb KStartupInfo::sendFinishXcb KStartupInfo", "text": "conn the xcb connection of the application screen The x11 screen the connection belongs to id the id of the application true if successful false otherwise 5.18"}, {"type": "function", "name": "KStartupInfo::sendFinishXcb", "url": "classKStartupInfo.html#a409f88737d27a05eca43f1e90dab196e", "keyword": "sendFinishXcb KStartupInfo::sendFinishXcb KStartupInfo", "text": "conn the xcb connection of the application screen The x11 screen the connection belongs to id the id of the application data the application s data true if successful false otherwise 5.18"}, {"type": "function", "name": "KStartupInfo::sendStartup", "url": "classKStartupInfo.html#a617accc81738e76713bbd3956ddec9b2", "keyword": "sendStartup KStartupInfo::sendStartup KStartupInfo", "text": "If no notification for this identification exists yet it is created otherwise it s updated Note that the name field in data is required id the id of the application data the application s data true if successful false otherwise KStartupInfoId KStartupInfoData"}, {"type": "function", "name": "KStartupInfo::sendStartupX", "url": "classKStartupInfo.html#a3f29c95250e817abb314196612b4ed25", "keyword": "sendStartupX KStartupInfo::sendStartupX KStartupInfo", "text": "dpy the display of the application Note that the name field in data is required id the id of the application data the application s data true if successful false otherwise since 5.18 use sendStartupXcb"}, {"type": "function", "name": "KStartupInfo::sendStartupXcb", "url": "classKStartupInfo.html#a759c076313d219487aeddff6158afad8", "keyword": "sendStartupXcb KStartupInfo::sendStartupXcb KStartupInfo", "text": "conn the xcb connection of the application Note that the name field in data is required screen The x11 screen the connection belongs to id the id of the application data the application s data true if successful false otherwise 5.18"}, {"type": "function", "name": "KStartupInfo::setNewStartupId", "url": "classKStartupInfo.html#a3cee4fc464df9f18276d98609ebf1df1", "keyword": "setNewStartupId KStartupInfo::setNewStartupId KStartupInfo", "text": "when khelpcenter opens new URL in its window The window can be either an already existing and visible window or a new one before being shown Note that this function is usually needed only when a window is reused"}, {"type": "function", "name": "KStartupInfo::setStartupId", "url": "classKStartupInfo.html#acd274ab683025f22236d2b84b4a4f31b", "keyword": "setStartupId KStartupInfo::setStartupId KStartupInfo", "text": "startup_id the startup notification identifier KStartupInfo::setNewStartupId"}, {"type": "function", "name": "KStartupInfo::setWindowStartupId", "url": "classKStartupInfo.html#a819a12e54346d8be814a914d7d3874be", "keyword": "setWindowStartupId KStartupInfo::setWindowStartupId KStartupInfo", "text": "window the id of the window id the startup notification id"}, {"type": "function", "name": "KStartupInfo::silenceStartup", "url": "classKStartupInfo.html#af919bb5570da1e00457746b6f4aa1512", "keyword": "silenceStartup KStartupInfo::silenceStartup KStartupInfo", "text": "To temporarily suspend and resume the notification use this function Note that this is cumulative i.e after suspending twice you have to resume twice"}, {"type": "function", "name": "KStartupInfo::startupId", "url": "classKStartupInfo.html#adde69db7956c38bc9ed967e9c3a53def", "keyword": "startupId KStartupInfo::startupId KStartupInfo", "text": "the startup notification identifier"}, {"type": "function", "name": "KStartupInfo::windowStartupId", "url": "classKStartupInfo.html#a67aea070b0f1e62bb94ffab41a21f17f", "keyword": "windowStartupId KStartupInfo::windowStartupId KStartupInfo", "text": "w the id of the window the startup notification id Can be null if not found"}, {"type": "class", "name": "KStartupInfoData", "url": "classKStartupInfoData.html", "keyword": "KStartupInfoData", "text": "Such data include the icon of the starting application the desktop on which the application should start the binary name of the application etc KStartupInfo KStartupInfoId Lubos Lunak"}, {"type": "function", "name": "KStartupInfoData::KStartupInfoData", "url": "classKStartupInfoData.html#a9edda3b026a9a378d6135dd30d15ff8c", "keyword": "KStartupInfoData KStartupInfoData::KStartupInfoData KStartupInfoData", "text": "Initializes all the data to their default empty values"}, {"type": "function", "name": "KStartupInfoData::KStartupInfoData", "url": "classKStartupInfoData.html#a338d92816a97f5e7dbfff0ff764c030c", "keyword": "KStartupInfoData KStartupInfoData::KStartupInfoData KStartupInfoData", "text": ""}, {"type": "function", "name": "KStartupInfoData::addPid", "url": "classKStartupInfoData.html#a56c615764a16ff59f0c7c9c959541f01", "keyword": "addPid KStartupInfoData::addPid KStartupInfoData", "text": "It may be used to increase the chance that the windows created by the starting application will be detected correctly and also for detecting if the application has quit without creating any window pid the PID to add"}, {"type": "function", "name": "KStartupInfoData::applicationId", "url": "classKStartupInfoData.html#a38d4c2b67c08834599063981c5b13244", "keyword": "applicationId KStartupInfoData::applicationId KStartupInfoData", "text": "This information should be used only to identify the application not to read any additional information 4.5"}, {"type": "function", "name": "KStartupInfoData::bin", "url": "classKStartupInfoData.html#a56ad26342e192054a6a2763a3fca4fe5", "keyword": "bin KStartupInfoData::bin KStartupInfoData", "text": "the new binary name of the application"}, {"type": "function", "name": "KStartupInfoData::description", "url": "classKStartupInfoData.html#a0df7d1584a815bb94044feacf19721d9", "keyword": "description KStartupInfoData::description KStartupInfoData", "text": "the name of the startup notificaiton or an empty string if not set"}, {"type": "function", "name": "KStartupInfoData::desktop", "url": "classKStartupInfoData.html#ad5d3ebf5fd09a7d044f91dc99af6b852", "keyword": "desktop KStartupInfoData::desktop KStartupInfoData", "text": "the desktop for the startup notification"}, {"type": "function", "name": "KStartupInfoData::findDescription", "url": "classKStartupInfoData.html#a01d06ae1051b0c9df0416a79b5413e09", "keyword": "findDescription KStartupInfoData::findDescription KStartupInfoData", "text": "If it s not available it returns name() the description of the startup notification"}, {"type": "function", "name": "KStartupInfoData::findIcon", "url": "classKStartupInfoData.html#a4317bc047f2ca0500dfd7b06f2e15c7c", "keyword": "findIcon KStartupInfoData::findIcon KStartupInfoData", "text": "the name of the startup notification s icon or the name of the binary if not set"}, {"type": "function", "name": "KStartupInfoData::findName", "url": "classKStartupInfoData.html#afae41a4879cc46ba2a1a62d1cf293a33", "keyword": "findName KStartupInfoData::findName KStartupInfoData", "text": "If it s not available it tries to use other information binary name the name of the startup notification"}, {"type": "function", "name": "KStartupInfoData::findWMClass", "url": "classKStartupInfoData.html#ab8af773df3b00e6aaff08a887ee88e9e", "keyword": "findWMClass KStartupInfoData::findWMClass KStartupInfoData", "text": "the WM_CLASS value for the startup notification or the binary name if not set"}, {"type": "function", "name": "KStartupInfoData::hostname", "url": "classKStartupInfoData.html#ad214b03eb80e723371f790b40378735d", "keyword": "hostname KStartupInfoData::hostname KStartupInfoData", "text": "the hostname"}, {"type": "function", "name": "KStartupInfoData::icon", "url": "classKStartupInfoData.html#ab71155cf06e00922a4b0d5d085e675da", "keyword": "icon KStartupInfoData::icon KStartupInfoData", "text": "the name of the icon or an empty string if not set"}, {"type": "function", "name": "KStartupInfoData::is_pid", "url": "classKStartupInfoData.html#ac8e1174148071589e7d9b0563b4a8dfa", "keyword": "is_pid KStartupInfoData::is_pid KStartupInfoData", "text": "true if the given pid is in the list of PIDs for the startup notification"}, {"type": "function", "name": "KStartupInfoData::launchedBy", "url": "classKStartupInfoData.html#a5dcbf9ac0d61500d7e2f58cc679daa8b", "keyword": "launchedBy KStartupInfoData::launchedBy KStartupInfoData", "text": ""}, {"type": "function", "name": "KStartupInfoData::name", "url": "classKStartupInfoData.html#a56acb5aa1abf867fd5424b13f6954931", "keyword": "name KStartupInfoData::name KStartupInfoData", "text": "the name of the startup notification or an empty string if not set"}, {"type": "function", "name": "KStartupInfoData::pids", "url": "classKStartupInfoData.html#a563eb5182a230eca07c63e1539bd757e", "keyword": "pids KStartupInfoData::pids KStartupInfoData", "text": "the list of all PIDs"}, {"type": "function", "name": "KStartupInfoData::screen", "url": "classKStartupInfoData.html#a7846757b83742d9dd58876f2b4e78807", "keyword": "screen KStartupInfoData::screen KStartupInfoData", "text": ""}, {"type": "function", "name": "KStartupInfoData::setApplicationId", "url": "classKStartupInfoData.html#ae259c826f465e01264d38d419e086c2c", "keyword": "setApplicationId KStartupInfoData::setApplicationId KStartupInfoData", "text": "4.5"}, {"type": "function", "name": "KStartupInfoData::setBin", "url": "classKStartupInfoData.html#a8e60c173fae73691b1e3a1da73700fe2", "keyword": "setBin KStartupInfoData::setBin KStartupInfoData", "text": "kcontrol bin the new binary name of the application"}, {"type": "function", "name": "KStartupInfoData::setDescription", "url": "classKStartupInfoData.html#a9fb7724d3c359562c7d9494c673d7935", "keyword": "setDescription KStartupInfoData::setDescription KStartupInfoData", "text": "Launching Control Center I.e name() describes what is being started while description() is the actual action performed by the starting"}, {"type": "function", "name": "KStartupInfoData::setDesktop", "url": "classKStartupInfoData.html#a3500a60366743243e99395f2b238c55b", "keyword": "setDesktop KStartupInfoData::setDesktop KStartupInfoData", "text": "the desktop on which the starting application should appear desktop the desktop for the startup notification"}, {"type": "function", "name": "KStartupInfoData::setHostname", "url": "classKStartupInfoData.html#a20413af8c5ac69e93990a26fd9f587f2", "keyword": "setHostname KStartupInfoData::setHostname KStartupInfoData", "text": "It s necessary to set it if PIDs are set hostname the application s hostname If it s a null string the current hostname is used"}, {"type": "function", "name": "KStartupInfoData::setIcon", "url": "classKStartupInfoData.html#a816dc1cf00e28d5eee3b791c8f5671e3", "keyword": "setIcon KStartupInfoData::setIcon KStartupInfoData", "text": "kcontrol icon the name of the icon"}, {"type": "function", "name": "KStartupInfoData::setLaunchedBy", "url": "classKStartupInfoData.html#a64b3ca4dbf552fc6cfd64c5073955a0d", "keyword": "setLaunchedBy KStartupInfoData::setLaunchedBy KStartupInfoData", "text": "window window ID of the toplevel window that is responsible for this startup"}, {"type": "function", "name": "KStartupInfoData::setName", "url": "classKStartupInfoData.html#a588b6ca52626ba82745b88a93bd49095", "keyword": "setName KStartupInfoData::setName KStartupInfoData", "text": "Control Center"}, {"type": "function", "name": "KStartupInfoData::setScreen", "url": "classKStartupInfoData.html#aec44e055c5fc59e423c0570322daf54a", "keyword": "setScreen KStartupInfoData::setScreen KStartupInfoData", "text": "This is usually not necessary to set as it s set by default to QX11Info::screen()"}, {"type": "function", "name": "KStartupInfoData::setSilent", "url": "classKStartupInfoData.html#ac7ff8e4196cd31399cc2cd595a373e2e", "keyword": "setSilent KStartupInfoData::setSilent KStartupInfoData", "text": ""}, {"type": "function", "name": "KStartupInfoData::setWMClass", "url": "classKStartupInfoData.html#a7864480d3e4e7cee7bae4ead7d832ec7", "keyword": "setWMClass KStartupInfoData::setWMClass KStartupInfoData", "text": "wmclass the WM_CLASS value for the startup notification"}, {"type": "function", "name": "KStartupInfoData::setXinerama", "url": "classKStartupInfoData.html#a60cb9fb47133a98ee58ea43df3eed95c", "keyword": "setXinerama KStartupInfoData::setXinerama KStartupInfoData", "text": "the screeen on which the starting application should appear xinerama the Xinerama screen for the startup notification"}, {"type": "function", "name": "KStartupInfoData::silent", "url": "classKStartupInfoData.html#a2b77d6c80498bee93e30f81274a6c6f0", "keyword": "silent KStartupInfoData::silent KStartupInfoData", "text": "KStartupInfoData::Yes if visual feedback is silenced"}, {"type": "function", "name": "KStartupInfoData::update", "url": "classKStartupInfoData.html#a1d53526c146286cf41b8345424863c28", "keyword": "update KStartupInfoData::update KStartupInfoData", "text": "Some data such as the desktop or the name won t be rewritten if already set data the data to update"}, {"type": "function", "name": "KStartupInfoData::WMClass", "url": "classKStartupInfoData.html#a1b9c5deec86c39b7ebe91c5fd30bcd0a", "keyword": "WMClass KStartupInfoData::WMClass KStartupInfoData", "text": "the WM_CLASS value for the startup notification or empty if not set"}, {"type": "function", "name": "KStartupInfoData::xinerama", "url": "classKStartupInfoData.html#a87e6e506c45ff8e2c43ad38d7654e534", "keyword": "xinerama KStartupInfoData::xinerama KStartupInfoData", "text": ""}, {"type": "class", "name": "KStartupInfoId", "url": "classKStartupInfoId.html", "keyword": "KStartupInfoId", "text": "Every existing notification about a starting application has its own unique identification that s used to identify and manipulate the notification KStartupInfo KStartupInfoData Lubos Lunak"}, {"type": "function", "name": "KStartupInfoId::KStartupInfoId", "url": "classKStartupInfoId.html#a3f69c9d94b4dfd25a1483cb0a215dde0", "keyword": "KStartupInfoId KStartupInfoId::KStartupInfoId KStartupInfoId", "text": ""}, {"type": "function", "name": "KStartupInfoId::KStartupInfoId", "url": "classKStartupInfoId.html#a8e9b3d0ad3d3682757bc361ea1115789", "keyword": "KStartupInfoId KStartupInfoId::KStartupInfoId KStartupInfoId", "text": ""}, {"type": "function", "name": "KStartupInfoId::id", "url": "classKStartupInfoId.html#ace2c7bae0af21240c4d8ff051c2d2a9b", "keyword": "id KStartupInfoId::id KStartupInfoId", "text": "the identification string for the notification"}, {"type": "function", "name": "KStartupInfoId::initId", "url": "classKStartupInfoId.html#a045a22f63825a7c822986b0845ba382d", "keyword": "initId KStartupInfoId::initId KStartupInfoId", "text": "id the new identification for no notification or to read the environment variable"}, {"type": "function", "name": "KStartupInfoId::isNull", "url": "classKStartupInfoId.html#a2f224b13339629f01c60118221c462c0", "keyword": "isNull KStartupInfoId::isNull KStartupInfoId", "text": "true if this object doesn t represent a valid notification identification"}, {"type": "function", "name": "KStartupInfoId::operator!=", "url": "classKStartupInfoId.html#a8b4f6744e05d2153f8cb4b71d6ebeabf", "keyword": "operator!= KStartupInfoId::operator!= KStartupInfoId", "text": "true if the notification identifications are different"}, {"type": "function", "name": "KStartupInfoId::operator==", "url": "classKStartupInfoId.html#aa915963c1662df06399a48485d6f444d", "keyword": "operator== KStartupInfoId::operator== KStartupInfoId", "text": "true if the notification identifications are the same"}, {"type": "function", "name": "KStartupInfoId::setupStartupEnv", "url": "classKStartupInfoId.html#a287905c62ddda413f3833d9eadd63cb2", "keyword": "setupStartupEnv KStartupInfoId::setupStartupEnv KStartupInfoId", "text": "true if successful false otherwise"}, {"type": "function", "name": "KStartupInfoId::timestamp", "url": "classKStartupInfoId.html#a3144702f80c23fbc3f19f2c242684593", "keyword": "timestamp KStartupInfoId::timestamp KStartupInfoId", "text": ""}, {"type": "class", "name": "KWindowInfo", "url": "classKWindowInfo.html", "keyword": "KWindowInfo", "text": "It provides the information for the current state when a KWindowInfo instance gets created The instance does not get updated when the window changes To get update about window changes connect to the windowChanged signal of KWindowSystem and create a new KWindowInfo instance to reflect the current state KWindowInfo does not encapsulate all information about the window One needs to request which information is required by passing the appropriate NET::Property and NET::Property2 flags to the constructor Please refer to the documentation of the methods to see which flags are required This is done to limit the interaction with the underlying windowing system as fetching the information can cause several context switches and roundtrips to a server instance e.g when using the X11 platform Please note that KWindowInfo is an abstraction of the underlying windowing system inspired by the X11 platform Thus not all concepts apply to all platforms and some methods might return a default value for some platforms Example usage of this class illustrated by monitoring a QWidget for change of the demands attention window state"}, {"type": "function", "name": "KWindowInfo::KWindowInfo", "url": "classKWindowInfo.html#adc84f679cb7e41a6d8162aec269b5d1c", "keyword": "KWindowInfo KWindowInfo::KWindowInfo KWindowInfo", "text": "Only the information requested through the properties and properties2 parameters are fetched Refer to the methods you are interested in to see which flags to pass window The platform specific window identifier properties Bitmask of NET::Property properties2 Bitmask of NET::Property2"}, {"type": "function", "name": "KWindowInfo::KWindowInfo", "url": "classKWindowInfo.html#a705ac028602f1fe7ed38567bb71d3688", "keyword": "KWindowInfo KWindowInfo::KWindowInfo KWindowInfo", "text": ""}, {"type": "function", "name": "KWindowInfo::actionSupported", "url": "classKWindowInfo.html#a68ec3e0dc25380ce64dfe1c52b2e116a", "keyword": "actionSupported KWindowInfo::actionSupported KWindowInfo", "text": "On platform X11 the supported actions are set by the window manager and can differ depending on the window manager Requires NET::WM2AllowedActions passed as properties2 parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::activities", "url": "classKWindowInfo.html#aea17f97765e326e1714a36c9788a54b1", "keyword": "activities KWindowInfo::activities KWindowInfo", "text": "The Plasma workspace allows the user to separate her work into different activities by assigning windows documents etc to the specific ones An activity is an abstract concept whose meaning can differ from one user to another Typical examples of activities are etc If the list is empty or contains a null UUID the window is on all activities Requires NET::WM2Activities passed as properties parameter to the constructor Activities are only supported on Plasma Workspace on X11 5.0"}, {"type": "function", "name": "KWindowInfo::clientMachine", "url": "classKWindowInfo.html#aed9f10e12e08ae0cc1968583002d322d", "keyword": "clientMachine KWindowInfo::clientMachine KWindowInfo", "text": "On platform X11 this is the value of the WM_CLIENT_MACHINE property Requires NET::WM2ClientMachine passed as properties2 parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::desktop", "url": "classKWindowInfo.html#ae03a929a10f29d4ccce69e688b3fa7ec", "keyword": "desktop KWindowInfo::desktop KWindowInfo", "text": "If the window is on all desktops NET::OnAllDesktops is returned You should prefer using isOnDesktop() Requires NET::WMDesktop passed as properties parameter to the constructor isOnDesktop()"}, {"type": "function", "name": "KWindowInfo::extendedStrut", "url": "classKWindowInfo.html#a40a5b7dabca5ea6ab4f9ac9ae4d27ac1", "keyword": "extendedStrut KWindowInfo::extendedStrut KWindowInfo", "text": "Requires NET::WM2ExtendedStrut passed as properties2 parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::frameGeometry", "url": "classKWindowInfo.html#ae8c23daf062a483ac3a6ec553470d8c7", "keyword": "frameGeometry KWindowInfo::frameGeometry KWindowInfo", "text": "including the window decoration Requires NET::WMFrameExtents passed as properties parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::geometry", "url": "classKWindowInfo.html#ac5670640b20828266c07286b70829dc9", "keyword": "geometry KWindowInfo::geometry KWindowInfo", "text": "Requires NET::WMGeometry passed as properties parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::groupLeader", "url": "classKWindowInfo.html#abfdd340d7324bcf88d025a55a3a37690", "keyword": "groupLeader KWindowInfo::groupLeader KWindowInfo", "text": "Requires NET::WM2GroupLeader passed as properties2 parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::hasState", "url": "classKWindowInfo.html#aa4707b17298ab0973c9b8dac7ed36f1b", "keyword": "hasState KWindowInfo::hasState KWindowInfo", "text": "Requires NET::WMState passed as properties parameter to the constructor NET::State"}, {"type": "function", "name": "KWindowInfo::iconName", "url": "classKWindowInfo.html#a2ee6ce92e378eb8789cec17ab8b17641", "keyword": "iconName KWindowInfo::iconName KWindowInfo", "text": "Note that this has nothing to do with normal icons but with an representation of the window Requires NET::WMIconName passed as properties parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::isMinimized", "url": "classKWindowInfo.html#a4be2fef752258d396af6104d271a88b0", "keyword": "isMinimized KWindowInfo::isMinimized KWindowInfo", "text": "Note that it is true only if the window is truly minimized not shaded or on another virtual desktops which makes it different from mappingState() NET::Iconic or QWidget::isMinimized() Requires NET::WMState and NET::XAWMState passed as properties parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::isOnCurrentDesktop", "url": "classKWindowInfo.html#a89434dbcf60ce201c0c46573980134dc", "keyword": "isOnCurrentDesktop KWindowInfo::isOnCurrentDesktop KWindowInfo", "text": "Requires NET::WMDesktop passed as properties parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::isOnDesktop", "url": "classKWindowInfo.html#a9dde0a0631cac332fe96b95cfa8d8d50", "keyword": "isOnDesktop KWindowInfo::isOnDesktop KWindowInfo", "text": "Requires NET::WMDesktop passed as properties parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::mappingState", "url": "classKWindowInfo.html#ae720a1e8679a1adfc02b927b0037b0c1", "keyword": "mappingState KWindowInfo::mappingState KWindowInfo", "text": "Note that it s very likely that you don t want to use this function and use isOnDesktop() isMinimized() etc instead Requires NET::XAWMState passed as properties parameter to the constructor NET::MappingState isOnDesktop() isMinimzed()"}, {"type": "function", "name": "KWindowInfo::name", "url": "classKWindowInfo.html#afc6f59d43d679a5fa8f560170c879c28", "keyword": "name KWindowInfo::name KWindowInfo", "text": "The difference to visibleName() is that this is the name provided by the application without any modifications by the window manager You should often use visibleName() instead Requires NET::WMName passed as properties parameter to the constructor visibleName()"}, {"type": "function", "name": "KWindowInfo::onAllDesktops", "url": "classKWindowInfo.html#ac224751c24789d922725b6c50085da6e", "keyword": "onAllDesktops KWindowInfo::onAllDesktops KWindowInfo", "text": "A window is on all desktops if desktop() returns NET::OnAllDesktops Requires NET::WMDesktop passed as properties parameter to the constructor desktop()"}, {"type": "function", "name": "KWindowInfo::operator=", "url": "classKWindowInfo.html#ab5374fc1a7a8198efd737de8cbc9a681", "keyword": "operator= KWindowInfo::operator= KWindowInfo", "text": ""}, {"type": "function", "name": "KWindowInfo::state", "url": "classKWindowInfo.html#a48bbaefcad809f73568ba6969571e3eb", "keyword": "state KWindowInfo::state KWindowInfo", "text": "Requires NET::WMState passed as properties parameter to the constructor NET::State"}, {"type": "function", "name": "KWindowInfo::transientFor", "url": "classKWindowInfo.html#aad98ddb3d808cec12f3499d216d85736", "keyword": "transientFor KWindowInfo::transientFor KWindowInfo", "text": "On platform X11 this is the value of the WM_TRANSIENT_FOR property Requires NET::WM2TransientFor passed as properties2 parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::valid", "url": "classKWindowInfo.html#a58c5456a62f368141345398f4dfc1570", "keyword": "valid KWindowInfo::valid KWindowInfo", "text": "In case the window does not exist false is returned Also if there is no appropriate implementation for KWindowInfo on the current windowing system platform this method returns false In that case all methods return a default value and thus it is recommended to check whether valid returns true withdrawn_is_valid if true windows in the withdrawn state i.e not managed are also considered This is usually not the case"}, {"type": "function", "name": "KWindowInfo::visibleIconName", "url": "classKWindowInfo.html#ab7291dae67367b69f5fb0bd1f8a32875", "keyword": "visibleIconName KWindowInfo::visibleIconName KWindowInfo", "text": "Note that this has nothing to do with normal icons but with an representation of the window Requires NET::WMVisibleIconName passed as properties parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::visibleIconNameWithState", "url": "classKWindowInfo.html#a7bafc600d62b801e3e3ea13ea1d32fe6", "keyword": "visibleIconNameWithState KWindowInfo::visibleIconNameWithState KWindowInfo", "text": "This is a simple convenience function that returns the visible iconic name but with parentheses around minimized windows Note that this has nothing to do with normal icons Requires NET::WMVisibleIconName NET::WMState and NET::XAWMState passed as properties parameter to the constructor the window iconic name with state visibleIconName()"}, {"type": "function", "name": "KWindowInfo::visibleName", "url": "classKWindowInfo.html#a53ae7f64eee6096141799f443bd081f2", "keyword": "visibleName KWindowInfo::visibleName KWindowInfo", "text": "The visible name differs from the name by including possible 2 appended when there are two or more windows with the same name Requires NET::WMVisibleName passed as properties parameter to the constructor name()"}, {"type": "function", "name": "KWindowInfo::visibleNameWithState", "url": "classKWindowInfo.html#a9163b91f7face2e5e13b6e882e5536f9", "keyword": "visibleNameWithState KWindowInfo::visibleNameWithState KWindowInfo", "text": "This is a simple convenience function that returns the visible name but with parentheses around minimized windows Requires NET::WMVisibleName NET::WMState and NET::XAWMState passed as properties parameter to the constructor the window name with state visibleName()"}, {"type": "function", "name": "KWindowInfo::win", "url": "classKWindowInfo.html#a9e4c106503288083d159992cadd5b21b", "keyword": "win KWindowInfo::win KWindowInfo", "text": ""}, {"type": "function", "name": "KWindowInfo::windowClassClass", "url": "classKWindowInfo.html#ae16f46d1ba6520a3936db54287a4ba86", "keyword": "windowClassClass KWindowInfo::windowClassClass KWindowInfo", "text": "On platform X11 this is part of the WM_CLASS property Requires NET::WM2WindowClass passed as properties2 parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::windowClassName", "url": "classKWindowInfo.html#a7083f26c428038e42abd4e4519a06dd7", "keyword": "windowClassName KWindowInfo::windowClassName KWindowInfo", "text": "On platform X11 this is part of the WM_CLASS property Requires NET::WM2WindowClass passed as properties2 parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::windowRole", "url": "classKWindowInfo.html#a78798a3ef2dea881734c4030cadf6421", "keyword": "windowRole KWindowInfo::windowRole KWindowInfo", "text": "On platform X11 this is the value of the WM_WINDOW_ROLE property Requires NET::WM2WindowRole passed as properties2 parameter to the constructor"}, {"type": "function", "name": "KWindowInfo::windowType", "url": "classKWindowInfo.html#acc1d8c4ef5646fd4146ae6d5b6b68805", "keyword": "windowType KWindowInfo::windowType KWindowInfo", "text": "The argument should be all window types your application supports Requires NET::WMWindowType passed as properties parameter to the constructor NET::WindowType NET::WindowTypeMask"}, {"type": "class", "name": "KWindowSystem", "url": "classKWindowSystem.html", "keyword": "KWindowSystem", "text": "The class KWindowSystem provides information about the state of the window manager and allows asking the window manager to change them using a more high-level interface than the NETWinInfo/NETRootInfo lowlevel classes Because of limitiations of the way Qt is implemented on Mac OSX the WId s returned by methods in this class are not compatible with those expected by other Qt methods So while it should be fine to pass WId s retrieved by for example calling the winId method on a QWidget to methods in this class the reverse is not true You should never pass a WId obtained from this class to a Qt method accepting a WId parameter Class for interaction with the window manager Matthias Ettrich"}, {"type": "enum", "name": "KWindowSystem::IconSource", "url": "classKWindowSystem.html#a86168b00f991cee85271c8b69e0a77f7", "keyword": "IconSource KWindowSystem::IconSource KWindowSystem", "text": "They are tried from the best until an icon is found NETWM from property from the window manager specification WMHints from WMHints property ClassHint load icon after getting name from the classhint XApp load the standard X icon last fallback"}, {"type": "enumvalue", "name": "KWindowSystem::NETWM", "url": "classKWindowSystem.html#a86168b00f991cee85271c8b69e0a77f7a6cc04cbba240aefd9ee3a035ad93ea6e", "keyword": "NETWM KWindowSystem::NETWM KWindowSystem", "text": "read from property from the window manager specification"}, {"type": "enumvalue", "name": "KWindowSystem::WMHints", "url": "classKWindowSystem.html#a86168b00f991cee85271c8b69e0a77f7aa1b0d90d4e2db239a19b0b61ec06436c", "keyword": "WMHints KWindowSystem::WMHints KWindowSystem", "text": "read from WMHints property"}, {"type": "enumvalue", "name": "KWindowSystem::ClassHint", "url": "classKWindowSystem.html#a86168b00f991cee85271c8b69e0a77f7a393e0a4fb3ec498116064e228a840682", "keyword": "ClassHint KWindowSystem::ClassHint KWindowSystem", "text": "load icon after getting name from the classhint"}, {"type": "enumvalue", "name": "KWindowSystem::XApp", "url": "classKWindowSystem.html#a86168b00f991cee85271c8b69e0a77f7abde190c2ccb6883e088e265301b501f7", "keyword": "XApp KWindowSystem::XApp KWindowSystem", "text": "load the standard X icon last fallback"}, {"type": "enum", "name": "KWindowSystem::Platform", "url": "classKWindowSystem.html#afc13d8221eb73625f708554f786cd6e7", "keyword": "Platform KWindowSystem::Platform KWindowSystem", "text": "platform 5.25"}, {"type": "enumvalue", "name": "KWindowSystem::Platform::Unknown", "url": "classKWindowSystem.html#afc13d8221eb73625f708554f786cd6e7a88183b946cc5f0e8c96b2e66e1c74a7e", "keyword": "Unknown KWindowSystem::Platform::Unknown KWindowSystem", "text": "A platform unknown to the application is used"}, {"type": "enumvalue", "name": "KWindowSystem::Platform::X11", "url": "classKWindowSystem.html#afc13d8221eb73625f708554f786cd6e7ad21ab1ce30c9c7735c0591317f50ab85", "keyword": "X11 KWindowSystem::Platform::X11 KWindowSystem", "text": "The xcb/X11 windowing system platorm"}, {"type": "enumvalue", "name": "KWindowSystem::Platform::Wayland", "url": "classKWindowSystem.html#afc13d8221eb73625f708554f786cd6e7abd9c6c9ca372721e187caeb1654b4209", "keyword": "Wayland KWindowSystem::Platform::Wayland KWindowSystem", "text": "The Wayland windowing system platform"}, {"type": "enum", "name": "NET::Action", "url": "classNET.html#afa9281c19ea7e280327b01b2c6236928", "keyword": "Action NET::Action NET Action NET::Action NET Action NET::Action NET Action NET::Action NET", "text": ""}, {"type": "enum", "name": "NET::DesktopLayoutCorner", "url": "classNET.html#a3359c32a21f438e0e6564f26179e458f", "keyword": "DesktopLayoutCorner NET::DesktopLayoutCorner NET DesktopLayoutCorner NET::DesktopLayoutCorner NET DesktopLayoutCorner NET::DesktopLayoutCorner NET DesktopLayoutCorner NET::DesktopLayoutCorner NET", "text": ""}, {"type": "enum", "name": "NET::Direction", "url": "classNET.html#ae29e22ac36b48d9cbcb28727db5258ea", "keyword": "Direction NET::Direction NET Direction NET::Direction NET Direction NET::Direction NET Direction NET::Direction NET", "text": "When a client wants the Window Manager to start a WMMoveResize it should specify one of TopLeft Top TopRight Right BottomRight Bottom BottomLeft Left Move for movement only KeyboardSize resizing via keyboard KeyboardMove movement via keyboard"}, {"type": "enum", "name": "NET::MappingState", "url": "classNET.html#afb6eef2d78c27ea693652a30d2a07c05", "keyword": "MappingState NET::MappingState NET MappingState NET::MappingState NET MappingState NET::MappingState NET MappingState NET::MappingState NET", "text": "The class automatically watches the mapping state of the client windows and uses the mapping state to determine how to set/change different properties Note that this is very lowlevel and you most probably don t want to use this state"}, {"type": "enumvalue", "name": "NET::Visible", "url": "classNET.html#afb6eef2d78c27ea693652a30d2a07c05ac19143b5e0209f618a5518c11ac38689", "keyword": "Visible NET::Visible NET Visible NET::Visible NET Visible NET::Visible NET Visible NET::Visible NET", "text": "indicates the client window is visible to the user"}, {"type": "enumvalue", "name": "NET::Withdrawn", "url": "classNET.html#afb6eef2d78c27ea693652a30d2a07c05a7648a58c155ce6b36e05031c7ab0a4f6", "keyword": "Withdrawn NET::Withdrawn NET Withdrawn NET::Withdrawn NET Withdrawn NET::Withdrawn NET Withdrawn NET::Withdrawn NET", "text": "indicates that neither the client window nor its icon is visible"}, {"type": "enumvalue", "name": "NET::Iconic", "url": "classNET.html#afb6eef2d78c27ea693652a30d2a07c05a2d6d6784820519475f0177ea2cf3e04d", "keyword": "Iconic NET::Iconic NET Iconic NET::Iconic NET Iconic NET::Iconic NET Iconic NET::Iconic NET", "text": "indicates that the client window is not visible but its icon is This can be when the window is minimized or when it s on a different virtual desktop See also NET::Hidden"}, {"type": "enum", "name": "NET::Orientation", "url": "classNET.html#afac5b26cfb4e28ec2f18cd5cc9e1989a", "keyword": "Orientation NET::Orientation NET Orientation NET::Orientation NET Orientation NET::Orientation NET Orientation NET::Orientation NET", "text": ""}, {"type": "enum", "name": "NET::Property", "url": "classNET.html#aaea92340c4b9901e05aa7748587dcde5", "keyword": "Property NET::Property NET Property NET::Property NET Property NET::Property NET Property NET::Property NET", "text": "Clients and Window Managers must define which properties/protocols it wants to support Root/Desktop window properties and protocols Supported ClientList ClientListStacking NumberOfDesktops DesktopGeometry DesktopViewport CurrentDesktop DesktopNames ActiveWindow WorkArea SupportingWMCheck VirtualRoots CloseWindow WMMoveResize Client window properties and protocols WMName WMVisibleName WMDesktop WMWindowType WMState WMStrut obsoleted by WM2ExtendedStrut WMGeometry WMFrameExtents WMIconGeometry WMIcon WMIconName WMVisibleIconName WMHandledIcons WMPid WMPing ICCCM properties provided for convenience XAWMState"}, {"type": "enum", "name": "NET::Property2", "url": "classNET.html#a851d15d9aa748b5f76e44b1e2d7c79b0", "keyword": "Property2 NET::Property2 NET Property2 NET::Property2 NET Property2 NET::Property2 NET Property2 NET::Property2 NET", "text": "This enum is an extension to NET::Property because them enum is limited only to 32 bits Client window properties and protocols WM2UserTime WM2StartupId WM2TransientFor mainwindow for the window WM_TRANSIENT_FOR WM2GroupLeader group leader window_group in WM_HINTS WM2AllowedActions WM2RestackWindow WM2MoveResizeWindow WM2ExtendedStrut WM2TemporaryRules internal for kstart WM2WindowClass WM_CLASS WM2WindowRole WM_WINDOW_ROLE WM2ClientMachine WM_CLIENT_MACHINE WM2ShowingDesktop WM2Opacity _NET_WM_WINDOW_OPACITY WM2DesktopLayout _NET_DESKTOP_LAYOUT WM2FullPlacement _NET_WM_FULL_PLACEMENT WM2FullscreenMonitors _NET_WM_FULLSCREEN_MONITORS WM2Urgency urgency hint in WM_HINTS see ICCCM 4.1.2.4 WM2Input input hint input in WM_HINTS see ICCCM 4.1.2.4 WM2Protocols see NET::Protocol WM2InitialMappingState initial state hint of WM_HINTS see ICCCM 4.1.2.4 WM2IconPixmap icon pixmap and mask in WM_HINTS see ICCCM 4.1.2.4 WM2OpaqueRegion"}, {"type": "enum", "name": "NET::Protocol", "url": "classNET.html#a02aad36d7abf162c186cdb2b0e6e961b", "keyword": "Protocol NET::Protocol NET Protocol NET::Protocol NET Protocol NET::Protocol NET Protocol NET::Protocol NET", "text": "See ICCCM 4.1.2.7 5.3"}, {"type": "enumvalue", "name": "NET::TakeFocusProtocol", "url": "classNET.html#a02aad36d7abf162c186cdb2b0e6e961ba88aab7af44c314e40504d05bea9790d4", "keyword": "TakeFocusProtocol NET::TakeFocusProtocol NET TakeFocusProtocol NET::TakeFocusProtocol NET TakeFocusProtocol NET::TakeFocusProtocol NET TakeFocusProtocol NET::TakeFocusProtocol NET", "text": "WM_TAKE_FOCUS"}, {"type": "enumvalue", "name": "NET::DeleteWindowProtocol", "url": "classNET.html#a02aad36d7abf162c186cdb2b0e6e961ba55ebbf6a31791adca72f460b7e13eb39", "keyword": "DeleteWindowProtocol NET::DeleteWindowProtocol NET DeleteWindowProtocol NET::DeleteWindowProtocol NET DeleteWindowProtocol NET::DeleteWindowProtocol NET DeleteWindowProtocol NET::DeleteWindowProtocol NET", "text": "WM_DELETE_WINDOW"}, {"type": "enumvalue", "name": "NET::PingProtocol", "url": "classNET.html#a02aad36d7abf162c186cdb2b0e6e961bac01fb7a0b7834f7e2385755472ca95cd", "keyword": "PingProtocol NET::PingProtocol NET PingProtocol NET::PingProtocol NET PingProtocol NET::PingProtocol NET PingProtocol NET::PingProtocol NET", "text": "_NET_WM_PING from EWMH"}, {"type": "enumvalue", "name": "NET::SyncRequestProtocol", "url": "classNET.html#a02aad36d7abf162c186cdb2b0e6e961baed283a207c3f69d29bf9898e5e09968e", "keyword": "SyncRequestProtocol NET::SyncRequestProtocol NET SyncRequestProtocol NET::SyncRequestProtocol NET SyncRequestProtocol NET::SyncRequestProtocol NET SyncRequestProtocol NET::SyncRequestProtocol NET", "text": "_NET_WM_SYNC_REQUEST from EWMH"}, {"type": "enumvalue", "name": "NET::ContextHelpProtocol", "url": "classNET.html#a02aad36d7abf162c186cdb2b0e6e961ba818d0a3ae2e6f85ecdd47c7f60ca60b7", "keyword": "ContextHelpProtocol NET::ContextHelpProtocol NET ContextHelpProtocol NET::ContextHelpProtocol NET ContextHelpProtocol NET::ContextHelpProtocol NET ContextHelpProtocol NET::ContextHelpProtocol NET", "text": "_NET_WM_CONTEXT_HELP NON STANDARD!"}, {"type": "enum", "name": "NET::RequestSource", "url": "classNET.html#ab8310daed1ca6a628b77ad4f92eeae74", "keyword": "RequestSource NET::RequestSource NET RequestSource NET::RequestSource NET RequestSource NET::RequestSource NET RequestSource NET::RequestSource NET", "text": ""}, {"type": "enumvalue", "name": "NET::FromUnknown", "url": "classNET.html#ab8310daed1ca6a628b77ad4f92eeae74afa9b1fe54160f94efbbd36abf3817f6d", "keyword": "FromUnknown NET::FromUnknown NET FromUnknown NET::FromUnknown NET FromUnknown NET::FromUnknown NET FromUnknown NET::FromUnknown NET", "text": "indicates that the source of the request is unknown"}, {"type": "enumvalue", "name": "NET::FromApplication", "url": "classNET.html#ab8310daed1ca6a628b77ad4f92eeae74a7a242a3888a59f336a2c9091f046c204", "keyword": "FromApplication NET::FromApplication NET FromApplication NET::FromApplication NET FromApplication NET::FromApplication NET FromApplication NET::FromApplication NET", "text": "indicates that the request comes from a normal application"}, {"type": "enumvalue", "name": "NET::FromTool", "url": "classNET.html#ab8310daed1ca6a628b77ad4f92eeae74ae9b1014f038b95b825ed3a5a9adaf2d0", "keyword": "FromTool NET::FromTool NET FromTool NET::FromTool NET FromTool NET::FromTool NET FromTool NET::FromTool NET", "text": "indicated that the request comes from pager or similar tool"}, {"type": "enum", "name": "NET::Role", "url": "classNET.html#a5d6f825794e1d7e005d56cac269e7aa0", "keyword": "Role NET::Role NET Role NET::Role NET Role NET::Role NET Role NET::Role NET", "text": "This is used internally to determine how several action should be performed if at all"}, {"type": "enumvalue", "name": "NET::Client", "url": "classNET.html#a5d6f825794e1d7e005d56cac269e7aa0a4fdc6016b721032a2bd8c5f9890f5f6d", "keyword": "Client NET::Client NET Client NET::Client NET Client NET::Client NET Client NET::Client NET", "text": "indicates that the application is a client application"}, {"type": "enumvalue", "name": "NET::WindowManager", "url": "classNET.html#a5d6f825794e1d7e005d56cac269e7aa0a949cb303dc6e1c81c0f6c7b2c66055c8", "keyword": "WindowManager NET::WindowManager NET WindowManager NET::WindowManager NET WindowManager NET::WindowManager NET WindowManager NET::WindowManager NET", "text": "indicates that the application is a window manager application"}, {"type": "enum", "name": "NET::State", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00ee", "keyword": "State NET::State NET State NET::State NET State NET::State NET State NET::State NET", "text": "To set the state of a window you ll typically do something like for example to not show the window on the taskbar and desktop pager winId() is a function of QWidget() Note that KeepAbove StaysOnTop and KeepBelow are meant as user preference and applications should avoid setting these states themselves"}, {"type": "enumvalue", "name": "NET::Modal", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea59b7f512e7c7ff71430ad7349a32d91d", "keyword": "Modal NET::Modal NET Modal NET::Modal NET Modal NET::Modal NET Modal NET::Modal NET", "text": "indicates that this is a modal dialog box The WM_TRANSIENT_FOR hint MUST be set to indicate which window the dialog is a modal for or set to the root window if the dialog is a modal for its window group"}, {"type": "enumvalue", "name": "NET::Sticky", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea091104e8b00c4b1a0cfb81ae186f3637", "keyword": "Sticky NET::Sticky NET Sticky NET::Sticky NET Sticky NET::Sticky NET Sticky NET::Sticky NET", "text": "indicates that the Window Manager SHOULD keep the window s position fixed on the screen even when the virtual desktop scrolls Note that this is different from being kept on all desktops"}, {"type": "enumvalue", "name": "NET::MaxVert", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea2b5dbc22e9e5f3a7a238fc0d9775b7bd", "keyword": "MaxVert NET::MaxVert NET MaxVert NET::MaxVert NET MaxVert NET::MaxVert NET MaxVert NET::MaxVert NET", "text": "indicates that the window is vertically maximized"}, {"type": "enumvalue", "name": "NET::MaxHoriz", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea05e760aabf98bbf0887e2f5adf4af5eb", "keyword": "MaxHoriz NET::MaxHoriz NET MaxHoriz NET::MaxHoriz NET MaxHoriz NET::MaxHoriz NET MaxHoriz NET::MaxHoriz NET", "text": "indicates that the window is horizontally maximized"}, {"type": "enumvalue", "name": "NET::Max", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea11465696144d095ebe6d51085f7f47e6", "keyword": "Max NET::Max NET Max NET::Max NET Max NET::Max NET Max NET::Max NET", "text": "convenience value Equal to MaxVert MaxHoriz"}, {"type": "enumvalue", "name": "NET::Shaded", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea2a7c8fed35a833f0b664fc577cb85015", "keyword": "Shaded NET::Shaded NET Shaded NET::Shaded NET Shaded NET::Shaded NET Shaded NET::Shaded NET", "text": "indicates that the window is shaded rolled-up"}, {"type": "enumvalue", "name": "NET::SkipTaskbar", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea4143fd2f9ab51548070993729951a5b4", "keyword": "SkipTaskbar NET::SkipTaskbar NET SkipTaskbar NET::SkipTaskbar NET SkipTaskbar NET::SkipTaskbar NET SkipTaskbar NET::SkipTaskbar NET", "text": "indicates that a window should not be included on a taskbar"}, {"type": "enumvalue", "name": "NET::KeepAbove", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea7b5e0fc7795fc0a66930fb0937035817", "keyword": "KeepAbove NET::KeepAbove NET KeepAbove NET::KeepAbove NET KeepAbove NET::KeepAbove NET KeepAbove NET::KeepAbove NET", "text": "indicates that a window should on top of most windows but below fullscreen windows"}, {"type": "enumvalue", "name": "NET::StaysOnTop", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eeae5698354cff53f6e3aebdad9da826dd7", "keyword": "StaysOnTop NET::StaysOnTop NET StaysOnTop NET::StaysOnTop NET StaysOnTop NET::StaysOnTop NET StaysOnTop NET::StaysOnTop NET", "text": "This is an obsolete name for KeepAbove"}, {"type": "enumvalue", "name": "NET::SkipPager", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eeaacf3a06dfb0c28d5ade1fb8f11ca06bc", "keyword": "SkipPager NET::SkipPager NET SkipPager NET::SkipPager NET SkipPager NET::SkipPager NET SkipPager NET::SkipPager NET", "text": "indicates that a window should not be included on a pager"}, {"type": "enumvalue", "name": "NET::Hidden", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea9da0cfee6ad77ce1cb2d266543244eb6", "keyword": "Hidden NET::Hidden NET Hidden NET::Hidden NET Hidden NET::Hidden NET Hidden NET::Hidden NET", "text": "indicates that a window should not be visible on the screen e.g when minimised Only the window manager is allowed to change it"}, {"type": "enumvalue", "name": "NET::FullScreen", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea52c9fb05445b3724c1f3e02838d89e32", "keyword": "FullScreen NET::FullScreen NET FullScreen NET::FullScreen NET FullScreen NET::FullScreen NET FullScreen NET::FullScreen NET", "text": "indicates that a window should fill the entire screen and have no window decorations"}, {"type": "enumvalue", "name": "NET::KeepBelow", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eeabb33d1a7ef6aeee3bd0e73cba9d8565d", "keyword": "KeepBelow NET::KeepBelow NET KeepBelow NET::KeepBelow NET KeepBelow NET::KeepBelow NET KeepBelow NET::KeepBelow NET", "text": "indicates that a window should be below most windows but above any desktop windows"}, {"type": "enumvalue", "name": "NET::DemandsAttention", "url": "classNET.html#a08dce7f5ea8a2a6d1d38aea3498f00eea3bb48830079a11c504153794ebbd4213", "keyword": "DemandsAttention NET::DemandsAttention NET DemandsAttention NET::DemandsAttention NET DemandsAttention NET::DemandsAttention NET DemandsAttention NET::DemandsAttention NET", "text": "there was an attempt to activate this window but the window manager prevented this E.g taskbar should mark such window specially to bring user s attention to this window Only the window manager is allowed to change it"}, {"type": "enum", "name": "NET::WindowType", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0", "keyword": "WindowType NET::WindowType NET WindowType NET::WindowType NET WindowType NET::WindowType NET WindowType NET::WindowType NET", "text": ""}, {"type": "enumvalue", "name": "NET::Unknown", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a53e8de9bd4352248edad9137546aa4fe", "keyword": "Unknown NET::Unknown NET Unknown NET::Unknown NET Unknown NET::Unknown NET Unknown NET::Unknown NET", "text": "indicates that the window did not define a window type"}, {"type": "enumvalue", "name": "NET::Normal", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a47e478847ad30f9f71dcc5091cc0cead", "keyword": "Normal NET::Normal NET Normal NET::Normal NET Normal NET::Normal NET Normal NET::Normal NET", "text": "indicates that this is a normal top-level window"}, {"type": "enumvalue", "name": "NET::Desktop", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a379d353173caf50b0e3992e770ded7f6", "keyword": "Desktop NET::Desktop NET Desktop NET::Desktop NET Desktop NET::Desktop NET Desktop NET::Desktop NET", "text": "indicates a desktop feature This can include a single window containing desktop icons with the same dimensions as the screen allowing the desktop environment to have full control of the desktop without the need for proxying root window clicks"}, {"type": "enumvalue", "name": "NET::Dock", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0aebde24b0e6a51a008f120edd01d84be1", "keyword": "Dock NET::Dock NET Dock NET::Dock NET Dock NET::Dock NET Dock NET::Dock NET", "text": "indicates a dock or panel feature"}, {"type": "enumvalue", "name": "NET::Toolbar", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0aa34709d530baff911c780166f1a5ccfd", "keyword": "Toolbar NET::Toolbar NET Toolbar NET::Toolbar NET Toolbar NET::Toolbar NET Toolbar NET::Toolbar NET", "text": "indicates a toolbar window"}, {"type": "enumvalue", "name": "NET::Menu", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0ab3858ccebaa5f5dc9fe176e1308de089", "keyword": "Menu NET::Menu NET Menu NET::Menu NET Menu NET::Menu NET Menu NET::Menu NET", "text": "indicates a pinnable torn-off menu window"}, {"type": "enumvalue", "name": "NET::Dialog", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a9ada102bbd3caf4377ecf8fa93fc7f1d", "keyword": "Dialog NET::Dialog NET Dialog NET::Dialog NET Dialog NET::Dialog NET Dialog NET::Dialog NET", "text": "indicates that this is a dialog window"}, {"type": "enumvalue", "name": "NET::Override", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a169c19bad87c970ee27283f2b3378b7e", "keyword": "Override NET::Override NET Override NET::Override NET Override NET::Override NET Override NET::Override NET", "text": "has unclear meaning and is KDE-only"}, {"type": "enumvalue", "name": "NET::TopMenu", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a87b7bcd5109a36c8ffcf4705eb8865c6", "keyword": "TopMenu NET::TopMenu NET TopMenu NET::TopMenu NET TopMenu NET::TopMenu NET TopMenu NET::TopMenu NET", "text": "indicates a toplevel menu AKA macmenu This is a KDE extension to the _NET_WM_WINDOW_TYPE mechanism"}, {"type": "enumvalue", "name": "NET::Utility", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0aed5a5fbe48af6bcd46122f9bda58f0c8", "keyword": "Utility NET::Utility NET Utility NET::Utility NET Utility NET::Utility NET Utility NET::Utility NET", "text": "indicates a utility window"}, {"type": "enumvalue", "name": "NET::Splash", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a07c62266f94f41d18b1f522c8f917333", "keyword": "Splash NET::Splash NET Splash NET::Splash NET Splash NET::Splash NET Splash NET::Splash NET", "text": "indicates that this window is a splash screen window"}, {"type": "enumvalue", "name": "NET::DropdownMenu", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0abbd1eb83dab2ebd2b1e1909f9bf03809", "keyword": "DropdownMenu NET::DropdownMenu NET DropdownMenu NET::DropdownMenu NET DropdownMenu NET::DropdownMenu NET DropdownMenu NET::DropdownMenu NET", "text": "indicates a dropdown menu from a menubar typically"}, {"type": "enumvalue", "name": "NET::PopupMenu", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0abf2250001e5fc6e63a42f8cc86fc8725", "keyword": "PopupMenu NET::PopupMenu NET PopupMenu NET::PopupMenu NET PopupMenu NET::PopupMenu NET PopupMenu NET::PopupMenu NET", "text": "indicates a popup menu a context menu typically"}, {"type": "enumvalue", "name": "NET::Tooltip", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a8e9c1aa0e9c868b99aa8b5c2008cc45c", "keyword": "Tooltip NET::Tooltip NET Tooltip NET::Tooltip NET Tooltip NET::Tooltip NET Tooltip NET::Tooltip NET", "text": "indicates a tooltip window"}, {"type": "enumvalue", "name": "NET::Notification", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a0f3f4349eae1a7aca0e44da1f7f26984", "keyword": "Notification NET::Notification NET Notification NET::Notification NET Notification NET::Notification NET Notification NET::Notification NET", "text": "indicates a notification window"}, {"type": "enumvalue", "name": "NET::ComboBox", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0adf15e4b5b7558558fd4adb72866d5972", "keyword": "ComboBox NET::ComboBox NET ComboBox NET::ComboBox NET ComboBox NET::ComboBox NET ComboBox NET::ComboBox NET", "text": "indicates that the window is a list for a combobox"}, {"type": "enumvalue", "name": "NET::DNDIcon", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a3f2e95b29fea412b74e23deb530bb7fc", "keyword": "DNDIcon NET::DNDIcon NET DNDIcon NET::DNDIcon NET DNDIcon NET::DNDIcon NET DNDIcon NET::DNDIcon NET", "text": "indicates a window that represents the dragged object during DND operation"}, {"type": "enumvalue", "name": "NET::OnScreenDisplay", "url": "classNET.html#a4b3115c0f40e7bc8e38119cc44dd60e0a7b858c5d7e10f407e7c6c2d91a57184f", "keyword": "OnScreenDisplay NET::OnScreenDisplay NET OnScreenDisplay NET::OnScreenDisplay NET OnScreenDisplay NET::OnScreenDisplay NET OnScreenDisplay NET::OnScreenDisplay NET", "text": "indicates an On Screen Display window such as volume feedback 5.6"}, {"type": "enum", "name": "NET::WindowTypeMask", "url": "classNET.html#a157924046678eec09044df42968b785a", "keyword": "WindowTypeMask NET::WindowTypeMask NET WindowTypeMask NET::WindowTypeMask NET WindowTypeMask NET::WindowTypeMask NET WindowTypeMask NET::WindowTypeMask NET", "text": "for the properties argument of the NETRootInfo constructor"}, {"type": "enumvalue", "name": "NET::NormalMask", "url": "classNET.html#a157924046678eec09044df42968b785aa769ee5513fae44cbc23ea06d80203525", "keyword": "NormalMask NET::NormalMask NET NormalMask NET::NormalMask NET NormalMask NET::NormalMask NET NormalMask NET::NormalMask NET", "text": "Normal"}, {"type": "enumvalue", "name": "NET::DesktopMask", "url": "classNET.html#a157924046678eec09044df42968b785aa78b084561fcb174877983d4941ba9747", "keyword": "DesktopMask NET::DesktopMask NET DesktopMask NET::DesktopMask NET DesktopMask NET::DesktopMask NET DesktopMask NET::DesktopMask NET", "text": "Desktop"}, {"type": "enumvalue", "name": "NET::DockMask", "url": "classNET.html#a157924046678eec09044df42968b785aa5c1f0a7d7a70102c047db14a9de18dbc", "keyword": "DockMask NET::DockMask NET DockMask NET::DockMask NET DockMask NET::DockMask NET DockMask NET::DockMask NET", "text": "Dock"}, {"type": "enumvalue", "name": "NET::ToolbarMask", "url": "classNET.html#a157924046678eec09044df42968b785aa5816df72b6aedb600f0977bbbb00d32c", "keyword": "ToolbarMask NET::ToolbarMask NET ToolbarMask NET::ToolbarMask NET ToolbarMask NET::ToolbarMask NET ToolbarMask NET::ToolbarMask NET", "text": "Toolbar"}, {"type": "enumvalue", "name": "NET::MenuMask", "url": "classNET.html#a157924046678eec09044df42968b785aa302e156b07c1f151bcc6378cbf67c6dc", "keyword": "MenuMask NET::MenuMask NET MenuMask NET::MenuMask NET MenuMask NET::MenuMask NET MenuMask NET::MenuMask NET", "text": "Menu"}, {"type": "enumvalue", "name": "NET::DialogMask", "url": "classNET.html#a157924046678eec09044df42968b785aa18e3bbea0b794f61a96af05ff590ae74", "keyword": "DialogMask NET::DialogMask NET DialogMask NET::DialogMask NET DialogMask NET::DialogMask NET DialogMask NET::DialogMask NET", "text": "Dialog"}, {"type": "enumvalue", "name": "NET::OverrideMask", "url": "classNET.html#a157924046678eec09044df42968b785aa4246ace0fadfb0cc91dab281a6a5a93b", "keyword": "OverrideMask NET::OverrideMask NET OverrideMask NET::OverrideMask NET OverrideMask NET::OverrideMask NET OverrideMask NET::OverrideMask NET", "text": "Override"}, {"type": "enumvalue", "name": "NET::TopMenuMask", "url": "classNET.html#a157924046678eec09044df42968b785aa9c7b7555c2856befb21489b361571a78", "keyword": "TopMenuMask NET::TopMenuMask NET TopMenuMask NET::TopMenuMask NET TopMenuMask NET::TopMenuMask NET TopMenuMask NET::TopMenuMask NET", "text": "TopMenu"}, {"type": "enumvalue", "name": "NET::UtilityMask", "url": "classNET.html#a157924046678eec09044df42968b785aa3d1837de4f3b33786169b6d1734f62d9", "keyword": "UtilityMask NET::UtilityMask NET UtilityMask NET::UtilityMask NET UtilityMask NET::UtilityMask NET UtilityMask NET::UtilityMask NET", "text": "Utility"}, {"type": "enumvalue", "name": "NET::SplashMask", "url": "classNET.html#a157924046678eec09044df42968b785aa3830935ae4e085f953886aa018f2fff6", "keyword": "SplashMask NET::SplashMask NET SplashMask NET::SplashMask NET SplashMask NET::SplashMask NET SplashMask NET::SplashMask NET", "text": "Splash"}, {"type": "enumvalue", "name": "NET::DropdownMenuMask", "url": "classNET.html#a157924046678eec09044df42968b785aad53a4ceb2c6250fe15685753265b4b61", "keyword": "DropdownMenuMask NET::DropdownMenuMask NET DropdownMenuMask NET::DropdownMenuMask NET DropdownMenuMask NET::DropdownMenuMask NET DropdownMenuMask NET::DropdownMenuMask NET", "text": "DropdownMenu"}, {"type": "enumvalue", "name": "NET::PopupMenuMask", "url": "classNET.html#a157924046678eec09044df42968b785aa5d2dbb4e6213a85653c2784f1c110a35", "keyword": "PopupMenuMask NET::PopupMenuMask NET PopupMenuMask NET::PopupMenuMask NET PopupMenuMask NET::PopupMenuMask NET PopupMenuMask NET::PopupMenuMask NET", "text": "PopupMenu"}, {"type": "enumvalue", "name": "NET::TooltipMask", "url": "classNET.html#a157924046678eec09044df42968b785aa1db84820110a58c01ebdb9681460a782", "keyword": "TooltipMask NET::TooltipMask NET TooltipMask NET::TooltipMask NET TooltipMask NET::TooltipMask NET TooltipMask NET::TooltipMask NET", "text": "Tooltip"}, {"type": "enumvalue", "name": "NET::NotificationMask", "url": "classNET.html#a157924046678eec09044df42968b785aa9e4aa0d1f656f17c73263424dd9d347c", "keyword": "NotificationMask NET::NotificationMask NET NotificationMask NET::NotificationMask NET NotificationMask NET::NotificationMask NET NotificationMask NET::NotificationMask NET", "text": "Notification"}, {"type": "enumvalue", "name": "NET::ComboBoxMask", "url": "classNET.html#a157924046678eec09044df42968b785aaf58c7d2c12f39f237b2cabfa270e8ab5", "keyword": "ComboBoxMask NET::ComboBoxMask NET ComboBoxMask NET::ComboBoxMask NET ComboBoxMask NET::ComboBoxMask NET ComboBoxMask NET::ComboBoxMask NET", "text": "ComboBox"}, {"type": "enumvalue", "name": "NET::DNDIconMask", "url": "classNET.html#a157924046678eec09044df42968b785aa4303bedea838238b651e755a56097d17", "keyword": "DNDIconMask NET::DNDIconMask NET DNDIconMask NET::DNDIconMask NET DNDIconMask NET::DNDIconMask NET DNDIconMask NET::DNDIconMask NET", "text": "DNDIcon"}, {"type": "enumvalue", "name": "NET::OnScreenDisplayMask", "url": "classNET.html#a157924046678eec09044df42968b785aa31cb24e878e096c5dc302ae6d8285836", "keyword": "OnScreenDisplayMask NET::OnScreenDisplayMask NET OnScreenDisplayMask NET::OnScreenDisplayMask NET OnScreenDisplayMask NET::OnScreenDisplayMask NET OnScreenDisplayMask NET::OnScreenDisplayMask NET", "text": "NON STANDARD OnScreenDisplay 5.6"}, {"type": "enumvalue", "name": "NET::AllTypesMask", "url": "classNET.html#a157924046678eec09044df42968b785aa8f1418a2a15499cc1ff2380b2d2ec34a", "keyword": "AllTypesMask NET::AllTypesMask NET AllTypesMask NET::AllTypesMask NET AllTypesMask NET::AllTypesMask NET AllTypesMask NET::AllTypesMask NET", "text": "All window types"}, {"type": "signal", "name": "KWindowSystem::activeWindowChanged", "url": "classKWindowSystem.html#adb83e45593ca6703576983d7daad08ce", "keyword": "activeWindowChanged KWindowSystem::activeWindowChanged KWindowSystem", "text": "id the id of the window that is active"}, {"type": "signal", "name": "KWindowSystem::compositingChanged", "url": "classKWindowSystem.html#a316fc199557d20dd187081070efddb82", "keyword": "compositingChanged KWindowSystem::compositingChanged KWindowSystem", "text": "Note that this signal may be emitted before any compositing plugins have been initialized in the window manager If you need to check if a specific compositing plugin such as the blur effect is enabled you should track that separately rather than test for it in a slot connected to this signal 4.7.1"}, {"type": "signal", "name": "KWindowSystem::currentDesktopChanged", "url": "classKWindowSystem.html#a5ff0c02733368f3bacb05ea30a26ff87", "keyword": "currentDesktopChanged KWindowSystem::currentDesktopChanged KWindowSystem", "text": "desktop the number of the new desktop"}, {"type": "signal", "name": "KWindowSystem::desktopNamesChanged", "url": "classKWindowSystem.html#a109eab9d2965462aad4e2c241738996f", "keyword": "desktopNamesChanged KWindowSystem::desktopNamesChanged KWindowSystem", "text": ""}, {"type": "signal", "name": "KWindowSystem::numberOfDesktopsChanged", "url": "classKWindowSystem.html#a30c446352309a2957d47e27e296f422c", "keyword": "numberOfDesktopsChanged KWindowSystem::numberOfDesktopsChanged KWindowSystem", "text": "num the new number of desktops"}, {"type": "signal", "name": "KWindowSystem::showingDesktopChanged", "url": "classKWindowSystem.html#a6d97985ef9d827e44b978751d860bdf6", "keyword": "showingDesktopChanged KWindowSystem::showingDesktopChanged KWindowSystem", "text": ""}, {"type": "signal", "name": "KWindowSystem::stackingOrderChanged", "url": "classKWindowSystem.html#a067998d6a47bad2ccdd2ea129b434312", "keyword": "stackingOrderChanged KWindowSystem::stackingOrderChanged KWindowSystem", "text": "The new order can be obtained with stackingOrder()"}, {"type": "signal", "name": "KWindowSystem::strutChanged", "url": "classKWindowSystem.html#a2a44b678bd812e2dbd34c80759a24e81", "keyword": "strutChanged KWindowSystem::strutChanged KWindowSystem", "text": "Usually just using the workAreaChanged() signal is sufficient"}, {"type": "signal", "name": "KWindowSystem::windowAdded", "url": "classKWindowSystem.html#acc8645a889810325a9ab6dbaf0b22935", "keyword": "windowAdded KWindowSystem::windowAdded KWindowSystem", "text": "id the id of the window"}, {"type": "signal", "name": "KWindowSystem::windowChanged", "url": "classKWindowSystem.html#a7e8bde429a1be905fccd00644a4614ca", "keyword": "windowChanged KWindowSystem::windowChanged KWindowSystem", "text": "Carries the NET::Properties and NET::Properties2 that were changed id the id of the window properties the properties that were modified properties2 the properties2 that were modified 5.0"}, {"type": "signal", "name": "KWindowSystem::windowChanged", "url": "classKWindowSystem.html#ac8d368d83fa5e137f38e7c885d9a18ce", "keyword": "windowChanged KWindowSystem::windowChanged KWindowSystem", "text": "The properties parameter contains the NET properties that were modified see netwm_def.h First element are NET::Property values second element are NET::Property2 values i.e the format is the same like for the NETWinInfo class constructor id the id of the window properties the properties that were modified since 5.0 use windowChanged(WId, NET::Properties, NET::Properties2)"}, {"type": "signal", "name": "KWindowSystem::windowChanged", "url": "classKWindowSystem.html#afcbd835f78080bd94cb78fe754d08a49", "keyword": "windowChanged KWindowSystem::windowChanged KWindowSystem", "text": "The window changed The unsigned int parameter contains the NET properties that were modified see netwm_def.h id the id of the window properties the properties that were modified"}, {"type": "signal", "name": "KWindowSystem::windowChanged", "url": "classKWindowSystem.html#aa3c6faf243ef8faa9fb0d9c98bc5ca25", "keyword": "windowChanged KWindowSystem::windowChanged KWindowSystem", "text": "id the id of the window"}, {"type": "signal", "name": "KWindowSystem::windowRemoved", "url": "classKWindowSystem.html#af112465c2202a0f93f08f0e9d67e9e69", "keyword": "windowRemoved KWindowSystem::windowRemoved KWindowSystem", "text": "id the id of the window that has been removed"}, {"type": "signal", "name": "KWindowSystem::workAreaChanged", "url": "classKWindowSystem.html#a8dc32dbad47905c847b940ccbda50c12", "keyword": "workAreaChanged KWindowSystem::workAreaChanged KWindowSystem", "text": ""}, {"type": "function", "name": "KWindowSystem::activateWindow", "url": "classKWindowSystem.html#a7a04fd62d97ed3104e02bfa3ffa19ad5", "keyword": "activateWindow KWindowSystem::activateWindow KWindowSystem", "text": "There are two ways how to activate a window by calling activateWindow() and forceActiveWindow() Generally applications shouldn t make attempts to explicitly activate their windows and instead let the user to activate them In the special cases where this may be needed applications should use activateWindow() Window manager may consider whether this request wouldn t result in focus stealing which would be obtrusive and may refuse the request The usage of forceActiveWindow() is meant only for pagers and similar tools which represent direct user actions related to window manipulation Except for rare cases this request will be always honored and normal applications are forbidden to use it In case of problems consult the KWin README in the kdebase package kdebase/kwin/README or ask on the mailing list win the id of the window to make active time X server timestamp of the user activity that caused this request"}, {"type": "function", "name": "KWindowSystem::activeWindow", "url": "classKWindowSystem.html#ad905b23d7d88d9400915e1827d04d374", "keyword": "activeWindow KWindowSystem::activeWindow KWindowSystem", "text": "the window id of the active window or 0 if no window is active"}, {"type": "function", "name": "KWindowSystem::allowedActionsSupported", "url": "classKWindowSystem.html#a2d98510eb8aa7c5f23db31503fd7fcce", "keyword": "allowedActionsSupported KWindowSystem::allowedActionsSupported KWindowSystem", "text": ""}, {"type": "function", "name": "KWindowSystem::allowExternalProcessWindowActivation", "url": "classKWindowSystem.html#a432d8f7835db2fae46b40d705f1a700a", "keyword": "allowExternalProcessWindowActivation KWindowSystem::allowExternalProcessWindowActivation KWindowSystem", "text": "Depending on the window manager the grant may only be temporary or for a single activation and it may require the current process to be the one ie the process with the input focus You should call this function before executing actions that may trigger the showing of a window or dialog in another process e.g a dbus signal or function call or any other inter-process notification mechanism This is mostly used on Windows where windows are not allowed to be raised and activated if their process is not the foreground one but it may also apply to other window managers pid if specified the grant only applies to windows belonging to the specific process By default a value of means all processes"}, {"type": "function", "name": "KWindowSystem::clearState", "url": "classKWindowSystem.html#a3a2c28ca8a49efe2c628a04f754e4c86", "keyword": "clearState KWindowSystem::clearState KWindowSystem", "text": "Possible values are or ed combinations of NET::Modal NET::Sticky NET::MaxVert NET::MaxHoriz NET::Shaded NET::SkipTaskbar NET::SkipPager NET::Hidden NET::FullScreen NET::KeepAbove NET::KeepBelow NET::StaysOnTop win the id of the window state the flags that will be cleared"}, {"type": "function", "name": "KWindowSystem::compositingActive", "url": "classKWindowSystem.html#a8693714dc9f40b337fa6b63896e25d78", "keyword": "compositingActive KWindowSystem::compositingActive KWindowSystem", "text": "ARGB windows are supported effects will be provided etc"}, {"type": "function", "name": "KWindowSystem::constrainViewportRelativePosition", "url": "classKWindowSystem.html#afe508447b01a6c57365dc4b1d8601fed", "keyword": "constrainViewportRelativePosition KWindowSystem::constrainViewportRelativePosition KWindowSystem", "text": "4.0.1 Checks the relative difference used to move a window will still be inside valid desktop area"}, {"type": "function", "name": "KWindowSystem::currentDesktop", "url": "classKWindowSystem.html#a84a94ec21041033d30e5895c9a8a4baa", "keyword": "currentDesktop KWindowSystem::currentDesktop KWindowSystem", "text": "the current virtual desktop"}, {"type": "function", "name": "KWindowSystem::demandAttention", "url": "classKWindowSystem.html#af5e5085d1a4433701df8b9c0b00d6a5a", "keyword": "demandAttention KWindowSystem::demandAttention KWindowSystem", "text": "Instead of activating the window which could be obtrusive the window will be marked specially as demanding user s attention See also explanation in description of activateWindow() Note that it s usually better to use KNotifyClient"}, {"type": "function", "name": "KWindowSystem::desktopName", "url": "classKWindowSystem.html#ab8b7b5a354bfa9673ad3ed74546f424a", "keyword": "desktopName KWindowSystem::desktopName KWindowSystem", "text": "desktop the number of the desktop the name of the desktop"}, {"type": "function", "name": "KWindowSystem::desktopToViewport", "url": "classKWindowSystem.html#a917aa40d1a98aa4796e2497d207e9dad", "keyword": "desktopToViewport KWindowSystem::desktopToViewport KWindowSystem", "text": "Returns topleft corner of the viewport area for the given mapped virtual desktop"}, {"type": "function", "name": "KWindowSystem::forceActiveWindow", "url": "classKWindowSystem.html#aecb213d950a6615fc0e961273d72e166", "keyword": "forceActiveWindow KWindowSystem::forceActiveWindow KWindowSystem", "text": "Note that this should be called only in special cases applications shouldn t force themselves or other windows to be the active window Generally this call should used only by pagers and similar tools See the explanation in description of activateWindow() win the id of the window to make active time X server timestamp of the user activity that caused this request"}, {"type": "function", "name": "KWindowSystem::groupLeader", "url": "classKWindowSystem.html#acd12c88b68d2aac23408f5232d3a4469", "keyword": "groupLeader KWindowSystem::groupLeader KWindowSystem", "text": "window the id of the window Use KWindowInfo::groupLeader"}, {"type": "function", "name": "KWindowSystem::hasWId", "url": "classKWindowSystem.html#a797ecb85728494f897c2213cc548bbf7", "keyword": "hasWId KWindowSystem::hasWId KWindowSystem", "text": "id the window id to test true if the window id is still managed"}, {"type": "function", "name": "KWindowSystem::icccmCompliantMappingState", "url": "classKWindowSystem.html#ab7bb94e4a51b6247498c33d6de01cd0a", "keyword": "icccmCompliantMappingState KWindowSystem::icccmCompliantMappingState KWindowSystem", "text": "Returns true if the WM uses IconicState also for windows on inactive virtual desktops"}, {"type": "function", "name": "KWindowSystem::icon", "url": "classKWindowSystem.html#ad822d5468187d4c7095e2568ab7d8138", "keyword": "icon KWindowSystem::icon KWindowSystem", "text": "If width and height are specified the best icon for the requested size is returned If scale is true the icon is smooth-scaled to have exactly the requested size win the id of the window width the desired width or height the desired height or scale if true the icon will be scaled to the desired size Otherwise the icon will not be modified the icon of the window"}, {"type": "function", "name": "KWindowSystem::icon", "url": "classKWindowSystem.html#a41724bd8b503b2fb6049b0ba46da37bf", "keyword": "icon KWindowSystem::icon KWindowSystem", "text": "You should usually prefer the simpler variant which tries all possibilities to get an icon win the id of the window width the desired width or height the desired height or scale if true the icon will be scaled to the desired size Otherwise the icon will not be modified flags OR-ed flags from the IconSource enum"}, {"type": "function", "name": "KWindowSystem::icon", "url": "classKWindowSystem.html#a51e5aaced114eb7f33d25672e42013d8", "keyword": "icon KWindowSystem::icon KWindowSystem", "text": "This variant is only useful on the X11 platform other platforms do not use NETWinInfo and delegate to the variant without NETWinInfo Though if compiled with X11 support the X11 variant is used on other platforms if info is not nullptr This can be used by applications using e.g platform wayland but also connecting to an XServer The NETWinInfo must be constructed with property NET::WMIcon in order to use the IconSource flag NETWM NET::WM2IconPixmap for IconSource flag WMHints and NET::WM2WindowClass for IconSource flag ClassHint win the id of the window width the desired width or height the desired height or scale if true the icon will be scaled to the desired size Otherwise the icon will not be modified flags OR-ed flags from the IconSource enum into the NETWinInfo to use for reading properties 5.7"}, {"type": "function", "name": "KWindowSystem::isPlatformWayland", "url": "classKWindowSystem.html#a7c826b0c25ed36fb3d07dd5cff3b9ff9", "keyword": "isPlatformWayland KWindowSystem::isPlatformWayland KWindowSystem", "text": "platform isPlatformX11 5.25"}, {"type": "function", "name": "KWindowSystem::isPlatformX11", "url": "classKWindowSystem.html#a2a1f999a03807eb828f279b72e507066", "keyword": "isPlatformX11 KWindowSystem::isPlatformX11 KWindowSystem", "text": "platform isPlatformWayland 5.25"}, {"type": "function", "name": "KWindowSystem::lowerWindow", "url": "classKWindowSystem.html#aff6abc7bd5c456a33409487952e9456e", "keyword": "lowerWindow KWindowSystem::lowerWindow KWindowSystem", "text": "This call is only for pagers and similar tools that represent direct user actions Applications should not use it they should keep using QWidget::lower() or XLowerWindow() if necessary"}, {"type": "function", "name": "KWindowSystem::mapViewport", "url": "classKWindowSystem.html#a48f67899f9f8d4a3e76c81cbb68ebe1d", "keyword": "mapViewport KWindowSystem::mapViewport KWindowSystem", "text": "Returns true if viewports are mapped to virtual desktops"}, {"type": "function", "name": "KWindowSystem::minimizeWindow", "url": "classKWindowSystem.html#ad02330a42dc2ab70f44a3029309fd909", "keyword": "minimizeWindow KWindowSystem::minimizeWindow KWindowSystem", "text": "On X11 this follows the protocol described in ICCCM section 4.1.4 win The window to minimize unminimizeWindow()"}, {"type": "function", "name": "KWindowSystem::minimizeWindow", "url": "classKWindowSystem.html#a86316291677ef881c88cefb9b971ae3e", "keyword": "minimizeWindow KWindowSystem::minimizeWindow KWindowSystem", "text": "since 5.0 the animation is ignored"}, {"type": "function", "name": "KWindowSystem::numberOfDesktops", "url": "classKWindowSystem.html#aed809b7c1d2beeae7bb6ff3e63563ef5", "keyword": "numberOfDesktops KWindowSystem::numberOfDesktops KWindowSystem", "text": "the number of virtual desktops"}, {"type": "function", "name": "KWindowSystem::platform", "url": "classKWindowSystem.html#ae9f7971618790b50cf64af09cc0d7d7d", "keyword": "platform KWindowSystem::platform KWindowSystem", "text": "This method allows to check for the used windowing system in a cheap and reliable way The Platform gets resolved the first time the method is invoked and cached for further usages The Platform used by the QGuiApplication 5.25"}, {"type": "function", "name": "KWindowSystem::raiseWindow", "url": "classKWindowSystem.html#afcc586f92b6d7e3a01453713b6f633d5", "keyword": "raiseWindow KWindowSystem::raiseWindow KWindowSystem", "text": "This call is only for pagers and similar tools that represent direct user actions Applications should not use it they should keep using QWidget::raise() or XRaiseWindow() if necessary"}, {"type": "function", "name": "KWindowSystem::readNameProperty", "url": "classKWindowSystem.html#a9446ca20d00b16cfeffb9eb9c798ccd6", "keyword": "readNameProperty KWindowSystem::readNameProperty KWindowSystem", "text": ""}, {"type": "function", "name": "KWindowSystem::self", "url": "classKWindowSystem.html#af6ca1136d4f7f25f94b0568d9e596572", "keyword": "self KWindowSystem::self KWindowSystem", "text": "Useful mainly for connecting to signals"}, {"type": "function", "name": "KWindowSystem::setBlockingCompositing", "url": "classKWindowSystem.html#a77a2e23da581d69bbd80387306eafc10", "keyword": "setBlockingCompositing KWindowSystem::setBlockingCompositing KWindowSystem", "text": "4.7"}, {"type": "function", "name": "KWindowSystem::setCurrentDesktop", "url": "classKWindowSystem.html#ad390e52c8dd6331b89a5a9f372435129", "keyword": "setCurrentDesktop KWindowSystem::setCurrentDesktop KWindowSystem", "text": "See NETRootInfo desktop the number of the new desktop"}, {"type": "function", "name": "KWindowSystem::setDesktopName", "url": "classKWindowSystem.html#a2cc00668de9eb13084c2f8eb480f097f", "keyword": "setDesktopName KWindowSystem::setDesktopName KWindowSystem", "text": "desktop the number of the desktop name the new name for the desktop"}, {"type": "function", "name": "KWindowSystem::setExtendedStrut", "url": "classKWindowSystem.html#a669469a6738ccb8642a1c57c4ce08227", "keyword": "setExtendedStrut KWindowSystem::setExtendedStrut KWindowSystem", "text": "For not reserving a strut pass 0 as the width E.g to reserve 10x10 square in the topleft corner use e.g setExtendedStrut( w, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0 ) win the id of the window left_width width of the strut at the left edge left_start starting y coordinate of the strut at the left edge left_end ending y coordinate of the strut at the left edge right_width width of the strut at the right edge right_start starting y coordinate of the strut at the right edge right_end ending y coordinate of the strut at the right edge top_width width of the strut at the top edge top_start starting x coordinate of the strut at the top edge top_end ending x coordinate of the strut at the top edge bottom_width width of the strut at the bottom edge bottom_start starting x coordinate of the strut at the bottom edge bottom_end ending x coordinate of the strut at the bottom edge"}, {"type": "function", "name": "KWindowSystem::setIcons", "url": "classKWindowSystem.html#a8dcba86e828ff19749e3d3e8746b898b", "keyword": "setIcons KWindowSystem::setIcons KWindowSystem", "text": "win the id of the window icon the new icon miniIcon the new mini icon"}, {"type": "function", "name": "KWindowSystem::setMainWindow", "url": "classKWindowSystem.html#a5f06ffab37bd705735f9d326f2969f52", "keyword": "setMainWindow KWindowSystem::setMainWindow KWindowSystem", "text": "This overrides the parent set the usual way as the QWidget parent but only for the window manager e.g stacking order and window grouping will be affected but features like automatic deletion of children when the parent is deleted are unaffected and normally use the QWidget parent This function should be used before a dialog is shown for a window that belongs to another application"}, {"type": "function", "name": "KWindowSystem::setOnActivities", "url": "classKWindowSystem.html#a63fe335efaca06bb43ad107b8e28936c", "keyword": "setOnActivities KWindowSystem::setOnActivities KWindowSystem", "text": "win the id of the window activities the list of activity UUIDs 5.1 KWindowInfo::activities"}, {"type": "function", "name": "KWindowSystem::setOnAllDesktops", "url": "classKWindowSystem.html#a3dfdfbe26d5bb59dd34ade9afa4d3971", "keyword": "setOnAllDesktops KWindowSystem::setOnAllDesktops KWindowSystem", "text": "Otherwise the window lives only on one single desktop win the id of the window b true to show the window on all desktops false otherwise"}, {"type": "function", "name": "KWindowSystem::setOnDesktop", "url": "classKWindowSystem.html#a252fc7c6e389a41b73075a98d4bb843a", "keyword": "setOnDesktop KWindowSystem::setOnDesktop KWindowSystem", "text": "win the id of the window desktop the number of the new desktop"}, {"type": "function", "name": "KWindowSystem::setShowingDesktop", "url": "classKWindowSystem.html#a38b8c889d4b129845c2592acf54767cf", "keyword": "setShowingDesktop KWindowSystem::setShowingDesktop KWindowSystem", "text": "If on windows are hidden and desktop background is shown and focused showing if true the window manager is put in mode If false the window manager is put out of that mode 5.7.0"}, {"type": "function", "name": "KWindowSystem::setState", "url": "classKWindowSystem.html#a2fcec2ab4297afe9edae7971b1a4cd86", "keyword": "setState KWindowSystem::setState KWindowSystem", "text": "Possible values are or ed combinations of NET::Modal NET::Sticky NET::MaxVert NET::MaxHoriz NET::Shaded NET::SkipTaskbar NET::SkipPager NET::Hidden NET::FullScreen NET::KeepAbove NET::KeepBelow NET::StaysOnTop win the id of the window state the new flags that will be set"}, {"type": "function", "name": "KWindowSystem::setStrut", "url": "classKWindowSystem.html#af83b6d1db5390b191b5b9b0c061a1e03", "keyword": "setStrut KWindowSystem::setStrut KWindowSystem", "text": "Sets the strut of window win to left right top bottom win the id of the window left the left strut right the right strut top the top strut bottom the bottom strut"}, {"type": "function", "name": "KWindowSystem::setType", "url": "classKWindowSystem.html#a0f45456ff470a7b464dfe26d33bc322e", "keyword": "setType KWindowSystem::setType KWindowSystem", "text": "win the id of the window windowType the type of the window see NET::WindowType"}, {"type": "function", "name": "KWindowSystem::setUserTime", "url": "classKWindowSystem.html#a850371a25bf332c921617c8080553cdb", "keyword": "setUserTime KWindowSystem::setUserTime KWindowSystem", "text": "The timestamp is expressed as XServer time If a window is shown with user timestamp older than the time of the last user action it won t be activated after being shown The most common case is the special value 0 which means not to activate the window after being shown"}, {"type": "function", "name": "KWindowSystem::showingDesktop", "url": "classKWindowSystem.html#ae8850e1e845ee1bb88bab638387aa2fb", "keyword": "showingDesktop KWindowSystem::showingDesktop KWindowSystem", "text": ""}, {"type": "function", "name": "KWindowSystem::stackingOrder", "url": "classKWindowSystem.html#a625644ee62355a88f32ab4e84130122a", "keyword": "stackingOrder KWindowSystem::stackingOrder KWindowSystem", "text": "May be useful for pagers the list of all toplevel windows in stacking order"}, {"type": "function", "name": "KWindowSystem::transientFor", "url": "classKWindowSystem.html#a65dc3b550c9fde3bfc723a0c49b4c83b", "keyword": "transientFor KWindowSystem::transientFor KWindowSystem", "text": "the mainwindow for this window window the id of the window Use KWindowInfo::transientFor"}, {"type": "function", "name": "KWindowSystem::unminimizeWindow", "url": "classKWindowSystem.html#a2e804e86d60f2b461e1de4e17b7550f5", "keyword": "unminimizeWindow KWindowSystem::unminimizeWindow KWindowSystem", "text": "On X11 this follows the protocol described in ICCCM section 4.1.4 win The window to unminimize minimizeWindow()"}, {"type": "function", "name": "KWindowSystem::unminimizeWindow", "url": "classKWindowSystem.html#a2bf6cc50c89e828926bd938b673e9be2", "keyword": "unminimizeWindow KWindowSystem::unminimizeWindow KWindowSystem", "text": "since 5.0 the animation is ignored"}, {"type": "function", "name": "KWindowSystem::viewportToDesktop", "url": "classKWindowSystem.html#a02c88af96a4fc2b7e2d4810193d20e1b", "keyword": "viewportToDesktop KWindowSystem::viewportToDesktop KWindowSystem", "text": "Returns mapped virtual desktop for the given position in the viewport"}, {"type": "function", "name": "KWindowSystem::viewportWindowToDesktop", "url": "classKWindowSystem.html#a73e98537ca90bf1dc15959c1c4153948", "keyword": "viewportWindowToDesktop KWindowSystem::viewportWindowToDesktop KWindowSystem", "text": "Returns mapped virtual desktop for the given window geometry"}, {"type": "function", "name": "KWindowSystem::windowInfo", "url": "classKWindowSystem.html#aeecbc8872422c25310cc9835f92423ad", "keyword": "windowInfo KWindowSystem::windowInfo KWindowSystem", "text": "It is recommended to check whether the returned info is valid by calling the valid() method win the id of the window properties all properties that should be retrieved see NET::Property enum for details Unlisted properties cause related information to be invalid in the returned data but make this function faster when not all data is needed properties2 additional properties see NET::Property2 enum the window information use KWindowInfo directly"}, {"type": "function", "name": "KWindowSystem::windows", "url": "classKWindowSystem.html#a739867bc45308fb75e474838142b050d", "keyword": "windows KWindowSystem::windows KWindowSystem", "text": "Please do not rely on indexes of this list Whenever you enter Qt s event loop in your application it may happen that entries are removed or added Your module should perhaps work on a copy of this list and verify a window with hasWId() before any operations Iteration over this list can be done easily with the list of all toplevel windows"}, {"type": "function", "name": "KWindowSystem::workArea", "url": "classKWindowSystem.html#ac03bfeef22c5ec6d7916666a0119d8a4", "keyword": "workArea KWindowSystem::workArea KWindowSystem", "text": "desktop the number of the desktop to check for the current desktop the size and position of the desktop"}, {"type": "function", "name": "KWindowSystem::workArea", "url": "classKWindowSystem.html#ab461f7a79aad4a3f36552d2b10f9b925", "keyword": "workArea KWindowSystem::workArea KWindowSystem", "text": "Excludes struts of clients in the exclude List excludes the list of clients whose struts will be excluded desktop the number of the desktop to check for the current desktop the size and position of the desktop"}, {"type": "function", "name": "NET::timestampCompare", "url": "classNET.html#a9257abc93441d96f380d690f2aeea058", "keyword": "timestampCompare NET::timestampCompare NET timestampCompare NET::timestampCompare NET timestampCompare NET::timestampCompare NET timestampCompare NET::timestampCompare NET", "text": "Return value is like with strcmp() 0 for equal for time1 time2 1 for time1 time2"}, {"type": "function", "name": "NET::timestampDiff", "url": "classNET.html#ae5353d1ebb9514a696158f46b54157f4", "keyword": "timestampDiff NET::timestampDiff NET timestampDiff NET::timestampDiff NET timestampDiff NET::timestampDiff NET timestampDiff NET::timestampDiff NET", "text": ""}, {"type": "function", "name": "NET::typeMatchesMask", "url": "classNET.html#a27fbb80ed615b8a177aa38f2f65ef40f", "keyword": "typeMatchesMask NET::typeMatchesMask NET typeMatchesMask NET::typeMatchesMask NET typeMatchesMask NET::typeMatchesMask NET typeMatchesMask NET::typeMatchesMask NET", "text": ""}, {"type": "class", "name": "KXMessages", "url": "classKXMessages.html", "keyword": "KXMessages", "text": "Used internally by KStartupInfo and kstart You usually don t want to use this use D-Bus instead Lubos Lunak"}, {"type": "signal", "name": "KXMessages::gotMessage", "url": "classKXMessages.html#a558b8d3136334fd9d651f3142635453a", "keyword": "gotMessage KXMessages::gotMessage KXMessages", "text": "message the message that has been received"}, {"type": "function", "name": "KXMessages::KXMessages", "url": "classKXMessages.html#a5446954387c4a649a3ccf28bde235f76", "keyword": "KXMessages KXMessages::KXMessages KXMessages", "text": "accept_broadcast if non-NULL all broadcast messages with this message type will be received parent the parent of this widget"}, {"type": "function", "name": "KXMessages::KXMessages", "url": "classKXMessages.html#af07881e57b254db66e72d76881c90482", "keyword": "KXMessages KXMessages::KXMessages KXMessages", "text": "connection The xcb connection rootWindow The rootWindow to use accept_broadcast if non-NULL all broadcast messages with this message type will be received parent the parent of this object 5.8"}, {"type": "function", "name": "KXMessages::broadcastMessage", "url": "classKXMessages.html#abdea70bab301928734a9dd5bab974d9e", "keyword": "broadcastMessage KXMessages::broadcastMessage KXMessages", "text": "msg_type the type of the message message the message itself screen X11 screen to use for the default"}, {"type": "function", "name": "KXMessages::broadcastMessageX", "url": "classKXMessages.html#a0f0f7d9aef343cb09588b9a631581f4b", "keyword": "broadcastMessageX KXMessages::broadcastMessageX KXMessages", "text": "disp X11 connection which will be used instead of QX11Info::display() msg_type the type of the message message the message itself screen X11 screen to use for the default false when an error occurred true otherwise since 5.0 use xcb variant"}, {"type": "function", "name": "KXMessages::broadcastMessageX", "url": "classKXMessages.html#aa61c13c4d32adc6a8585b980f7e6926f", "keyword": "broadcastMessageX KXMessages::broadcastMessageX KXMessages", "text": "c X11 connection which will be used instead of QX11Info::connection() msg_type the type of the message message the message itself screenNumber X11 screen to use false when an error occurred true otherwise"}, {"type": "class", "name": "NET", "url": "classNET.html", "keyword": "NET", "text": "The NET API is an implementation of the NET Window Manager Specification This class is the base class for the NETRootInfo and NETWinInfo classes which are used to retrieve and modify the properties of windows To keep the namespace relatively clean all enums are defined here"}, {"type": "struct", "name": "NETExtendedStrut", "url": "structNETExtendedStrut.html", "keyword": "NETExtendedStrut", "text": "This class is a convenience class defining a strut with left right top and bottom border values and ranges for them The existence of this class is to keep the implementation from being dependent on a separate framework/library See the _NET_WM_STRUT_PARTIAL property in the NETWM spec"}, {"type": "function", "name": "NETExtendedStrut::NETExtendedStrut", "url": "structNETExtendedStrut.html#a187cba4430313bffb597b4ce7a98ed40", "keyword": "NETExtendedStrut NETExtendedStrut::NETExtendedStrut NETExtendedStrut", "text": ""}, {"type": "variable", "name": "NETExtendedStrut::bottom_width", "url": "structNETExtendedStrut.html#a12ee0a2d04e980001139a7677a821148", "keyword": "bottom_width NETExtendedStrut::bottom_width NETExtendedStrut", "text": ""}, {"type": "variable", "name": "NETExtendedStrut::left_width", "url": "structNETExtendedStrut.html#a79fc79c632ccc599b393693d99f24164", "keyword": "left_width NETExtendedStrut::left_width NETExtendedStrut", "text": ""}, {"type": "variable", "name": "NETExtendedStrut::right_width", "url": "structNETExtendedStrut.html#a7c1f4d0bf33fe20f5dba649e8a2a505b", "keyword": "right_width NETExtendedStrut::right_width NETExtendedStrut", "text": ""}, {"type": "variable", "name": "NETExtendedStrut::top_width", "url": "structNETExtendedStrut.html#acb07800b67a53e134faaf09c571a1f0e", "keyword": "top_width NETExtendedStrut::top_width NETExtendedStrut", "text": ""}, {"type": "struct", "name": "NETFullscreenMonitors", "url": "structNETFullscreenMonitors.html", "keyword": "NETFullscreenMonitors", "text": "This class is a convenience class defining a multiple monitor topology for fullscreen applications that wish to be present on more than one monitor/head As per the _NET_WM_FULLSCREEN_MONITORS hint in the EWMH spec this topology consists of 4 monitor indices such that the bounding rectangle is defined by the top edge of the top monitor the bottom edge of the bottom monitor the left edge of the left monitor and the right edge of the right monitor See the _NET_WM_FULLSCREEN_MONITORS hint in the EWMH spec"}, {"type": "function", "name": "NETFullscreenMonitors::NETFullscreenMonitors", "url": "structNETFullscreenMonitors.html#a74bc97dfedfeb5a94eb89bd6e8016fb2", "keyword": "NETFullscreenMonitors NETFullscreenMonitors::NETFullscreenMonitors NETFullscreenMonitors", "text": ""}, {"type": "function", "name": "NETFullscreenMonitors::isSet", "url": "structNETFullscreenMonitors.html#a1d9fe17820f48414ef282aaa702499a6", "keyword": "isSet NETFullscreenMonitors::isSet NETFullscreenMonitors", "text": "Note that we don t want to call this isValid() because we re not actually validating the monitor topology here but merely that our initial values were overwritten at some point by real non-negative monitor indices"}, {"type": "variable", "name": "NETFullscreenMonitors::bottom", "url": "structNETFullscreenMonitors.html#ae92fa25c1ad0a67f919ef8e81c5b4b3f", "keyword": "bottom NETFullscreenMonitors::bottom NETFullscreenMonitors", "text": ""}, {"type": "variable", "name": "NETFullscreenMonitors::left", "url": "structNETFullscreenMonitors.html#ae17cba79fc3c8fb46222e2fe08d1f5e8", "keyword": "left NETFullscreenMonitors::left NETFullscreenMonitors", "text": ""}, {"type": "variable", "name": "NETFullscreenMonitors::right", "url": "structNETFullscreenMonitors.html#a3a52de56ffa8ab20db65ccfb51bf5b53", "keyword": "right NETFullscreenMonitors::right NETFullscreenMonitors", "text": ""}, {"type": "variable", "name": "NETFullscreenMonitors::top", "url": "structNETFullscreenMonitors.html#a956d8e03b8b2f645165d514fd90c2247", "keyword": "top NETFullscreenMonitors::top NETFullscreenMonitors", "text": ""}, {"type": "struct", "name": "NETIcon", "url": "structNETIcon.html", "keyword": "NETIcon", "text": "This class is a convenience class defining an icon of size width by height The existence of this class is to keep the implementation from being dependent on a separate framework/library NETIcon is only used by the NET API Usually QIcon is the appropriate class for representing an icon"}, {"type": "function", "name": "NETIcon::NETIcon", "url": "structNETIcon.html#ac1a350948e1128b4629f5914a306af66", "keyword": "NETIcon NETIcon::NETIcon NETIcon", "text": ""}, {"type": "variable", "name": "NETIcon::data", "url": "structNETIcon.html#aaa6c9f9828e7d2f9a29f408529a68822", "keyword": "data NETIcon::data NETIcon", "text": "This is an array of 32bit packed CARDINAL ARGB with high byte being A low byte being B First two bytes are width height Data is in rows left to right and top to bottom"}, {"type": "variable", "name": "NETIcon::size", "url": "structNETIcon.html#a6506944fe7143f0a37bbe58cc0d8df94", "keyword": "size NETIcon::size NETIcon", "text": "NETSize"}, {"type": "struct", "name": "NETPoint", "url": "structNETPoint.html", "keyword": "NETPoint", "text": "This class is a convenience class defining a point x y The existence of this class is to keep the implementation from being dependent on a separate framework/library NETPoint is only used by the NET API Usually QPoint is the appropriate class for representing a point Bradley T Hughes"}, {"type": "function", "name": "NETPoint::NETPoint", "url": "structNETPoint.html#aa922d92ff9c0cd7a782fd57438265050", "keyword": "NETPoint NETPoint::NETPoint NETPoint", "text": ""}, {"type": "variable", "name": "NETPoint::x", "url": "structNETPoint.html#a662b6d948b949dabcaf2e955a078e63f", "keyword": "x NETPoint::x NETPoint", "text": ""}, {"type": "variable", "name": "NETPoint::y", "url": "structNETPoint.html#ac64b3831f6fd7f1874f7e344beb117bd", "keyword": "y NETPoint::y NETPoint", "text": ""}, {"type": "struct", "name": "NETRect", "url": "structNETRect.html", "keyword": "NETRect", "text": "This class is a convenience class defining a rectangle as a point x y with a size width by height The existence of this class is to keep the implementation from being dependent on a separate framework/library NETRect is only used by the NET API Usually QRect is the appropriate class for representing a rectangle"}, {"type": "variable", "name": "NETRect::pos", "url": "structNETRect.html#a2604a60ef01bb245df79ada826b1718d", "keyword": "pos NETRect::pos NETRect", "text": "NETPoint"}, {"type": "variable", "name": "NETRect::size", "url": "structNETRect.html#a97102c18e356965d829855c570bb45ca", "keyword": "size NETRect::size NETRect", "text": "NETSize"}, {"type": "class", "name": "NETRootInfo", "url": "classNETRootInfo.html", "keyword": "NETRootInfo", "text": "The NETRootInfo class provides a common API for clients and window managers to set/read/change properties on the root window as defined by the NET Window Manager Specification Bradley T Hughes NET NETWinInfo"}, {"type": "function", "name": "NETRootInfo::NETRootInfo", "url": "classNETRootInfo.html#a89f26951db9fa3402ebfcac73a13b248", "keyword": "NETRootInfo NETRootInfo::NETRootInfo NETRootInfo", "text": "The application role is automatically set to WindowManager when using this constructor connection XCB connection supportWindow The Window id of the supportWindow The supportWindow must be created by the window manager as a child of the rootWindow The supportWindow must not be destroyed until the Window Manager exits wmName A string which should be the window manager s name ie or properties The properties the window manager supports windowTypes The window types the window manager supports states The states the window manager supports properties2 The properties2 the window manager supports actions The actions the window manager supports screen For Window Managers that support multiple screen ie displays the screen number may be explicitly defined If this argument is omitted the default screen will be used doActivate true to activate the window"}, {"type": "function", "name": "NETRootInfo::NETRootInfo", "url": "classNETRootInfo.html#aa9e67e0b9e262b810b5749ac3cd31a4b", "keyword": "NETRootInfo NETRootInfo::NETRootInfo NETRootInfo", "text": "The application role is automatically set to Client when using this constructor connection XCB connection properties The properties the client is interested in properties2 The properties2 the client is interested in properties_size The number of elements in the properties array screen For Clients that support multiple screen ie displays the screen number may be explicitly defined If this argument is omitted the default screen will be used doActivate true to call activate() to do an initial data read/update of the query information"}, {"type": "function", "name": "NETRootInfo::NETRootInfo", "url": "classNETRootInfo.html#a960dc3710c9cf34347285026b93bcd6f", "keyword": "NETRootInfo NETRootInfo::NETRootInfo NETRootInfo", "text": "rootinfo the NETRootInfo object to copy"}, {"type": "function", "name": "NETRootInfo::~NETRootInfo", "url": "classNETRootInfo.html#a88dd4ee9906662bf072d9e703b7df710", "keyword": "NETRootInfo::~NETRootInfo NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::activate", "url": "classNETRootInfo.html#a600ae69b2dfbbe78f2758c19af6748aa", "keyword": "activate NETRootInfo::activate NETRootInfo", "text": "This method sets initial data on the root window and does other post-construction duties Clients must also call this after creating the object to do an initial data read/update"}, {"type": "function", "name": "NETRootInfo::activeWindow", "url": "classNETRootInfo.html#a4ae7b7baf102438cb5f6484e4237abbb", "keyword": "activeWindow NETRootInfo::activeWindow NETRootInfo", "text": "the id of the active window"}, {"type": "function", "name": "NETRootInfo::clientList", "url": "classNETRootInfo.html#aaf1a87a8f4f44254449151aa10895d32", "keyword": "clientList NETRootInfo::clientList NETRootInfo", "text": "the array of Window id s clientListCount()"}, {"type": "function", "name": "NETRootInfo::clientListCount", "url": "classNETRootInfo.html#a035ed071e2412d6496776d5079a6cb36", "keyword": "clientListCount NETRootInfo::clientListCount NETRootInfo", "text": "the number of managed windows in the clientList array clientList()"}, {"type": "function", "name": "NETRootInfo::clientListStacking", "url": "classNETRootInfo.html#a50bbdce13267e297929a8a7c47f6c1ac", "keyword": "clientListStacking NETRootInfo::clientListStacking NETRootInfo", "text": "the array of Window id s in stacking order clientListStackingCount()"}, {"type": "function", "name": "NETRootInfo::clientListStackingCount", "url": "classNETRootInfo.html#a6488dbb60e1696f80ef4dbd6465203ef", "keyword": "clientListStackingCount NETRootInfo::clientListStackingCount NETRootInfo", "text": "the number of Window id s in the client list clientListStacking()"}, {"type": "function", "name": "NETRootInfo::closeWindowRequest", "url": "classNETRootInfo.html#a9cdbb685d45dc467039f5d682110c176", "keyword": "closeWindowRequest NETRootInfo::closeWindowRequest NETRootInfo", "text": "This will send a request to the Window Manager which usually can usually decide how to react to such requests window the id of the window to close"}, {"type": "function", "name": "NETRootInfo::currentDesktop", "url": "classNETRootInfo.html#a447ad4051423f7c099789425ae814063", "keyword": "currentDesktop NETRootInfo::currentDesktop NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way They are however mapped to virtual desktops if needed ignore_viewport if false viewport is mapped to virtual desktops the number of the current desktop"}, {"type": "function", "name": "NETRootInfo::desktopGeometry", "url": "classNETRootInfo.html#a97843623505e056546fde77d4f02086b", "keyword": "desktopGeometry NETRootInfo::desktopGeometry NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way You should use calls for virtual desktops viewport is mapped to them if needed the size of the desktop"}, {"type": "function", "name": "NETRootInfo::desktopLayoutColumnsRows", "url": "classNETRootInfo.html#aad5abb54b952460cc7db1271a0b1f2fb", "keyword": "desktopLayoutColumnsRows NETRootInfo::desktopLayoutColumnsRows NETRootInfo", "text": "Note that either may be 0 see _NET_DESKTOP_LAYOUT"}, {"type": "function", "name": "NETRootInfo::desktopLayoutCorner", "url": "classNETRootInfo.html#a91be2518fd5648543ebb2bd1ef83e672", "keyword": "desktopLayoutCorner NETRootInfo::desktopLayoutCorner NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::desktopLayoutOrientation", "url": "classNETRootInfo.html#a1147ee4d8a14fe363760e250b7e64c38", "keyword": "desktopLayoutOrientation NETRootInfo::desktopLayoutOrientation NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::desktopName", "url": "classNETRootInfo.html#a9ba60eb0b7b5a4c9b1c86c1be2bcd386", "keyword": "desktopName NETRootInfo::desktopName NETRootInfo", "text": "desktop the number of the desktop the name of the desktop"}, {"type": "function", "name": "NETRootInfo::desktopViewport", "url": "classNETRootInfo.html#a6cd5234c11a1eaf92b25ea1e3a1cb1c5", "keyword": "desktopViewport NETRootInfo::desktopViewport NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way You should use calls for virtual desktops viewport is mapped to them if needed desktop the number of the desktop the position of the desktop s viewport"}, {"type": "function", "name": "NETRootInfo::event", "url": "classNETRootInfo.html#ad9ac9343868f6a1ad4920e0b958ed7c9", "keyword": "event NETRootInfo::event NETRootInfo", "text": "The new information will be read immediately by the class The elements of the properties argument are as they would be passed to the constructor if the array is not large enough changed properties that don t fit in it won t be listed there they ll be updated in the class though event the event properties properties that changed properties_size size of the passed properties array since 5.0 use event(xcb_generic_event_t*, NET::Properties*, NET::Properties2*)"}, {"type": "function", "name": "NETRootInfo::event", "url": "classNETRootInfo.html#aa06811a2349fa8b8e427edcfe175cb09", "keyword": "event NETRootInfo::event NETRootInfo", "text": "The new information will be read immediately by the class It is possible to pass in a null pointer in the arguments In that case the passed in argument will obviously not be updated but the class will process the information nevertheless event the event properties The NET::Properties that changed properties2 The NET::Properties2 that changed 5.0"}, {"type": "function", "name": "NETRootInfo::event", "url": "classNETRootInfo.html#a40ce5ceef60cb7130480ced856c28744", "keyword": "event NETRootInfo::event NETRootInfo", "text": "The new information will be read immediately by the class This overloaded version returns only a single mask and therefore cannot check state of all properties like the other variant event the event the properties"}, {"type": "function", "name": "NETRootInfo::isSupported", "url": "classNETRootInfo.html#ae96a250ac6f683e5d2f703f8584e826a", "keyword": "isSupported NETRootInfo::isSupported NETRootInfo", "text": "Note that for Client mode NET::Supported needs to be passed in the properties argument for this to work"}, {"type": "function", "name": "NETRootInfo::isSupported", "url": "classNETRootInfo.html#aa727d28200a86c48563b642689b2fbcf", "keyword": "isSupported NETRootInfo::isSupported NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::isSupported", "url": "classNETRootInfo.html#ad00b04f0f6aa6a0af70157a781b525a2", "keyword": "isSupported NETRootInfo::isSupported NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::isSupported", "url": "classNETRootInfo.html#a276e2952063e546564c2ee5e6238ac29", "keyword": "isSupported NETRootInfo::isSupported NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::isSupported", "url": "classNETRootInfo.html#a10947572060a0c38dbe56533954de36a", "keyword": "isSupported NETRootInfo::isSupported NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::moveResizeRequest", "url": "classNETRootInfo.html#a6ef49909d42b1a1a04f2292b8605b79b", "keyword": "moveResizeRequest NETRootInfo::moveResizeRequest NETRootInfo", "text": "_NET_WM_MOVERESIZE should call this function This will send a request to the Window Manager window The client window that would be resized/moved x_root X position of the cursor relative to the root window y_root Y position of the cursor relative to the root window direction One of NET::Direction see base class documentation for a description of the different directions"}, {"type": "function", "name": "NETRootInfo::moveResizeWindowRequest", "url": "classNETRootInfo.html#abedcf941d9633d7234d610511a7a50d0", "keyword": "moveResizeWindowRequest NETRootInfo::moveResizeWindowRequest NETRootInfo", "text": "This will send a request to the Window Manager See _NET_MOVERESIZE_WINDOW description for details window The client window that would be resized/moved flags Flags specifying the operation see _NET_MOVERESIZE_WINDOW description x Requested X position for the window y Requested Y position for the window width Requested width for the window height Requested height for the window"}, {"type": "function", "name": "NETRootInfo::numberOfDesktops", "url": "classNETRootInfo.html#afcc5bf61b1a98087e0a8399b5ee107cd", "keyword": "numberOfDesktops NETRootInfo::numberOfDesktops NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way They are however mapped to virtual desktops if needed ignore_viewport if false viewport is mapped to virtual desktops the number of desktops"}, {"type": "function", "name": "NETRootInfo::operator=", "url": "classNETRootInfo.html#af117a2f45605de015325765540130ecc", "keyword": "operator= NETRootInfo::operator= NETRootInfo", "text": "Ensures that the shared data reference counts are correct"}, {"type": "function", "name": "NETRootInfo::passedActions", "url": "classNETRootInfo.html#aeac657d1a5a2bc2bbff13ba2b3753ecc", "keyword": "passedActions NETRootInfo::passedActions NETRootInfo", "text": "the actions argument passed to the constructor passedProperties() passedProperties2() passedStates() passedWindowTypes() 5.0"}, {"type": "function", "name": "NETRootInfo::passedProperties", "url": "classNETRootInfo.html#a7aba0412460d5de7223850bcde26cd3c", "keyword": "passedProperties NETRootInfo::passedProperties NETRootInfo", "text": "the properties argument passed to the constructor passedProperties2() passedStates() passedWindowTypes() passedActions()"}, {"type": "function", "name": "NETRootInfo::passedProperties2", "url": "classNETRootInfo.html#ab92f2c0b90a07bb51080626b888c3fff", "keyword": "passedProperties2 NETRootInfo::passedProperties2 NETRootInfo", "text": "the properties2 argument passed to the constructor passedProperties() passedStates() passedWindowTypes() passedActions() 5.0"}, {"type": "function", "name": "NETRootInfo::passedStates", "url": "classNETRootInfo.html#a0ef3d66dffc5ae60d3974e51e09efe5e", "keyword": "passedStates NETRootInfo::passedStates NETRootInfo", "text": "the states argument passed to the constructor passedProperties() passedProperties2() passedWindowTypes() passedActions() 5.0"}, {"type": "function", "name": "NETRootInfo::passedWindowTypes", "url": "classNETRootInfo.html#a8a82100d346fb5a3a0103a0c2a5cc27a", "keyword": "passedWindowTypes NETRootInfo::passedWindowTypes NETRootInfo", "text": "the windowTypes argument passed to the constructor passedProperties() passedProperties2() passedStates() passedActions() 5.0"}, {"type": "function", "name": "NETRootInfo::restackRequest", "url": "classNETRootInfo.html#a57f81b08f00cf960ea63eb63e81987ca", "keyword": "restackRequest NETRootInfo::restackRequest NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::rootWindow", "url": "classNETRootInfo.html#a231a5b46ec3cbfc15a73ae139fac5d92", "keyword": "rootWindow NETRootInfo::rootWindow NETRootInfo", "text": "the id of the root window"}, {"type": "function", "name": "NETRootInfo::sendPing", "url": "classNETRootInfo.html#a5e03bc4f40db8ad105e1708c22ea00eb", "keyword": "sendPing NETRootInfo::sendPing NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::setActiveWindow", "url": "classNETRootInfo.html#aefac0a31c98427a5a84dd09d812fe6f4", "keyword": "setActiveWindow NETRootInfo::setActiveWindow NETRootInfo", "text": "window the id of the new active window src whether the request comes from normal application or from a pager or similar tool timestamp X server timestamp of the user action that caused the request active_window active window of the requesting application if any"}, {"type": "function", "name": "NETRootInfo::setActiveWindow", "url": "classNETRootInfo.html#ab4aa5924f1f051199940828dbce4a118", "keyword": "setActiveWindow NETRootInfo::setActiveWindow NETRootInfo", "text": "This should be used only in the window manager mode window the if of the new active window"}, {"type": "function", "name": "NETRootInfo::setClientList", "url": "classNETRootInfo.html#a02dae359439488195aceb7f0a2b479ab", "keyword": "setClientList NETRootInfo::setClientList NETRootInfo", "text": "windows The array of Window id s count The number of windows in the array"}, {"type": "function", "name": "NETRootInfo::setClientListStacking", "url": "classNETRootInfo.html#af358dab6b0dfc8083a771dcc9f2dad73", "keyword": "setClientListStacking NETRootInfo::setClientListStacking NETRootInfo", "text": "windows The array of Window id s count The number of windows in the array"}, {"type": "function", "name": "NETRootInfo::setCurrentDesktop", "url": "classNETRootInfo.html#aab9e17977eec8d2a8ee8695bca184fbb", "keyword": "setCurrentDesktop NETRootInfo::setCurrentDesktop NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way It is however mapped to virtual desktops if needed desktop the number of the desktop ignore_viewport if false viewport is mapped to virtual desktops"}, {"type": "function", "name": "NETRootInfo::setDesktopGeometry", "url": "classNETRootInfo.html#aa4bbe7eec4123d1794fca9f233ebad93", "keyword": "setDesktopGeometry NETRootInfo::setDesktopGeometry NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way You should use calls for virtual desktops viewport is mapped to them if needed geometry the new size of the desktop"}, {"type": "function", "name": "NETRootInfo::setDesktopLayout", "url": "classNETRootInfo.html#a06f991c0b1540e779e5e324404337241", "keyword": "setDesktopLayout NETRootInfo::setDesktopLayout NETRootInfo", "text": "This is set by the pager When setting the pager must own the _NET_DESKTOP_LAYOUT_Sn manager selection See _NET_DESKTOP_LAYOUT for details"}, {"type": "function", "name": "NETRootInfo::setDesktopName", "url": "classNETRootInfo.html#a5b747a5f42d1627498a43c2df6670024", "keyword": "setDesktopName NETRootInfo::setDesktopName NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way Viewport is mapped to virtual desktops if needed but not for this call desktop the number of the desktop desktopName the new name of the desktop"}, {"type": "function", "name": "NETRootInfo::setDesktopViewport", "url": "classNETRootInfo.html#a3325efae9006a73cc16d9c259cee6f2b", "keyword": "setDesktopViewport NETRootInfo::setDesktopViewport NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way You should use calls for virtual desktops viewport is mapped to them if needed desktop the number of the desktop viewport the new position of the desktop s viewport"}, {"type": "function", "name": "NETRootInfo::setNumberOfDesktops", "url": "classNETRootInfo.html#ad2e7aca69ab4fa624eb86af70aaf70bd", "keyword": "setNumberOfDesktops NETRootInfo::setNumberOfDesktops NETRootInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way Viewport is mapped to virtual desktops if needed but not for this call numberOfDesktops the number of desktops"}, {"type": "function", "name": "NETRootInfo::setShowingDesktop", "url": "classNETRootInfo.html#a9f9c9aa337a71ecc6b61b3bc29e37de2", "keyword": "setShowingDesktop NETRootInfo::setShowingDesktop NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::setSupported", "url": "classNETRootInfo.html#a8b7935546a87ee3b27c02f861fff827e", "keyword": "setSupported NETRootInfo::setSupported NETRootInfo", "text": "In WindowManager mode this function updates _NET_SUPPORTED In Client mode this function does nothing 4.4"}, {"type": "function", "name": "NETRootInfo::setSupported", "url": "classNETRootInfo.html#af99010d9744bfca2d1866ecfda2478c4", "keyword": "setSupported NETRootInfo::setSupported NETRootInfo", "text": "4.4"}, {"type": "function", "name": "NETRootInfo::setSupported", "url": "classNETRootInfo.html#aa5b995911d7de433807dc7f79d5712ce", "keyword": "setSupported NETRootInfo::setSupported NETRootInfo", "text": "4.4"}, {"type": "function", "name": "NETRootInfo::setSupported", "url": "classNETRootInfo.html#adeb83b39ed3eeea9b5626c282a03e445", "keyword": "setSupported NETRootInfo::setSupported NETRootInfo", "text": "4.4"}, {"type": "function", "name": "NETRootInfo::setSupported", "url": "classNETRootInfo.html#a265528fb331b79a05bc2c33897141022", "keyword": "setSupported NETRootInfo::setSupported NETRootInfo", "text": "4.4"}, {"type": "function", "name": "NETRootInfo::setVirtualRoots", "url": "classNETRootInfo.html#ab44bc95e6ca88043dbd1bba2cd20269b", "keyword": "setVirtualRoots NETRootInfo::setVirtualRoots NETRootInfo", "text": "windows The array of Window id s count The number of windows in the array"}, {"type": "function", "name": "NETRootInfo::setWorkArea", "url": "classNETRootInfo.html#a7cb2a8b55300c6e363efe89f6702ddb7", "keyword": "setWorkArea NETRootInfo::setWorkArea NETRootInfo", "text": "desktop the number of the desktop workArea the new work area of the desktop"}, {"type": "function", "name": "NETRootInfo::showingDesktop", "url": "classNETRootInfo.html#afecf7557cb87d1d6e38d183a3f2a7545", "keyword": "showingDesktop NETRootInfo::showingDesktop NETRootInfo", "text": ""}, {"type": "function", "name": "NETRootInfo::supportedActions", "url": "classNETRootInfo.html#aeced8d9474a23a19c5992e1160153dea", "keyword": "supportedActions NETRootInfo::supportedActions NETRootInfo", "text": "In the Client mode if NET::Supported was passed in the properties argument the returned value are all actions supported by the Window Manager Other supported protocols and properties are returned by the specific methods supportedProperties() supportedProperties2() supportedStates() supportedWindowTypes() 5.0"}, {"type": "function", "name": "NETRootInfo::supportedProperties", "url": "classNETRootInfo.html#a9c9b1ee1fb41bebf0837c465ac9dcdee", "keyword": "supportedProperties NETRootInfo::supportedProperties NETRootInfo", "text": "In the Client mode if NET::Supported was passed in the properties argument the returned value are all properties supported by the Window Manager Other supported protocols and properties are returned by the specific methods supportedProperties2() supportedStates() supportedWindowTypes() supportedActions()"}, {"type": "function", "name": "NETRootInfo::supportedProperties2", "url": "classNETRootInfo.html#a61118ab0e50d5db4bb7e1128e0984b43", "keyword": "supportedProperties2 NETRootInfo::supportedProperties2 NETRootInfo", "text": "In the Client mode if NET::Supported was passed in the properties argument the returned value are all properties2 supported by the Window Manager Other supported protocols and properties are returned by the specific methods supportedProperties() supportedStates() supportedWindowTypes() supportedActions() 5.0"}, {"type": "function", "name": "NETRootInfo::supportedStates", "url": "classNETRootInfo.html#adc3b3209ba69cd90ee91d7a8f90801d7", "keyword": "supportedStates NETRootInfo::supportedStates NETRootInfo", "text": "In the Client mode if NET::Supported was passed in the properties argument the returned value are all states supported by the Window Manager Other supported protocols and properties are returned by the specific methods supportedProperties() supportedProperties2() supportedWindowTypes() supportedActions() 5.0"}, {"type": "function", "name": "NETRootInfo::supportedWindowTypes", "url": "classNETRootInfo.html#abf7d368ac4d319098d1291abeb92035e", "keyword": "supportedWindowTypes NETRootInfo::supportedWindowTypes NETRootInfo", "text": "In the Client mode if NET::Supported was passed in the properties argument the returned value are all window types supported by the Window Manager Other supported protocols and properties are returned by the specific methods supportedProperties() supportedProperties2() supportedStates() supportedActions() 5.0"}, {"type": "function", "name": "NETRootInfo::supportWindow", "url": "classNETRootInfo.html#a8edabc7b370c743c76bea72c3253dabc", "keyword": "supportWindow NETRootInfo::supportWindow NETRootInfo", "text": "the id of the support window"}, {"type": "function", "name": "NETRootInfo::virtualRoots", "url": "classNETRootInfo.html#a5e2002c7e9e3aa608c81ca08a1a1a02a", "keyword": "virtualRoots NETRootInfo::virtualRoots NETRootInfo", "text": "the array of Window id s virtualRootsCount()"}, {"type": "function", "name": "NETRootInfo::virtualRootsCount", "url": "classNETRootInfo.html#a1d97019b468992157030d773cc019fe1", "keyword": "virtualRootsCount NETRootInfo::virtualRootsCount NETRootInfo", "text": "the number of Window id s in the virtual root array virtualRoots()"}, {"type": "function", "name": "NETRootInfo::wmName", "url": "classNETRootInfo.html#af51e1fbd88028b70958f5b08cabd82be", "keyword": "wmName NETRootInfo::wmName NETRootInfo", "text": "the name of the window manager"}, {"type": "function", "name": "NETRootInfo::workArea", "url": "classNETRootInfo.html#ad6c3a3adc4684ab3eeac2b48fe40801e", "keyword": "workArea NETRootInfo::workArea NETRootInfo", "text": "desktop the number of the desktop the size of the work area"}, {"type": "function", "name": "NETRootInfo::xcbConnection", "url": "classNETRootInfo.html#a1c9613c282ce0140df8a7653a2f2adcb", "keyword": "xcbConnection NETRootInfo::xcbConnection NETRootInfo", "text": "the XCB connection"}, {"type": "function", "name": "NETRootInfo::addClient", "url": "classNETRootInfo.html#a0a4cd1ccb8097bf8aadc7dbaa5ca5ed7", "keyword": "addClient NETRootInfo::addClient NETRootInfo", "text": "window the id of the window to add"}, {"type": "function", "name": "NETRootInfo::changeActiveWindow", "url": "classNETRootInfo.html#a57ed7346a3fa56a543079678049bdae9", "keyword": "changeActiveWindow NETRootInfo::changeActiveWindow NETRootInfo", "text": "window the id of the window to activate src the source from which the request came timestamp the timestamp of the user action causing this request active_window active window of the requesting application if any"}, {"type": "function", "name": "NETRootInfo::changeCurrentDesktop", "url": "classNETRootInfo.html#ae305549c1052c9a56438dbbe4d85302f", "keyword": "changeCurrentDesktop NETRootInfo::changeCurrentDesktop NETRootInfo", "text": "desktop the number of the desktop"}, {"type": "function", "name": "NETRootInfo::changeDesktopGeometry", "url": "classNETRootInfo.html#a8dbf88d76644b4e912ee7e860c89225a", "keyword": "changeDesktopGeometry NETRootInfo::changeDesktopGeometry NETRootInfo", "text": "desktop the number of the desktop geom the new size"}, {"type": "function", "name": "NETRootInfo::changeDesktopViewport", "url": "classNETRootInfo.html#a0081e46b972ba2efca3e0d4b301e34da", "keyword": "changeDesktopViewport NETRootInfo::changeDesktopViewport NETRootInfo", "text": "desktop the number of the desktop viewport the new position of the viewport"}, {"type": "function", "name": "NETRootInfo::changeNumberOfDesktops", "url": "classNETRootInfo.html#aa177bec4607fd2b38529e9fc135d51b9", "keyword": "changeNumberOfDesktops NETRootInfo::changeNumberOfDesktops NETRootInfo", "text": "numberOfDesktops the new number of desktops"}, {"type": "function", "name": "NETRootInfo::changeShowingDesktop", "url": "classNETRootInfo.html#af86664c4429e79430db0360a5a608dd6", "keyword": "changeShowingDesktop NETRootInfo::changeShowingDesktop NETRootInfo", "text": "See _NET_SHOWING_DESKTOP for details showing whether to activate the showing desktop mode"}, {"type": "function", "name": "NETRootInfo::closeWindow", "url": "classNETRootInfo.html#a0058f0368e02834b73d164c84a58adbd", "keyword": "closeWindow NETRootInfo::closeWindow NETRootInfo", "text": "window the id of the window to close"}, {"type": "function", "name": "NETRootInfo::gotPing", "url": "classNETRootInfo.html#a29decfa17ae9ef6f7b866b7dae72460e", "keyword": "gotPing NETRootInfo::gotPing NETRootInfo", "text": "window the window from which the reply came timestamp timestamp of the ping"}, {"type": "function", "name": "NETRootInfo::moveResize", "url": "classNETRootInfo.html#a67232e7858fb5ac4bb752c32283f08bb", "keyword": "moveResize NETRootInfo::moveResize NETRootInfo", "text": "window The window that wants to move/resize x_root X position of the cursor relative to the root window y_root Y position of the cursor relative to the root window direction One of NET::Direction see base class documentation for a description of the different directions"}, {"type": "function", "name": "NETRootInfo::moveResizeWindow", "url": "classNETRootInfo.html#a17d75ad375ac020f5acc62e4316cd350", "keyword": "moveResizeWindow NETRootInfo::moveResizeWindow NETRootInfo", "text": "See _NET_MOVERESIZE_WINDOW for details window the id of the window to more/resize flags Flags specifying the operation see _NET_MOVERESIZE_WINDOW description x Requested X position for the window y Requested Y position for the window width Requested width for the window height Requested height for the window"}, {"type": "function", "name": "NETRootInfo::removeClient", "url": "classNETRootInfo.html#a9ece857514d7b994cc6cc671dfc69df9", "keyword": "removeClient NETRootInfo::removeClient NETRootInfo", "text": "window the id of the window to remove"}, {"type": "function", "name": "NETRootInfo::restackWindow", "url": "classNETRootInfo.html#a3a7f30db68710827abf9801f5440617d", "keyword": "restackWindow NETRootInfo::restackWindow NETRootInfo", "text": "See _NET_RESTACK_WINDOW for details window the id of the window to restack source the source of the request above other window in the restack request detail restack detail timestamp the timestamp of the request"}, {"type": "function", "name": "NETRootInfo::virtual_hook", "url": "classNETRootInfo.html#a8d97a3a5bb0726e991037eaece10279a", "keyword": "virtual_hook NETRootInfo::virtual_hook NETRootInfo", "text": "Unused in this class"}, {"type": "struct", "name": "NETSize", "url": "structNETSize.html", "keyword": "NETSize", "text": "This class is a convenience class defining a size width by height The existence of this class is to keep the implementation from being dependent on a separate framework/library NETSize is only used by the NET API Usually QSize is the appropriate class for representing a size Bradley T Hughes"}, {"type": "function", "name": "NETSize::NETSize", "url": "structNETSize.html#aac718a821bc131ecc0c736a8eed0a8cd", "keyword": "NETSize NETSize::NETSize NETSize", "text": ""}, {"type": "variable", "name": "NETSize::height", "url": "structNETSize.html#a0a6def5683983f7f3478192248ef2f8e", "keyword": "height NETSize::height NETSize", "text": ""}, {"type": "variable", "name": "NETSize::width", "url": "structNETSize.html#af2e6a5fcac88037fa745273e85c5e219", "keyword": "width NETSize::width NETSize", "text": ""}, {"type": "struct", "name": "NETStrut", "url": "structNETStrut.html", "keyword": "NETStrut", "text": "use NETExtendedStrut Simple strut class for NET classes This class is a convenience class defining a strut with left right top and bottom border values The existence of this class is to keep the implementation from being dependent on a separate framework/library See the _NET_WM_STRUT property in the NETWM spec"}, {"type": "function", "name": "NETStrut::NETStrut", "url": "structNETStrut.html#af4263329e1d7e5aa48248fbcbc2284a9", "keyword": "NETStrut NETStrut::NETStrut NETStrut", "text": ""}, {"type": "variable", "name": "NETStrut::bottom", "url": "structNETStrut.html#a031e023bb8f0c8cf3d00b748c7dd7ca7", "keyword": "bottom NETStrut::bottom NETStrut", "text": ""}, {"type": "variable", "name": "NETStrut::left", "url": "structNETStrut.html#a3ffe1d55e64632f4cdc1225ae8a301df", "keyword": "left NETStrut::left NETStrut", "text": ""}, {"type": "variable", "name": "NETStrut::right", "url": "structNETStrut.html#a46c92f5dc806d6def2390f258d00b80e", "keyword": "right NETStrut::right NETStrut", "text": ""}, {"type": "variable", "name": "NETStrut::top", "url": "structNETStrut.html#ac359ac56290a66002010f64dc4842aa2", "keyword": "top NETStrut::top NETStrut", "text": ""}, {"type": "class", "name": "NETWinInfo", "url": "classNETWinInfo.html", "keyword": "NETWinInfo", "text": "The NETWinInfo class provides a common API for clients and window managers to set/read/change properties on an application window as defined by the NET Window Manager Specification Bradley T Hughes NET NETRootInfo"}, {"type": "function", "name": "NETWinInfo::NETWinInfo", "url": "classNETWinInfo.html#adf91f4fb54f368506913f1e5dafe78f6", "keyword": "NETWinInfo NETWinInfo::NETWinInfo NETWinInfo", "text": "connection XCB connection window The Window id of the application window rootWindow The Window id of the root window properties The NET::Properties flags properties2 The NET::Properties2 flags role Select the application role If this argument is omitted the role will default to Client"}, {"type": "function", "name": "NETWinInfo::NETWinInfo", "url": "classNETWinInfo.html#a66be82d80a0c75eecff47d1acc21dec6", "keyword": "NETWinInfo NETWinInfo::NETWinInfo NETWinInfo", "text": "since 5.0 use above ctor"}, {"type": "function", "name": "NETWinInfo::NETWinInfo", "url": "classNETWinInfo.html#a84db7dff7f2458fd3f66e041573bb997", "keyword": "NETWinInfo NETWinInfo::NETWinInfo NETWinInfo", "text": "wininfo the NETWinInfo to copy"}, {"type": "function", "name": "NETWinInfo::~NETWinInfo", "url": "classNETWinInfo.html#ae03403bb3bd691e8a3fa2da3a1161d33", "keyword": "NETWinInfo::~NETWinInfo NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::activities", "url": "classNETWinInfo.html#a2ab7b37c25a584ea300331562498572e", "keyword": "activities NETWinInfo::activities NETWinInfo", "text": "FIXME this might be better as a NETRArray 4.6"}, {"type": "function", "name": "NETWinInfo::allowedActions", "url": "classNETWinInfo.html#aeafdfaacb707bba4ae8fa387f2460955", "keyword": "allowedActions NETWinInfo::allowedActions NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::clientMachine", "url": "classNETWinInfo.html#aba26b0a73ba6b2664a363e498a028de0", "keyword": "clientMachine NETWinInfo::clientMachine NETWinInfo", "text": "WM_CLIENT_MACHINE property"}, {"type": "function", "name": "NETWinInfo::desktop", "url": "classNETWinInfo.html#a3c80672b9fe183f1209640c1da4db495", "keyword": "desktop NETWinInfo::desktop NETWinInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way It is however mapped to virtual desktops if needed ignore_viewport if false viewport is mapped to virtual desktops the number of the window s desktop OnAllDesktops()"}, {"type": "function", "name": "NETWinInfo::event", "url": "classNETWinInfo.html#a05f7f01e51f8d25455b573c64854bd84", "keyword": "event NETWinInfo::event NETWinInfo", "text": "The new information will be read immediately by the class The elements of the properties argument are as they would be passed to the constructor if the array is not large enough changed properties that don t fit in it won t be listed there they ll be updated in the class though event the event properties properties that changed properties_size size of the passed properties array since 5.0 use event(xcb_generic_event_t*, NET::Properties*, NET::Properties2*)"}, {"type": "function", "name": "NETWinInfo::event", "url": "classNETWinInfo.html#a6aafb5925d82c803d97984a1378f56be", "keyword": "event NETWinInfo::event NETWinInfo", "text": "The new information will be read immediately by the class It is possible to pass in a null pointer in the arguments In that case the passed in argument will obviously not be updated but the class will process the information nevertheless event the event properties The NET::Properties that changed properties2 The NET::Properties2 that changed 5.0"}, {"type": "function", "name": "NETWinInfo::event", "url": "classNETWinInfo.html#a1c335476b55f3f4454411126ba9ba924", "keyword": "event NETWinInfo::event NETWinInfo", "text": "The new information will be read immediately by the class This overloaded version returns only a single mask and therefore cannot check state of all properties like the other variant event the event the properties"}, {"type": "function", "name": "NETWinInfo::extendedStrut", "url": "classNETWinInfo.html#a77254cc74f15b155171eef816f4d764b", "keyword": "extendedStrut NETWinInfo::extendedStrut NETWinInfo", "text": "See _NET_WM_STRUT_PARTIAL in the spec"}, {"type": "function", "name": "NETWinInfo::frameExtents", "url": "classNETWinInfo.html#a5ce42a76e6c119a26504b422c2278e8d", "keyword": "frameExtents NETWinInfo::frameExtents NETWinInfo", "text": "the width of the decoration borders 4.3"}, {"type": "function", "name": "NETWinInfo::frameOverlap", "url": "classNETWinInfo.html#ab8b6cdd03474c14666ccf486178c9f5b", "keyword": "frameOverlap NETWinInfo::frameOverlap NETWinInfo", "text": "how far the window frame extends behind the client area on each side 4.4"}, {"type": "function", "name": "NETWinInfo::fullscreenMonitors", "url": "classNETWinInfo.html#aed9259092abb5e8437a6f72ac1039d13", "keyword": "fullscreenMonitors NETWinInfo::fullscreenMonitors NETWinInfo", "text": "See _NET_WM_FULLSCREEN_MONITORS in the spec"}, {"type": "function", "name": "NETWinInfo::groupLeader", "url": "classNETWinInfo.html#ad78515c5141e18268d1176d6ffbedc74", "keyword": "groupLeader NETWinInfo::groupLeader NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::handledIcons", "url": "classNETWinInfo.html#ac2d331f9643b74c8dd82c9811b763698", "keyword": "handledIcons NETWinInfo::handledIcons NETWinInfo", "text": "true if this client handles icons false otherwise"}, {"type": "function", "name": "NETWinInfo::hasNETSupport", "url": "classNETWinInfo.html#adaf4b1b763ebc53db481b09f3ef33431", "keyword": "hasNETSupport NETWinInfo::hasNETSupport NETWinInfo", "text": "Presence of a window type as specified by the NETWM spec is considered as the window supporting this specification true if the window has support for the NETWM spec"}, {"type": "function", "name": "NETWinInfo::hasWindowType", "url": "classNETWinInfo.html#a112add6db8a64985e415f3e3e507c235", "keyword": "hasWindowType NETWinInfo::hasWindowType NETWinInfo", "text": "Used by KWindowInfo::windowType() to return either NET::Normal or NET::Dialog as appropriate as a fallback"}, {"type": "function", "name": "NETWinInfo::icccmIconPixmap", "url": "classNETWinInfo.html#a9221fe1fd6702c8925593643c064eabf", "keyword": "icccmIconPixmap NETWinInfo::icccmIconPixmap NETWinInfo", "text": "See ICCCM 4.1.2.4 The default value is XCB_PIXMAP_NONE Using the ICCCM variant for the icon is deprecated and only offers a limited functionality compared to Only use this variant as a fallback icccmIconPixmapMask icon 5.7"}, {"type": "function", "name": "NETWinInfo::icccmIconPixmapMask", "url": "classNETWinInfo.html#a692dd9c9b1364a1056739521f982caaa", "keyword": "icccmIconPixmapMask NETWinInfo::icccmIconPixmapMask NETWinInfo", "text": "See ICCCM 4.1.2.4 The default value is XCB_PIXMAP_NONE icccmIconPixmap 5.7"}, {"type": "function", "name": "NETWinInfo::icon", "url": "classNETWinInfo.html#a60f99155059dc18d740685bb38e282b5", "keyword": "icon NETWinInfo::icon NETWinInfo", "text": "If width and height are passed the icon returned will be the closest it can find the next biggest If width and height are omitted then the largest icon in the list is returned width the preferred width for the icon to ignore height the preferred height for the icon to ignore the icon"}, {"type": "function", "name": "NETWinInfo::iconGeometry", "url": "classNETWinInfo.html#afe6f6aea8847cc260db854ff9e2b00da", "keyword": "iconGeometry NETWinInfo::iconGeometry NETWinInfo", "text": "the geometry of the icon"}, {"type": "function", "name": "NETWinInfo::iconName", "url": "classNETWinInfo.html#a8d71f7b93d3a5223efe4a017b917c05b", "keyword": "iconName NETWinInfo::iconName NETWinInfo", "text": "Note that this has nothing to do with icons but it s for representations of the window taskbars etc that should be shown when the window is in iconic state See description of _NET_WM_ICON_NAME for details the iconic name"}, {"type": "function", "name": "NETWinInfo::iconSizes", "url": "classNETWinInfo.html#a900706baea75d23b5f03cd351a8077d1", "keyword": "iconSizes NETWinInfo::iconSizes NETWinInfo", "text": "Each size is pair width height terminated with pair 0 0 4.3"}, {"type": "function", "name": "NETWinInfo::initialMappingState", "url": "classNETWinInfo.html#a3e829d11b2cbb5fee2b154c749c564f2", "keyword": "initialMappingState NETWinInfo::initialMappingState NETWinInfo", "text": "See ICCCM 4.1.2.4 and 4.1.4 The default value if Withdrawn in case the Client is mapped without a WM_HINTS property or without the initial state hint set 5.5"}, {"type": "function", "name": "NETWinInfo::input", "url": "classNETWinInfo.html#a4b85fb45350225df5fe243923d01d456", "keyword": "input NETWinInfo::input NETWinInfo", "text": "See ICCCM 4.1.2.4 and 4.1.7 The default value is true in case the Client is mapped without a WM_HINTS property 5.3"}, {"type": "function", "name": "NETWinInfo::isBlockingCompositing", "url": "classNETWinInfo.html#a326e6ec8a7a91cba2eb7b1902e4eff3d", "keyword": "isBlockingCompositing NETWinInfo::isBlockingCompositing NETWinInfo", "text": "4.7"}, {"type": "function", "name": "NETWinInfo::kdeGeometry", "url": "classNETWinInfo.html#a27ca3c4fb9170a15c9f7b779c0bd51dd", "keyword": "kdeGeometry NETWinInfo::kdeGeometry NETWinInfo", "text": "Both geometries are relative to the root window frame the geometry for the frame window the geometry for the window"}, {"type": "function", "name": "NETWinInfo::mappingState", "url": "classNETWinInfo.html#a4ed55e3ba2240e25eadba11159d4530e", "keyword": "mappingState NETWinInfo::mappingState NETWinInfo", "text": "the mapping state"}, {"type": "function", "name": "NETWinInfo::name", "url": "classNETWinInfo.html#a42f4596234b1cd1517c2ac5f8fc9b879", "keyword": "name NETWinInfo::name NETWinInfo", "text": "the name of the window"}, {"type": "function", "name": "NETWinInfo::opacity", "url": "classNETWinInfo.html#a4dbb43fae97678665c14e91a16fa8e1b", "keyword": "opacity NETWinInfo::opacity NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::opaqueRegion", "url": "classNETWinInfo.html#a6e9c8a6ef50c66ee097c987b793cf61c", "keyword": "opaqueRegion NETWinInfo::opaqueRegion NETWinInfo", "text": "The opaque region as specified by the Client 5.7"}, {"type": "function", "name": "NETWinInfo::operator=", "url": "classNETWinInfo.html#a79640a11e0f4ccb09ec81dd68cbb59ba", "keyword": "operator= NETWinInfo::operator= NETWinInfo", "text": "Ensures that the shared data reference counts are correct"}, {"type": "function", "name": "NETWinInfo::passedProperties", "url": "classNETWinInfo.html#a5b5011a26f9517510ce612baea72f9a3", "keyword": "passedProperties NETWinInfo::passedProperties NETWinInfo", "text": "the properties argument passed to the constructor passedProperties2()"}, {"type": "function", "name": "NETWinInfo::passedProperties2", "url": "classNETWinInfo.html#a264884e8c627e9840b7e5d544f39e019", "keyword": "passedProperties2 NETWinInfo::passedProperties2 NETWinInfo", "text": "the properties2 argument passed to the constructor passedProperties() 5.0"}, {"type": "function", "name": "NETWinInfo::pid", "url": "classNETWinInfo.html#adbe9d87d81170a7e027b603157005314", "keyword": "pid NETWinInfo::pid NETWinInfo", "text": "the process id of the window"}, {"type": "function", "name": "NETWinInfo::protocols", "url": "classNETWinInfo.html#a68ec17d6fd187bd4b5ddf917017fa0ec", "keyword": "protocols NETWinInfo::protocols NETWinInfo", "text": "The window manager protocols this Client supports 5.3"}, {"type": "function", "name": "NETWinInfo::setActivities", "url": "classNETWinInfo.html#a90d3b14186b074aaa0309ca4c8c670db", "keyword": "setActivities NETWinInfo::setActivities NETWinInfo", "text": "5.1"}, {"type": "function", "name": "NETWinInfo::setAllowedActions", "url": "classNETWinInfo.html#af0b92d7673ce879ec377ed47fc312ad7", "keyword": "setAllowedActions NETWinInfo::setAllowedActions NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::setBlockingCompositing", "url": "classNETWinInfo.html#ac264bd0ff15058b4158ea2932ea2fda2", "keyword": "setBlockingCompositing NETWinInfo::setBlockingCompositing NETWinInfo", "text": "4.7"}, {"type": "function", "name": "NETWinInfo::setDesktop", "url": "classNETWinInfo.html#ac4d23861033e10ca674b0434f246a690", "keyword": "setDesktop NETWinInfo::setDesktop NETWinInfo", "text": "NOTE KDE uses virtual desktops and does not directly support viewport in any way It is however mapped to virtual desktops if needed desktop the number of the new desktop ignore_viewport if false viewport is mapped to virtual desktops OnAllDesktops()"}, {"type": "function", "name": "NETWinInfo::setExtendedStrut", "url": "classNETWinInfo.html#a6a6964c115a4f2f24e9fc6688b2d79dc", "keyword": "setExtendedStrut NETWinInfo::setExtendedStrut NETWinInfo", "text": "extended_strut the new strut"}, {"type": "function", "name": "NETWinInfo::setFrameExtents", "url": "classNETWinInfo.html#ab50f281e50e6652abfc56e36cab398f4", "keyword": "setFrameExtents NETWinInfo::setFrameExtents NETWinInfo", "text": "the width of the decoration borders strut the new strut"}, {"type": "function", "name": "NETWinInfo::setFrameOverlap", "url": "classNETWinInfo.html#a0d27f5e71e08990e3aa0b2cd74694216", "keyword": "setFrameOverlap NETWinInfo::setFrameOverlap NETWinInfo", "text": "how far the window frame extends behind the client area on each side Set the strut values to if you want the window frame to cover the whole client area The default values are 0 4.4"}, {"type": "function", "name": "NETWinInfo::setFullscreenMonitors", "url": "classNETWinInfo.html#ae026b1b5d2aca9ae0fb0a70ce03913a9", "keyword": "setFullscreenMonitors NETWinInfo::setFullscreenMonitors NETWinInfo", "text": "The indices are from the set returned by the Xinerama extension See _NET_WM_FULLSCREEN_MONITORS for details topology A struct that models the desired monitor topology namely top is the monitor whose top edge defines the top edge of the fullscreen window bottom is the monitor whose bottom edge defines the bottom edge of the fullscreen window left is the monitor whose left edge defines the left edge of the fullscreen window and right is the monitor whose right edge defines the right edge of the fullscreen window"}, {"type": "function", "name": "NETWinInfo::setHandledIcons", "url": "classNETWinInfo.html#a05c22f70a2d7659b4b8e836c926b350f", "keyword": "setHandledIcons NETWinInfo::setHandledIcons NETWinInfo", "text": "handled true if the window handles icons false otherwise"}, {"type": "function", "name": "NETWinInfo::setIcon", "url": "classNETWinInfo.html#aeacf220f1698b64cefa715ca70b5e38a", "keyword": "setIcon NETWinInfo::setIcon NETWinInfo", "text": "If replace is True then the specified icon is defined to be the only icon If replace is False then the specified icon is added to a list of icons icon the new icon replace true to replace false to append to the list of icons"}, {"type": "function", "name": "NETWinInfo::setIconGeometry", "url": "classNETWinInfo.html#aff2aba23f23b7cd0efd120449706fda4", "keyword": "setIconGeometry NETWinInfo::setIconGeometry NETWinInfo", "text": "geometry the new icon geometry"}, {"type": "function", "name": "NETWinInfo::setIconName", "url": "classNETWinInfo.html#a5f141654450eec3b153b866e0299e02c", "keyword": "setIconName NETWinInfo::setIconName NETWinInfo", "text": "name the new iconic name"}, {"type": "function", "name": "NETWinInfo::setName", "url": "classNETWinInfo.html#aff40999729f1304c6ce6a8fafb9e7b45", "keyword": "setName NETWinInfo::setName NETWinInfo", "text": "name the new name of the window"}, {"type": "function", "name": "NETWinInfo::setOpacity", "url": "classNETWinInfo.html#a1bd1f2ff92d908eece1ef675d68002ae", "keyword": "setOpacity NETWinInfo::setOpacity NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::setPid", "url": "classNETWinInfo.html#a0c2dc2f4babf3efa3b0454c51504f9b1", "keyword": "setPid NETWinInfo::setPid NETWinInfo", "text": "pid the window s process id"}, {"type": "function", "name": "NETWinInfo::setStartupId", "url": "classNETWinInfo.html#ad92c6841ffdcc826065554bd0df89c62", "keyword": "setStartupId NETWinInfo::setStartupId NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::setState", "url": "classNETWinInfo.html#a15fd655ed64a418397b2c93dacf45a3a", "keyword": "setState NETWinInfo::setState NETWinInfo", "text": "state the name state mask the mask for the state"}, {"type": "function", "name": "NETWinInfo::setStrut", "url": "classNETWinInfo.html#a55d3265cab9042f4a3904a46ca02fcdd", "keyword": "setStrut NETWinInfo::setStrut NETWinInfo", "text": "use setExtendedStrut() Set the strut for the application window strut the new strut"}, {"type": "function", "name": "NETWinInfo::setUserTime", "url": "classNETWinInfo.html#aea17de9b0eaa052bafa25e2ec2a6af54", "keyword": "setUserTime NETWinInfo::setUserTime NETWinInfo", "text": "The timestamp is expressed as XServer time If a window is shown with user timestamp older than the time of the last user action it won t be activated after being shown with the special value 0 meaning not to activate the window after being shown"}, {"type": "function", "name": "NETWinInfo::setVisibleIconName", "url": "classNETWinInfo.html#ac2d7bcff77df4a068fa56736077dca33", "keyword": "setVisibleIconName NETWinInfo::setVisibleIconName NETWinInfo", "text": "xterm xterm 2 xterm 3 name the new visible iconic name"}, {"type": "function", "name": "NETWinInfo::setVisibleName", "url": "classNETWinInfo.html#abcf5bf06a71c4b73b67f5acd1b216cbc", "keyword": "setVisibleName NETWinInfo::setVisibleName NETWinInfo", "text": "xterm xterm 2 xterm 3 visibleName the new visible name"}, {"type": "function", "name": "NETWinInfo::setWindowType", "url": "classNETWinInfo.html#ab617fe015564e043bfa5ca8e708b6e8f", "keyword": "setWindowType NETWinInfo::setWindowType NETWinInfo", "text": "type the window type"}, {"type": "function", "name": "NETWinInfo::startupId", "url": "classNETWinInfo.html#aac76a94e5d3d5017cf82c06a83d482fa", "keyword": "startupId NETWinInfo::startupId NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::state", "url": "classNETWinInfo.html#aa26a0bc40a868cfbfb9f335e800d3fe2", "keyword": "state NETWinInfo::state NETWinInfo", "text": "the state of the window"}, {"type": "function", "name": "NETWinInfo::strut", "url": "classNETWinInfo.html#a6acff362532b5e3a276cae6b09f5f68a", "keyword": "strut NETWinInfo::strut NETWinInfo", "text": "use strutPartial() Returns the strut specified by this client the strut of the window"}, {"type": "function", "name": "NETWinInfo::supportsProtocol", "url": "classNETWinInfo.html#a0291f40413807b62431b8e2878efe04c", "keyword": "supportsProtocol NETWinInfo::supportsProtocol NETWinInfo", "text": "true if the Client supports the protocol protocol The window manager protocol to test for 5.3"}, {"type": "function", "name": "NETWinInfo::transientFor", "url": "classNETWinInfo.html#a4690e2ddaad2aae82dd6557f5b63a2e3", "keyword": "transientFor NETWinInfo::transientFor NETWinInfo", "text": "the mainwindow for this window"}, {"type": "function", "name": "NETWinInfo::urgency", "url": "classNETWinInfo.html#adfa4f51510c911068598458c39c44d39", "keyword": "urgency NETWinInfo::urgency NETWinInfo", "text": "See ICCCM 4.1.2.4 5.3"}, {"type": "function", "name": "NETWinInfo::userTime", "url": "classNETWinInfo.html#adba4b96c3dae8d693298db9d868b5849", "keyword": "userTime NETWinInfo::userTime NETWinInfo", "text": ""}, {"type": "function", "name": "NETWinInfo::visibleIconName", "url": "classNETWinInfo.html#a80f7db38cc5fbc9c55d46d8bf316d1e5", "keyword": "visibleIconName NETWinInfo::visibleIconName NETWinInfo", "text": "Note that this has nothing to do with icons but it s for representations of the window taskbars etc that should be shown when the window is in iconic state See description of _NET_WM_VISIBLE_ICON_NAME for details the visible iconic name"}, {"type": "function", "name": "NETWinInfo::visibleName", "url": "classNETWinInfo.html#aca3a277424174d211b8e10e11c0cc3f9", "keyword": "visibleName NETWinInfo::visibleName NETWinInfo", "text": "the visible name of the window"}, {"type": "function", "name": "NETWinInfo::windowClassClass", "url": "classNETWinInfo.html#af73d7f461eeb195ce513d378ffa7e0c8", "keyword": "windowClassClass NETWinInfo::windowClassClass NETWinInfo", "text": "WM_CLASS property"}, {"type": "function", "name": "NETWinInfo::windowClassName", "url": "classNETWinInfo.html#aeebdda5d8f00b6c2a749d0fa6145a051", "keyword": "windowClassName NETWinInfo::windowClassName NETWinInfo", "text": "WM_CLASS property"}, {"type": "function", "name": "NETWinInfo::windowRole", "url": "classNETWinInfo.html#a59963aaaf7c747d1f0df3f1b9230a3d3", "keyword": "windowRole NETWinInfo::windowRole NETWinInfo", "text": "WM_WINDOW_ROLE property"}, {"type": "function", "name": "NETWinInfo::windowType", "url": "classNETWinInfo.html#a69b6ae89bfd46c0f4d5f4e1676c3a23b", "keyword": "windowType NETWinInfo::windowType NETWinInfo", "text": "Since clients may specify several windows types for a window in order to support backwards compatibility and extensions not available in the NETWM spec you should specify all window types you application supports see the NET::WindowTypeMask mask values for various window types This method will return the first window type that is listed in the supported types or NET::Unknown if none of the window types is supported the type of the window"}, {"type": "function", "name": "NETWinInfo::xcbConnection", "url": "classNETWinInfo.html#a11616f79e1ea83e1c6252a9c2bc85064", "keyword": "xcbConnection NETWinInfo::xcbConnection NETWinInfo", "text": "the XCB connection"}, {"type": "variable", "name": "NETWinInfo::OnAllDesktops", "url": "classNETWinInfo.html#ac89cabd7cbc04c77821586ecfb4590ca", "keyword": "OnAllDesktops NETWinInfo::OnAllDesktops NETWinInfo", "text": "the value to be on all desktops"}, {"type": "function", "name": "NETWinInfo::changeDesktop", "url": "classNETWinInfo.html#a291a93ca5ebde0d81346738101620b48", "keyword": "changeDesktop NETWinInfo::changeDesktop NETWinInfo", "text": "move to another desktop desktop the number of the desktop"}, {"type": "function", "name": "NETWinInfo::changeFullscreenMonitors", "url": "classNETWinInfo.html#a633de08820d95a54bc063fcae0bef067", "keyword": "changeFullscreenMonitors NETWinInfo::changeFullscreenMonitors NETWinInfo", "text": "topology A structure top bottom left right representing the fullscreen monitor topology"}, {"type": "function", "name": "NETWinInfo::changeState", "url": "classNETWinInfo.html#a56d44cdd0cfd0b500823410db5a85c6a", "keyword": "changeState NETWinInfo::changeState NETWinInfo", "text": "to Shade Unshade state the new state mask the mask for the state"}, {"type": "function", "name": "NETWinInfo::virtual_hook", "url": "classNETWinInfo.html#ab6820e23e9f423892963317f0772794e", "keyword": "virtual_hook NETWinInfo::virtual_hook NETWinInfo", "text": "Unused in this class"}, {"type": "namespace", "name": "KKeyServer", "url": "namespaceKKeyServer.html", "keyword": "KKeyServer", "text": ""}, {"type": "function", "name": "KKeyServer::accelModMaskX", "url": "namespaceKKeyServer.html#ae407cb37157ddc3ea23894f32d782812", "keyword": "accelModMaskX KKeyServer::accelModMaskX KKeyServer", "text": "modXShift() modXLock() modXCtrl() modXAlt() modXNumLock() modXWin() modXScrollLock()"}, {"type": "function", "name": "KKeyServer::initializeMods", "url": "namespaceKKeyServer.html#a54671bed2d347e7ab104e5c1a89ad87d", "keyword": "initializeMods KKeyServer::initializeMods KKeyServer", "text": "Called automatically by those functions if not already initialized"}, {"type": "function", "name": "KKeyServer::isShiftAsModifierAllowed", "url": "namespaceKKeyServer.html#a8c69e9757d72c01d46dd59d046e41575", "keyword": "isShiftAsModifierAllowed KKeyServer::isShiftAsModifierAllowed KKeyServer", "text": "For example if shift+5 produces Qt wants ctrl+shift+5 recorded as ctrl+ and in that case this function would return false 4.7.1"}, {"type": "function", "name": "KKeyServer::keyboardHasMetaKey", "url": "namespaceKKeyServer.html#a99b4ad168b54f4bc462bec08e0d49fb8", "keyword": "keyboardHasMetaKey KKeyServer::keyboardHasMetaKey KKeyServer", "text": "Specifically whether the Super or Meta keys are assigned to an X modifier true if the keyboard has a Meta key modXMeta()"}, {"type": "function", "name": "KKeyServer::keyQtToCodeMac", "url": "namespaceKKeyServer.html#adae970c91d26c7f6aca92420b2ffa071", "keyword": "keyQtToCodeMac KKeyServer::keyQtToCodeMac KKeyServer", "text": "The returned values can change if a different keyboard layout is selected keyQt the qt key code keyCodes if successful a list of scancodes will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::keyQtToCodeWin", "url": "namespaceKKeyServer.html#ae6b70be8f930c1d8ea63681d94799f78", "keyword": "keyQtToCodeWin KKeyServer::keyQtToCodeWin KKeyServer", "text": "keyQt the qt key code sym if successful the symbol will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::keyQtToCodeX", "url": "namespaceKKeyServer.html#aa52937263a8d8f238b78a9c1884eeaf2", "keyword": "keyQtToCodeX KKeyServer::keyQtToCodeX KKeyServer", "text": "keyQt the qt key code keyCode if successful the symbol will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::keyQtToModMac", "url": "namespaceKKeyServer.html#a8b33d4b55841ad2f034df72712cd2479", "keyword": "keyQtToModMac KKeyServer::keyQtToModMac KKeyServer", "text": "keyQt the qt key code mod if successful the modifiers will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::keyQtToModWin", "url": "namespaceKKeyServer.html#ab2fa4238363153cb6f9bccb70fa13c19", "keyword": "keyQtToModWin KKeyServer::keyQtToModWin KKeyServer", "text": "keyQt the qt key code mod if successful the modifiers will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::keyQtToModX", "url": "namespaceKKeyServer.html#ae8c14557db238d8da20e7f1cf4be93d7", "keyword": "keyQtToModX KKeyServer::keyQtToModX KKeyServer", "text": "keyQt the qt key code mod if successful the modifiers will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::keyQtToSymMac", "url": "namespaceKKeyServer.html#ae2da6221631e4b6928cada693f501918", "keyword": "keyQtToSymMac KKeyServer::keyQtToSymMac KKeyServer", "text": "keyQt the qt key code sym if successful the symbol will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::keyQtToSymX", "url": "namespaceKKeyServer.html#a872a7efde5c1c83084651ffba90d1516", "keyword": "keyQtToSymX KKeyServer::keyQtToSymX KKeyServer", "text": "keyQt the qt key code sym if successful the symbol will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::modToStringUser", "url": "namespaceKKeyServer.html#aeca4c09c25ba39c3c91790c7be931d1b", "keyword": "modToStringUser KKeyServer::modToStringUser KKeyServer", "text": "mod the mask of ORed KKey::ModFlag modifiers the user-readable string"}, {"type": "function", "name": "KKeyServer::modXAlt", "url": "namespaceKKeyServer.html#a2e73f99014a7ad204a9d97a23c539ace", "keyword": "modXAlt KKeyServer::modXAlt KKeyServer", "text": "the X11 Alt Mod1 modifier mask/flag accelModMaskX()"}, {"type": "function", "name": "KKeyServer::modXCtrl", "url": "namespaceKKeyServer.html#aa3c0576a00ef44c42cbf9da014da10b7", "keyword": "modXCtrl KKeyServer::modXCtrl KKeyServer", "text": "the X11 Ctrl modifier mask/flag accelModMaskX()"}, {"type": "function", "name": "KKeyServer::modXLock", "url": "namespaceKKeyServer.html#a2d399ef8dfe78e0c26642132fab2c69e", "keyword": "modXLock KKeyServer::modXLock KKeyServer", "text": "the X11 Lock modifier mask/flag accelModMaskX()"}, {"type": "function", "name": "KKeyServer::modXMeta", "url": "namespaceKKeyServer.html#a2eadea9f61890f68a0c85331928186a7", "keyword": "modXMeta KKeyServer::modXMeta KKeyServer", "text": "the X11 Win Mod3 modifier mask/flag keyboardHasWinKey() accelModMaskX()"}, {"type": "function", "name": "KKeyServer::modXModeSwitch", "url": "namespaceKKeyServer.html#ad6b0d854bdd80bb11a0001abcec3506c", "keyword": "modXModeSwitch KKeyServer::modXModeSwitch KKeyServer", "text": "the X11 Mode_switch modifier mask/flag accelModMaskX()"}, {"type": "function", "name": "KKeyServer::modXNumLock", "url": "namespaceKKeyServer.html#af22ba15a4b093319ababf4a6fea1d8a3", "keyword": "modXNumLock KKeyServer::modXNumLock KKeyServer", "text": "the X11 NumLock modifier mask/flag accelModMaskX()"}, {"type": "function", "name": "KKeyServer::modXScrollLock", "url": "namespaceKKeyServer.html#ab5012bf9d5ad000d9fce354826b369eb", "keyword": "modXScrollLock KKeyServer::modXScrollLock KKeyServer", "text": "the X11 ScrollLock modifier mask/flag accelModMaskX()"}, {"type": "function", "name": "KKeyServer::modXShift", "url": "namespaceKKeyServer.html#abef307d03b6c77dca1a69b345fc7c7ba", "keyword": "modXShift KKeyServer::modXShift KKeyServer", "text": "the X11 Shift modifier mask/flag accelModMaskX()"}, {"type": "function", "name": "KKeyServer::modXToQt", "url": "namespaceKKeyServer.html#ad4e636fc3b5281cac0a8439ed4a4e5b2", "keyword": "modXToQt KKeyServer::modXToQt KKeyServer", "text": "modX the mask of X11 modifiers modQt the mask of Qt key code modifiers will be written here if successful true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::stringUserToMod", "url": "namespaceKKeyServer.html#a610a599d70821c37cda8daced3577e53", "keyword": "stringUserToMod KKeyServer::stringUserToMod KKeyServer", "text": ""}, {"type": "function", "name": "KKeyServer::symXToKeyQt", "url": "namespaceKKeyServer.html#aa5e183f739e9a6b0d718100f29609c28", "keyword": "symXToKeyQt KKeyServer::symXToKeyQt KKeyServer", "text": "sym the symbol keyQt if successful the qt key code will be written here true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::xcbKeyPressEventToQt", "url": "namespaceKKeyServer.html#aecda09c5614e4386835a11b743643aec", "keyword": "xcbKeyPressEventToQt KKeyServer::xcbKeyPressEventToQt KKeyServer", "text": "e the XCB keypress event keyModQt the Qt keycode and mask of Qt key code modifiers will be written here if successful true if successful false otherwise"}, {"type": "function", "name": "KKeyServer::xcbKeyPressEventToQt", "url": "namespaceKKeyServer.html#a794ff3fe9ff31d9b93bf04a68c3d789c", "keyword": "xcbKeyPressEventToQt KKeyServer::xcbKeyPressEventToQt KKeyServer", "text": ""}, {"type": "function", "name": "KKeyServer::xEventToQt", "url": "namespaceKKeyServer.html#a9cf038dbe7813c08a74906b5913b63d6", "keyword": "xEventToQt KKeyServer::xEventToQt KKeyServer", "text": "e the X11 keypress event keyModQt the Qt keycode and mask of Qt key code modifiers will be written here if successful true if successful false otherwise"}, {"type": "variable", "name": "KKeyServer::g_rgModInfo", "url": "namespaceKKeyServer.html#a6cd64aa81277a920a62fa9e2ea23b4c8", "keyword": null, "text": "Qt::SHIFT Qt::CTRL Qt::ALT Qt::META"}, {"type": "variable", "name": "KKeyServer::g_rgX11ModInfo", "url": "namespaceKKeyServer.html#ae68c751c4c41a54f2821b63ca42741d7", "keyword": null, "text": "Qt::SHIFT X11_ONLY ShiftMask Qt::CTRL X11_ONLY ControlMask Qt::ALT X11_ONLY Mod1Mask Qt::META X11_ONLY Mod4Mask"}, {"type": "namespace", "name": "KWindowEffects", "url": "namespaceKWindowEffects.html", "keyword": "KWindowEffects", "text": ""}, {"type": "function", "name": "KWindowEffects::enableBackgroundContrast", "url": "namespaceKWindowEffects.html#a166a5fc7121ecf57a69fd19545c6f724", "keyword": "enableBackgroundContrast KWindowEffects::enableBackgroundContrast KWindowEffects", "text": "The given region will overwrite any previous backgroundcontrast region Passing a null region will enable the blur effect for the whole window The region is relative to the top-left corner of the client area If enable is false blur will be disabled for the whole window region is ignored Note that you will usually want to set the region to the shape of the window excluding any shadow or halo window The window for which to enable the background contrast effect enable Enable the effect if true disable it if false brightness How to modify the area brightness from 0 make it black to 2 make it white 1 leaves it unchanged region The region within the window where the background will be modified"}, {"type": "function", "name": "KWindowEffects::enableBlurBehind", "url": "namespaceKWindowEffects.html#adc5fc0dee7b2464c99328d5e2f601269", "keyword": "enableBlurBehind KWindowEffects::enableBlurBehind KWindowEffects", "text": "The given region will overwrite any previous blur-behind region Passing a null region will enable the blur effect for the whole window The region is relative to the top-left corner of the client area If enable is false blur will be disabled for the whole window region is ignored Note that you will usually want to set the region to the shape of the window excluding any shadow or halo window The window for which to enable the blur effect enable Enable the effect if true disable it if false region The region within the window where the background will be blurred"}, {"type": "function", "name": "KWindowEffects::highlightWindows", "url": "namespaceKWindowEffects.html#aafb9d94f52b3859067e8f7af36679ecb", "keyword": "highlightWindows KWindowEffects::highlightWindows KWindowEffects", "text": "controller The window which is the controller of this effect The property will be set on this window It will be removed by the effect ids all the windows which should be highlighted"}, {"type": "function", "name": "KWindowEffects::isEffectAvailable", "url": "namespaceKWindowEffects.html#ae24dc2523465c246ed82a1ef9a7256fd", "keyword": "isEffectAvailable KWindowEffects::isEffectAvailable KWindowEffects", "text": "if an atom property is available effect the effect we want to check"}, {"type": "function", "name": "KWindowEffects::markAsDashboard", "url": "namespaceKWindowEffects.html#a5bd4b6656ee8da93ef97d1ebf147d965", "keyword": "markAsDashboard KWindowEffects::markAsDashboard KWindowEffects", "text": "window The window for which to enable the blur effect"}, {"type": "function", "name": "KWindowEffects::presentWindows", "url": "namespaceKWindowEffects.html#a9d1e02fbaa04a4388ab306c402ff4199", "keyword": "presentWindows KWindowEffects::presentWindows KWindowEffects", "text": "controller The window which is the controller of this effect The property will be set on this window It will be removed by the effect ids all the windows which should be presented"}, {"type": "function", "name": "KWindowEffects::presentWindows", "url": "namespaceKWindowEffects.html#a2d0298563600fbf6e4b090d9e8347756", "keyword": "presentWindows KWindowEffects::presentWindows KWindowEffects", "text": "controller The window which is the controller of this effect The property will be set on this window It will be removed by the effect desktop The desktop whose windows should be presented for all desktops"}, {"type": "function", "name": "KWindowEffects::slideWindow", "url": "namespaceKWindowEffects.html#ab6a2f7c15b4e3f5eb7d2825668e28be5", "keyword": "slideWindow KWindowEffects::slideWindow KWindowEffects", "text": "id of the window on which we want to apply the effect location edge of the screen from which we want the sliding effect Desktop and Floating won t have effect offset distance in pixels from the screen edge defined by location"}, {"type": "function", "name": "KWindowEffects::slideWindow", "url": "namespaceKWindowEffects.html#aa84c5ab9961a1df0e1d875fa0ca21ce2", "keyword": "slideWindow KWindowEffects::slideWindow KWindowEffects", "text": "widget QWidget corresponding to the top level window we want to animate location edge of the screen from which we want the sliding effect Desktop and Floating won t have effect"}, {"type": "function", "name": "KWindowEffects::windowSizes", "url": "namespaceKWindowEffects.html#a79b95fe909e1d6121a458229e4fd9091", "keyword": "windowSizes KWindowEffects::windowSizes KWindowEffects", "text": "dimension of all the windows passed as parameter ids all the windows we want the size"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KWindowSystem Access to the windowing system Introduction Convenience access to certain properties and features of the windowing system KWindowSystem provides information about the windowing system and allows interaction with the windowing system It provides an high level API which is windowing system independent and has platform specific implementations This API is inspired by X11 and thus not all functionality is available on all windowing systems In addition to the high level API this framework also provides several more low level classes for interaction with the X Windowing System"}]}