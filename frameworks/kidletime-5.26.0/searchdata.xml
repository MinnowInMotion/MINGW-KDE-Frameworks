<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">source</field>
    <field name="name">abstractsystempoller.cpp</field>
    <field name="url">abstractsystempoller_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">AbstractSystemPoller::AbstractSystemPoller QObject parent QObject parent AbstractSystemPoller::~AbstractSystemPoller</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">abstractsystempoller.h</field>
    <field name="url">abstractsystempoller_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KIDLETIME_EXPORT AbstractSystemPoller QObject Q_OBJECT AbstractSystemPoller QObject parent AbstractSystemPoller isAvailable setUpPoller unloadPoller Q_SLOTS addTimeout nextTimeout removeTimeout nextTimeout QList&lt;int&gt; timeouts forcePollRequest catchIdleEvent stopCatchingIdleEvents simulateUserActivity Q_SIGNALS resumingFromIdle timeoutReached msec Q_DECLARE_INTERFACE AbstractSystemPoller</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">fixx11h.h</field>
    <field name="url">fixx11h_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">X XUnsorted Unsorted Unsorted XUnsorted XID XNone None XID None XNone Bool XBool XBool Bool XKeyPress KeyPress KeyPress XKeyPress XKeyRelease KeyRelease KeyRelease XKeyRelease XAbove Above Above XAbove XBelow Below Below XBelow XFocusIn FocusIn FocusIn XFocusIn XFocusOut FocusOut FocusOut XFocusOut XAlways Always Always XAlways XExpose Expose Expose XExpose XSuccess Success Success XSuccess XGrayScale GrayScale GrayScale XGrayScale Status XStatus XStatus Status XCursorShape CursorShape CursorShape XCursorShape XFontChange FontChange FontChange XFontChange XNormalState NormalState NormalState XNormalState Xindex s c index s c index s c Xindex s c Xrindex s c rindex s c rindex s c Xrindex s c X</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KIdleTimeHelper KIdleTimeHelper q KIdleTimeHelper q KIdleTime q Q_GLOBAL_STATIC KIdleTimeHelper s_globalKIdleTime</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00046</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime KIdleTime instance s_globalKIdleTime q KIdleTime s_globalKIdleTime q KIdleTimePrivate Q_DECLARE_PUBLIC KIdleTime KIdleTime q_ptr KIdleTimePrivate catchResume currentId loadSystem unloadCurrentSystem _k_resumingFromIdle _k_timeoutReached msec QPointer&lt;AbstractSystemPoller&gt; poller catchResume currentId QHash&lt;int, int&gt; associations KIdleTime::KIdleTime QObject d_ptr KIdleTimePrivate Q_ASSERT s_globalKIdleTime q s_globalKIdleTime q d_ptr q_ptr Q_D KIdleTime d loadSystem connect d poller data SIGNAL resumingFromIdle SLOT _k_resumingFromIdle connect d poller data SIGNAL timeoutReached SLOT _k_timeoutReached</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00090</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime::~KIdleTime Q_D KIdleTime d unloadCurrentSystem d_ptr</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00097</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime::catchNextResumeEvent Q_D KIdleTime d catchResume d poller d catchResume d poller data catchIdleEvent</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00107</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime::stopCatchingResumeEvent Q_D KIdleTime d catchResume d poller d catchResume d poller data stopCatchingIdleEvents</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00117</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime::addIdleTimeout msec Q_D KIdleTime Q_UNLIKELY d poller d poller data addTimeout msec d currentId d associations d currentId msec d currentId</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00132</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime::removeIdleTimeout identifier Q_D KIdleTime d associations contains identifier d poller msec d associations identifier d associations remove identifier d associations values contains msec d poller data removeTimeout msec</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00149</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime::removeAllIdleTimeouts Q_D KIdleTime QHash&lt; int, int &gt;::iterator i d associations begin QSet&lt; int &gt; removed removed reserve d associations size i d associations end msec d associations i key i d associations erase i removed contains msec d poller d poller data removeTimeout msec removed insert msec QStringList pluginCandidates QStringList ret QString path QCoreApplication::libraryPaths QDir pluginDir path QLatin1String pluginDir exists QString entry pluginDir entryList QDir::Files QDir::NoDotAndDotDot ret pluginDir absoluteFilePath entry ret AbstractSystemPoller loadPoller QString candidate pluginCandidates QLibrary::isLibrary candidate QPluginLoader loader candidate QJsonObject metaData loader metaData QJsonArray platforms metaData value QStringLiteral toObject value QStringLiteral toArray it platforms begin it platforms end it QString::compare QGuiApplication::platformName toString Qt::CaseInsensitive AbstractSystemPoller poller qobject_cast AbstractSystemPoller loader instance poller qCDebug KIDLETIME candidate poller isAvailable qCDebug KIDLETIME candidate QGuiApplication::platformName poller poller Q_NULLPTR KIdleTimePrivate::loadSystem poller isNull unloadCurrentSystem poller loadPoller poller poller isAvailable poller poller isNull poller data setUpPoller KIdleTimePrivate::unloadCurrentSystem poller isNull poller data unloadPoller poller data deleteLater KIdleTimePrivate::_k_resumingFromIdle Q_Q KIdleTime catchResume emit q resumingFromIdle q stopCatchingResumeEvent KIdleTimePrivate::_k_timeoutReached msec Q_Q KIdleTime associations values contains msec Q_FOREACH key associations keys msec emit q timeoutReached key emit q timeoutReached key msec</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00257</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime::simulateUserActivity Q_D KIdleTime Q_LIKELY d poller d poller data simulateUserActivity</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00266</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime::idleTime Q_D KIdleTime Q_LIKELY d poller d poller data forcePollRequest</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.cpp</field>
    <field name="url">kidletime_8cpp_source.html#l00275</field>
    <field name="keywords"></field>
    <field name="text">QHash&lt;int, int&gt; KIdleTime::idleTimeouts Q_D KIdleTime d associations</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.h</field>
    <field name="url">kidletime_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KIdleTimePrivate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">kidletime.h</field>
    <field name="url">kidletime_8h_source.html#l00039</field>
    <field name="keywords"></field>
    <field name="text">KIDLETIME_EXPORT KIdleTime QObject Q_OBJECT Q_DECLARE_PRIVATE KIdleTime Q_DISABLE_COPY KIdleTime KIdleTime instance KIdleTime idleTime QHash&lt;int, int&gt; idleTimeouts simulateUserActivity Q_SLOTS addIdleTimeout msec removeIdleTimeout identifier removeAllIdleTimeouts catchNextResumeEvent stopCatchingResumeEvent Q_SIGNALS resumingFromIdle timeoutReached identifier timeoutReached identifier msec KIdleTime KIdleTimePrivate d_ptr Q_PRIVATE_SLOT d_func _k_resumingFromIdle Q_PRIVATE_SLOT d_func _k_timeoutReached</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">logging.cpp</field>
    <field name="url">logging_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">Q_LOGGING_CATEGORY KIDLETIME QtWarningMsg Q_LOGGING_CATEGORY KIDLETIME</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">logging.h</field>
    <field name="url">logging_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">Q_DECLARE_LOGGING_CATEGORY KIDLETIME</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">macpoller.cpp</field>
    <field name="url">macpoller_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">OSStatus LoadFrameworkBundle CFStringRef framework CFBundleRef bundlePtr OSStatus err FSRef frameworksFolderRef CFURLRef baseURL CFURLRef bundleURL bundlePtr nil bundlePtr nil baseURL nil bundleURL nil err FSFindFolder kOnAppropriateDisk kFrameworksFolderType frameworksFolderRef err noErr baseURL CFURLCreateFromFSRef kCFAllocatorSystemDefault frameworksFolderRef baseURL nil err coreFoundationUnknownErr err noErr bundleURL CFURLCreateCopyAppendingPathComponent kCFAllocatorSystemDefault baseURL framework bundleURL nil err coreFoundationUnknownErr err noErr bundlePtr CFBundleCreate kCFAllocatorSystemDefault bundleURL bundlePtr nil err coreFoundationUnknownErr err noErr CFBundleLoadExecutable bundlePtr err coreFoundationUnknownErr err noErr bundlePtr nil CFRelease bundlePtr bundlePtr nil bundleURL nil CFRelease bundleURL baseURL nil CFRelease baseURL err pascal MacPoller::IdleTimerAction EventLoopTimerRef EventLoopIdleTimerMessage inState inUserData Q_ASSERT inUserData inState kEventLoopIdleTimerStarted kEventLoopIdleTimerStopped MacPoller inUserData m_secondsIdle MacPoller inUserData triggerResume kEventLoopIdleTimerIdling MacPoller inUserData m_secondsIdle MacPoller inUserData poll OSStatus InstallEventLoopIdleTimerPtr EventLoopRef inEventLoop EventTimerInterval inFireDelay EventTimerInterval inInterval EventLoopIdleTimerUPP inTimerProc inTimerData EventLoopTimerRef outTimer MacPoller::MacPoller QObject parent AbstractSystemPoller parent m_timerRef m_secondsIdle m_catch false MacPoller::~MacPoller MacPoller::unloadPoller RemoveEventLoopTimer m_timerRef MacPoller::isAvailable MacPoller::setUpPoller m_timerRef CFBundleRef carbonBundle LoadFrameworkBundle CFSTR carbonBundle noErr InstallEventLoopIdleTimerPtr myInstallEventLoopIdleTimer InstallEventLoopIdleTimerPtr CFBundleGetFunctionPointerForName carbonBundle CFSTR myInstallEventLoopIdleTimer EventLoopIdleTimerUPP timerUPP NewEventLoopIdleTimerUPP IdleTimerAction myInstallEventLoopIdleTimer GetMainEventLoop kEventDurationSecond kEventDurationSecond timerUPP m_timerRef QList&lt;int&gt; MacPoller::timeouts m_timeouts MacPoller::addTimeout nextTimeout m_timeouts append nextTimeout poll MacPoller::poll idle m_secondsIdle Q_FOREACH i m_timeouts i idle &lt; 1000 &amp;&amp; i &gt; idle idle i &lt; 1000 &amp;&amp; idle &gt; i emit timeoutReached i idle MacPoller::forcePollRequest poll MacPoller::removeTimeout timeout m_timeouts removeOne timeout poll MacPoller::catchIdleEvent m_catch MacPoller::stopCatchingIdleEvents m_catch MacPoller::triggerResume m_catch emit resumingFromIdle stopCatchingIdleEvents MacPoller::simulateUserActivity</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">macpoller.h</field>
    <field name="url">macpoller_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">MacPoller AbstractSystemPoller Q_OBJECT Q_PLUGIN_METADATA IID FILE Q_INTERFACES AbstractSystemPoller MacPoller QObject parent MacPoller isAvailable setUpPoller unloadPoller pascal IdleTimerAction EventLoopTimerRef EventLoopIdleTimerMessage inState inUserData Q_SLOTS addTimeout nextTimeout removeTimeout nextTimeout QList&lt;int&gt; timeouts forcePollRequest catchIdleEvent stopCatchingIdleEvents simulateUserActivity triggerResume Q_SLOTS poll QList&lt;int&gt; m_timeouts EventLoopTimerRef m_timerRef m_secondsIdle m_catch</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">widgetbasedpoller.cpp</field>
    <field name="url">widgetbasedpoller_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">WidgetBasedPoller::WidgetBasedPoller QObject parent AbstractSystemPoller parent WidgetBasedPoller::~WidgetBasedPoller WidgetBasedPoller::isAvailable WidgetBasedPoller::setUpPoller m_pollTimer QTimer connect m_pollTimer SIGNAL timeout SLOT poll m_grabber QWidget Qt::X11BypassWindowManagerHint m_grabber move m_grabber setMouseTracking m_grabber installEventFilter m_grabber setObjectName QLatin1String additionalSetUp WidgetBasedPoller::unloadPoller m_pollTimer deleteLater m_grabber deleteLater QList&lt;int&gt; WidgetBasedPoller::timeouts m_timeouts WidgetBasedPoller::addTimeout nextTimeout m_timeouts append nextTimeout poll WidgetBasedPoller::eventFilter QObject QEvent event m_grabber event type QEvent::MouseMove type QEvent::KeyPress detectedActivity m_grabber WidgetBasedPoller::waitForActivity m_grabber show m_grabber grabMouse m_grabber grabKeyboard WidgetBasedPoller::detectedActivity stopCatchingIdleEvents emit resumingFromIdle WidgetBasedPoller::releaseInputLock m_grabber releaseMouse m_grabber releaseKeyboard m_grabber hide WidgetBasedPoller::poll idle getIdleTime Q_FOREACH timeOut m_timeouts timeOut idle &lt; 300 &amp;&amp; timeOut &gt; idle idle timeOut &lt; 300 &amp;&amp; idle &gt; timeOut emit timeoutReached timeOut mintime Q_FOREACH i m_timeouts i idle i mintime mintime mintime i mintime m_pollTimer start mintime idle m_pollTimer stop idle WidgetBasedPoller::forcePollRequest poll WidgetBasedPoller::removeTimeout timeout m_timeouts removeOne timeout poll WidgetBasedPoller::catchIdleEvent waitForActivity WidgetBasedPoller::stopCatchingIdleEvents releaseInputLock</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">widgetbasedpoller.h</field>
    <field name="url">widgetbasedpoller_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">QTimer QEvent KIDLETIME_EXPORT WidgetBasedPoller AbstractSystemPoller Q_OBJECT WidgetBasedPoller QObject parent WidgetBasedPoller isAvailable Q_DECL_OVERRIDE setUpPoller Q_DECL_OVERRIDE unloadPoller Q_DECL_OVERRIDE protected eventFilter QObject QEvent event Q_DECL_OVERRIDE public Q_SLOTS addTimeout nextTimeout Q_DECL_OVERRIDE removeTimeout nextTimeout Q_DECL_OVERRIDE QList timeouts const Q_DECL_OVERRIDE forcePollRequest Q_DECL_OVERRIDE catchIdleEvent Q_DECL_OVERRIDE stopCatchingIdleEvents Q_DECL_OVERRIDE private Q_SLOTS poll virtual getIdleTime detectedActivity waitForActivity releaseInputLock private virtual additionalSetUp private QTimer m_pollTimer QWidget m_grabber QList m_timeouts</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">windowspoller.cpp</field>
    <field name="url">windowspoller_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">WindowsPoller::WindowsPoller QObject parent WidgetBasedPoller parent WindowsPoller::~WindowsPoller WindowsPoller::getIdleTime idle LASTINPUTINFO lii memset lii lii lii cbSize lii BOOL ok GetLastInputInfo lii ok idle GetTickCount lii dwTime idle GetIdleTime WindowsPoller::additionalSetUp m_idleTimer QTimer connect m_idleTimer SIGNAL timeout SLOT checkForIdle WindowsPoller::simulateUserActivity width GetSystemMetrics SM_CXSCREEN height GetSystemMetrics SM_CYSCREEN x int width y int height mouse_event MOUSEEVENTF_ABSOLUTE MOUSEEVENTF_MOVE x y NULL NULL WindowsPoller::catchIdleEvent m_idleTimer start WindowsPoller::stopCatchingIdleEvents m_idleTimer stop WindowsPoller::checkForIdle getIdleTime stopCatchingIdleEvents emit resumingFromIdle</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">windowspoller.h</field>
    <field name="url">windowspoller_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">QTimer WindowsPoller WidgetBasedPoller Q_OBJECT Q_PLUGIN_METADATA IID FILE Q_INTERFACES AbstractSystemPoller WindowsPoller QObject parent WindowsPoller Q_SLOTS simulateUserActivity catchIdleEvent stopCatchingIdleEvents additionalSetUp Q_SLOTS getIdleTime checkForIdle QTimer m_idleTimer</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">xscreensaverbasedpoller.cpp</field>
    <field name="url">xscreensaverbasedpoller_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">XScreensaverBasedPoller::XScreensaverBasedPoller QObject parent WidgetBasedPoller parent m_screenSaverIface XScreensaverBasedPoller::~XScreensaverBasedPoller XScreensaverBasedPoller::additionalSetUp m_screenSaverIface OrgFreedesktopScreenSaverInterface QLatin1String QLatin1String QDBusConnection::sessionBus connect m_screenSaverIface SIGNAL ActiveChanged SLOT screensaverActivated XScreensaverBasedPoller::screensaverActivated activated activated m_screenSaverIface SimulateUserActivity emit resumingFromIdle XScreensaverBasedPoller::getIdleTime XScreenSaverInfo mitInfo mitInfo XScreenSaverAllocInfo XScreenSaverQueryInfo QX11Info::display DefaultRootWindow QX11Info::display mitInfo ret mitInfo idle XFree mitInfo ret XScreensaverBasedPoller::simulateUserActivity stopCatchingIdleEvents XResetScreenSaver QX11Info::display emit resumingFromIdle</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">xscreensaverbasedpoller.h</field>
    <field name="url">xscreensaverbasedpoller_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">XScreensaverBasedPoller WidgetBasedPoller Q_OBJECT Q_PLUGIN_METADATA IID FILE Q_INTERFACES AbstractSystemPoller XScreensaverBasedPoller QObject parent XScreensaverBasedPoller Q_SLOTS simulateUserActivity Q_DECL_OVERRIDE private additionalSetUp Q_DECL_OVERRIDE private Q_SLOTS screensaverActivated activated getIdleTime Q_DECL_OVERRIDE private OrgFreedesktopScreenSaverInterface m_screenSaverIface</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">xsyncbasedpoller.cpp</field>
    <field name="url">xsyncbasedpoller_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">XSyncBasedPollerHelper QAbstractNativeEventFilter XSyncBasedPollerHelper q isActive false XSyncBasedPollerHelper q nativeEventFilter QByteArray eventType message result Q_DECL_OVERRIDE Q_UNUSED result isActive eventType q xcbEvent reinterpret_cast&lt;xcb_generic_event_t *&gt; message XSyncBasedPoller q isActive Q_GLOBAL_STATIC XSyncBasedPollerHelper s_globalXSyncBasedPoller XSyncBasedPoller XSyncBasedPoller::instance s_globalXSyncBasedPoller q XSyncBasedPoller s_globalXSyncBasedPoller q XSyncBasedPoller::XSyncBasedPoller QObject parent AbstractSystemPoller parent m_display QX11Info display m_xcb_connection m_idleCounter None m_resetAlarm None m_available true Q_ASSERT s_globalXSyncBasedPoller q s_globalXSyncBasedPoller q Q_UNLIKELY m_display m_available qDebug m_xcb_connection XGetXCBConnection m_display QCoreApplication::instance installNativeEventFilter s_globalXSyncBasedPoller xcb_query_extension_reply_t sync_reply xcb_get_extension_data m_xcb_connection xcb_sync_id sync_reply sync_reply present qDebug m_available m_sync_event sync_reply first_event xcb_sync_list_system_counters_cookie_t cookie xcb_sync_list_system_counters m_xcb_connection xcb_sync_list_system_counters_reply_t reply xcb_sync_list_system_counters_reply m_xcb_connection cookie NULL xcb_sync_systemcounter_iterator_t iter iter xcb_sync_list_system_counters_counters_iterator reply iter rem xcb_sync_systemcounter_next iter printf iter data counter iter data name_len xcb_sync_systemcounter_name iter data printf iter data name_len iter data name_len xcbcounters xcb_sync_list_system_counters_counters_length reply xcb_sync_systemcounter_iterator_t it xcb_sync_list_system_counters_counters_iterator reply i i xcbcounters i qDebug it data counter it rem it index qDebug xcb_sync_systemcounter_name_length it data QByteArray name xcb_sync_systemcounter_name it data xcb_sync_systemcounter_name_length it data qDebug name xcb_sync_systemcounter_next it reply sync_major sync_minor old_sync_event old_sync_error XSyncQueryExtension m_display old_sync_event old_sync_error m_available XSyncInitialize m_display sync_major sync_minor m_available ncounters XSyncSystemCounter counters XSyncListSystemCounters m_display ncounters idleFound i i ncounters i strcmp counters i name m_idleCounter counters i counter idleFound XSyncFreeSystemCounterList counters idleFound m_available m_available qDebug qDebug XSyncBasedPoller::~XSyncBasedPoller XSyncBasedPoller::isAvailable m_available XSyncBasedPoller::setUpPoller isAvailable qDebug s_globalXSyncBasedPoller isActive qDebug XSyncBasedPoller::unloadPoller s_globalXSyncBasedPoller isActive XSyncBasedPoller::addTimeout nextTimeout m_timeoutAlarm contains nextTimeout XSyncValue timeout XSyncAlarm newalarm None XSyncIntToValue timeout nextTimeout setAlarm m_display newalarm m_idleCounter XSyncPositiveComparison timeout m_timeoutAlarm insert nextTimeout newalarm XSyncBasedPoller::forcePollRequest poll XSyncBasedPoller::poll XSyncValue idleTime XSyncQueryCounter m_display m_idleCounter idleTime XSyncValueLow32 idleTime XSyncBasedPoller::removeTimeout timeout m_timeoutAlarm contains timeout XSyncAlarm a m_timeoutAlarm timeout XSyncDestroyAlarm m_display a m_timeoutAlarm remove timeout QList&lt;int&gt; XSyncBasedPoller::timeouts m_timeoutAlarm keys XSyncBasedPoller::stopCatchingIdleEvents m_resetAlarm None XSyncDestroyAlarm m_display m_resetAlarm m_resetAlarm None XSyncBasedPoller::catchIdleEvent XSyncValue idleTime XSyncQueryCounter m_display m_idleCounter idleTime overflow XSyncValue add XSyncValue plusone XSyncIntToValue add XSyncValueAdd plusone idleTime add overflow setAlarm m_display m_resetAlarm m_idleCounter XSyncNegativeComparison plusone XSyncBasedPoller::reloadAlarms XSyncValue timeout QHash&lt;int, XSyncAlarm&gt;::iterator i m_timeoutAlarm begin i m_timeoutAlarm end i XSyncIntToValue timeout i key setAlarm m_display i value m_idleCounter XSyncPositiveComparison timeout XSyncBasedPoller::xcbEvent xcb_generic_event_t event event response_type m_sync_event XCB_SYNC_ALARM_NOTIFY xcb_sync_alarm_notify_event_t alarmEvent xcb_sync_alarm_notify_event_t event alarmEvent state XCB_SYNC_ALARMSTATE_DESTROYED QHash&lt;int, XSyncAlarm&gt;::const_iterator i m_timeoutAlarm constBegin i m_timeoutAlarm constEnd i alarmEvent alarm i value emit timeoutReached i key catchIdleEvent alarmEvent alarm m_resetAlarm stopCatchingIdleEvents reloadAlarms emit resumingFromIdle XSyncBasedPoller::setAlarm Display dpy XSyncAlarm alarm XSyncCounter counter XSyncTestType test XSyncValue value XSyncAlarmAttributes attr XSyncValue delta flags XSyncIntToValue delta attr trigger counter counter attr trigger value_type XSyncAbsolute attr trigger test_type test attr trigger wait_value value attr delta delta flags XSyncCACounter XSyncCAValueType XSyncCATestType XSyncCAValue XSyncCADelta alarm XSyncChangeAlarm dpy alarm flags attr alarm XSyncCreateAlarm dpy flags attr qDebug alarm XFlush m_display XSyncBasedPoller::simulateUserActivity XResetScreenSaver m_display XFlush m_display</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">xsyncbasedpoller.h</field>
    <field name="url">xsyncbasedpoller_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">XSyncBasedPoller AbstractSystemPoller Q_OBJECT Q_PLUGIN_METADATA IID FILE Q_INTERFACES AbstractSystemPoller XSyncBasedPoller instance XSyncBasedPoller QObject parent XSyncBasedPoller isAvailable Q_DECL_OVERRIDE setUpPoller Q_DECL_OVERRIDE unloadPoller Q_DECL_OVERRIDE xcbEvent xcb_generic_event_t event public Q_SLOTS addTimeout nextTimeout Q_DECL_OVERRIDE removeTimeout nextTimeout Q_DECL_OVERRIDE QList timeouts const Q_DECL_OVERRIDE forcePollRequest Q_DECL_OVERRIDE catchIdleEvent Q_DECL_OVERRIDE stopCatchingIdleEvents Q_DECL_OVERRIDE simulateUserActivity Q_DECL_OVERRIDE private Q_SLOTS poll reloadAlarms private setAlarm Display dpy XSyncAlarm alarm XSyncCounter counter XSyncTestType test XSyncValue value private Display m_display xcb_connection_t m_xcb_connection m_sync_event XSyncCounter m_idleCounter QHash XSyncAlarm m_timeoutAlarm XSyncAlarm m_resetAlarm m_available</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KIdleTime</field>
    <field name="url">classKIdleTime.html</field>
    <field name="keywords">KIdleTime</field>
    <field name="text">It is useful not only for finding out about the current idle time of the PC but also for getting notified upon idle time events such as custom timeouts or user activity All the intervals and times in this library are in milliseconds unless specified otherwise Dario Freddi 4.4</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KIdleTime::resumingFromIdle</field>
    <field name="args">()</field>
    <field name="url">classKIdleTime.html#a3f8b4d330065baddda117b3a7972858b</field>
    <field name="keywords">resumingFromIdle KIdleTime::resumingFromIdle KIdleTime</field>
    <field name="text">This means that either was called or the user sent an input to the system catchNextResumeEvent</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KIdleTime::timeoutReached</field>
    <field name="args">(int identifier)</field>
    <field name="url">classKIdleTime.html#a550d8b31977919a424c6b5be67c5cf8f</field>
    <field name="keywords">timeoutReached KIdleTime::timeoutReached KIdleTime</field>
    <field name="text">This signal is triggered whenever each timeout previously registered with is reached identifier the identifier of the timeout the system has reached addIdleTimeout removeIdleTimeout</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KIdleTime::timeoutReached</field>
    <field name="args">(int identifier, int msec)</field>
    <field name="url">classKIdleTime.html#a301cc1abd0d8bf966635b2fc03bd0231</field>
    <field name="keywords">timeoutReached KIdleTime::timeoutReached KIdleTime</field>
    <field name="text">Streams the duration as well It is guaranteed that msec will exactly correspond to the timeout registered with msec the time in milliseconds the system has been idle for addIdleTimeout removeIdleTimeout</field>
  </doc>
  <doc>
    <field name="type">slot</field>
    <field name="name">KIdleTime::addIdleTimeout</field>
    <field name="args">(int msec)</field>
    <field name="url">classKIdleTime.html#a1d97581e86bd6dc763e71f7156116f16</field>
    <field name="keywords">addIdleTimeout KIdleTime::addIdleTimeout KIdleTime</field>
    <field name="text">When calling this method after the system will be idle for msec milliseconds the signal timeoutReached will be triggered Please note that until you will call removeIdleTimeout or removeAllIdleTimeouts the signal will be triggered every time the system will be idle for msec milliseconds This function also returns an unique token for the timeout just added to allow easier identification msec the time in milliseconds after which the signal will be triggered an unique identifier for the timeout being added that will be streamed by timeoutReached removeIdleTimeout removeAllIdleTimeouts timeoutReached</field>
  </doc>
  <doc>
    <field name="type">slot</field>
    <field name="name">KIdleTime::catchNextResumeEvent</field>
    <field name="args">()</field>
    <field name="url">classKIdleTime.html#a163a0d3eb71cd58be894cec8de273866</field>
    <field name="keywords">catchNextResumeEvent KIdleTime::catchNextResumeEvent KIdleTime</field>
    <field name="text">This means that whenever user activity will be registered or is called the signal resumingFromIdle will be triggered Please note that this method will trigger the signal just for the very first resume event after the call this means you explicitly have to request to track every single resume event you are interested in This behavior is due to the fact that a resume event happens whenever the user sends an input to the system This would lead to a massive amount of signals being delivered when the PC is being used Moreover you are usually interested in catching just significant resume events such as the ones after a significant period of inactivity For tracking user input you can use the more efficient methods provided by Qt The purpose of this library is just monitoring the activity of the user resumingFromIdle simulateUserActivity</field>
  </doc>
  <doc>
    <field name="type">slot</field>
    <field name="name">KIdleTime::removeAllIdleTimeouts</field>
    <field name="args">()</field>
    <field name="url">classKIdleTime.html#a99b80cee92f49a1ee3ed4b4611e0cb05</field>
    <field name="keywords">removeAllIdleTimeouts KIdleTime::removeAllIdleTimeouts KIdleTime</field>
    <field name="text">This means that after calling this method the signal won t be called again until you will add another timeout timeoutReached addIdleTimeout</field>
  </doc>
  <doc>
    <field name="type">slot</field>
    <field name="name">KIdleTime::removeIdleTimeout</field>
    <field name="args">(int identifier)</field>
    <field name="url">classKIdleTime.html#a79b3b94943829fe9b59895a789a8efce</field>
    <field name="keywords">removeIdleTimeout KIdleTime::removeIdleTimeout KIdleTime</field>
    <field name="text">Otherwise does nothing identifier the token returned from addIdleTimeout of the timeout you want to stop listening to</field>
  </doc>
  <doc>
    <field name="type">slot</field>
    <field name="name">KIdleTime::stopCatchingResumeEvent</field>
    <field name="args">()</field>
    <field name="url">classKIdleTime.html#a6fde7640563cbc5ba37ed3c961d8b643</field>
    <field name="keywords">stopCatchingResumeEvent KIdleTime::stopCatchingResumeEvent KIdleTime</field>
    <field name="text">This function serves for canceling catchNextResumeEvent as it will have effect just when catchNextResumeEvent has been called and resumingFromIdle not yet triggered resumingFromIdle catchNextResumeEvent</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KIdleTime::~KIdleTime</field>
    <field name="args">()</field>
    <field name="url">classKIdleTime.html#a151a2da06a2d0f1e900c353979f86d68</field>
    <field name="keywords">KIdleTime::~KIdleTime KIdleTime</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KIdleTime::idleTime</field>
    <field name="args">() const</field>
    <field name="url">classKIdleTime.html#a1f255d6e1c37a51c357a468e67ad8e6d</field>
    <field name="keywords">idleTime KIdleTime::idleTime KIdleTime</field>
    <field name="text">the idle time of the system</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KIdleTime::idleTimeouts</field>
    <field name="args">() const</field>
    <field name="url">classKIdleTime.html#afb573b787c5f7e481755b32b4936f4f6</field>
    <field name="keywords">idleTimeouts KIdleTime::idleTimeouts KIdleTime</field>
    <field name="text">addIdleTimeout removeIdleTimeout timeoutReached</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KIdleTime::simulateUserActivity</field>
    <field name="args">()</field>
    <field name="url">classKIdleTime.html#a66634c763ed38f915ac7ec96747ef7df</field>
    <field name="keywords">simulateUserActivity KIdleTime::simulateUserActivity KIdleTime</field>
    <field name="text">This implies that after calling this method the idle time of the system will become 0 and eventually will be triggered resumingFromIdle</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KIdleTime::instance</field>
    <field name="args">()</field>
    <field name="url">classKIdleTime.html#ab9ad9b9f2c2be68547b625bd07e46744</field>
    <field name="keywords">instance KIdleTime::instance KIdleTime</field>
    <field name="text">Use this method to access KIdleTime the instance of KIdleTime</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">index</field>
    <field name="url">index.html</field>
    <field name="keywords"></field>
    <field name="text">KIdleTime Reporting of idle time of user and system Introduction KIdleTime is a singleton reporting information on idle time It is useful not only for finding out about the current idle time of the PC but also for getting notified upon idle time events such as custom timeouts or user activity</field>
  </doc>
</add>
