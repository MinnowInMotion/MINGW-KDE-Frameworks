{"name": "kidletime-5.26.0", "fancyname": "KIdleTime", "docfields": [{"type": "class", "name": "KIdleTime", "url": "classKIdleTime.html", "keyword": "KIdleTime", "text": "It is useful not only for finding out about the current idle time of the PC but also for getting notified upon idle time events such as custom timeouts or user activity All the intervals and times in this library are in milliseconds unless specified otherwise Dario Freddi 4.4"}, {"type": "signal", "name": "KIdleTime::resumingFromIdle", "url": "classKIdleTime.html#a3f8b4d330065baddda117b3a7972858b", "keyword": "resumingFromIdle KIdleTime::resumingFromIdle KIdleTime", "text": "This means that either was called or the user sent an input to the system catchNextResumeEvent"}, {"type": "signal", "name": "KIdleTime::timeoutReached", "url": "classKIdleTime.html#a550d8b31977919a424c6b5be67c5cf8f", "keyword": "timeoutReached KIdleTime::timeoutReached KIdleTime", "text": "This signal is triggered whenever each timeout previously registered with is reached identifier the identifier of the timeout the system has reached addIdleTimeout removeIdleTimeout"}, {"type": "signal", "name": "KIdleTime::timeoutReached", "url": "classKIdleTime.html#a301cc1abd0d8bf966635b2fc03bd0231", "keyword": "timeoutReached KIdleTime::timeoutReached KIdleTime", "text": "Streams the duration as well It is guaranteed that msec will exactly correspond to the timeout registered with msec the time in milliseconds the system has been idle for addIdleTimeout removeIdleTimeout"}, {"type": "slot", "name": "KIdleTime::addIdleTimeout", "url": "classKIdleTime.html#a1d97581e86bd6dc763e71f7156116f16", "keyword": "addIdleTimeout KIdleTime::addIdleTimeout KIdleTime", "text": "When calling this method after the system will be idle for msec milliseconds the signal timeoutReached will be triggered Please note that until you will call removeIdleTimeout or removeAllIdleTimeouts the signal will be triggered every time the system will be idle for msec milliseconds This function also returns an unique token for the timeout just added to allow easier identification msec the time in milliseconds after which the signal will be triggered an unique identifier for the timeout being added that will be streamed by timeoutReached removeIdleTimeout removeAllIdleTimeouts timeoutReached"}, {"type": "slot", "name": "KIdleTime::catchNextResumeEvent", "url": "classKIdleTime.html#a163a0d3eb71cd58be894cec8de273866", "keyword": "catchNextResumeEvent KIdleTime::catchNextResumeEvent KIdleTime", "text": "This means that whenever user activity will be registered or is called the signal resumingFromIdle will be triggered Please note that this method will trigger the signal just for the very first resume event after the call this means you explicitly have to request to track every single resume event you are interested in This behavior is due to the fact that a resume event happens whenever the user sends an input to the system This would lead to a massive amount of signals being delivered when the PC is being used Moreover you are usually interested in catching just significant resume events such as the ones after a significant period of inactivity For tracking user input you can use the more efficient methods provided by Qt The purpose of this library is just monitoring the activity of the user resumingFromIdle simulateUserActivity"}, {"type": "slot", "name": "KIdleTime::removeAllIdleTimeouts", "url": "classKIdleTime.html#a99b80cee92f49a1ee3ed4b4611e0cb05", "keyword": "removeAllIdleTimeouts KIdleTime::removeAllIdleTimeouts KIdleTime", "text": "This means that after calling this method the signal won t be called again until you will add another timeout timeoutReached addIdleTimeout"}, {"type": "slot", "name": "KIdleTime::removeIdleTimeout", "url": "classKIdleTime.html#a79b3b94943829fe9b59895a789a8efce", "keyword": "removeIdleTimeout KIdleTime::removeIdleTimeout KIdleTime", "text": "Otherwise does nothing identifier the token returned from addIdleTimeout of the timeout you want to stop listening to"}, {"type": "slot", "name": "KIdleTime::stopCatchingResumeEvent", "url": "classKIdleTime.html#a6fde7640563cbc5ba37ed3c961d8b643", "keyword": "stopCatchingResumeEvent KIdleTime::stopCatchingResumeEvent KIdleTime", "text": "This function serves for canceling catchNextResumeEvent as it will have effect just when catchNextResumeEvent has been called and resumingFromIdle not yet triggered resumingFromIdle catchNextResumeEvent"}, {"type": "function", "name": "KIdleTime::~KIdleTime", "url": "classKIdleTime.html#a151a2da06a2d0f1e900c353979f86d68", "keyword": "KIdleTime::~KIdleTime KIdleTime", "text": ""}, {"type": "function", "name": "KIdleTime::idleTime", "url": "classKIdleTime.html#a1f255d6e1c37a51c357a468e67ad8e6d", "keyword": "idleTime KIdleTime::idleTime KIdleTime", "text": "the idle time of the system"}, {"type": "function", "name": "KIdleTime::idleTimeouts", "url": "classKIdleTime.html#afb573b787c5f7e481755b32b4936f4f6", "keyword": "idleTimeouts KIdleTime::idleTimeouts KIdleTime", "text": "addIdleTimeout removeIdleTimeout timeoutReached"}, {"type": "function", "name": "KIdleTime::simulateUserActivity", "url": "classKIdleTime.html#a66634c763ed38f915ac7ec96747ef7df", "keyword": "simulateUserActivity KIdleTime::simulateUserActivity KIdleTime", "text": "This implies that after calling this method the idle time of the system will become 0 and eventually will be triggered resumingFromIdle"}, {"type": "function", "name": "KIdleTime::instance", "url": "classKIdleTime.html#ab9ad9b9f2c2be68547b625bd07e46744", "keyword": "instance KIdleTime::instance KIdleTime", "text": "Use this method to access KIdleTime the instance of KIdleTime"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KIdleTime Reporting of idle time of user and system Introduction KIdleTime is a singleton reporting information on idle time It is useful not only for finding out about the current idle time of the PC but also for getting notified upon idle time events such as custom timeouts or user activity"}]}