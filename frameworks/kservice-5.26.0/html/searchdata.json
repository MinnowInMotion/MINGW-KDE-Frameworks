{"name": "kservice-5.26.0", "fancyname": "KService", "docfields": [{"type": "page", "name": "deprecated", "url": "deprecated.html", "keyword": null, "text": "Deprecated List Member KPluginInfo fromServices const KService::List services const KConfigGroup config KConfigGroup() since 5.0 use Q|K PluginLoader instead and build the metadata into the plugins using K_PLUGIN_FACTORY_WITH_JSON Member KPluginInfo KPluginInfo const KService::Ptr service since 5.0 use Q|K PluginLoader instead and build the metadata into the plugin using K_PLUGIN_FACTORY_WITH_JSON Member KService showInKDE const since 5.0 use showInCurrentDesktop() Member KSycoca disableAutoRebuild since 5.15 it only outputs a warning Member KSycoca isChanged const char use the signal databaseChanged(QStringList) instead Member KToolInvocation invokeBrowser const QString url const QByteArray startup_id QByteArray() since 5.0 use QDesktopServices::openUrl(url) Member KToolInvocation invokeMailer const QString address const QString subject const QByteArray startup_id QByteArray() since 5.0 use QDesktopServices::openUrl(mailtoURL) using QUrl::setPath(address) and a query item of for the subject Member KToolInvocation invokeMailer const QUrl mailtoURL const QByteArray startup_id QByteArray() bool allowAttachments false since 5.0 use QDesktopServices::openUrl(mailtoURL) Member KToolInvocation startServiceByDesktopName const QString _name const QStringList URLs QStringList() QString 0 QString 0 int 0 const QByteArray startup_id QByteArray() bool noWait false since 5.0 use QDBusConnectionInterface::startService to start a unique application in order to make dbus calls to it after ensuring that it installs a dbus org.kde.serviceName.service file Otherwise just use QProcess or KRun Member KToolInvocation startServiceByDesktopName const QString _name const QString URL QString 0 QString 0 int 0 const QByteArray startup_id QByteArray() bool noWait false since 5.0 use QDBusConnectionInterface::startService to start a unique application in order to make dbus calls to it after ensuring that it installs a dbus org.kde.serviceName.service file Otherwise just use QProcess or KRun Member KToolInvocation startServiceByDesktopPath const QString _name const QStringList URLs QStringList() QString 0 QString 0 int 0 const QByteArray startup_id QByteArray() bool noWait false since 5.0 use QDBusConnectionInterface::startService to start a unique application in order to make dbus calls to it after ensuring that it installs a dbus org.kde.serviceName.service file Otherwise just use QProcess or KRun Member KToolInvocation startServiceByDesktopPath const QString _name const QString URL QString 0 QString 0 int 0 const QByteArray startup_id QByteArray() bool noWait false since 5.0 use QDBusConnectionInterface::startService to start a unique application in order to make dbus calls to it after ensuring that it installs a dbus org.kde.serviceName.service file Otherwise just use QProcess or KRun Member KToolInvocation startServiceByName const QString _name const QStringList URLs QStringList() QString 0 QString 0 int 0 const QByteArray startup_id QByteArray() bool noWait false Use startServiceByDesktopName or startServiceByDesktopPath Member KToolInvocation startServiceByName const QString _name const QString URL QString 0 QString 0 int 0 const QByteArray startup_id QByteArray() bool noWait false Use startServiceByDesktopName or startServiceByDesktopPath"}, {"type": "class", "name": "KAutostart", "url": "classKAutostart.html", "keyword": "KAutostart", "text": "This is useful for applications that wish to offer a configurable means to allow the application to be autostarted By using this class you future-proof your applications against potential future or platform-specific changes to the autostart mechanism(s) Typical usage might look like"}, {"type": "enum", "name": "KAutostart::Condition", "url": "classKAutostart.html#aac167eb8f4e0592692ca9f9106cd87cd", "keyword": "Condition KAutostart::Condition KAutostart", "text": ""}, {"type": "enumvalue", "name": "KAutostart::CheckCommand", "url": "classKAutostart.html#aac167eb8f4e0592692ca9f9106cd87cdafc4060c72bd1a8a66671d09156460a85", "keyword": "CheckCommand KAutostart::CheckCommand KAutostart", "text": "an executable that is checked for existence by name"}, {"type": "enumvalue", "name": "KAutostart::CheckCondition", "url": "classKAutostart.html#aac167eb8f4e0592692ca9f9106cd87cdadae692567deb385021e4f722ea4054f6", "keyword": "CheckCondition KAutostart::CheckCondition KAutostart", "text": "autostart condition will be checked too KDE-specific 4.3"}, {"type": "enumvalue", "name": "KAutostart::CheckAll", "url": "classKAutostart.html#aac167eb8f4e0592692ca9f9106cd87cda8674a74d4438321ff2fa4fa3892d5350", "keyword": "CheckAll KAutostart::CheckAll KAutostart", "text": "all necessary conditions will be checked 4.3"}, {"type": "enum", "name": "KAutostart::StartPhase", "url": "classKAutostart.html#a236414b40affcf3f0e961642ca704c54", "keyword": "StartPhase KAutostart::StartPhase KAutostart", "text": ""}, {"type": "enumvalue", "name": "KAutostart::BaseDesktop", "url": "classKAutostart.html#a236414b40affcf3f0e961642ca704c54a142c3761ad02fb518220a12bd2f8672b", "keyword": "BaseDesktop KAutostart::BaseDesktop KAutostart", "text": "the essential desktop services such as panels and window managers"}, {"type": "enumvalue", "name": "KAutostart::DesktopServices", "url": "classKAutostart.html#a236414b40affcf3f0e961642ca704c54a6b2bc7939f7da4c4df23663446f655bd", "keyword": "DesktopServices KAutostart::DesktopServices KAutostart", "text": "services that should be available before most interactive applications start but that aren t part of the base desktop This would include things such as clipboard managers and mouse gesture tools"}, {"type": "enumvalue", "name": "KAutostart::Applications", "url": "classKAutostart.html#a236414b40affcf3f0e961642ca704c54af672395d2f6141f2be4da7f36c88d69b", "keyword": "Applications KAutostart::Applications KAutostart", "text": "everything else that doesn t belong in the above two categories including most system tray applications system monitors and interactive applications"}, {"type": "function", "name": "KAutostart::KAutostart", "url": "classKAutostart.html#ae2d3fddeed0985fa5da274cdfe47d4ba", "keyword": "KAutostart KAutostart::KAutostart KAutostart", "text": "If the service already exists in the system then the values associated with that service such as the executable command will be loaded as well Note that unless this service is explicitly set to autostart simply creating a KAutostart object will not result in the service being autostarted on next log in If no such service is already registered and the command to be executed on startup is not the same as entryName then you will want to set the associated command with setExec(const QString&) setExec entryName the name used to identify the service If none is provided then it uses the name registered with KAboutData parent QObject"}, {"type": "function", "name": "KAutostart::addToAllowedEnvironments", "url": "classKAutostart.html#ac4d771ccc9ce7cc527628f0f3f1f43a4", "keyword": "addToAllowedEnvironments KAutostart::addToAllowedEnvironments KAutostart", "text": "setAllowedEnvironments() removeFromAllowedEnvironments()"}, {"type": "function", "name": "KAutostart::addToExcludedEnvironments", "url": "classKAutostart.html#a5d808ed101f0f54a254e6e7779cc320b", "keyword": "addToExcludedEnvironments KAutostart::addToExcludedEnvironments KAutostart", "text": "removeFromExcludedEnvironments()"}, {"type": "function", "name": "KAutostart::allowedEnvironments", "url": "classKAutostart.html#a0ab2ee175323234c94ed1a51e8458f90", "keyword": "allowedEnvironments KAutostart::allowedEnvironments KAutostart", "text": "this service is allowed to start in Use checkAllowedEnvironment() or autostarts() for actual checks This does not take other autostart conditions into account If any environment is added to the allowed environments list then only those environments will be allowed to autoload the service It is not allowed to specify both allowed and excluded environments at the same time setAllowedEnvironments()"}, {"type": "function", "name": "KAutostart::autostarts", "url": "classKAutostart.html#a58cee8e01a3cc6162bd4b8001eb00993", "keyword": "autostarts KAutostart::autostarts KAutostart", "text": "environment if provided the check will be performed as if being loaded in that environment check autostart conditions to check for see commandToCheck() setAutostarts()"}, {"type": "function", "name": "KAutostart::checkAllowedEnvironment", "url": "classKAutostart.html#a6ecdee3f65a70b96ab6ed15f44b5367c", "keyword": "checkAllowedEnvironment KAutostart::checkAllowedEnvironment KAutostart", "text": "4.3"}, {"type": "function", "name": "KAutostart::command", "url": "classKAutostart.html#a6b0b4faa76f4b05825ae058adcaa998c", "keyword": "command KAutostart::command KAutostart", "text": "setCommand()"}, {"type": "function", "name": "KAutostart::commandToCheck", "url": "classKAutostart.html#a1c9ee569325999bf364fd789ad0e07ca", "keyword": "commandToCheck KAutostart::commandToCheck KAutostart", "text": "If the executable is not found in the user s environment it will not autostart setCommandToCheck()"}, {"type": "function", "name": "KAutostart::excludedEnvironments", "url": "classKAutostart.html#ad89799cc5731390a3a42a66e7437c71a", "keyword": "excludedEnvironments KAutostart::excludedEnvironments KAutostart", "text": "Use checkAllowedEnvironment() or autostarts() for actual checks This does not take other autostart conditions such as into account It is not allowed to specify both allowed and excluded environments at the same time setExcludedEnvironments()"}, {"type": "function", "name": "KAutostart::removeFromAllowedEnvironments", "url": "classKAutostart.html#a073847144497536b7b698c300b2d0b27", "keyword": "removeFromAllowedEnvironments KAutostart::removeFromAllowedEnvironments KAutostart", "text": "addToAllowedEnvironments()"}, {"type": "function", "name": "KAutostart::removeFromExcludedEnvironments", "url": "classKAutostart.html#a93d9d6a0e9f1e744d1d232e2a543278a", "keyword": "removeFromExcludedEnvironments KAutostart::removeFromExcludedEnvironments KAutostart", "text": "addToExcludedEnvironments()"}, {"type": "function", "name": "KAutostart::setAllowedEnvironments", "url": "classKAutostart.html#a467c862d5ab11ea9162696b4d0a1350d", "keyword": "setAllowedEnvironments KAutostart::setAllowedEnvironments KAutostart", "text": "allowedEnvironments() addToAllowedEnvironments()"}, {"type": "function", "name": "KAutostart::setAutostarts", "url": "classKAutostart.html#a6167064562b180610ec0cd43f1d63ad2", "keyword": "setAutostarts KAutostart::setAutostarts KAutostart", "text": "autostart will register with the autostart facility when true and deregister when false autostarts()"}, {"type": "function", "name": "KAutostart::setCommand", "url": "classKAutostart.html#a9628fd49e7076d8bc44805cde0f6d3df", "keyword": "setCommand KAutostart::setCommand KAutostart", "text": "command()"}, {"type": "function", "name": "KAutostart::setCommandToCheck", "url": "classKAutostart.html#a58c78e7ee66ead0c2aac782607d9d2fe", "keyword": "setCommandToCheck KAutostart::setCommandToCheck KAutostart", "text": "commandToCheck()"}, {"type": "function", "name": "KAutostart::setExcludedEnvironments", "url": "classKAutostart.html#a37bb9f8b777302e3973e3c09fd377b04", "keyword": "setExcludedEnvironments KAutostart::setExcludedEnvironments KAutostart", "text": "excludedEnvironments() addToExcludedEnvironments()"}, {"type": "function", "name": "KAutostart::setStartPhase", "url": "classKAutostart.html#a0e68a733fc632d4c1846d689c158cb15", "keyword": "setStartPhase KAutostart::setStartPhase KAutostart", "text": "Note that this is KDE specific and may not work in other environments StartPhase startPhase()"}, {"type": "function", "name": "KAutostart::setVisibleName", "url": "classKAutostart.html#a405425ceea4ebfc556d5f25332ca3679", "keyword": "setVisibleName KAutostart::setVisibleName KAutostart", "text": "visibleName()"}, {"type": "function", "name": "KAutostart::startAfter", "url": "classKAutostart.html#a942ebf49920d1d4b663b5d0b945c6fb6", "keyword": "startAfter KAutostart::startAfter KAutostart", "text": "4.3"}, {"type": "function", "name": "KAutostart::startPhase", "url": "classKAutostart.html#a5c15da7b67ce9e8519b71b01db96621b", "keyword": "startPhase KAutostart::startPhase KAutostart", "text": "Note that this is KDE specific and may not work in other environments StartPhase setStartPhase()"}, {"type": "function", "name": "KAutostart::visibleName", "url": "classKAutostart.html#a2023014339058e6902f1083f7663d70e", "keyword": "visibleName KAutostart::visibleName KAutostart", "text": "setVisibleName() setEntryName()"}, {"type": "function", "name": "KAutostart::isServiceRegistered", "url": "classKAutostart.html#ae2a9825e17fc6ba701f17d0104005de7", "keyword": "isServiceRegistered KAutostart::isServiceRegistered KAutostart", "text": "Does not check whether or not it is set to actually autostart or not entryName the name of the service to check for"}, {"type": "class", "name": "KDBusServiceStarter", "url": "classKDBusServiceStarter.html", "keyword": "KDBusServiceStarter", "text": "The default implementation starts new processes but this interface can also be reimplemented by specific applications to provide dlopened in-process DBus objects This interface is similar to the startServiceByName() function found in QDBusBusService but with the added benefit of using KTrader and therefore additional constraints and the ability to search the standard KDE dirs David Faure"}, {"type": "function", "name": "KDBusServiceStarter::findServiceFor", "url": "classKDBusServiceStarter.html#a651ff7878a2d701950260c87dc77ca5e", "keyword": "findServiceFor KDBusServiceStarter::findServiceFor KDBusServiceStarter", "text": "The trader is queried to find the preferred application for this serviceType with the constraint that its X-DBus-ServiceName property must be defined Then the DBus server is checked If the service is not available this method will call startServiceFor to start it serviceType the type of service we re looking for constraint see KServiceTypeTrader error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored dbusService On success dbusService contains the DBus service name under which this service is available If the pointer is 0 the argument will be ignored flags for future extensions currently unused an error code indicating success 0 or failure 0"}, {"type": "function", "name": "KDBusServiceStarter::startServiceFor", "url": "classKDBusServiceStarter.html#a0f5acc6003f03bc399baa6c250afac02", "keyword": "startServiceFor KDBusServiceStarter::startServiceFor KDBusServiceStarter", "text": "The default implementation uses KServiceTypeTrader to find the preferred Application and then starts it using KToolInvocation::startService However applications like kontact can reimplement this method to provide an in-process way of loading the implementation for this service type serviceType the type of service we re looking for constraint see KServiceTypeTrader error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored dbusService On success dbusService contains the DBus service name under which this service is available If the pointer is 0 the argument will be ignored flags for future extensions currently unused an error code indicating success 0 or failure 0"}, {"type": "class", "name": "KMimeTypeTrader", "url": "classKMimeTypeTrader.html", "keyword": "KMimeTypeTrader", "text": "Example say that you want to the list of all KParts components that can handle HTML Our code would look like If you want to get the preferred KParts component for text/html you could use preferredService although if this is about loading that component you would use createPartInstanceFromQuery directly KServiceTypeTrader KService"}, {"type": "function", "name": "KMimeTypeTrader::~KMimeTypeTrader", "url": "classKMimeTypeTrader.html#a75df888a08b1677a75a4af2420b7a736", "keyword": "KMimeTypeTrader::~KMimeTypeTrader KMimeTypeTrader", "text": ""}, {"type": "function", "name": "KMimeTypeTrader::preferredService", "url": "classKMimeTypeTrader.html#a2d47ab9e1ccf018bcb86431cb0ef7a9a", "keyword": "preferredService KMimeTypeTrader::preferredService KMimeTypeTrader", "text": "This is almost like query() first() except that it also checks if the service is allowed as a preferred service see KService::allowAsDefault mimeType the mime type see query() genericServiceType the service type see query() the preferred service or 0 if no service is available"}, {"type": "function", "name": "KMimeTypeTrader::query", "url": "classKMimeTypeTrader.html#a3b2f28553615ae5231754d5e2cee0c8c", "keyword": "query KMimeTypeTrader::query KMimeTypeTrader", "text": "Example usage To get list of applications that can handle a given mimetype set genericServiceType to which is the default To get list of embeddable components that can handle a given mimetype set genericServiceType to The constraint parameter is used to limit the possible choices returned based on the constraints you give it The constraint language is rather full The most common keywords are AND OR NOT IN and EXIST all used in an almost spoken-word form An example is The keys used in the query Type ServiceTypes Library are all fields found in the desktop files mimeType A mime type like text/plain or text/html genericServiceType a basic service type like KParts/ReadOnlyPart or Application constraint A constraint to limit the choices returned QString() to get all services that can handle the given mimetype A list of services that satisfy the query sorted by preference preferred service first"}, {"type": "function", "name": "KMimeTypeTrader::createInstanceFromQuery", "url": "classKMimeTypeTrader.html#a6a6016ddfd96aa13c71d1065d0cfbeeb", "keyword": "createInstanceFromQuery KMimeTypeTrader::createInstanceFromQuery KMimeTypeTrader", "text": "mimeType A mime type like text/plain or text/html serviceType a basic service type parent the parent object for the plugin itself constraint A constraint to limit the choices returned QString() to get all services that can handle the given mimetype args A list of arguments passed to the service component error The string passed here will contain an error description A pointer to the newly created object or a null pointer if the factory was unable to create an object of the given type"}, {"type": "function", "name": "KMimeTypeTrader::createPartInstanceFromQuery", "url": "classKMimeTypeTrader.html#acf6ce3a1fe9271204bde0ce05e38ac98", "keyword": "createPartInstanceFromQuery KMimeTypeTrader::createPartInstanceFromQuery KMimeTypeTrader", "text": "Example mimeType the mimetype which this part is associated with parentWidget the parent widget will be set as the parent of the part s widget parent the parent object for the part itself constraint an optional constraint to pass to the trader args A list of arguments passed to the service component error The string passed here will contain an error description A pointer to the newly created object or a null pointer if the factory was unable to create an object of the given type"}, {"type": "function", "name": "KMimeTypeTrader::self", "url": "classKMimeTypeTrader.html#aeb8aabd5ac20751c4d536ab5bdd0540b", "keyword": "self KMimeTypeTrader::self KMimeTypeTrader", "text": "You will need to use this to access the KMimeTypeTrader functionality since the constructors are protected Static KMimeTypeTrader instance"}, {"type": "class", "name": "KPluginInfo", "url": "classKPluginInfo.html", "keyword": "KPluginInfo", "text": "This holds all the information about a plugin there is It s used for the user to decide whether he wants to use this plugin or not Matthias Kretz"}, {"type": "function", "name": "KPluginInfo::KPluginInfo", "url": "classKPluginInfo.html#afd34697033cf2873834e81f17752a249", "keyword": "KPluginInfo KPluginInfo::KPluginInfo KPluginInfo", "text": "The file should be of the following form The Name and Comment fields must always be present The keys you may add further entries which will be available using property() The Website Category Require keys are optional For EnabledByDefault look at isPluginEnabledByDefault filename The filename of the desktop file resource If filename is relative you need to specify a resource type e.g KStandardDirs Otherwise resource isn t used"}, {"type": "function", "name": "KPluginInfo::KPluginInfo", "url": "classKPluginInfo.html#a9a1dc91305cbcc4467dd8faefd9c54be", "keyword": "KPluginInfo KPluginInfo::KPluginInfo KPluginInfo", "text": "The desktop file should look like this In the first three entries the Icon entry is optional since 5.0 use Q|K PluginLoader instead and build the metadata into the plugin using K_PLUGIN_FACTORY_WITH_JSON"}, {"type": "function", "name": "KPluginInfo::KPluginInfo", "url": "classKPluginInfo.html#ac644167de07fd370a518de99786dbf1c", "keyword": "KPluginInfo KPluginInfo::KPluginInfo KPluginInfo", "text": "These arguments should contain the plugin s metadata as read from QPluginLoader::metaData() This constructor uses the metadata read from the QVariantList It reads the first QVariantMap it finds in a field called Use Q|K PluginLoader and build the metadata into the plugin using K_PLUGIN_FACTORY_WITH_JSON You can use the desktoptojson tool to generate a json file from your desktop file The json file should look like this args QVariantList with arguments should contain a QVariantMap keyed as provided by QPluginLoader::metaData() libraryPath The path to the plugin file on disk K_PLUGIN_FACTORY_WITH_JSON() KPluginFactory::factory() 5.0"}, {"type": "function", "name": "KPluginInfo::KPluginInfo", "url": "classKPluginInfo.html#ae4241fd0b6f35dcd9bb6a3d401dd671b", "keyword": "KPluginInfo KPluginInfo::KPluginInfo KPluginInfo", "text": "md The KPluginMetaData to read the information from K_PLUGIN_FACTORY_WITH_JSON() KPluginLoader 5.5"}, {"type": "function", "name": "KPluginInfo::KPluginInfo", "url": "classKPluginInfo.html#ae4fa1c885fec8ade5a158877bb24b80c", "keyword": "KPluginInfo KPluginInfo::KPluginInfo KPluginInfo", "text": "isValid"}, {"type": "function", "name": "KPluginInfo::KPluginInfo", "url": "classKPluginInfo.html#aa18bd651ffa8632bdb34af7dc56d4596", "keyword": "KPluginInfo KPluginInfo::KPluginInfo KPluginInfo", "text": ""}, {"type": "function", "name": "KPluginInfo::author", "url": "classKPluginInfo.html#a81f4547a80d8c5f3575c8daff16ddbaf", "keyword": "author KPluginInfo::author KPluginInfo", "text": "The author of this plugin"}, {"type": "function", "name": "KPluginInfo::category", "url": "classKPluginInfo.html#a08dccd40e1acfdcb932a950d62aa9472", "keyword": "category KPluginInfo::category KPluginInfo", "text": "The category of this plugin e.g playlist/skin"}, {"type": "function", "name": "KPluginInfo::comment", "url": "classKPluginInfo.html#a75f13fdcb861689116e2498222103da1", "keyword": "comment KPluginInfo::comment KPluginInfo", "text": "A comment describing the plugin"}, {"type": "function", "name": "KPluginInfo::config", "url": "classKPluginInfo.html#ab977ed6e6aaeb39f8a870656eea6684b", "keyword": "config KPluginInfo::config KPluginInfo", "text": "If the KPluginInfo object has a KConfig object set return it else returns an invalid KConfigGroup"}, {"type": "function", "name": "KPluginInfo::defaults", "url": "classKPluginInfo.html#ab2d62b88fec5f9fa67f9b18ca87f0234", "keyword": "defaults KPluginInfo::defaults KPluginInfo", "text": ""}, {"type": "function", "name": "KPluginInfo::dependencies", "url": "classKPluginInfo.html#af8a6cd53ba0c58e82b782c58d47cefde", "keyword": "dependencies KPluginInfo::dependencies KPluginInfo", "text": "A list of plugins required for this plugin to be enabled Use the pluginName in this list"}, {"type": "function", "name": "KPluginInfo::email", "url": "classKPluginInfo.html#ace5d314d6c5b9b2a44dc4aebe0bcb758", "keyword": "email KPluginInfo::email KPluginInfo", "text": "The email address of the author"}, {"type": "function", "name": "KPluginInfo::entryPath", "url": "classKPluginInfo.html#aa44b4a572c4df96a5cc02bba4d28a222", "keyword": "entryPath KPluginInfo::entryPath KPluginInfo", "text": "The file containing the information about the plugin"}, {"type": "function", "name": "KPluginInfo::formFactors", "url": "classKPluginInfo.html#a2e3f29b31cf3d4fa428134fd67883902", "keyword": "formFactors KPluginInfo::formFactors KPluginInfo", "text": "A list of FormFactors this plugin offers corresponds to the value in a desktop service file or to the value in the block of the json metadata Formfactor values are freestyle common values are Values are comma-separated 5.14"}, {"type": "function", "name": "KPluginInfo::icon", "url": "classKPluginInfo.html#a4b5615f2f3c219d1c092a1a7c2f92d15", "keyword": "icon KPluginInfo::icon KPluginInfo", "text": "The iconname for this plugin"}, {"type": "function", "name": "KPluginInfo::isHidden", "url": "classKPluginInfo.html#a2c4f920e10d53ae0477afecdc0806fcc", "keyword": "isHidden KPluginInfo::isHidden KPluginInfo", "text": "Whether the plugin should be hidden"}, {"type": "function", "name": "KPluginInfo::isPluginEnabled", "url": "classKPluginInfo.html#a9deb8ec530e91935a462e5610eae0fcb", "keyword": "isPluginEnabled KPluginInfo::isPluginEnabled KPluginInfo", "text": "Whether the plugin is currently loaded setPluginEnabled() load()"}, {"type": "function", "name": "KPluginInfo::isPluginEnabledByDefault", "url": "classKPluginInfo.html#a2c6f89c894809fd3b40c6bf8a2f804a4", "keyword": "isPluginEnabledByDefault KPluginInfo::isPluginEnabledByDefault KPluginInfo", "text": "The default value whether the plugin is enabled or not Defaults to the value set in the desktop file or if that isn t set to false"}, {"type": "function", "name": "KPluginInfo::isValid", "url": "classKPluginInfo.html#a3b1fb66e61ddda8e3ca8fc6332f0001a", "keyword": "isValid KPluginInfo::isValid KPluginInfo", "text": "Treat invalid KPluginInfo objects like you would treat a null pointer"}, {"type": "function", "name": "KPluginInfo::kcmServices", "url": "classKPluginInfo.html#a531fce84a86216a1e43ac1762bcc5905", "keyword": "kcmServices KPluginInfo::kcmServices KPluginInfo", "text": "A list of Service pointers if the plugin installs one or more KCModule"}, {"type": "function", "name": "KPluginInfo::libraryPath", "url": "classKPluginInfo.html#a53bac006d1b7e89e20c128ed076f7706", "keyword": "libraryPath KPluginInfo::libraryPath KPluginInfo", "text": "The absolute path of the plugin on disk This can be used to load the plugin from using KPluginLoader or QPluginLoader 5.0"}, {"type": "function", "name": "KPluginInfo::license", "url": "classKPluginInfo.html#a686ac2922baae9c04fbec1dce1176b34", "keyword": "license KPluginInfo::license KPluginInfo", "text": "The license keyword of this plugin"}, {"type": "function", "name": "KPluginInfo::load", "url": "classKPluginInfo.html#aa7d9a5902333528ffca052e7bc406ad8", "keyword": "load KPluginInfo::load KPluginInfo", "text": "config The KConfigGroup holding the information whether plugin is enabled"}, {"type": "function", "name": "KPluginInfo::name", "url": "classKPluginInfo.html#a8c39863d1936db5197c524240eb491ce", "keyword": "name KPluginInfo::name KPluginInfo", "text": "The user visible name of the plugin"}, {"type": "function", "name": "KPluginInfo::operator!=", "url": "classKPluginInfo.html#a6f97cdc48882c8a5c15b53d88bde3801", "keyword": "operator!= KPluginInfo::operator!= KPluginInfo", "text": ""}, {"type": "function", "name": "KPluginInfo::operator<", "url": "classKPluginInfo.html#ac1ac1d94b2fc92100ae769fef7dc9733", "keyword": "operator< KPluginInfo::operator< KPluginInfo", "text": ""}, {"type": "function", "name": "KPluginInfo::operator=", "url": "classKPluginInfo.html#a4d8e87e9b1fa622f452fae1aba0eab84", "keyword": "operator= KPluginInfo::operator= KPluginInfo", "text": ""}, {"type": "function", "name": "KPluginInfo::operator==", "url": "classKPluginInfo.html#a932458d1c2ae412804b40dc6e1bb0155", "keyword": "operator== KPluginInfo::operator== KPluginInfo", "text": ""}, {"type": "function", "name": "KPluginInfo::operator>", "url": "classKPluginInfo.html#a91b42d945b9b7bf9dc1074e8b6b7fde1", "keyword": "operator> KPluginInfo::operator> KPluginInfo", "text": ""}, {"type": "function", "name": "KPluginInfo::pluginName", "url": "classKPluginInfo.html#a40f05c5154d54ac0aed75e9fba34acea", "keyword": "pluginName KPluginInfo::pluginName KPluginInfo", "text": "The internal name of the plugin for KParts Plugins this is the same name as set in the rc file"}, {"type": "function", "name": "KPluginInfo::properties", "url": "classKPluginInfo.html#a1fb84ddb4574476edfdcc0c97103de51", "keyword": "properties KPluginInfo::properties KPluginInfo", "text": "All properties of this object This can be used to read custom values 5.3 KPluginInfo::property()"}, {"type": "function", "name": "KPluginInfo::property", "url": "classKPluginInfo.html#a5113be2858863d954563fcf5de741094", "keyword": "property KPluginInfo::property KPluginInfo", "text": "The value associated to the key You can use it if you want to read custom values To do this you need to define your own servicetype and add it to the ServiceTypes keys"}, {"type": "function", "name": "KPluginInfo::save", "url": "classKPluginInfo.html#a1ef67ef8d9bbf59f263b44ae081af2f9", "keyword": "save KPluginInfo::save KPluginInfo", "text": "config The KConfigGroup holding the information whether plugin is enabled"}, {"type": "function", "name": "KPluginInfo::service", "url": "classKPluginInfo.html#a7827960deb230c5358a10c35d513e4c7", "keyword": "service KPluginInfo::service KPluginInfo", "text": "The KService object for this plugin You might need it if you want to read custom values To do this you need to define your own servicetype and add it to the ServiceTypes keys Then you can use the KService::property() method to read your keys property()"}, {"type": "function", "name": "KPluginInfo::serviceTypes", "url": "classKPluginInfo.html#ae81a7b45886835af09575080eb8bf28a", "keyword": "serviceTypes KPluginInfo::serviceTypes KPluginInfo", "text": "A list of ServiceTypes this plugin offers 5.0"}, {"type": "function", "name": "KPluginInfo::setConfig", "url": "classKPluginInfo.html#a5e1fd568345bb2093865b4b945d11048", "keyword": "setConfig KPluginInfo::setConfig KPluginInfo", "text": "This will be overridden by the KConfigGroup passed to save() or load() if one is passed"}, {"type": "function", "name": "KPluginInfo::setPluginEnabled", "url": "classKPluginInfo.html#ac453ae934eb0711dd88647b5d0f0d2dd", "keyword": "setPluginEnabled KPluginInfo::setPluginEnabled KPluginInfo", "text": "isPluginEnabled() save()"}, {"type": "function", "name": "KPluginInfo::toMetaData", "url": "classKPluginInfo.html#a54f8b1c76ad327e3916909edc9d1a0f5", "keyword": "toMetaData KPluginInfo::toMetaData KPluginInfo", "text": "a KPluginMetaData object with equivalent meta data 5.3"}, {"type": "function", "name": "KPluginInfo::version", "url": "classKPluginInfo.html#a4eb4259eb1786d7ec24d66805fa7feca", "keyword": "version KPluginInfo::version KPluginInfo", "text": "The version of the plugin"}, {"type": "function", "name": "KPluginInfo::website", "url": "classKPluginInfo.html#a63d29050662d648eb02227fd12bbb9e2", "keyword": "website KPluginInfo::website KPluginInfo", "text": "The website of the plugin/author"}, {"type": "function", "name": "KPluginInfo::fromFiles", "url": "classKPluginInfo.html#a452fd05d5272f6d526e607005c001b5b", "keyword": "fromFiles KPluginInfo::fromFiles KPluginInfo", "text": "A list of KPluginInfo objects constructed from a list of filenames If you make a lookup using for example KStandardDirs::findAllResources() you pass the list of files to this function files The list of files to construct the list of KPluginInfo objects from config The config group where to save/load whether the plugin is enabled/disabled"}, {"type": "function", "name": "KPluginInfo::fromKPartsInstanceName", "url": "classKPluginInfo.html#aace3e1a76876e98ffb20113930c8c978", "keyword": "fromKPartsInstanceName KPluginInfo::fromKPartsInstanceName KPluginInfo", "text": "A list of KPluginInfo objects for the KParts plugins of a component componentName Use the component name to look up all KParts plugins for it config The config group where to save/load whether the plugin is enabled/disabled"}, {"type": "function", "name": "KPluginInfo::fromMetaData", "url": "classKPluginInfo.html#abb626711e026f4d44a6d542954bad955", "keyword": "fromMetaData KPluginInfo::fromMetaData KPluginInfo", "text": "meta the KPluginMetaData to convert a KPluginInfo object with equivalent meta data 5.3"}, {"type": "function", "name": "KPluginInfo::fromMetaData", "url": "classKPluginInfo.html#a7d7f95100d0ce40b9244b3daf2692091", "keyword": "fromMetaData KPluginInfo::fromMetaData KPluginInfo", "text": "list the list of KPluginMetaData objects to convert a list of KPluginInfo objects with equivalent meta data 5.3"}, {"type": "function", "name": "KPluginInfo::fromServices", "url": "classKPluginInfo.html#a641310294d240aa6d82dc014640bf3aa", "keyword": "fromServices KPluginInfo::fromServices KPluginInfo", "text": "A list of KPluginInfo objects constructed from a list of KService objects If you get a trader offer of the plugins you want to use you can just pass them to this function services The list of services to construct the list of KPluginInfo objects from config The config group where to save/load whether the plugin is enabled/disabled since 5.0 use Q|K PluginLoader instead and build the metadata into the plugins using K_PLUGIN_FACTORY_WITH_JSON"}, {"type": "function", "name": "KPluginInfo::toMetaData", "url": "classKPluginInfo.html#a4024b5ea6c9fc4aa131dde56c48935a6", "keyword": "toMetaData KPluginInfo::toMetaData KPluginInfo", "text": "info the KPluginInfo object to convert a KPluginMetaData object with equivalent meta data 5.3"}, {"type": "function", "name": "KPluginInfo::toMetaData", "url": "classKPluginInfo.html#a9dce06b098c7b609d615faf68b00bd6b", "keyword": "toMetaData KPluginInfo::toMetaData KPluginInfo", "text": "list the list of KPluginInfo objects to convert a list of KPluginMetaData objects with equivalent meta data 5.3"}, {"type": "class", "name": "KPluginTrader", "url": "classKPluginTrader.html", "keyword": "KPluginTrader", "text": "KPluginTrader provides an easy way to load a plugin instance from a KPluginFactory or just querying for existing plugins KPluginTrader provides a way for an application to query directories in the Qt plugin paths accessed through QCoreApplication::libraryPaths() Plugins may match a specific set of requirements This allows to find specific plugins at run-time without having to hard-code their names and/or paths KPluginTrader does not search recursively you are rather encouraged to install plugins into specific subdirectories to further speed searching KPluginTrader exclusively searches within the plugin binaries metadata via QPluginLoader::metaData() It does not search these directories recursively KPluginTrader does not use KServiceTypeTrader or KSyCoCa As such it will only find binary plugins If you are looking for a generic way to query for services use KServiceTypeTrader For anything relating to mimetypes type of files use KMimeTypeTrader Example If you want to find all plugins for your application you would define a KMyApp/Plugin servicetype and then you can query the trader for it You can add a constraint in the For instance Please note that when including property names containing arithmetic operators like or then you have to put brackets around the property name in order to correctly separate arithmetic operations from the name So for example a constraint expression like needs to be written as otherwise it could also be interpreted as Subtract the numeric value of the property and from the property and make sure it is greater than 4 Instead of the other meaning make sure that the numeric value of is greater than 4 KMimeTypeTrader KServiceTypeTrader KPluginInfo QCoreApplication::libraryPaths QT_PLUGIN_PATH env variable KPluginFactory kservice_desktop_to_json Cmake macro K_PLUGIN_FACTORY_WITH_JSON macro defined in KPluginFactory 5.0"}, {"type": "function", "name": "KPluginTrader::~KPluginTrader", "url": "classKPluginTrader.html#a46b7e49b85b106b3d6976c033327efdc", "keyword": "KPluginTrader::~KPluginTrader KPluginTrader", "text": ""}, {"type": "function", "name": "KPluginTrader::query", "url": "classKPluginTrader.html#af3efbd1a45a5b1b384bb44f392592cc2", "keyword": "query KPluginTrader::query KPluginTrader", "text": "It will return a list of plugins that match your specifications Required parameter is the service type and subdirectory This method will append the subDirectory to every path found in QCoreApplication::libraryPaths() append the subDirectory parameter and search through the plugin s metadata KPluginTrader exclusively searches within the plugin binaries metadata via QPluginLoader::metaData() It does not search these directories recursively The constraint parameter is used to limit the possible choices returned based on the constraints you give it The constraint language is rather full The most common keywords are AND OR NOT IN and EXIST all used in an almost spoken-word form An example is If you want to load a list of plugins from a specific subdirectory you can do the following If you have a specific query for just one plugin use the createInstanceFromQuery method The keys used in the query Type ServiceType Exec are all fields found in the json files which are compiled into the plugin binaries subDirectory The subdirectory under the Qt plugin path servicetype A service type like KMyApp/Plugin or KFilePlugin constraint A constraint to limit the choices returned QString() to get all services of the given servicetype A list of services that satisfy the query"}, {"type": "function", "name": "KPluginTrader::createInstanceFromQuery", "url": "classKPluginTrader.html#a54220c5d965f7660b8bf76b009bb15af", "keyword": "createInstanceFromQuery KPluginTrader::createInstanceFromQuery KPluginTrader", "text": "Example subDirectory The subdirectory under the Qt plugin pathes to search in serviceType The type of service for which to find a plugin constraint An optional constraint to pass to the trader see KTrader parent The parent object for the part itself args A list of arguments passed to the service component error The string passed here will contain an error description A pointer to the newly created object or a null pointer if the factory was unable to create an object of the given type"}, {"type": "function", "name": "KPluginTrader::createInstanceFromQuery", "url": "classKPluginTrader.html#a67d6904331628dd48c830adbbde49889", "keyword": "createInstanceFromQuery KPluginTrader::createInstanceFromQuery KPluginTrader", "text": "This method works like createInstanceFromQuery const QString const QString const QString QObject* const QVariantList QString* but you can specify an additional parent widget This is important for a KPart for example subDirectory The subdirectory under the Qt plugin pathes to search in serviceType the type of service for which to find a plugin constraint an optional constraint to pass to the trader see KTrader parent the parent object for the part itself parentWidget the parent widget for the plugin args A list of arguments passed to the service component error The string passed here will contain an error description A pointer to the newly created object or a null pointer if the factory was unable to create an object of the given type"}, {"type": "function", "name": "KPluginTrader::self", "url": "classKPluginTrader.html#a055bc78100f53a622169c5cc0ba82bce", "keyword": "self KPluginTrader::self KPluginTrader", "text": "You will need to use this to access the KPluginTrader functionality since the constructors are protected Static KPluginTrader instance"}, {"type": "class", "name": "KService", "url": "classKService.html", "keyword": "KService", "text": "The starting point you need is often the static methods like createInstance() The types of service a plugin provides is taken from the accompanying desktop file where the ServiceTypes field is used For a tutorial on how to build a plugin-loading mechanism and how to write plugins in general see KServiceType KServiceGroup Torben Weis"}, {"type": "enum", "name": "KService::DBusStartupType", "url": "classKService.html#a6419c30c7fab9341c1df192621f5953a", "keyword": "DBusStartupType KService::DBusStartupType KService", "text": "None This service has no DBUS support Unique This service provides a unique DBUS service The service name is equal to the desktopEntryName Multi This service provides a DBUS service which can be run with multiple instances in parallel The service name of an instance is equal to the desktopEntryName the PID of the process"}, {"type": "function", "name": "KService::KService", "url": "classKService.html#a4f55c41242957e5adfa7fa35d9129651", "keyword": "KService KService::KService KService", "text": "name the name of the service exec the executable icon the name of the icon"}, {"type": "function", "name": "KService::KService", "url": "classKService.html#adef306dd0e342d8f0963c5f80166537b", "keyword": "KService KService::KService KService", "text": "fullpath Full path to the config file"}, {"type": "function", "name": "KService::KService", "url": "classKService.html#a7e0f23ef92085ea1abbab7648ca31eaa", "keyword": "KService KService::KService KService", "text": "config the desktop file to read optional relative path to store for findByName"}, {"type": "function", "name": "KService::actions", "url": "classKService.html#a2b803e63c688acc295f4d35f50a85dc5", "keyword": "actions KService::actions KService", "text": ""}, {"type": "function", "name": "KService::allowAsDefault", "url": "classKService.html#ad07fa6e162c51c32cf630dba1daa38d8", "keyword": "allowAsDefault KService::allowAsDefault KService", "text": "Left Click in a file manager or KRun in general If not then this service is only available in RMB popups so it must be selected explicitly by the user in order to be used Note that servicemenus supersede this functionality though at least in konqueror true if the service may be used as the default main handler"}, {"type": "function", "name": "KService::allowMultipleFiles", "url": "classKService.html#a368848f586d803b6ec42dfb680c8f481", "keyword": "allowMultipleFiles KService::allowMultipleFiles KService", "text": "true if multiple files may be passed to this service at startup False if only one file at a time may be passed"}, {"type": "function", "name": "KService::categories", "url": "classKService.html#a00b820439073ef6ef764fa51f15e4ba3", "keyword": "categories KService::categories KService", "text": "the list of VFolder categories"}, {"type": "function", "name": "KService::comment", "url": "classKService.html#a887c1e73c45ad14e3ade08903a4a0cef", "keyword": "comment KService::comment KService", "text": "the descriptive comment for the service or QString() if not set"}, {"type": "function", "name": "KService::createInstance", "url": "classKService.html#acfc4d83c58548ea4666ceb3c7f09be1c", "keyword": "createInstance KService::createInstance KService", "text": "parent The parent object see QObject constructor args A list of arguments passed to the factory and possibly to the component see KPluginFactory error A pointer to QString which should receive the error description or 0 A pointer to the newly created object or a null pointer if the factory was unable to create an object of the given type"}, {"type": "function", "name": "KService::createInstance", "url": "classKService.html#aab609cccc0e4a701d6844cb0a9028827", "keyword": "createInstance KService::createInstance KService", "text": "parentWidget A parent widget for the service This is used e g for parts parent The parent object see QObject constructor args A list of arguments passed to the factory and possibly to the component see KPluginFactory error A pointer to QString which should receive the error description or 0 A pointer to the newly created object or a null pointer if the factory was unable to create an object of the given type"}, {"type": "function", "name": "KService::dbusStartupType", "url": "classKService.html#a3d996c876fe73e6518ebec5634f1467f", "keyword": "dbusStartupType KService::dbusStartupType KService", "text": "the DBUSStartupType supported by this service"}, {"type": "function", "name": "KService::desktopEntryName", "url": "classKService.html#a27990e4af38af93f3164a819808b3bf9", "keyword": "desktopEntryName KService::desktopEntryName KService", "text": "E.g the name of the desktop entry without path or extension or QString() if not set"}, {"type": "function", "name": "KService::docPath", "url": "classKService.html#ac729d333293487a0dea99a6f6d162bde", "keyword": "docPath KService::docPath KService", "text": "4.2 the documentation path or QString() if not set"}, {"type": "function", "name": "KService::exec", "url": "classKService.html#a82ad70f1e2464e417e58217d5f818233", "keyword": "exec KService::exec KService", "text": "the command that the service executes or QString() if not set"}, {"type": "function", "name": "KService::genericName", "url": "classKService.html#a3b9e540f99e2bd9c643b59b72ba384fd", "keyword": "genericName KService::genericName KService", "text": "the generic name or QString() if not set"}, {"type": "function", "name": "KService::hasMimeType", "url": "classKService.html#afb76a4db1be2b604aa382f6888d2aa07", "keyword": "hasMimeType KService::hasMimeType KService", "text": "mimeType The name of the mime type you are interested in determining whether this service supports 4.6"}, {"type": "function", "name": "KService::hasServiceType", "url": "classKService.html#a42a5318a5c153826e50be03f88997a06", "keyword": "hasServiceType KService::hasServiceType KService", "text": "serviceTypePtr The name of the service type you are interested in determining whether this service supports true if the service type you specified is supported otherwise false"}, {"type": "function", "name": "KService::icon", "url": "classKService.html#aa0bd082a665935aa5ce78841221625ea", "keyword": "icon KService::icon KService", "text": "the icon associated with the service or QString() if not set"}, {"type": "function", "name": "KService::initialPreference", "url": "classKService.html#a91d5ef0622f2f6b9e85b245754c7d55c", "keyword": "initialPreference KService::initialPreference KService", "text": "The bigger the value the most preferred the service is the service preference level of the service"}, {"type": "function", "name": "KService::isApplication", "url": "classKService.html#adf9a23b6da0122cb70bb40f2f7a0e86e", "keyword": "isApplication KService::isApplication KService", "text": "true if this service is an application i.e it has Type Application in its desktop file and exec() will not be empty"}, {"type": "function", "name": "KService::keywords", "url": "classKService.html#a283b6306865e1b729409ffd8605b7546", "keyword": "keywords KService::keywords KService", "text": "the list of keywords"}, {"type": "function", "name": "KService::library", "url": "classKService.html#abf74cc799ce6bab11474f8440d48a9dc", "keyword": "library KService::library KService", "text": "the name of the library that contains the service s implementation or QString() if not set"}, {"type": "function", "name": "KService::locateLocal", "url": "classKService.html#a609b01c8b604b6b8be85208268feaf25", "keyword": "locateLocal KService::locateLocal KService", "text": "path that can be used for saving changes to this service"}, {"type": "function", "name": "KService::menuId", "url": "classKService.html#a645313650f6d92ebc5365c31b886dbd6", "keyword": "menuId KService::menuId KService", "text": "The menu ID is used to add or remove the entry to a menu the menu ID"}, {"type": "function", "name": "KService::mimeTypes", "url": "classKService.html#a059b1da0d1d5d171ac6c1961ad5a8792", "keyword": "mimeTypes KService::mimeTypes KService", "text": "Note that this doesn t include inherited mimetypes only the mimetypes types listed in the desktop file 4.8.3"}, {"type": "function", "name": "KService::noDisplay", "url": "classKService.html#a54399c581f175cb8518be06ab42b4c58", "keyword": "noDisplay KService::noDisplay KService", "text": "true to suppress this service Such services still appear in trader queries i.e in popup menus for instance"}, {"type": "function", "name": "KService::operator KPluginName", "url": "classKService.html#a1c61f2a3e13fa812ee8c29bcfa382732", "keyword": "operator KPluginName KService::operator KPluginName KService", "text": "This allows expressions like which will use library() as the name of the plugin If the service is not valid or does not have a library KPluginLoader::errorString() will be set appropriately"}, {"type": "function", "name": "KService::parentApp", "url": "classKService.html#a055c4f813247c104720df34bc68894b1", "keyword": "parentApp KService::parentApp KService", "text": "Useful for e.g plugins the parent application or QString() if not set"}, {"type": "function", "name": "KService::path", "url": "classKService.html#adc0266ae0f3fdc2ce6c69a4160e4c8b7", "keyword": "path KService::path KService", "text": "the working directory to run the program in or QString() if not set"}, {"type": "function", "name": "KService::pluginKeyword", "url": "classKService.html#ac10ee48058bd7c0a19250e008ed5a9aa", "keyword": "pluginKeyword KService::pluginKeyword KService", "text": "The keyword is defined with X-KDE-PluginKeyword in the desktop file and with K_REGISTER_PLUGIN_WITH_KEYWORD when implementing the plugin"}, {"type": "function", "name": "KService::property", "url": "classKService.html#a76a45559bb26ba8d07b58de2427c7283", "keyword": "property KService::property KService", "text": "_name the name of the property t the assumed type of the property the property or invalid if not found KServiceType"}, {"type": "function", "name": "KService::serviceTypes", "url": "classKService.html#a440c34661e6292491355afe5af0f8188", "keyword": "serviceTypes KService::serviceTypes KService", "text": "the list of service types that are supported Note that this doesn t include inherited servicetypes or mimetypes only the service types listed in the desktop file"}, {"type": "function", "name": "KService::setExec", "url": "classKService.html#a1d6fd8519b6525de8422f9c8d9e6bb90", "keyword": "setExec KService::setExec KService", "text": "If exec is not empty its value will override the one the one set when this service was created Please note that entryPath is also cleared so the service will no longer be associated with a specific config file 4.11"}, {"type": "function", "name": "KService::setMenuId", "url": "classKService.html#ac428beb293223b4e43719c2c8f5578df", "keyword": "setMenuId KService::setMenuId KService", "text": "Set the menu id"}, {"type": "function", "name": "KService::setTerminal", "url": "classKService.html#a83514d6733779a22d0a0c218d4f84953", "keyword": "setTerminal KService::setTerminal KService", "text": "Sets whether to use a terminal or not"}, {"type": "function", "name": "KService::setTerminalOptions", "url": "classKService.html#a287ca714263203bac828c7d95150c710", "keyword": "setTerminalOptions KService::setTerminalOptions KService", "text": "Sets the terminal options to use"}, {"type": "function", "name": "KService::showInCurrentDesktop", "url": "classKService.html#ad1c4ee88d5eb0bb4f8da08aacb56d814", "keyword": "showInCurrentDesktop KService::showInCurrentDesktop KService", "text": "true if the service should be shown KMimeTypeTrader honors this and removes such services from its results 5.0"}, {"type": "function", "name": "KService::showInKDE", "url": "classKService.html#aef4826fafac8af7d9f3ff284581dccf6", "keyword": "showInKDE KService::showInKDE KService", "text": "true if the service should be shown KMimeTypeTrader honors this and removes such services from its results 4.5 since 5.0 use showInCurrentDesktop()"}, {"type": "function", "name": "KService::showOnCurrentPlatform", "url": "classKService.html#a7cd753b79039668adac755ace7780034", "keyword": "showOnCurrentPlatform KService::showOnCurrentPlatform KService", "text": "on xcb or on wayland true if the service should be shown 5.0"}, {"type": "function", "name": "KService::storageId", "url": "classKService.html#a278d379ed7e66262c4dab4000a8778af", "keyword": "storageId KService::storageId KService", "text": "It will be based on the menu-id when available and otherwise falls back to entryPath() the storage ID"}, {"type": "function", "name": "KService::substituteUid", "url": "classKService.html#a3c1826b7cb7d94f0c9c8e12ffc6c0626", "keyword": "substituteUid KService::substituteUid KService", "text": "true if the service has to be run under a different uid username()"}, {"type": "function", "name": "KService::terminal", "url": "classKService.html#a3f41cfbbc20ff0a2b23a621b5d51eeff", "keyword": "terminal KService::terminal KService", "text": "true if the service is to be run in a terminal"}, {"type": "function", "name": "KService::terminalOptions", "url": "classKService.html#a407f833b416e1721d4dc7f69b38a708f", "keyword": "terminalOptions KService::terminalOptions KService", "text": "The service must be a tty-oriented program the terminal options or QString() if not set"}, {"type": "function", "name": "KService::untranslatedGenericName", "url": "classKService.html#a91264ac5ed247c5dda4ab89f34652b21", "keyword": "untranslatedGenericName KService::untranslatedGenericName KService", "text": "the generic name or QString() if not set"}, {"type": "function", "name": "KService::username", "url": "classKService.html#a57a86557cb3f3481f0f6ac56ba66740d", "keyword": "username KService::username KService", "text": "the username under which the service has to be run or QString() if not set substituteUid()"}, {"type": "function", "name": "KSycocaEntry::entryPath", "url": "classKSycocaEntry.html#a9b09ff62f097ad6b190dcce59899cec5", "keyword": "entryPath KSycocaEntry::entryPath KSycocaEntry entryPath KSycocaEntry::entryPath KSycocaEntry entryPath KSycocaEntry::entryPath KSycocaEntry entryPath KSycocaEntry::entryPath KSycocaEntry", "text": "the path of this entry The path can be absolute or relative The corresponding factory should know relative to what"}, {"type": "function", "name": "KSycocaEntry::isDeleted", "url": "classKSycocaEntry.html#a5d850905e3ef323a170d03446f23552f", "keyword": "isDeleted KSycocaEntry::isDeleted KSycocaEntry isDeleted KSycocaEntry::isDeleted KSycocaEntry isDeleted KSycocaEntry::isDeleted KSycocaEntry isDeleted KSycocaEntry::isDeleted KSycocaEntry", "text": "true if deleted"}, {"type": "function", "name": "KSycocaEntry::isType", "url": "classKSycocaEntry.html#a88dc388711eeb2a9d2cc8c1e632580b7", "keyword": "isType KSycocaEntry::isType KSycocaEntry isType KSycocaEntry::isType KSycocaEntry isType KSycocaEntry::isType KSycocaEntry isType KSycocaEntry::isType KSycocaEntry", "text": ""}, {"type": "function", "name": "KSycocaEntry::isValid", "url": "classKSycocaEntry.html#a3759073883ad2fc631457223bc8cc129", "keyword": "isValid KSycocaEntry::isValid KSycocaEntry isValid KSycocaEntry::isValid KSycocaEntry isValid KSycocaEntry::isValid KSycocaEntry isValid KSycocaEntry::isValid KSycocaEntry", "text": "true if valid"}, {"type": "function", "name": "KSycocaEntry::name", "url": "classKSycocaEntry.html#a47cc0b9a4e968ddf6593b9a99696b2a2", "keyword": "name KSycocaEntry::name KSycocaEntry name KSycocaEntry::name KSycocaEntry name KSycocaEntry::name KSycocaEntry name KSycocaEntry::name KSycocaEntry", "text": "the name of this entry"}, {"type": "function", "name": "KSycocaEntry::property", "url": "classKSycocaEntry.html#afadf03696e1a19e8f791771564ada80e", "keyword": "property KSycocaEntry::property KSycocaEntry property KSycocaEntry::property KSycocaEntry property KSycocaEntry::property KSycocaEntry property KSycocaEntry::property KSycocaEntry", "text": "Some often used properties have convenience access functions like exec() serviceTypes etc name the name of the property the property or invalid if not found"}, {"type": "function", "name": "KSycocaEntry::propertyNames", "url": "classKSycocaEntry.html#afb64d0c6b1c26a0f0b5f2926fa6d17d9", "keyword": "propertyNames KSycocaEntry::propertyNames KSycocaEntry propertyNames KSycocaEntry::propertyNames KSycocaEntry propertyNames KSycocaEntry::propertyNames KSycocaEntry propertyNames KSycocaEntry::propertyNames KSycocaEntry", "text": "That means that some of these properties may be empty the list of supported properties"}, {"type": "function", "name": "KSycocaEntry::setDeleted", "url": "classKSycocaEntry.html#ac1ad5b6b0858402d63ff5cb6630174e3", "keyword": "setDeleted KSycocaEntry::setDeleted KSycocaEntry setDeleted KSycocaEntry::setDeleted KSycocaEntry setDeleted KSycocaEntry::setDeleted KSycocaEntry setDeleted KSycocaEntry::setDeleted KSycocaEntry", "text": ""}, {"type": "function", "name": "KSycocaEntry::storageId", "url": "classKSycocaEntry.html#a1817b45fae1b0c54fa80a471c5f7c07a", "keyword": "storageId KSycocaEntry::storageId KSycocaEntry storageId KSycocaEntry::storageId KSycocaEntry storageId KSycocaEntry::storageId KSycocaEntry storageId KSycocaEntry::storageId KSycocaEntry", "text": "the unique ID for this entry In practice this is storageId() for KService and name() for everything else 4.2.1"}, {"type": "function", "name": "KSycocaEntry::sycocaType", "url": "classKSycocaEntry.html#ad9f3bd1a835af09339d7e87d23c21366", "keyword": "sycocaType KSycocaEntry::sycocaType KSycocaEntry sycocaType KSycocaEntry::sycocaType KSycocaEntry sycocaType KSycocaEntry::sycocaType KSycocaEntry sycocaType KSycocaEntry::sycocaType KSycocaEntry", "text": ""}, {"type": "function", "name": "KService::allServices", "url": "classKService.html#a4adac72b28d0736ae27a095c60bbd2f7", "keyword": "allServices KService::allServices KService", "text": "Useful for being able to to display them in a list box for example More memory consuming than the ones above don t use unless really necessary the list of all services"}, {"type": "function", "name": "KService::newServicePath", "url": "classKService.html#ad7f00a2246788a7626948794f25a138a", "keyword": "newServicePath KService::newServicePath KService", "text": "showInMenu true if the service should be shown in the KDE menu false if the service should be hidden from the menu This argument isn t used anymore use NoDisplay true to hide the service suggestedName name to base the file on if a service with such name already exists a prefix will be added to make it unique menuId If provided menuId will be set to the menu id to use for the KService reservedMenuIds If provided the path and menu id will be chosen in such a way that the new menu id does not conflict with any of the reservedMenuIds The path to use for the new KService"}, {"type": "function", "name": "KService::serviceByDesktopName", "url": "classKService.html#a6261ba7fcb0954a985fdba31dc6b6cf7", "keyword": "serviceByDesktopName KService::serviceByDesktopName KService", "text": "For instance or Note that the extension is implicit This is the recommended method safe even if the user moves stuff but note that it assumes that no two entries have the same filename _name the name of the configuration file a pointer to the requested service or 0 if the service is unknown Very important Don t store the result in a KService*"}, {"type": "function", "name": "KService::serviceByDesktopPath", "url": "classKService.html#aec0c50b72ff1b356a2fba1e0c4855967", "keyword": "serviceByDesktopPath KService::serviceByDesktopPath KService", "text": "It s usually better to use serviceByStorageId() instead _path the path of the configuration file a pointer to the requested service or 0 if the service is unknown Very important Don t store the result in a KService*"}, {"type": "function", "name": "KService::serviceByMenuId", "url": "classKService.html#ad07451b574cbd89a315ed3e38a064aa9", "keyword": "serviceByMenuId KService::serviceByMenuId KService", "text": "_menuId the menu id of the service a pointer to the requested service or 0 if the service is unknown Very important Don t store the result in a KService*"}, {"type": "function", "name": "KService::serviceByStorageId", "url": "classKService.html#a18103ccedb6d50a2148af738ca78c721", "keyword": "serviceByStorageId KService::serviceByStorageId KService", "text": "This function will try very hard to find a matching service _storageId the storage id or desktop-file path of the service a pointer to the requested service or 0 if the service is unknown Very important Don t store the result in a KService*"}, {"type": "enum", "name": "KSycocaEntry::KSycocaType", "url": "classKSycocaEntry.html#a8d7866d3d103bc78626732de5abed81e", "keyword": "KSycocaType KSycocaEntry::KSycocaType KSycocaEntry KSycocaType KSycocaEntry::KSycocaType KSycocaEntry KSycocaType KSycocaEntry::KSycocaType KSycocaEntry KSycocaType KSycocaEntry::KSycocaType KSycocaEntry", "text": "A KSycocaType is a code out of the KSycocaType enum assigned to each class type derived from KSycocaEntry To use it call the macro K_SYCOCATYPE( your_typecode, parent_class ) at the top of your class definition"}, {"type": "class", "name": "KServiceAction", "url": "classKServiceAction.html", "keyword": "KServiceAction", "text": "KService::actions"}, {"type": "function", "name": "KServiceAction::KServiceAction", "url": "classKServiceAction.html#a391a44303e194bea7cb14de085649702", "keyword": "KServiceAction KServiceAction::KServiceAction KServiceAction", "text": "Normally you don t have to do this KService creates the actions when parsing the desktop file"}, {"type": "function", "name": "KServiceAction::KServiceAction", "url": "classKServiceAction.html#a464644a98ce5e7b7869efd2f0cd06b5d", "keyword": "KServiceAction KServiceAction::KServiceAction KServiceAction", "text": "Needed for operator"}, {"type": "function", "name": "KServiceAction::KServiceAction", "url": "classKServiceAction.html#ae8b8799c9f85f8ed762e8d2a7f009d35", "keyword": "KServiceAction KServiceAction::KServiceAction KServiceAction", "text": ""}, {"type": "function", "name": "KServiceAction::~KServiceAction", "url": "classKServiceAction.html#a8ead7660b2844d4f03ef5301090c88c9", "keyword": "KServiceAction::~KServiceAction KServiceAction", "text": ""}, {"type": "function", "name": "KServiceAction::data", "url": "classKServiceAction.html#acb963c839e5aa44baa0e67d70aee0ef9", "keyword": "data KServiceAction::data KServiceAction", "text": "the action s internal data"}, {"type": "function", "name": "KServiceAction::exec", "url": "classKServiceAction.html#a73a2f64dcc266290b7510f5f5a846ace", "keyword": "exec KServiceAction::exec KServiceAction", "text": "the action s exec command as defined by the Exec key in the desktop action group"}, {"type": "function", "name": "KServiceAction::icon", "url": "classKServiceAction.html#aaaeb3432ff030c989b67f2b02a3e2a79", "keyword": "icon KServiceAction::icon KServiceAction", "text": "the action s icon as defined by the Icon key in the desktop action group"}, {"type": "function", "name": "KServiceAction::isSeparator", "url": "classKServiceAction.html#a5bcb10621b0f0c2a47063351e0c97a53", "keyword": "isSeparator KServiceAction::isSeparator KServiceAction", "text": "This is true when the Actions key contains"}, {"type": "function", "name": "KServiceAction::name", "url": "classKServiceAction.html#a522d2c46798729df69b976881e0fc763", "keyword": "name KServiceAction::name KServiceAction", "text": "the action s internal name For instance Actions Setup and the group Desktop Action Setup define an action with the name"}, {"type": "function", "name": "KServiceAction::noDisplay", "url": "classKServiceAction.html#ad8a6ed54b53a2ba65c86e6e13eaee467", "keyword": "noDisplay KServiceAction::noDisplay KServiceAction", "text": "This is useful for having actions with a known name that the code looks for explicitly like Setup and Root for kscreensaver actions and which should not appear in popup menus true to suppress this service"}, {"type": "function", "name": "KServiceAction::operator=", "url": "classKServiceAction.html#a5475dac23bf0595172698613b96d36b3", "keyword": "operator= KServiceAction::operator= KServiceAction", "text": ""}, {"type": "function", "name": "KServiceAction::setData", "url": "classKServiceAction.html#acd5bd26ea009c04720b0fb65d5f79990", "keyword": "setData KServiceAction::setData KServiceAction", "text": ""}, {"type": "function", "name": "KServiceAction::text", "url": "classKServiceAction.html#a2606ad4002d66f77df08b0dc45cffcbc", "keyword": "text KServiceAction::text KServiceAction", "text": "the action s text as defined by the Name key in the desktop action group"}, {"type": "class", "name": "KServiceGroup", "url": "classKServiceGroup.html", "keyword": "KServiceGroup", "text": "This class is typically used like this Represents a group of services"}, {"type": "enum", "name": "KServiceGroup::EntriesOption", "url": "classKServiceGroup.html#a353eb95e9c765011b878f725152ddd61", "keyword": "EntriesOption KServiceGroup::EntriesOption KServiceGroup", "text": ""}, {"type": "function", "name": "KServiceGroup::KServiceGroup", "url": "classKServiceGroup.html#aa8c35fdbaf9bed3da282e7719f1c2a48", "keyword": "KServiceGroup KServiceGroup::KServiceGroup KServiceGroup", "text": "name the name of the service group"}, {"type": "function", "name": "KServiceGroup::KServiceGroup", "url": "classKServiceGroup.html#a4afbe0ca4bdee578e1397ab448f496c1", "keyword": "KServiceGroup KServiceGroup::KServiceGroup KServiceGroup", "text": "_fullpath full path to the config file _relpath relative path to the config file"}, {"type": "function", "name": "KServiceGroup::allowInline", "url": "classKServiceGroup.html#a9e135302533265025d7e6ef807d8033f", "keyword": "allowInline KServiceGroup::allowInline KServiceGroup", "text": "true if we allow to inline menu"}, {"type": "function", "name": "KServiceGroup::baseGroupName", "url": "classKServiceGroup.html#ab54c4ba1787f8e05af1d1a31ad517eb1", "keyword": "baseGroupName KServiceGroup::baseGroupName KServiceGroup", "text": "By default is the kcontrol base group and is the screensavers base group This allows moving the groups without breaking those apps The base group is defined by the X-KDE-BaseGroup key in the directory file the base group name or null if no base group"}, {"type": "function", "name": "KServiceGroup::caption", "url": "classKServiceGroup.html#abd2fc42c31919c2f4c156730f3249f41", "keyword": "caption KServiceGroup::caption KServiceGroup", "text": "the caption of this group"}, {"type": "function", "name": "KServiceGroup::childCount", "url": "classKServiceGroup.html#a299819cfb1c319f5cf5605ca3d8de082", "keyword": "childCount KServiceGroup::childCount KServiceGroup", "text": "the number of child services"}, {"type": "function", "name": "KServiceGroup::comment", "url": "classKServiceGroup.html#a1e345bca464a0d8cc6be246bf55e827d", "keyword": "comment KServiceGroup::comment KServiceGroup", "text": "the descriptive comment for the group if there is one or QString() if not set"}, {"type": "function", "name": "KServiceGroup::directoryEntryPath", "url": "classKServiceGroup.html#a7e0315bd3f803785e9e08a3d4a16551c", "keyword": "directoryEntryPath KServiceGroup::directoryEntryPath KServiceGroup", "text": "The path is either absolute or relative to the resource"}, {"type": "function", "name": "KServiceGroup::entries", "url": "classKServiceGroup.html#a53c3ee84bbeeb4b52effb50af9b13e78", "keyword": "entries KServiceGroup::entries KServiceGroup", "text": "sorted true to sort items excludeNoDisplay true to exclude items marked allowSeparators true to allow separator items to be included sortByGenericName true to sort GenericName+Name instead of Name+GenericName the list of entries"}, {"type": "function", "name": "KServiceGroup::entries", "url": "classKServiceGroup.html#a78a65875af07f209221912b6c8c56c5b", "keyword": "entries KServiceGroup::entries KServiceGroup", "text": "sorted true to sort items the list of entried"}, {"type": "function", "name": "KServiceGroup::groupEntries", "url": "classKServiceGroup.html#a84fbc01ae305b700ce2360b2182f2476", "keyword": "groupEntries KServiceGroup::groupEntries KServiceGroup", "text": ""}, {"type": "function", "name": "KServiceGroup::icon", "url": "classKServiceGroup.html#aa10d4023401b230a5a225fe4cb0d43a4", "keyword": "icon KServiceGroup::icon KServiceGroup", "text": "the name of the icon associated with the group or QString() if not set"}, {"type": "function", "name": "KServiceGroup::inlineAlias", "url": "classKServiceGroup.html#a66aae636c15539cf29c9c865b809479e", "keyword": "inlineAlias KServiceGroup::inlineAlias KServiceGroup", "text": "true to show an inline alias item into menu"}, {"type": "function", "name": "KServiceGroup::inlineValue", "url": "classKServiceGroup.html#adec0bbe2030016f739abdf9c706d3a90", "keyword": "inlineValue KServiceGroup::inlineValue KServiceGroup", "text": "inline limite value"}, {"type": "function", "name": "KServiceGroup::layoutInfo", "url": "classKServiceGroup.html#a567aa69be9527394aca2fd5fff6bd716", "keyword": "layoutInfo KServiceGroup::layoutInfo KServiceGroup", "text": "Returns information related to the layout of services in this group"}, {"type": "function", "name": "KServiceGroup::noDisplay", "url": "classKServiceGroup.html#a699192f67a0c0fab4c754aa1b299fd9a", "keyword": "noDisplay KServiceGroup::noDisplay KServiceGroup", "text": "if this group should be hidden from menus while still being in ksycoca true to hide this service group false to display it"}, {"type": "function", "name": "KServiceGroup::relPath", "url": "classKServiceGroup.html#a43bafb47424325de346e96789ae74517", "keyword": "relPath KServiceGroup::relPath KServiceGroup", "text": "the service group s relative path"}, {"type": "function", "name": "KServiceGroup::serviceEntries", "url": "classKServiceGroup.html#a7607c43c9ec641b45c41df20684550b5", "keyword": "serviceEntries KServiceGroup::serviceEntries KServiceGroup", "text": ""}, {"type": "function", "name": "KServiceGroup::setLayoutInfo", "url": "classKServiceGroup.html#a0d4b6693d371909b46853d2123287ab0", "keyword": "setLayoutInfo KServiceGroup::setLayoutInfo KServiceGroup", "text": "Sets information related to the layout of services in this group"}, {"type": "function", "name": "KServiceGroup::showEmptyMenu", "url": "classKServiceGroup.html#a9a87a88a51cc62c833c141450025509e", "keyword": "showEmptyMenu KServiceGroup::showEmptyMenu KServiceGroup", "text": "true to show this service group as menu entry is empty false to hide it"}, {"type": "function", "name": "KServiceGroup::showInlineHeader", "url": "classKServiceGroup.html#a95ba636215b7eed1aed8771a05d6acff", "keyword": "showInlineHeader KServiceGroup::showInlineHeader KServiceGroup", "text": "true to show an inline header into menu"}, {"type": "function", "name": "KServiceGroup::suppressGenericNames", "url": "classKServiceGroup.html#a0d50ba9f5d9088b88388e2fedca4d40a", "keyword": "suppressGenericNames KServiceGroup::suppressGenericNames KServiceGroup", "text": "E.g The group might want to suppress the generic name since it s redundant in this particular context"}, {"type": "function", "name": "KServiceGroup::childGroup", "url": "classKServiceGroup.html#a496c863535654d966a8cc264807cdbc7", "keyword": "childGroup KServiceGroup::childGroup KServiceGroup", "text": "parent the name of the service s parent the services group"}, {"type": "function", "name": "KServiceGroup::group", "url": "classKServiceGroup.html#a467aa6329a262f56c9b834bc444d53cc", "keyword": "group KServiceGroup::group KServiceGroup", "text": "relPath the path of the service group the group with the given relative path name"}, {"type": "function", "name": "KServiceGroup::root", "url": "classKServiceGroup.html#a15af7f321c6daae6e1ec9fe054b86870", "keyword": "root KServiceGroup::root KServiceGroup", "text": "the root service group"}, {"type": "function", "name": "KServiceGroup::addEntry", "url": "classKServiceGroup.html#ae69e711f3692bf56fa3ed4425a5aa836", "keyword": "addEntry KServiceGroup::addEntry KServiceGroup", "text": "Add a service to this group"}, {"type": "class", "name": "KServiceOffer", "url": "classKServiceOffer.html", "keyword": "KServiceOffer", "text": "This class holds the user-specific preferences of a service whether it can be a default offer or not how big is the preference for this offer Basically it is a reference to a KService a number that represents the user s preference bigger is better and a flag whether the KService can be used as default KService"}, {"type": "function", "name": "KServiceOffer::KServiceOffer", "url": "classKServiceOffer.html#ab6cbeb4a8b3b05e26a7ac159c33f1a3b", "keyword": "KServiceOffer KServiceOffer::KServiceOffer KServiceOffer", "text": ""}, {"type": "function", "name": "KServiceOffer::KServiceOffer", "url": "classKServiceOffer.html#a507acda1e706a54768b37b2295ab8202", "keyword": "KServiceOffer KServiceOffer::KServiceOffer KServiceOffer", "text": "Shallow copy the KService will not be copied"}, {"type": "function", "name": "KServiceOffer::KServiceOffer", "url": "classKServiceOffer.html#a550ffc6a74e30c8f61d456a6e4c8e738", "keyword": "KServiceOffer KServiceOffer::KServiceOffer KServiceOffer", "text": "service a pointer to the KService pref the user s preference value must be positive bigger is better mimeTypeInheritanceLevel level of mimetype inheritance which allows this service to handling the mimetype 0 if no inheritance involved 1 for parent mimetype etc allowedAsDefault true if the service should be used as default"}, {"type": "function", "name": "KServiceOffer::allowAsDefault", "url": "classKServiceOffer.html#a14b96dedadeee395e312ac2c9ddd0027", "keyword": "allowAsDefault KServiceOffer::allowAsDefault KServiceOffer", "text": "Left Click in a file manager or KRun in general true if the service is a allowed as default"}, {"type": "function", "name": "KServiceOffer::isValid", "url": "classKServiceOffer.html#a62c7fd553d64d456ae3a04c2b97b485b", "keyword": "isValid KServiceOffer::isValid KServiceOffer", "text": "A service is valid if its preference value is positive true if the service offer is valid"}, {"type": "function", "name": "KServiceOffer::mimeTypeInheritanceLevel", "url": "classKServiceOffer.html#a09240e965895ca3419228f3e005a1bdc", "keyword": "mimeTypeInheritanceLevel KServiceOffer::mimeTypeInheritanceLevel KServiceOffer", "text": ""}, {"type": "function", "name": "KServiceOffer::operator<", "url": "classKServiceOffer.html#a5b0c65024b33446b974465c0fe66879b", "keyword": "operator< KServiceOffer::operator< KServiceOffer", "text": ""}, {"type": "function", "name": "KServiceOffer::operator=", "url": "classKServiceOffer.html#a4d7ed2bd5da92d5fc64b3b07f9ab307d", "keyword": "operator= KServiceOffer::operator= KServiceOffer", "text": ""}, {"type": "function", "name": "KServiceOffer::preference", "url": "classKServiceOffer.html#ab92f41e90bfce9dfa711750d8125be21", "keyword": "preference KServiceOffer::preference KServiceOffer", "text": "the preference number negative numbers will be returned by invalid service offers"}, {"type": "function", "name": "KServiceOffer::service", "url": "classKServiceOffer.html#abadcf3501e56320463a1ec6defff933f", "keyword": "service KServiceOffer::service KServiceOffer", "text": "the service this offer is about can be 0 in valid offers or when not set"}, {"type": "function", "name": "KServiceOffer::setMimeTypeInheritanceLevel", "url": "classKServiceOffer.html#a4d21c872c1a3b419cdfb095143e766d0", "keyword": "setMimeTypeInheritanceLevel KServiceOffer::setMimeTypeInheritanceLevel KServiceOffer", "text": ""}, {"type": "function", "name": "KServiceOffer::setPreference", "url": "classKServiceOffer.html#a49890df3f0e95917b6d5996bb269727c", "keyword": "setPreference KServiceOffer::setPreference KServiceOffer", "text": "Set the preference number only for KMimeTypeTrader"}, {"type": "class", "name": "KServiceType", "url": "classKServiceType.html", "keyword": "KServiceType", "text": "For instance which is the type of all koffice filters is a service type In order to discover services of a given type using KServiceTypeTrader Service types are stored as desktop files in KService KServiceTypeTrader"}, {"type": "function", "name": "KServiceType::KServiceType", "url": "classKServiceType.html#a5e2c4103211595c5e6bd8e7de9905f77", "keyword": "KServiceType KServiceType::KServiceType KServiceType", "text": "config the configuration file"}, {"type": "function", "name": "KServiceType::comment", "url": "classKServiceType.html#ad6e8a1178ca82a77d013d64842883d08", "keyword": "comment KServiceType::comment KServiceType", "text": "the comment or QString()"}, {"type": "function", "name": "KServiceType::inherits", "url": "classKServiceType.html#a2cb6414c67bb92faa6937276fee54a1d", "keyword": "inherits KServiceType::inherits KServiceType", "text": "true if this servicetype is or inherits from servTypeName"}, {"type": "function", "name": "KServiceType::isDerived", "url": "classKServiceType.html#a24d829365269c0f272c91d2e119f733f", "keyword": "isDerived KServiceType::isDerived KServiceType", "text": "true if this service type inherits another one parentServiceType()"}, {"type": "function", "name": "KServiceType::parentServiceType", "url": "classKServiceType.html#a228bf392086f328de39a51cd2e669c42", "keyword": "parentServiceType KServiceType::parentServiceType KServiceType", "text": "the parent service type or QString null if not set isDerived()"}, {"type": "function", "name": "KServiceType::parentType", "url": "classKServiceType.html#aa5825091d40517e7e7d7b1456d2a1841", "keyword": "parentType KServiceType::parentType KServiceType", "text": "Pointer to parent service type"}, {"type": "function", "name": "KServiceType::propertyDef", "url": "classKServiceType.html#a56408bda283e010c8afd4874e7a25df8", "keyword": "propertyDef KServiceType::propertyDef KServiceType", "text": "_name the name of the property the property type or null if not found propertyDefNames"}, {"type": "function", "name": "KServiceType::propertyDefNames", "url": "classKServiceType.html#a326e1487d960b768f7a00168303a0e1d", "keyword": "propertyDefNames KServiceType::propertyDefNames KServiceType", "text": "Those are properties of the services implementing this servicetype For instance means that all kdevelop plugins have in their desktop file a line like"}, {"type": "function", "name": "KServiceType::propertyDefs", "url": "classKServiceType.html#a45c8e8a9bf905820e6756c17ea18b631", "keyword": "propertyDefs KServiceType::propertyDefs KServiceType", "text": "for KBuildServiceTypeFactory"}, {"type": "function", "name": "KServiceType::serviceOffersOffset", "url": "classKServiceType.html#a9468a81a19d3984bcd2151b70dbb2724", "keyword": "serviceOffersOffset KServiceType::serviceOffersOffset KServiceType", "text": ""}, {"type": "function", "name": "KServiceType::setServiceOffersOffset", "url": "classKServiceType.html#af501ae7b7f95844887fe9e6a709a515d", "keyword": "setServiceOffersOffset KServiceType::setServiceOffersOffset KServiceType", "text": "only used by kbuildsycoca Register offset into offers list"}, {"type": "function", "name": "KServiceType::allServiceTypes", "url": "classKServiceType.html#a1b12478f9d3c657902d5b3bb5db044f5", "keyword": "allServiceTypes KServiceType::allServiceTypes KServiceType", "text": "Useful for showing the list of available servicetypes in a listbox for example More memory consuming than the ones above don t use unless really necessary the list of all services"}, {"type": "function", "name": "KServiceType::serviceType", "url": "classKServiceType.html#acdcbdb4e036d2b49432db9c71591860c", "keyword": "serviceType KServiceType::serviceType KServiceType", "text": "VERY IMPORTANT don t store the result in a KServiceType _name the name of the service type to search the pointer to the service type or 0"}, {"type": "class", "name": "KServiceTypeTrader", "url": "classKServiceTypeTrader.html", "keyword": "KServiceTypeTrader", "text": "Basically KServiceTypeTrader provides a way for an application to query all KDE services that is applications components plugins that match a specific set of requirements This allows to find specific services at run-time without having to hard-code their names and/or paths For anything relating to mimetypes type of files ignore KServiceTypeTrader and use KMimeTypeTrader instead Example If you want to find all plugins for your application you would define a KMyApp/Plugin servicetype and then you can query the trader for it You can add a constraint in the For instance Please note that when including property names containing arithmetic operators like or then you have to put brackets around the property name in order to correctly separate arithmetic operations from the name So for example a constraint expression like needs to be written as otherwise it could also be interpreted as Subtract the numeric value of the property and from the property and make sure it is greater than 4 Instead of the other meaning make sure that the numeric value of is greater than 4 KMimeTypeTrader KService"}, {"type": "function", "name": "KServiceTypeTrader::~KServiceTypeTrader", "url": "classKServiceTypeTrader.html#a70973235787ca10b98c55f05cea142f2", "keyword": "KServiceTypeTrader::~KServiceTypeTrader KServiceTypeTrader", "text": ""}, {"type": "function", "name": "KServiceTypeTrader::defaultOffers", "url": "classKServiceTypeTrader.html#a58b58abad9cf71eb5a36955ad23f7110", "keyword": "defaultOffers KServiceTypeTrader::defaultOffers KServiceTypeTrader", "text": "The sorting will be the one coming from the InitialPreference in the desktop files and services disabled by the user will still be listed here This is used for buttons in GUIs"}, {"type": "function", "name": "KServiceTypeTrader::preferredService", "url": "classKServiceTypeTrader.html#a4b69ec32ec4b72fee16e07ce9b5a3bdd", "keyword": "preferredService KServiceTypeTrader::preferredService KServiceTypeTrader", "text": "serviceType the service type e.g the preferred service or 0 if no service is available"}, {"type": "function", "name": "KServiceTypeTrader::query", "url": "classKServiceTypeTrader.html#ae19621269e9dee8814b3e1c1573b6333", "keyword": "query KServiceTypeTrader::query KServiceTypeTrader", "text": "It will return a list of services that match your specifications The only required parameter is the service type This is something like text/plain or text/html The constraint parameter is used to limit the possible choices returned based on the constraints you give it The constraint language is rather full The most common keywords are AND OR NOT IN and EXIST all used in an almost spoken-word form An example is The keys used in the query Type ServiceType Exec are all fields found in the desktop files servicetype A service type like KMyApp/Plugin or KFilePlugin constraint A constraint to limit the choices returned QString() to get all services of the given servicetype A list of services that satisfy the query"}, {"type": "function", "name": "KServiceTypeTrader::applyConstraints", "url": "classKServiceTypeTrader.html#a230009b23e071259ca6e656cbaf555da", "keyword": "applyConstraints KServiceTypeTrader::applyConstraints KServiceTypeTrader", "text": "public for KMimeTypeTrader"}, {"type": "function", "name": "KServiceTypeTrader::createInstanceFromQuery", "url": "classKServiceTypeTrader.html#a5365b1ac89923692060779c9b165d3c0", "keyword": "createInstanceFromQuery KServiceTypeTrader::createInstanceFromQuery KServiceTypeTrader", "text": "Example serviceType the type of service for which to find a plugin constraint an optional constraint to pass to the trader see KTrader parent the parent object for the part itself args A list of arguments passed to the service component error The string passed here will contain an error description A pointer to the newly created object or a null pointer if the factory was unable to create an object of the given type"}, {"type": "function", "name": "KServiceTypeTrader::createInstanceFromQuery", "url": "classKServiceTypeTrader.html#ad1ae0f400f321156a59cd6b60c94cb8f", "keyword": "createInstanceFromQuery KServiceTypeTrader::createInstanceFromQuery KServiceTypeTrader", "text": "This method works like createInstanceFromQuery(const QString&, const QString&, QObject*, const QVariantList&, QString*) but you can specify an additional parent widget This is important for a KPart for example serviceType the type of service for which to find a plugin parentWidget the parent widget for the plugin parent the parent object for the part itself constraint an optional constraint to pass to the trader see KTrader args A list of arguments passed to the service component error The string passed here will contain an error description A pointer to the newly created object or a null pointer if the factory was unable to create an object of the given type"}, {"type": "function", "name": "KServiceTypeTrader::self", "url": "classKServiceTypeTrader.html#a68ee4d96ac56671d763f1525b178a38c", "keyword": "self KServiceTypeTrader::self KServiceTypeTrader", "text": "You will need to use this to access the KServiceTypeTrader functionality since the constructors are protected Static KServiceTypeTrader instance"}, {"type": "class", "name": "KSycoca", "url": "classKSycoca.html", "keyword": "KSycoca", "text": "Read-only SYstem COnfiguration CAche"}, {"type": "enum", "name": "KSycoca::DatabaseType", "url": "classKSycoca.html#ae1bd6d33a803e229b3aaf2d9f8e63fb5", "keyword": "DatabaseType KSycoca::DatabaseType KSycoca", "text": "absoluteFilePath()"}, {"type": "signal", "name": "KSycoca::databaseChanged", "url": "classKSycoca.html#ae8bb003b63251a73a3c9f126e2aa184a", "keyword": "databaseChanged KSycoca::databaseChanged KSycoca", "text": "Example after creating a desktop file in KOpenWithDialog it must wait until kbuildsycoca5 finishes until the KService::Ptr is available Other examples anything that displays a list of apps or plugins to the user and which is always visible otherwise querying sycoca before showing could be enough"}, {"type": "signal", "name": "KSycoca::databaseChanged", "url": "classKSycoca.html#a2f5f1f911b215b461c0b5991e6d24a2a", "keyword": "databaseChanged KSycoca::databaseChanged KSycoca", "text": "Another example after creating a desktop file in KOpenWithDialog it must wait until kbuildsycoca5 finishes until the KService::Ptr is available changedResources List of resources where changes were detected This can include the following resources as defined in KStandardDirs apps xdgdata-apps services servicetypes xdgdata-mime"}, {"type": "function", "name": "KSycoca::KSycoca", "url": "classKSycoca.html#a68829170aff3395a827d4b879d75cd46", "keyword": "KSycoca KSycoca::KSycoca KSycoca", "text": ""}, {"type": "function", "name": "KSycoca::addFactory", "url": "classKSycoca.html#a9c272f63b6942b484bcb780962650d36", "keyword": "addFactory KSycoca::addFactory KSycoca", "text": "add a factory"}, {"type": "function", "name": "KSycoca::allResourceDirs", "url": "classKSycoca.html#a044141a1b252bbf1c567c8a79755fb79", "keyword": "allResourceDirs KSycoca::allResourceDirs KSycoca", "text": "returns all directories with information stored inside sycoca"}, {"type": "function", "name": "KSycoca::ensureCacheValid", "url": "classKSycoca.html#af7c385f9cd96bcc8bd747d78250ec93a", "keyword": "ensureCacheValid KSycoca::ensureCacheValid KSycoca", "text": "If the database was modified by another process close it so the next use reopens it If the desktop files have been modified more recently than the database update it Update the sycoca file from the files on disk e.g desktop files or mimeapps.list You don t normally have to call this because the next use of KSycoca e.g via KMimeTypeTrader KService etc will notice that the sycoca database is out of date by looking a directory modification times In addition in a full KDE session kded monitors directories to detect changes This is however useful for GUIs that allow to create a new desktop file and then want to ensure it is available immediately in KSycoca This is also useful after modifying a mimeapps.list file KBuildSycocaProgressDialog can also be used instead of this method in GUI apps 5.15"}, {"type": "function", "name": "KSycoca::findEntry", "url": "classKSycoca.html#a75d5a2963ac92164bec49312025a28a5", "keyword": "findEntry KSycoca::findEntry KSycoca", "text": "called by factories in read-only mode This is how factories get a stream to an entry"}, {"type": "function", "name": "KSycoca::findFactory", "url": "classKSycoca.html#a7d9063ed9bc39cc3048dd55beabe3d6e", "keyword": "findFactory KSycoca::findFactory KSycoca", "text": "called by factories in read-only mode Returns stream() but positioned for reading this factory 0 on error"}, {"type": "function", "name": "KSycoca::isBuilding", "url": "classKSycoca.html#a64f1db5717cb6405b97a3603365a4e58", "keyword": "isBuilding KSycoca::isBuilding KSycoca", "text": "true if building i.e if a KBuildSycoca"}, {"type": "function", "name": "KSycoca::language", "url": "classKSycoca.html#a11a087297d1688850f9d5abfb3992c4e", "keyword": "language KSycoca::language KSycoca", "text": "returns language stored inside database"}, {"type": "function", "name": "KSycoca::timeStamp", "url": "classKSycoca.html#a0140aeb8c4771b5cf786472385d1e05b", "keyword": "timeStamp KSycoca::timeStamp KSycoca", "text": "returns timestamp of database The database contains all changes made before this time and might contain changes made after that"}, {"type": "function", "name": "KSycoca::updateSignature", "url": "classKSycoca.html#a55e154170e2e221479a1b5e8a144be87", "keyword": "updateSignature KSycoca::updateSignature KSycoca", "text": "returns update signature of database Signature that keeps track of changes to Touching this file causes the database to be recreated from scratch"}, {"type": "function", "name": "KSycoca::absoluteFilePath", "url": "classKSycoca.html#ad6d1393887e2e42c905b92b3f7f2c0e0", "keyword": "absoluteFilePath KSycoca::absoluteFilePath KSycoca", "text": "returns absolute file path of the database For the global database type the database is searched under the share/ksycoca install path Otherwise the value from the environment variable KDESYCOCA is returned if set If not set the path is built based on QStandardPaths cache save location typically cache on Unix Since 5.15 the filename includes language and a sha1 of the directories in GenericDataLocation i.e the directories with the desktop files This allows to have one database per setup when using different install prefixes or when switching languages"}, {"type": "function", "name": "KSycoca::disableAutoRebuild", "url": "classKSycoca.html#af1b69ada52521c26f5c2717828e23f02", "keyword": "disableAutoRebuild KSycoca::disableAutoRebuild KSycoca", "text": "disables launching of kbuildsycoca since 5.15 it only outputs a warning"}, {"type": "function", "name": "KSycoca::flagError", "url": "classKSycoca.html#aa541200cf521c85d770b0e840d0b96f6", "keyword": "flagError KSycoca::flagError KSycoca", "text": ""}, {"type": "function", "name": "KSycoca::isAvailable", "url": "classKSycoca.html#a77faf824bc48efbb1d913b8ba031b479", "keyword": "isAvailable KSycoca::isAvailable KSycoca", "text": "true if the ksycoca database is available This is usually the case except if KDE isn t installed yet or before kded is started"}, {"type": "function", "name": "KSycoca::isChanged", "url": "classKSycoca.html#a060d1b0f2da2c58ffc0280a2a1f862ea", "keyword": "isChanged KSycoca::isChanged KSycoca", "text": "KStandardDirs for the various resource types This method is meant to be called from the GUI thread only use the signal databaseChanged(QStringList) instead"}, {"type": "function", "name": "KSycoca::self", "url": "classKSycoca.html#a3f3686ce2ff31b851ac1a08d7c3e1547", "keyword": "self KSycoca::self KSycoca", "text": ""}, {"type": "function", "name": "KSycoca::version", "url": "classKSycoca.html#a29fac48ab243076cc3c7744b5a54ab8b", "keyword": "version KSycoca::version KSycoca", "text": "the compiled-in version i.e the one used when writing a new ksycoca"}, {"type": "function", "name": "KSycoca::KSycoca", "url": "classKSycoca.html#aeac39f63ee8c2d7462315a55c5398024", "keyword": "KSycoca KSycoca::KSycoca KSycoca", "text": "Building database"}, {"type": "class", "name": "KSycocaEntry", "url": "classKSycocaEntry.html", "keyword": "KSycocaEntry", "text": "You can t create an instance of KSycocaEntry but it provides the common functionality for servicetypes and services"}, {"type": "class", "name": "KToolInvocation", "url": "classKToolInvocation.html", "keyword": "KToolInvocation", "text": "The way a service gets started depends on the X-DBUS-StartupType entry in the desktop file of the service There are three possibilities X-DBUS-StartupType None default Always start a new service don t wait till the service registers with D-Bus X-DBUS-StartupType Multi Always start a new service wait until the service has registered with D-Bus X-DBUS-StartupType Unique Only start the service if it isn t already running wait until the service has registered with D-Bus The desktop file can specify the name that the application will use when registering using X-DBUS-ServiceName org.domain.mykapp Otherwise org.kde.binaryname is assumed The static members apart from self() have to be called from the QApplication main thread Calls to members are only allowed if there is a Q(Core) Application object created If you call the members with signal/slot connections across threads you can t use the return values If a function is called from the wrong thread and it has a return value is returned Investigate if this is really needed or if D-Bus is threadsafe anyway For more details see techbase"}, {"type": "signal", "name": "KToolInvocation::kapplication_hook", "url": "classKToolInvocation.html#a567667733c2b9c2b5db7c0e422f57940", "keyword": "kapplication_hook KToolInvocation::kapplication_hook KToolInvocation", "text": ""}, {"type": "slot", "name": "KToolInvocation::invokeBrowser", "url": "classKToolInvocation.html#ade3fd8ddb1f3c2c4b48c435399769eb2", "keyword": "invokeBrowser KToolInvocation::invokeBrowser KToolInvocation", "text": "Note that you should only do this when you know for sure that the browser can handle the URL i.e its mimetype In doubt if the URL can point to an image or anything else than HTML prefer to use new KRun( url ) See also a href techbase for a discussion of invokeBrowser vs KRun url The destination address startup_id for app startup notification for none empty string is the default since 5.0 use QDesktopServices::openUrl(url)"}, {"type": "slot", "name": "KToolInvocation::invokeMailer", "url": "classKToolInvocation.html#a6358ec7c69eae0302a858cf0cd37f8e6", "keyword": "invokeMailer KToolInvocation::invokeMailer KToolInvocation", "text": "address The destination address subject Subject string Can be QString() startup_id for app startup notification for none empty string is the default since 5.0 use QDesktopServices::openUrl(mailtoURL) using QUrl::setPath(address) and a query item of for the subject"}, {"type": "slot", "name": "KToolInvocation::invokeMailer", "url": "classKToolInvocation.html#af65bcb6710530933acc9e784811bc9a9", "keyword": "invokeMailer KToolInvocation::invokeMailer KToolInvocation", "text": "mailtoURL A mailto URL startup_id for app startup notification for none empty string is the default allowAttachments whether attachments specified in mailtoURL should be honoured The default is false do not honor requests for attachments since 5.0 use QDesktopServices::openUrl(mailtoURL)"}, {"type": "slot", "name": "KToolInvocation::invokeMailer", "url": "classKToolInvocation.html#aafbfe267ee237aba00bd3ef57965e8a5", "keyword": "invokeMailer KToolInvocation::invokeMailer KToolInvocation", "text": "All parameters are optional to The destination address cc The Cc field bcc The Bcc field subject Subject string body A string containing the body of the mail exclusive with messageFile messageFile A file URL containing the body of the mail exclusive with body currently unsupported attachURLs List of URLs to be attached to the mail startup_id for app startup notification for none empty string is the default"}, {"type": "slot", "name": "KToolInvocation::invokeTerminal", "url": "classKToolInvocation.html#a3d80bb3c878c35d0eddcee400ea82901", "keyword": "invokeTerminal KToolInvocation::invokeTerminal KToolInvocation", "text": "command the command to execute can be empty workdir the initial working directory can be empty startup_id for app startup notification for none empty string is the default 4.1"}, {"type": "function", "name": "KToolInvocation::ensureKdeinitRunning", "url": "classKToolInvocation.html#afdc2f8e238c8ec797f52c649dcc159d2", "keyword": "ensureKdeinitRunning KToolInvocation::ensureKdeinitRunning KToolInvocation", "text": ""}, {"type": "function", "name": "KToolInvocation::kdeinitExec", "url": "classKToolInvocation.html#a5fda1c2e913e86a05407b4d05f091020", "keyword": "kdeinitExec KToolInvocation::kdeinitExec KToolInvocation", "text": "program name and arguments are converted to according to the local encoding and passed as is to kdeinit name Name of the program to start args Arguments to pass to the program error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored pid On success the process id of the new service will be written here If the pointer is 0 the argument will be ignored startup_id for app startup notification for none empty string is the default an error code indicating success 0 or failure 0"}, {"type": "function", "name": "KToolInvocation::kdeinitExecWait", "url": "classKToolInvocation.html#ad90aff22a1f166a9b5e748bdc9b27b02", "keyword": "kdeinitExecWait KToolInvocation::kdeinitExecWait KToolInvocation", "text": "Like kdeinitExec() but it waits till the program is finished As such it behaves similar to the system function name Name of the program to start args Arguments to pass to the program error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored pid On success the process id of the new service will be written here If the pointer is 0 the argument will be ignored startup_id for app startup notification for none empty string is the default an error code indicating success 0 or failure 0"}, {"type": "function", "name": "KToolInvocation::startServiceByDesktopName", "url": "classKToolInvocation.html#a83beeda68164e916eccd16b97dcca1e1", "keyword": "startServiceByDesktopName KToolInvocation::startServiceByDesktopName KToolInvocation", "text": "E.g _name the desktop name of the service URL if not empty this URL is passed to the service error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored serviceName On success serviceName contains the D-Bus service name under which this service is available If empty the service does not provide D-Bus services If the pointer is 0 the argument will be ignored pid On success the process id of the new service will be written here If the pointer is 0 the argument will be ignored startup_id for app startup notification for none empty string is the default noWait if set the function does not wait till the service is running an error code indicating success 0 or failure 0 since 5.0 use QDBusConnectionInterface::startService to start a unique application in order to make dbus calls to it after ensuring that it installs a dbus org.kde.serviceName.service file Otherwise just use QProcess or KRun"}, {"type": "function", "name": "KToolInvocation::startServiceByDesktopName", "url": "classKToolInvocation.html#a4fe38d3449d3735004c7bf58af668759", "keyword": "startServiceByDesktopName KToolInvocation::startServiceByDesktopName KToolInvocation", "text": "E.g _name the desktop name of the service URLs if not empty these URLs will be passed to the service error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored serviceName On success serviceName contains the D-Bus service name under which this service is available If empty the service does not provide D-Bus services If the pointer is 0 the argument will be ignored pid On success the process id of the new service will be written here If the pointer is 0 the argument will be ignored startup_id for app startup notification for none empty string is the default noWait if set the function does not wait till the service is running an error code indicating success 0 or failure 0 since 5.0 use QDBusConnectionInterface::startService to start a unique application in order to make dbus calls to it after ensuring that it installs a dbus org.kde.serviceName.service file Otherwise just use QProcess or KRun"}, {"type": "function", "name": "KToolInvocation::startServiceByDesktopPath", "url": "classKToolInvocation.html#afde14a2e6b17aff22e10ea435506a95a", "keyword": "startServiceByDesktopPath KToolInvocation::startServiceByDesktopPath KToolInvocation", "text": "E.g or _name the path of the desktop file URL if not empty this URL is passed to the service error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored serviceName On success serviceName contains the DCOP name under which this service is available If empty the service does not provide DCOP services If the pointer is 0 the argument will be ignored pid On success the process id of the new service will be written here If the pointer is 0 the argument will be ignored startup_id for app startup notification for none empty string is the default noWait if set the function does not wait till the service is running an error code indicating success 0 or failure 0 since 5.0 use QDBusConnectionInterface::startService to start a unique application in order to make dbus calls to it after ensuring that it installs a dbus org.kde.serviceName.service file Otherwise just use QProcess or KRun"}, {"type": "function", "name": "KToolInvocation::startServiceByDesktopPath", "url": "classKToolInvocation.html#ae9ef0bad1e0956e214d7c3cb3d68b28a", "keyword": "startServiceByDesktopPath KToolInvocation::startServiceByDesktopPath KToolInvocation", "text": "E.g or _name the path of the desktop file URLs if not empty these URLs will be passed to the service error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored serviceName On success serviceName contains the DCOP name under which this service is available If empty the service does not provide DCOP services If the pointer is 0 the argument will be ignored pid On success the process id of the new service will be written here If the pointer is 0 the argument will be ignored startup_id for app startup notification for none empty string is the default noWait if set the function does not wait till the service is running an error code indicating success 0 or failure 0 since 5.0 use QDBusConnectionInterface::startService to start a unique application in order to make dbus calls to it after ensuring that it installs a dbus org.kde.serviceName.service file Otherwise just use QProcess or KRun"}, {"type": "function", "name": "KToolInvocation::startServiceByName", "url": "classKToolInvocation.html#a41fc5e30117c3c878b4a4e5285873742", "keyword": "startServiceByName KToolInvocation::startServiceByName KToolInvocation", "text": "E.g _name the name of the service URL if not empty this URL is passed to the service error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored serviceName On success serviceName contains the DCOP name under which this service is available If empty the service does not provide DCOP services If the pointer is 0 the argument will be ignored pid On success the process id of the new service will be written here If the pointer is 0 the argument will be ignored startup_id for app startup notification for none empty string is the default noWait if set the function does not wait till the service is running an error code indicating success 0 or failure 0 Use startServiceByDesktopName or startServiceByDesktopPath"}, {"type": "function", "name": "KToolInvocation::startServiceByName", "url": "classKToolInvocation.html#acf71ec353e8a6092619afd6317ce785c", "keyword": "startServiceByName KToolInvocation::startServiceByName KToolInvocation", "text": "E.g _name the name of the service URLs if not empty these URLs will be passed to the service error On failure error contains a description of the error that occurred If the pointer is 0 the argument will be ignored serviceName On success serviceName contains the DCOP name under which this service is available If empty the service does not provide DCOP services If the pointer is 0 the argument will be ignored pid On success the process id of the new service will be written here If the pointer is 0 the argument will be ignored startup_id for app startup notification for none empty string is the default noWait if set the function does not wait till the service is running an error code indicating success 0 or failure 0 Use startServiceByDesktopName or startServiceByDesktopPath"}, {"type": "namespace", "name": "KServiceTypeProfile", "url": "namespaceKServiceTypeProfile.html", "keyword": "KServiceTypeProfile", "text": "KServiceTypeProfile represents the user s preferences for services of a service type list list of offers including initialPreference servicetype the service type the weighted and sorted offer list used by KServiceTypeTrader It consists of a list of services service offers for the service type that is sorted by the user s preference KServiceTypeTrader uses KServiceTypeProfile to get results sorted according to the user s preference KService KServiceType KServiceTypeTrader Represents the user s preferences for services of a service type"}, {"type": "function", "name": "KServiceTypeProfile::clearCache", "url": "namespaceKServiceTypeProfile.html#acca45a03c98ebe7e877387d3a166c877", "keyword": "clearCache KServiceTypeProfile::clearCache KServiceTypeProfile", "text": "for KServiceTypeFactory"}, {"type": "function", "name": "KServiceTypeProfile::deleteServiceTypeProfile", "url": "namespaceKServiceTypeProfile.html#ac4a7ae27ba46027edf92249e3a8ef7c5", "keyword": "deleteServiceTypeProfile KServiceTypeProfile::deleteServiceTypeProfile KServiceTypeProfile", "text": "Do not use this for mimetypes serviceType The name of the servicetype"}, {"type": "function", "name": "KServiceTypeProfile::hasProfile", "url": "namespaceKServiceTypeProfile.html#adfd25e203f95a9ca4dca312ff89da53e", "keyword": "hasProfile KServiceTypeProfile::hasProfile KServiceTypeProfile", "text": "for KServiceTypeTrader"}, {"type": "function", "name": "KServiceTypeProfile::writeServiceTypeProfile", "url": "namespaceKServiceTypeProfile.html#af8c7b2db27370ed098201bb27dab4e04", "keyword": "writeServiceTypeProfile KServiceTypeProfile::writeServiceTypeProfile KServiceTypeProfile", "text": "Do not use this for mimetypes serviceType The name of the servicetype services Ordered list of services from the preferred one to the least preferred one disabledServices List of services which are normally associated with this serviceType but which should be disabled i.e trader queries will not return them"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KService Plugin framework for desktop services Introduction KService provides a plugin framework for handling desktop services Services can be applications or libraries They can be bound to MIME types or handled by application specific code Usage If you are using CMake you need to have or similar in your CMakeLists.txt file and you need to link to KF5::Service"}]}