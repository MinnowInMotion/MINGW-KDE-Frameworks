{"name": "kcmutils-5.26.0", "fancyname": "KCMUtils", "docfields": [{"type": "class", "name": "KCModuleContainer", "url": "classKCModuleContainer.html", "keyword": "KCModuleContainer", "text": "The KCModuleContainer class is a convenience class for organizing a multiple set of KCModule KCModuleContainer is a sub class of KCModule and builds an interface mainly consisting of a tab widget where each tab contains one of the modules specified via one of the constructors KCModuleContainer can handle modules which requires root permissions What you most likely want is the KCMODULECONTAINER macro Sometimes it is of interest to detect in runtime whether a module should be loaded or not This can be achieved by sub classing KCModuleContainer doing the probing/testing checks and then manually call addModule for each module which should be displayed When all calls to addModule is done call finalize() which performs some necessary final steps Frans Englich"}, {"type": "function", "name": "KCModuleContainer::KCModuleContainer", "url": "classKCModuleContainer.html#ad45ea6504c50750836d8d515e0889e44", "keyword": "KCModuleContainer KCModuleContainer::KCModuleContainer KCModuleContainer", "text": "parent the parent QWidget mods The list of KCModules to be loaded The name of each KCModule is its service name that is the name of the desktop file without the part"}, {"type": "function", "name": "KCModuleContainer::KCModuleContainer", "url": "classKCModuleContainer.html#aba9f649f01bc6a38eb91a1aeca9ebd46", "keyword": "KCModuleContainer KCModuleContainer::KCModuleContainer KCModuleContainer", "text": "For example The other constructor takes its modules in a QStringlist which also can be constructed from a string and thus you will have to be explicit on the data type What you probably want is the KCMODULECONTAINER macro which builds an KCModule for you taking the modules you want as argument parent The parent widget mods The modules to load The KCModule containing the requested modules"}, {"type": "function", "name": "KCModuleContainer::~KCModuleContainer", "url": "classKCModuleContainer.html#a215fa8026d572cc63a3db839b9668636", "keyword": "KCModuleContainer::~KCModuleContainer KCModuleContainer", "text": ""}, {"type": "function", "name": "KCModuleContainer::addModule", "url": "classKCModuleContainer.html#ace851d474737d6cb8c77ee3ec0146a5c", "keyword": "addModule KCModuleContainer::addModule KCModuleContainer", "text": "Setting the tab icon text tool tip connecting the signals is what it does module the name of the module to add The name is the desktop file s name without the part"}, {"type": "function", "name": "KCModuleContainer::defaults", "url": "classKCModuleContainer.html#a8b8b1bcf6bce50d442a19449ca53e748", "keyword": "defaults KCModuleContainer::defaults KCModuleContainer", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KCModuleContainer::load", "url": "classKCModuleContainer.html#a705ee3374537687df552831e0f2b8c8b", "keyword": "load KCModuleContainer::load KCModuleContainer", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KCModuleContainer::save", "url": "classKCModuleContainer.html#a045e1086d36a35938dc87187b3576b73", "keyword": "save KCModuleContainer::save KCModuleContainer", "text": "Reimplemented from superclass"}, {"type": "class", "name": "KCModuleInfo", "url": "classKCModuleInfo.html", "keyword": "KCModuleInfo", "text": "KCModuleInfo provides various technical information such as icon library etc about a KCModule.n Any values set with the set* functions is not written back with KCModuleInfo it only reads value from the desktop file Matthias Hoelzer-Kluepfel Matthias Elter Daniel Molkentin"}, {"type": "function", "name": "KCModuleInfo::KCModuleInfo", "url": "classKCModuleInfo.html#adb479255dc2143bcb05510311f0fb08f", "keyword": "KCModuleInfo KCModuleInfo::KCModuleInfo KCModuleInfo", "text": "a KCModuleInfo object will have to be manually deleted it is not done automatically for you desktopFile the desktop file representing the module or the name of the module"}, {"type": "function", "name": "KCModuleInfo::KCModuleInfo", "url": "classKCModuleInfo.html#a877b61a1c81939244cce405d5a388cd2", "keyword": "KCModuleInfo KCModuleInfo::KCModuleInfo KCModuleInfo", "text": "moduleInfo must be a valid pointer moduleInfo specifies the module"}, {"type": "function", "name": "KCModuleInfo::KCModuleInfo", "url": "classKCModuleInfo.html#af57abec101dc24864ecbba8ed1e16e59", "keyword": "KCModuleInfo KCModuleInfo::KCModuleInfo KCModuleInfo", "text": "rhs specifies the module"}, {"type": "function", "name": "KCModuleInfo::KCModuleInfo", "url": "classKCModuleInfo.html#aa43bd95cc8ed429218a0e966f2d7bcd6", "keyword": "KCModuleInfo KCModuleInfo::KCModuleInfo KCModuleInfo", "text": "You should not normally call this"}, {"type": "function", "name": "KCModuleInfo::~KCModuleInfo", "url": "classKCModuleInfo.html#a7c8d6229e1d1e3780611675a883dcdfa", "keyword": "KCModuleInfo::~KCModuleInfo KCModuleInfo", "text": ""}, {"type": "function", "name": "KCModuleInfo::comment", "url": "classKCModuleInfo.html#a708e1dfdfda8179b0768e291ee19ee0f", "keyword": "comment KCModuleInfo::comment KCModuleInfo", "text": "the module s translated comment field"}, {"type": "function", "name": "KCModuleInfo::docPath", "url": "classKCModuleInfo.html#aa4c6366787eaa7a79388000bc33b01fe", "keyword": "docPath KCModuleInfo::docPath KCModuleInfo", "text": "the path of the module s documentation"}, {"type": "function", "name": "KCModuleInfo::fileName", "url": "classKCModuleInfo.html#a426d64365dde3f2dbdfd8a0b605e3fd6", "keyword": "fileName KCModuleInfo::fileName KCModuleInfo", "text": "the filename of the desktop file that describes the KCM"}, {"type": "function", "name": "KCModuleInfo::handle", "url": "classKCModuleInfo.html#ae7ab1006acce059c103fd4317709c4da", "keyword": "handle KCModuleInfo::handle KCModuleInfo", "text": "a handle the contents of the X-KDE-FactoryName field if it exists else the same as the library name"}, {"type": "function", "name": "KCModuleInfo::icon", "url": "classKCModuleInfo.html#a7214f34dd2979bb6c3e740302fe96463", "keyword": "icon KCModuleInfo::icon KCModuleInfo", "text": "the module s icon name"}, {"type": "function", "name": "KCModuleInfo::keywords", "url": "classKCModuleInfo.html#a85b3fb136fa10cf7dbc29ee662a9c587", "keyword": "keywords KCModuleInfo::keywords KCModuleInfo", "text": "the keywords associated with this KCM"}, {"type": "function", "name": "KCModuleInfo::library", "url": "classKCModuleInfo.html#a3e5b514021b75f676b62ee98aad65660", "keyword": "library KCModuleInfo::library KCModuleInfo", "text": "the library name"}, {"type": "function", "name": "KCModuleInfo::moduleName", "url": "classKCModuleInfo.html#ab747d194a594699513d3517d234a60bb", "keyword": "moduleName KCModuleInfo::moduleName KCModuleInfo", "text": "the module s translated name"}, {"type": "function", "name": "KCModuleInfo::operator!=", "url": "classKCModuleInfo.html#aa9affdb41f3be79f74424f2b0f7bdab9", "keyword": "operator!= KCModuleInfo::operator!= KCModuleInfo", "text": "true if rhs is not equal itself"}, {"type": "function", "name": "KCModuleInfo::operator=", "url": "classKCModuleInfo.html#a587b079bf8e14161ffc41c36656091c5", "keyword": "operator= KCModuleInfo::operator= KCModuleInfo", "text": ""}, {"type": "function", "name": "KCModuleInfo::operator==", "url": "classKCModuleInfo.html#a94c35cebb5728f59e96879e66dd767e8", "keyword": "operator== KCModuleInfo::operator== KCModuleInfo", "text": ""}, {"type": "function", "name": "KCModuleInfo::service", "url": "classKCModuleInfo.html#a5ec77af956f19bcc292e45b88a75b069", "keyword": "service KCModuleInfo::service KCModuleInfo", "text": "a QExplicitlySharedDataPointer to KService created from the modules desktop file"}, {"type": "function", "name": "KCModuleInfo::weight", "url": "classKCModuleInfo.html#a922beb158dead62e9f01e849ff4cf4c3", "keyword": "weight KCModuleInfo::weight KCModuleInfo", "text": "the weight of the module which determines the order of the pages in the KCMultiDialog It s set by the X-KDE-Weight field"}, {"type": "class", "name": "KCModuleProxy", "url": "classKCModuleProxy.html", "keyword": "KCModuleProxy", "text": "KCModuleProxy is a wrapper for KCModule intended for cases where modules are to be displayed It ensures layout is consistent and in general takes care of the details needed for making a module available in an interface A KCModuleProxy can be treated as a QWidget without worrying about the details specific for modules such as library loading KCModuleProxy is not a sub class of KCModule but its API closely resembles KCModule s Usually an instance is created by passing one of the constructors a KService::Ptr KCModuleInfo or simply the name of the module and then added to the layout as any other widget When the user has changed the module changed(bool) as well as changed(KCModuleProxy *) is emitted KCModuleProxy does not take care of prompting for saving if the object is deleted while changes is not saved the changes will be lost changed() returns true if changes are unsaved KCModuleProxy does not take care of authorization of KCModules KCModuleProxy implements lazy loading meaning the library will not be loaded or any other initialization done before its show() function is called This means modules will only be loaded when they are actually needed as well as it is possible to load many KCModuleProxy without any speed penalty KCModuleProxy should be used in all cases where modules are embedded in order to promote code efficiency and usability consistency Frans Englich Matthias Kretz"}, {"type": "signal", "name": "KCModuleProxy::changed", "url": "classKCModuleProxy.html#acd8b1e4801637e804d8b247b361db492", "keyword": "changed KCModuleProxy::changed KCModuleProxy", "text": "Practical when several KCModuleProxys are loaded"}, {"type": "signal", "name": "KCModuleProxy::childClosed", "url": "classKCModuleProxy.html#a13d414891c7a428e42e8a72666461438", "keyword": "childClosed KCModuleProxy::childClosed KCModuleProxy", "text": ""}, {"type": "slot", "name": "KCModuleProxy::defaults", "url": "classKCModuleProxy.html#a564d47d826e86554978924ee0f00d839", "keyword": "defaults KCModuleProxy::defaults KCModuleProxy", "text": ""}, {"type": "slot", "name": "KCModuleProxy::deleteClient", "url": "classKCModuleProxy.html#a50ccc8c6b1cd7f49447812024b3b976f", "keyword": "deleteClient KCModuleProxy::deleteClient KCModuleProxy", "text": "A similar result is achieved by deleting the KCModuleProxy itself"}, {"type": "function", "name": "KCModuleProxy::KCModuleProxy", "url": "classKCModuleProxy.html#a323017ecc2ace187756227be955454c4", "keyword": "KCModuleProxy KCModuleProxy::KCModuleProxy KCModuleProxy", "text": "info The KCModuleInfo to construct the module from parent the parent QWidget args This is used in the implementation and is internal Use the default"}, {"type": "function", "name": "KCModuleProxy::KCModuleProxy", "url": "classKCModuleProxy.html#ad7d695f2adab5721d76306f419e5c604", "keyword": "KCModuleProxy KCModuleProxy::KCModuleProxy KCModuleProxy", "text": "Otherwise equal to the one above serviceName The module s service name to construct from parent the parent QWidget args This is used in the implementation and is internal Use the default"}, {"type": "function", "name": "KCModuleProxy::KCModuleProxy", "url": "classKCModuleProxy.html#adf8947c02a6052a83db92a6c57a243d2", "keyword": "KCModuleProxy KCModuleProxy::KCModuleProxy KCModuleProxy", "text": "Otherwise equal to the one above service The KService to construct from parent the parent QWidget args This is used in the implementation and is internal Use the default"}, {"type": "function", "name": "KCModuleProxy::~KCModuleProxy", "url": "classKCModuleProxy.html#ad9a6f8d829a0cac4d9f9dce1ff090d18", "keyword": "KCModuleProxy::~KCModuleProxy KCModuleProxy", "text": ""}, {"type": "function", "name": "KCModuleProxy::aboutData", "url": "classKCModuleProxy.html#a92d2aa990d76c164fbfa79571348e8cf", "keyword": "aboutData KCModuleProxy::aboutData KCModuleProxy", "text": "the module s aboutData()"}, {"type": "function", "name": "KCModuleProxy::buttons", "url": "classKCModuleProxy.html#a44841bab691525077e74c2d72ee6846b", "keyword": "buttons KCModuleProxy::buttons KCModuleProxy", "text": "what buttons the module needs"}, {"type": "function", "name": "KCModuleProxy::changed", "url": "classKCModuleProxy.html#a154cd6d09489d91476a6caff2517c5a9", "keyword": "changed KCModuleProxy::changed KCModuleProxy", "text": "true if the module is modified and needs to be saved"}, {"type": "function", "name": "KCModuleProxy::dbusPath", "url": "classKCModuleProxy.html#ab2f8203c3366265b0b752e1782b6a0cb", "keyword": "dbusPath KCModuleProxy::dbusPath KCModuleProxy", "text": ""}, {"type": "function", "name": "KCModuleProxy::dbusService", "url": "classKCModuleProxy.html#a22cffa5316e5cd044a265b66283d37b2", "keyword": "dbusService KCModuleProxy::dbusService KCModuleProxy", "text": ""}, {"type": "function", "name": "KCModuleProxy::load", "url": "classKCModuleProxy.html#acf8c3283771767a2a2f907a27d09c64c", "keyword": "load KCModuleProxy::load KCModuleProxy", "text": ""}, {"type": "function", "name": "KCModuleProxy::minimumSizeHint", "url": "classKCModuleProxy.html#abfe3d419395f6100d202d590a58535a3", "keyword": "minimumSizeHint KCModuleProxy::minimumSizeHint KCModuleProxy", "text": ""}, {"type": "function", "name": "KCModuleProxy::moduleInfo", "url": "classKCModuleProxy.html#a0ba5bffdb3b004831b17e17b89635fab", "keyword": "moduleInfo KCModuleProxy::moduleInfo KCModuleProxy", "text": "a KCModuleInfo for the encapsulated module"}, {"type": "function", "name": "KCModuleProxy::quickHelp", "url": "classKCModuleProxy.html#a1baf39a1e32e725def898b434bfdc8ba", "keyword": "quickHelp KCModuleProxy::quickHelp KCModuleProxy", "text": "the module s quickHelp()"}, {"type": "function", "name": "KCModuleProxy::realModule", "url": "classKCModuleProxy.html#a00c61146a8d353460a2933849575d5f9", "keyword": "realModule KCModuleProxy::realModule KCModuleProxy", "text": "It may return NULL if anything goes wrong the encapsulated module"}, {"type": "function", "name": "KCModuleProxy::save", "url": "classKCModuleProxy.html#a73a578508c3a025c2813536fc6c8a558", "keyword": "save KCModuleProxy::save KCModuleProxy", "text": "If the module was not modified it will not be asked to save"}, {"type": "function", "name": "KCModuleProxy::showEvent", "url": "classKCModuleProxy.html#aaf88a0463f14fc47eecb54d8440519ec", "keyword": "showEvent KCModuleProxy::showEvent KCModuleProxy", "text": "Makes sure the encapsulated module is loaded before the show event is taken care of"}, {"type": "class", "name": "KCMultiDialog", "url": "classKCMultiDialog.html", "keyword": "KCMultiDialog", "text": "Matthias Elter Daniel Molkentin"}, {"type": "signal", "name": "KCMultiDialog::configCommitted", "url": "classKCMultiDialog.html#abf8d7b3c52fd90d348c680b8a067aee9", "keyword": "configCommitted KCMultiDialog::configCommitted KCMultiDialog configCommitted KCMultiDialog::configCommitted KCMultiDialog", "text": "The applyClicked and okClicked signals are emitted before the configuration is saved"}, {"type": "signal", "name": "KCMultiDialog::configCommitted", "url": "classKCMultiDialog.html#aeeeb0724750a8e224b58b7c8f7e867fd", "keyword": "configCommitted KCMultiDialog::configCommitted KCMultiDialog configCommitted KCMultiDialog::configCommitted KCMultiDialog", "text": "It is emitted once for every instance the KCMs that were changed belong to You can make use of this if you have more than one component in your application componentName tells you the instance that has to reload its configuration The applyClicked and okClicked signals are emitted before the configuration is saved componentName The name of the instance that needs to reload its configuration"}, {"type": "function", "name": "KCMultiDialog::KCMultiDialog", "url": "classKCMultiDialog.html#acb5191cfa71f3a8db4bf5a138d4ecfc7", "keyword": "KCMultiDialog KCMultiDialog::KCMultiDialog KCMultiDialog KCMultiDialog KCMultiDialog::KCMultiDialog KCMultiDialog", "text": "parent The parent widget"}, {"type": "function", "name": "KCMultiDialog::~KCMultiDialog", "url": "classKCMultiDialog.html#a88fdcf3a3569b9097cad0364a7b428f7", "keyword": "KCMultiDialog::~KCMultiDialog KCMultiDialog KCMultiDialog::~KCMultiDialog KCMultiDialog", "text": ""}, {"type": "function", "name": "KCMultiDialog::addModule", "url": "classKCMultiDialog.html#ab7eb63946bec308de4a1261e213d93e1", "keyword": "addModule KCMultiDialog::addModule KCMultiDialog addModule KCMultiDialog::addModule KCMultiDialog", "text": "The module is added according to its KCModuleInfo::weight() The weight determines where in the list the module will appear Lighter modules on top heavier modules at the bottom module Specify the name of the module that is to be added to the list of modules the dialog will show args The arguments that should be given to the KCModule when it is created The KPageWidgetItem associated with the new dialog page"}, {"type": "function", "name": "KCMultiDialog::addModule", "url": "classKCMultiDialog.html#a0e7626316c7ef71346fa202b65975b41", "keyword": "addModule KCMultiDialog::addModule KCMultiDialog addModule KCMultiDialog::addModule KCMultiDialog", "text": "The module is added according to its KCModuleInfo::weight() The weight determines where in the list the module will appear Lighter modules on top heavier modules at the bottom moduleinfo Pass a KCModuleInfo object which will be used for creating the module It will be added to the list of modules the dialog will show parent The KPageWidgetItem that should appear as parents in the tree view or a 0 pointer if there is no parent args The arguments that should be given to the KCModule when it is created"}, {"type": "function", "name": "KCMultiDialog::clear", "url": "classKCMultiDialog.html#a2fd7ff4dc1d13a8809dc889eb4188145", "keyword": "clear KCMultiDialog::clear KCMultiDialog clear KCMultiDialog::clear KCMultiDialog", "text": ""}, {"type": "slot", "name": "KCMultiDialog::slotApplyClicked", "url": "classKCMultiDialog.html#a0d560dfb5d8db98d1805d6e59509a81a", "keyword": "slotApplyClicked KCMultiDialog::slotApplyClicked KCMultiDialog slotApplyClicked KCMultiDialog::slotApplyClicked KCMultiDialog", "text": "You can reimplement it if needed Make sure you call the original implementation"}, {"type": "slot", "name": "KCMultiDialog::slotDefaultClicked", "url": "classKCMultiDialog.html#abfb661693e8182d36c8d20ad5ace5f04", "keyword": "slotDefaultClicked KCMultiDialog::slotDefaultClicked KCMultiDialog slotDefaultClicked KCMultiDialog::slotDefaultClicked KCMultiDialog", "text": "You can reimplement it if needed Make sure you call the original implementation"}, {"type": "slot", "name": "KCMultiDialog::slotHelpClicked", "url": "classKCMultiDialog.html#adacfac1abb508f0079d685d1d157c416", "keyword": "slotHelpClicked KCMultiDialog::slotHelpClicked KCMultiDialog slotHelpClicked KCMultiDialog::slotHelpClicked KCMultiDialog", "text": "It reads the X-DocPath field of the currently selected KControl module s desktop file to find the path to the documentation which it then attempts to load You can reimplement this slot if needed Make sure you call the original implementation"}, {"type": "slot", "name": "KCMultiDialog::slotOkClicked", "url": "classKCMultiDialog.html#a168bc04990fbff16d344681919fc72ed", "keyword": "slotOkClicked KCMultiDialog::slotOkClicked KCMultiDialog slotOkClicked KCMultiDialog::slotOkClicked KCMultiDialog", "text": "You can reimplement it if needed Make sure you call the original implementation"}, {"type": "slot", "name": "KCMultiDialog::slotUser1Clicked", "url": "classKCMultiDialog.html#a38f54b4cdf6b7d266286cdb808ed24ce", "keyword": "slotUser1Clicked KCMultiDialog::slotUser1Clicked KCMultiDialog slotUser1Clicked KCMultiDialog::slotUser1Clicked KCMultiDialog", "text": "You can reimplement it if needed Make sure you call the original implementation"}, {"type": "function", "name": "KCMultiDialog::KCMultiDialog", "url": "classKCMultiDialog.html#a211b0c6f104b9c2cee27af0ab2555e98", "keyword": "KCMultiDialog KCMultiDialog::KCMultiDialog KCMultiDialog KCMultiDialog KCMultiDialog::KCMultiDialog KCMultiDialog", "text": ""}, {"type": "function", "name": "KCMultiDialog::closeEvent", "url": "classKCMultiDialog.html#a55c44c19e29f44b7f5ec1ba059014ee4", "keyword": "closeEvent KCMultiDialog::closeEvent KCMultiDialog closeEvent KCMultiDialog::closeEvent KCMultiDialog", "text": "If we don t delete them the DBUS registration stays and trying to load the KCMs in other situations will lead to while to the user doesn t appear so(the dialog is hidden)"}, {"type": "class", "name": "KPluginSelector", "url": "classKPluginSelector.html", "keyword": "KPluginSelector", "text": "It shows the list of available plugins Since the user needs a way to know what a specific plugin does every plugin sould install a desktop file containing a name comment and category field The category is useful for applications that can use different kinds of plugins like a playlist skin or visualization The location of these desktop files is the share/apps/ instancename plugindir directory But if you need you may use a different directory You can add plugins from different KConfig group by just calling all times you want addPlugins method with the correct parameters Additionally calls to constructor with same categoryName will add new items to the same category even if plugins are from different categories Matthias Kretz Rafael Fern\u00e1ndez L\u00f3pez"}, {"type": "signal", "name": "KPluginSelector::changed", "url": "classKPluginSelector.html#a791dd77d1529c20150d60957267dbfc8", "keyword": "changed KPluginSelector::changed KPluginSelector", "text": ""}, {"type": "signal", "name": "KPluginSelector::configCommitted", "url": "classKPluginSelector.html#a95ea07497d1e292eaf57aab3a6cdfdca", "keyword": "configCommitted KPluginSelector::configCommitted KPluginSelector", "text": "The argument is the name of the parent component that needs to reload its config"}, {"type": "function", "name": "KPluginSelector::KPluginSelector", "url": "classKPluginSelector.html#a3bf16e382bb3dfd5528ea9f4ca2a9ecf", "keyword": "KPluginSelector KPluginSelector::KPluginSelector KPluginSelector", "text": ""}, {"type": "function", "name": "KPluginSelector::~KPluginSelector", "url": "classKPluginSelector.html#a1293cccf6c4a0f8aee9d31ef9d6e198f", "keyword": "KPluginSelector::~KPluginSelector KPluginSelector", "text": ""}, {"type": "function", "name": "KPluginSelector::addPlugins", "url": "classKPluginSelector.html#a0083776940c6bb68b47f6b737bd5d44b", "keyword": "addPlugins KPluginSelector::addPlugins KPluginSelector", "text": "The information about the plugins will be loaded from the share/apps/ instancename directory componentName The name of the component of the plugin s parent categoryName The translated name of the category This is the name that is shown in the title If the category did exist before because of another call to addPlugins then they will be shown in that category If categoryName is a new one then a new category will be shown on the plugin window and the list of plugins added to it categoryKey When you have different categories of KParts plugins you distinguish between the plugins using the Category key in the desktop file Use this parameter to select only those KParts plugins with the Category key categoryKey If categoryKey is not set the Category key is ignored and all plugins are shown Not match case config The KConfig object that holds the state of the plugins being enabled or not By default it will be set to KSharedConfig::openConfig componentName"}, {"type": "function", "name": "KPluginSelector::addPlugins", "url": "classKPluginSelector.html#a501cc29d63504c92e73d6e3bfa0f1683", "keyword": "addPlugins KPluginSelector::addPlugins KPluginSelector", "text": "pluginInfoList A list of KPluginInfo objects containing the necessary information for the plugins you want to add to the list pluginLoadMethod If KPluginSelector will try to load the state of the plugin when loading the dialog from the configuration file or not This is useful if for some reason you called the setPluginEnabled() for each plugin individually before loading the dialog and don t want KPluginSelector to override them when loading categoryName The translated name of the category This is the name that is shown in the title If the category did exist before because of another call to addPlugins then they will be shown in that category If categoryName is a new one then a new category will be shown on the plugin window and the list of plugins added to it categoryKey When you have different categories of KParts plugins you distinguish between the plugins using the Category key in the desktop file Use this parameter to select only those KParts plugins with the Category key categoryKey If categoryKey is not set the Category key is ignored and all plugins are shown Not match case config The KConfig object that holds the state of the plugins being enabled or not By default it will use KSharedConfig::openConfig() It is recommended to always pass a KConfig object if you use KSettings::PluginPage since you never know from where the page will be called think global config app For example KViewCanvas passes KConfig All plugins that were set a config group using setConfig() method will load and save their information from there For those that weren t any config object config will be used"}, {"type": "function", "name": "KPluginSelector::configurationArguments", "url": "classKPluginSelector.html#a8eb3d9d313d15c5a239c87b633c241a1", "keyword": "configurationArguments KPluginSelector::configurationArguments KPluginSelector", "text": "5.9"}, {"type": "function", "name": "KPluginSelector::defaults", "url": "classKPluginSelector.html#ac8e384839a14d0bdf17c0c8a6a93d7cb", "keyword": "defaults KPluginSelector::defaults KPluginSelector", "text": "isDefault()"}, {"type": "function", "name": "KPluginSelector::isDefault", "url": "classKPluginSelector.html#a0e7a73c92b32d282288017afca846a8e", "keyword": "isDefault KPluginSelector::isDefault KPluginSelector", "text": "defaults() 4.3"}, {"type": "function", "name": "KPluginSelector::load", "url": "classKPluginSelector.html#ab028a22b586d0698f61cb3f5b54ae7b1", "keyword": "load KPluginSelector::load KPluginSelector", "text": ""}, {"type": "function", "name": "KPluginSelector::save", "url": "classKPluginSelector.html#ad9e0185ec6b1ab4dbb532b92d52496d3", "keyword": "save KPluginSelector::save KPluginSelector", "text": ""}, {"type": "function", "name": "KPluginSelector::setConfigurationArguments", "url": "classKPluginSelector.html#ab49104bd9390a94e7d378b522d8c6e8e", "keyword": "setConfigurationArguments KPluginSelector::setConfigurationArguments KPluginSelector", "text": "5.9"}, {"type": "function", "name": "KPluginSelector::updatePluginsState", "url": "classKPluginSelector.html#a48ff6cc3cf9551e8d82ba1f3bdd92456", "keyword": "updatePluginsState KPluginSelector::updatePluginsState KPluginSelector", "text": "This method won t save anything on any configuration file It will just be useful if you added plugins with the method To sum up this method will update your plugins state depending if plugins are ticked or not on the KPluginSelector dialog without saving anything anywhere"}, {"type": "namespace", "name": "KCModuleLoader", "url": "namespaceKCModuleLoader.html", "keyword": "KCModuleLoader", "text": "KCModuleLoader tries in several ways to locate and load a KCModule If loading fails a zero pointer is returned It is very unlikely KCModuleLoader is what you want and KCModuleProxy suits your needs Matthias Hoelzer-Kluepfel Frans Englich"}, {"type": "enum", "name": "KCModuleLoader::ErrorReporting", "url": "namespaceKCModuleLoader.html#a81df4206a4263bda1faeecc4e9d5747d", "keyword": "ErrorReporting KCModuleLoader::ErrorReporting KCModuleLoader", "text": ""}, {"type": "enumvalue", "name": "KCModuleLoader::None", "url": "namespaceKCModuleLoader.html#a81df4206a4263bda1faeecc4e9d5747da20014ac1da26a191b4d9de679ae9d3e7", "keyword": "None KCModuleLoader::None KCModuleLoader", "text": "no error reporting is done"}, {"type": "enumvalue", "name": "KCModuleLoader::Inline", "url": "namespaceKCModuleLoader.html#a81df4206a4263bda1faeecc4e9d5747da005cd4b0726931d7e3c564b24c1e2bb1", "keyword": "Inline KCModuleLoader::Inline KCModuleLoader", "text": "the error report is shown instead of the KCModule that should have been loaded"}, {"type": "enumvalue", "name": "KCModuleLoader::Dialog", "url": "namespaceKCModuleLoader.html#a81df4206a4263bda1faeecc4e9d5747da746e97d8f1d1cf1235b1d9e2559ede0a", "keyword": "Dialog KCModuleLoader::Dialog KCModuleLoader", "text": "shows a dialog with the error report"}, {"type": "enumvalue", "name": "KCModuleLoader::Both", "url": "namespaceKCModuleLoader.html#a81df4206a4263bda1faeecc4e9d5747dac900aa7bd376141a32912f2e49ae68ed", "keyword": "Both KCModuleLoader::Both KCModuleLoader", "text": "does both Inline and Dialog"}, {"type": "function", "name": "KCModuleLoader::loadModule", "url": "namespaceKCModuleLoader.html#a372dbbed0e66d2c10846ff2b10cd84b1", "keyword": "loadModule KCModuleLoader::loadModule KCModuleLoader", "text": "If loading fails a zero pointer is returned module what module to load report see ErrorReporting a pointer to the loaded KCModule"}, {"type": "function", "name": "KCModuleLoader::loadModule", "url": "namespaceKCModuleLoader.html#a4cc3501aaf9b927e9be840c974558491", "keyword": "loadModule KCModuleLoader::loadModule KCModuleLoader", "text": "If loading fails a zero pointer is returned module what module to load report see ErrorReporting a pointer to the loaded KCModule"}, {"type": "function", "name": "KCModuleLoader::reportError", "url": "namespaceKCModuleLoader.html#a52ea06ddb9f1a439fdcacbc44837a4d9", "keyword": "reportError KCModuleLoader::reportError KCModuleLoader", "text": "report the type of error reporting see ErrorReporting text the main message details any additional details"}, {"type": "function", "name": "KCModuleLoader::unloadModule", "url": "namespaceKCModuleLoader.html#a486d01e5f9c68b2c44d4c34de034a6ad", "keyword": "unloadModule KCModuleLoader::unloadModule KCModuleLoader", "text": "mod What module to unload for"}, {"type": "namespace", "name": "KSettings", "url": "namespaceKSettings.html", "keyword": "KSettings", "text": "How to use KSettings::Dialog in your application 1 Open the dialog from your app All you need to do is instanciate KSettings::Dialog and show() it I recommend the following create the Configure MyApp StdAction like this and the slot looks like this Of course you need to have the KSettings::Dialog m_dlg member var and initialize it to 0 in the ctor If your application uses KParts that don t set X-KDE-ParentApp the instance name of your application then you need to use the second ctor of KSettings::Dialog The KSettings::Dialog object will be destructed automatically by the QObject mechanisms 2 Create pages for your dialog Every page is a KCM This is what you need for creating a page and in the cpp file For the KConfig object you can either use KSharedConfig::openConfig() I don t recommend it or KSimpleConfig I added a method to KSettings::Dispatcher that gives you the KConfig object for every registered instance name KSettings::Dispatcher::configForInstanceName 3 The desktop file for the page The desktop file holds all the information for the dialog to find the page and insert it at the right place with the right icon name and comment An example file Some explanation for those keys You just keep Encoding Type and ServiceTypes like in the example For very special needs you might add another ServiceType to the list Icon is the icon that will be used in the listview/iconview for your page X-KDE-Library is the name of the library where the page is in The library always needs to be prefixed with kcm_ but you don t write the prefix in the desktop file For more docu on this look for the KCModule docu X-KDE-ParentApp is the name of the application this config page belongs to It is used by the first two KSettings::Dialog constructors The Dialog will use all modules that set X-KDE-ParentApp to QCoreApplication::applicationName() It should be pretty easy to find out what name that is look for setApplicationName() in main() otherwise the name of the executable is used X-KDE-ParentComponents is a list of the components plugin/KPart/whatever this config page belongs to Normally there is only one component It is used for two things If you use KSettings::Dispatcher the dispatcher will notify all components in this list after the save() method of your KCM has been called The components then can reload the configuration and apply the changes the user did to the config If your component is used by another application that is not X-KDE-ParentApp then it may add the name of the component to the ctor of KSettings::Dialog and the dialog will automatically include all config pages that have the components name in their ParentComponents list X-KDE-Weight sets the order for the modules to be inserted into the dialog The higher the number heavier the lower the module will appear in the list the default value is 100 Name is the string that is shown in the listview/iconview right below the icon Comment is the string that is shown on top of the config page for a short description what you can do on this page 4 The setdlg file for hierarchical TreeList page layouts If your config dialog should show a tree of pages in the config dialog you need to define that hierarchy with a setdlg file The file should be installed in apps/ appname appname setdlg If third party plugins need to merge in they will install their file to apps/ appname pluginname setdlg A setdlg file contains one or more blocks like the following The group name id is the name you use in the desktop file of the page If your page s desktop file says then it will be inserted as a child of this entry Name The name of the section It will appear in the listview Comment A description of what the modules in this section are It will appear in the place where the KCMs are placed when the user clicks on the item in the listview Icon An icon for the item Weight Defines the position in the listview See X-KDE-Weight above Parent If this group should be a child of another group write the parent s group id here 5 The Pluginselector There are two ways to use the KPluginSelector widget One is to use the class directly and the second to use KSettings::PluginPage as baseclass for a config page that shows the KPluginSelector widget I ll cover the second usage here and the calls to addPlugins are just the same for the first To create a plugin page you need the following code pluginSelector() returns a pointer to the KPluginSelector widget of the page There are three addPlugins methods available two for adding KParts plugins and one for the rest 6 The desktop files of plugin config pages this is the entry for the Makefile.am And this is what the desktop file looks like Explanation mandatory entries leave Type and Encoding like in the example Name Comment X-KDE-PluginInfo-Name is the of the plugin You need to have KPluginInfo in ServiceTypes but of course you may have more entries in there optional entries Icon is the icon used for your plugin it s shown in the pluginselector if you set one X-KDE-PluginInfo-Author and X-KDE-PluginInfo-Email is some information about the author of the plugin X-KDE-PluginInfo-Website is the address for a webpage for this plugin X-KDE-PluginInfo-Category is used if your application has different categories of plugins X-KDE-PluginInfo-Version is the version of this plugin X-KDE-PluginInfo-License is the license of this plugin X-KDE-PluginInfo-EnabledByDefault tells the program whether the plugin should be enabled on first startup or not X-KDE-PluginInfo-Depends can be used to tell the application that you need to have myotherplugin enabled for your plugin to work X-KDE-CfgDlgHierarchy is used if you use a KSettings::Dialog::ConfigurableInline KSettings::Dialog to put the plugin checkbox into the group with the GroupID you set here If you have questions contact Matthias Kretz"}, {"type": "class", "name": "KSettings::Dialog", "url": "classKSettings_1_1Dialog.html", "keyword": "Dialog", "text": "For more information see KSettings This class aims to standardize the use of configuration dialogs in KDE applications Especially when using KParts and/or Plugins you face problems creating a consistent config dialog To show a configuration dialog you only have to call the show method and be done with it A code example You initialize m_cfgdlg with If you use a KPart that was not especially designed for your app you can use the second constructor and the action for the config dialog is connected to the show slot If you need to be informed when the config was changed and applied in the dialog you might want to take a look at Dispatcher For more information see KSettings Matthias Kretz"}, {"type": "signal", "name": "KSettings::Dialog::pluginSelectionChanged", "url": "classKSettings_1_1Dialog.html#a042e3d089adcd43091b36bdc6c039e95", "keyword": "pluginSelectionChanged KSettings::Dialog::pluginSelectionChanged KSettings::Dialog", "text": "It s emitted if the selection has changed and the user pressed Apply or Ok In the slot you would then load and unload the plugins as requested"}, {"type": "function", "name": "KSettings::Dialog::Dialog", "url": "classKSettings_1_1Dialog.html#ab886e33f5dad75b9f7f60491167ed782", "keyword": "Dialog KSettings::Dialog::Dialog KSettings::Dialog", "text": "It uses all KCMs with X-KDE-ParentApp set to QCoreApplication::instance() applicationName() content Select whether you want a static or configurable config dialog parent The parent is only used as the parent for the dialog centering the dialog over the parent widget"}, {"type": "function", "name": "KSettings::Dialog::Dialog", "url": "classKSettings_1_1Dialog.html#aa7e5bb97486e2955dbd09bfdd70a8ffd", "keyword": "Dialog KSettings::Dialog::Dialog KSettings::Dialog", "text": "For example if you want to have the configuration pages for the kviewviewer KPart you would pass a QStringList consisting of only the name of the part components A list of the names of the components that your config dialog should merge the config pages in parent The parent is only used as the parent for the dialog centering the dialog over the parent widget"}, {"type": "function", "name": "KSettings::Dialog::addPluginInfos", "url": "classKSettings_1_1Dialog.html#accbbd1524bdb47382b3c01ef490fd753", "keyword": "addPluginInfos KSettings::Dialog::addPluginInfos KSettings::Dialog", "text": ""}, {"type": "function", "name": "KSettings::Dialog::pluginInfos", "url": "classKSettings_1_1Dialog.html#aa46070b9cda558cd49f74f954fb2dcb3", "keyword": "pluginInfos KSettings::Dialog::pluginInfos KSettings::Dialog", "text": ""}, {"type": "function", "name": "KSettings::Dialog::setAllowComponentSelection", "url": "classKSettings_1_1Dialog.html#a1b9df3dfda63a54bdc988414b160b3c3", "keyword": "setAllowComponentSelection KSettings::Dialog::setAllowComponentSelection KSettings::Dialog", "text": "Note that this function only works before showing the dialog for the first time Defaults to false allowSelection true The user can select what functionality he wants allowSelection false While running no entries are added or deleted"}, {"type": "function", "name": "KSettings::Dialog::setComponentBlacklist", "url": "classKSettings_1_1Dialog.html#a6d9905c561c1b2cb0fb785a9afb732f7", "keyword": "setComponentBlacklist KSettings::Dialog::setComponentBlacklist KSettings::Dialog", "text": "Any KCM that lists one of the components in the given blacklist is not loaded even if it would fit otherwise This is a way to explicitly prevent loading of certain KControlModules Note that this function only works before showing the KSettings::Dialog for the first time blacklist the list of components that prevent a KCM from being loaded"}, {"type": "function", "name": "KSettings::Dialog::setKCMArguments", "url": "classKSettings_1_1Dialog.html#ad6ffd773f0f08a798a13fb76c4e5f216", "keyword": "setKCMArguments KSettings::Dialog::setKCMArguments KSettings::Dialog", "text": "Use this if you have KControlModule s that need special arguments to work Note that this function only works before showing the KSettings::Dialog for the first time arguments The list of arguments passed to each KCM"}, {"type": "function", "name": "KSettings::Dialog::showEvent", "url": "classKSettings_1_1Dialog.html#af7cf640b2b59eb81c27f4a03d52859a6", "keyword": "showEvent KSettings::Dialog::showEvent KSettings::Dialog", "text": ""}, {"type": "class", "name": "KSettings::PluginPage", "url": "classKSettings_1_1PluginPage.html", "keyword": "PluginPage", "text": "This class makes it very easy to create a plugins configuration page to your program All you need to do is create a class that is derived from PluginPage and add the appropriate plugin information to the KPluginSelector This is done using the pluginSelector() method All that remains to be done is to create the appropriate desktop file Matthias Kretz"}, {"type": "function", "name": "KSettings::PluginPage::PluginPage", "url": "classKSettings_1_1PluginPage.html#aa2fdb18bfd3c4ff8955f5e4736de75f9", "keyword": "PluginPage KSettings::PluginPage::PluginPage KSettings::PluginPage", "text": "Automatically creates the KPluginSelector widget"}, {"type": "function", "name": "KSettings::PluginPage::load", "url": "classKSettings_1_1PluginPage.html#afd9147583571e4311fcda38dbd79f834", "keyword": "load KSettings::PluginPage::load KSettings::PluginPage", "text": "For KParts plugins everything should work automatically For your own type of plugins you might need to reimplement the KPluginInfo::pluginLoaded() method If that doesn t fit your needs you can also reimplement this method"}, {"type": "function", "name": "KSettings::PluginPage::pluginSelector", "url": "classKSettings_1_1PluginPage.html#a2c3cdac8e08ed50517a29e69fd9a3e93", "keyword": "pluginSelector KSettings::PluginPage::pluginSelector KSettings::PluginPage", "text": "a reference to the KPluginSelector"}, {"type": "function", "name": "KSettings::PluginPage::save", "url": "classKSettings_1_1PluginPage.html#aa37cc2f685db2c49c0b30c5754f89d66", "keyword": "save KSettings::PluginPage::save KSettings::PluginPage", "text": ""}, {"type": "namespace", "name": "KSettings::Dispatcher", "url": "namespaceKSettings_1_1Dispatcher.html", "keyword": "Dispatcher", "text": "Since your program does not have direct control over the KCMs that get loaded into KSettings::Dialog you need a way to get notified This is what you do Matthias Kretz"}, {"type": "function", "name": "KSettings::Dispatcher::componentNames", "url": "namespaceKSettings_1_1Dispatcher.html#a20dcbe8a071cd09a513e678e39682a35", "keyword": "componentNames KSettings::Dispatcher::componentNames KSettings::Dispatcher", "text": "a list of all the componentData names that are currently registered"}, {"type": "function", "name": "KSettings::Dispatcher::configForComponentName", "url": "namespaceKSettings_1_1Dispatcher.html#a13317969dd1a0cfb9f87192f711a8296", "keyword": "configForComponentName KSettings::Dispatcher::configForComponentName KSettings::Dispatcher", "text": "the KConfig object that belongs to the componentName"}, {"type": "function", "name": "KSettings::Dispatcher::registerComponent", "url": "namespaceKSettings_1_1Dispatcher.html#ab75700ddc2345404e16d2aec72c3b1d3", "keyword": "registerComponent KSettings::Dispatcher::registerComponent KSettings::Dispatcher", "text": "componentName is the string that is passed to KPluginFactory if it is used You can query it with MyPluginFactory::componentName() or from a KAboutData componentName is also the same name that is put into the desktop file of the KCMs for the X-KDE-ParentComponents componentName The name of the component recv The object that should receive the signal slot The slot to be called"}, {"type": "function", "name": "KSettings::Dispatcher::reparseConfiguration", "url": "namespaceKSettings_1_1Dispatcher.html#a3f165d512dd5118b1e10802d1dc7c3c3", "keyword": "reparseConfiguration KSettings::Dispatcher::reparseConfiguration KSettings::Dispatcher", "text": "The registered slot will be called componentName The value of X-KDE-ParentComponents"}, {"type": "function", "name": "KSettings::Dispatcher::syncConfiguration", "url": "namespaceKSettings_1_1Dispatcher.html#abf32ab9840424edefd0650047328c060", "keyword": "syncConfiguration KSettings::Dispatcher::syncConfiguration KSettings::Dispatcher", "text": "This is useful when some other KConfig objects will read/write from/to the same config file so that you can first write out the current state of the KConfig objects"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KCMUtils Utilities for KDE System Settings modules Introduction KCMUtils provides various classes to work with KCModules KCModules can be created with the KConfigWidgets framework"}]}