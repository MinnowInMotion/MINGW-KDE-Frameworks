<?xml version="1.0" encoding="UTF-8"?>
<add>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-domainbrowser.cpp</field>
    <field name="url">avahi-domainbrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-domainbrowser.cpp</field>
    <field name="url">avahi-domainbrowser_8cpp_source.html#l00034</field>
    <field name="keywords"></field>
    <field name="text">DomainBrowser::DomainBrowser DomainType type QObject parent QObject parent d new DomainBrowserPrivate type this DomainBrowser::~DomainBrowser d</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-domainbrowser.cpp</field>
    <field name="url">avahi-domainbrowser_8cpp_source.html#l00042</field>
    <field name="keywords"></field>
    <field name="text">DomainBrowser::startBrowse d m_started d m_started org::freedesktop::Avahi::Server s QDBusConnection::systemBus QDBusReply&lt;QDBusObjectPath&gt; rep s DomainBrowserNew d m_type Browsing AVAHI_DOMAIN_BROWSER_BROWSE AVAHI_DOMAIN_BROWSER_REGISTER rep isValid org::freedesktop::Avahi::DomainBrowser b org::freedesktop::Avahi::DomainBrowser rep value path QDBusConnection::systemBus connect b SIGNAL ItemNew QString uint d SLOT gotNewDomain QString uint connect b SIGNAL ItemRemove QString uint d SLOT gotRemoveDomain QString uint d m_browser b d m_type Browsing QString domains_evar qgetenv domains_evar isEmpty QStringList edomains domains_evar split Q_FOREACH QString s edomains d gotNewDomain s QString confDir QStandardPaths::writableLocation QStandardPaths::GenericConfigLocation QFile domains_cfg confDir domains_cfg open QIODevice::ReadOnly QIODevice::Text domains_cfg atEnd d gotNewDomain QString::fromUtf8 domains_cfg readLine data trimmed DomainBrowserPrivate::gotNewDomain QString domain uint QString decoded DNSToDomain domain m_domains contains decoded m_domains decoded emit m_parent domainAdded decoded DomainBrowserPrivate::gotRemoveDomain QString domain uint QString decoded DNSToDomain domain m_domains contains decoded emit m_parent domainRemoved decoded m_domains remove decoded</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-domainbrowser.cpp</field>
    <field name="url">avahi-domainbrowser_8cpp_source.html#l00100</field>
    <field name="keywords"></field>
    <field name="text">QStringList DomainBrowser::domains d m_domains values</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-domainbrowser.cpp</field>
    <field name="url">avahi-domainbrowser_8cpp_source.html#l00105</field>
    <field name="keywords"></field>
    <field name="text">DomainBrowser::isRunning d m_started</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00039</field>
    <field name="keywords"></field>
    <field name="text">PublicService::PublicService QString name QString type port QString domain QStringList subtypes QObject ServiceBase new PublicServicePrivate this name type domain port K_D domain isNull d m_domain d m_subtypes subtypes PublicService::~PublicService stop PublicServicePrivate::tryApply fillEntryGroup commit m_parent stop emit m_parent published</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00065</field>
    <field name="keywords"></field>
    <field name="text">PublicService::setServiceName QString serviceName K_D d m_serviceName serviceName d m_running d m_group Reset d tryApply</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00075</field>
    <field name="keywords"></field>
    <field name="text">PublicService::setDomain QString domain K_D d m_domain domain d m_running d m_group Reset d tryApply</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00085</field>
    <field name="keywords"></field>
    <field name="text">PublicService::setType QString type K_D d m_type type d m_running d m_group Reset d tryApply</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00095</field>
    <field name="keywords"></field>
    <field name="text">PublicService::setSubTypes QStringList subtypes K_D d m_subtypes subtypes d m_running d m_group Reset d tryApply</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00105</field>
    <field name="keywords"></field>
    <field name="text">QStringList PublicService::subtypes K_D d m_subtypes</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00111</field>
    <field name="keywords"></field>
    <field name="text">PublicService::setPort port K_D d m_port port d m_running d m_group Reset d tryApply</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00121</field>
    <field name="keywords"></field>
    <field name="text">PublicService::setTextData QMap&lt;QString, QByteArray&gt; textData K_D d m_textData textData d m_running d m_group Reset d tryApply</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00131</field>
    <field name="keywords"></field>
    <field name="text">PublicService::isPublished K_D d m_published</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00137</field>
    <field name="keywords"></field>
    <field name="text">PublicService::publish K_D publishAsync d m_running d m_published QCoreApplication::processEvents QEventLoop::ExcludeUserInputEvents d m_published</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00147</field>
    <field name="keywords"></field>
    <field name="text">PublicService::stop K_D d m_group d m_group Reset d m_running d m_published PublicServicePrivate::fillEntryGroup registerTypes m_group QDBusReply&lt;QDBusObjectPath&gt; rep m_server EntryGroupNew rep isValid m_group org::freedesktop::Avahi::EntryGroup rep value path QDBusConnection::systemBus connect m_group SIGNAL StateChanged QString SLOT groupStateChanged QString m_serviceName isNull QDBusReply&lt;QString&gt; rep m_server GetHostName rep isValid m_serviceName rep value QList&lt;QByteArray&gt; txt QMap&lt;QString, QByteArray&gt;::ConstIterator itEnd m_textData constEnd QMap&lt;QString, QByteArray&gt;::ConstIterator it m_textData constBegin it itEnd it it value isNull txt append it key toLatin1 txt append it key toLatin1 it value QDBusReply&lt;void&gt; ret m_group AddService m_serviceName m_type domainToDNS m_domain m_hostName m_port txt ret isValid ret error name QLatin1String QDBusReply&lt;QString&gt; rep m_server GetAlternativeServiceName m_serviceName rep isValid m_serviceName rep value Q_FOREACH QString subtype m_subtypes m_group AddServiceSubtype m_serviceName m_type domainToDNS m_domain subtype PublicServicePrivate::serverStateChanged s QString m_running s AVAHI_SERVER_INVALID m_parent stop emit m_parent published AVAHI_SERVER_REGISTERING AVAHI_SERVER_COLLISION m_group m_group Reset m_collision AVAHI_SERVER_RUNNING m_collision m_collision tryApply</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-publicservice.cpp</field>
    <field name="url">avahi-publicservice_8cpp_source.html#l00236</field>
    <field name="keywords"></field>
    <field name="text">PublicService::publishAsync K_D d m_running stop d m_server d m_server org::freedesktop::Avahi::Server QDBusConnection::systemBus connect d m_server SIGNAL StateChanged QString d SLOT serverStateChanged QString state AVAHI_SERVER_INVALID QDBusReply&lt;int&gt; rep d m_server GetState rep isValid state rep value d m_running d m_collision d serverStateChanged state QString PublicServicePrivate::groupStateChanged s QString reason s AVAHI_ENTRY_GROUP_COLLISION QDBusReply&lt;QString&gt; rep m_server GetAlternativeServiceName m_serviceName rep isValid m_parent setServiceName rep value serverStateChanged AVAHI_SERVER_INVALID reason AVAHI_ENTRY_GROUP_ESTABLISHED m_published emit m_parent published AVAHI_ENTRY_GROUP_FAILURE serverStateChanged AVAHI_SERVER_INVALID reason PublicService::virtual_hook</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-remoteservice.cpp</field>
    <field name="url">avahi-remoteservice_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-remoteservice.cpp</field>
    <field name="url">avahi-remoteservice_8cpp_source.html#l00032</field>
    <field name="keywords"></field>
    <field name="text">RemoteService::RemoteService QString name QString type QString domain ServiceBase new RemoteServicePrivate this name type domain RemoteService::~RemoteService</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-remoteservice.cpp</field>
    <field name="url">avahi-remoteservice_8cpp_source.html#l00041</field>
    <field name="keywords"></field>
    <field name="text">RemoteService::resolve K_D resolveAsync d m_running d m_resolved QCoreApplication::processEvents QEventLoop::ExcludeUserInputEvents d m_resolved</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-remoteservice.cpp</field>
    <field name="url">avahi-remoteservice_8cpp_source.html#l00051</field>
    <field name="keywords"></field>
    <field name="text">RemoteService::resolveAsync K_D d m_running d m_resolved registerTypes org::freedesktop::Avahi::Server s QDBusConnection::systemBus QDBusReply&lt;QDBusObjectPath&gt; rep s ServiceResolverNew d m_serviceName d m_type domainToDNS d m_domain rep isValid emit resolved org::freedesktop::Avahi::ServiceResolver b org::freedesktop::Avahi::ServiceResolver rep value path QDBusConnection::systemBus connect b SIGNAL Found QString QString QString QString QString ushort QList&lt;QByteArray&gt; uint d SLOT gotFound QString QString QString QString QString ushort QList&lt;QByteArray&gt; uint connect b SIGNAL Failure QString d SLOT gotError d m_running</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-remoteservice.cpp</field>
    <field name="url">avahi-remoteservice_8cpp_source.html#l00078</field>
    <field name="keywords"></field>
    <field name="text">RemoteService::isResolved K_D d m_resolved RemoteServicePrivate::gotError m_resolved stop emit m_parent resolved RemoteServicePrivate::gotFound QString name QString QString domain QString host QString ushort port QList&lt;QByteArray&gt; txt uint m_serviceName name m_hostName host m_port port m_domain DNSToDomain domain Q_FOREACH QByteArray x txt pos x indexOf pos m_textData x QByteArray m_textData x mid pos x mid pos x size pos m_resolved emit m_parent resolved RemoteServicePrivate::stop m_resolver m_resolver Free m_resolver m_resolver m_running RemoteService::virtual_hook</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicebrowser.cpp</field>
    <field name="url">avahi-servicebrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicebrowser.cpp</field>
    <field name="url">avahi-servicebrowser_8cpp_source.html#l00031</field>
    <field name="keywords"></field>
    <field name="text">ServiceBrowser::ServiceBrowser QString type autoResolve QString domain QString subtype d new ServiceBrowserPrivate this d m_type type d m_subtype subtype d m_autoResolve autoResolve d m_domain domain d m_timer setSingleShot</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicebrowser.cpp</field>
    <field name="url">avahi-servicebrowser_8cpp_source.html#l00041</field>
    <field name="keywords"></field>
    <field name="text">ServiceBrowser::State ServiceBrowser::isAvailable org::freedesktop::Avahi::Server s QDBusConnection::systemBus QDBusReply&lt;int&gt; rep s GetState rep isValid rep value Working Stopped ServiceBrowser::~ServiceBrowser d</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicebrowser.cpp</field>
    <field name="url">avahi-servicebrowser_8cpp_source.html#l00052</field>
    <field name="keywords"></field>
    <field name="text">ServiceBrowser::isAutoResolving d m_autoResolve</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicebrowser.cpp</field>
    <field name="url">avahi-servicebrowser_8cpp_source.html#l00057</field>
    <field name="keywords"></field>
    <field name="text">ServiceBrowser::startBrowse d m_running org::freedesktop::Avahi::Server s QDBusConnection::systemBus QString fullType d m_type d m_subtype isEmpty fullType d m_subtype d m_type QDBusReply&lt;QDBusObjectPath&gt; rep s ServiceBrowserNew fullType domainToDNS d m_domain rep isValid emit finished d m_running d m_browserFinished org::freedesktop::Avahi::ServiceBrowser b org::freedesktop::Avahi::ServiceBrowser rep value path QDBusConnection::systemBus connect b SIGNAL ItemNew QString QString QString uint d SLOT gotNewService QString QString QString uint connect b SIGNAL ItemRemove QString QString QString uint d SLOT gotRemoveService QString QString QString uint connect b SIGNAL AllForNow d SLOT browserFinished d m_browser b connect d m_timer SIGNAL timeout d SLOT browserFinished d m_timer start domainIsLocal d m_domain TIMEOUT_LAST_SERVICE TIMEOUT_START_WAN ServiceBrowserPrivate::serviceResolved success QObject sender_obj QObject sender RemoteService svr RemoteService sender_obj disconnect svr SIGNAL resolved SLOT serviceResolved QList&lt;RemoteService::Ptr&gt;::Iterator it m_duringResolve begin QList&lt;RemoteService::Ptr&gt;::Iterator itEnd m_duringResolve end it itEnd svr data it it itEnd success m_services emit m_parent serviceAdded RemoteService::Ptr svr m_duringResolve erase it queryFinished RemoteService::Ptr ServiceBrowserPrivate::find RemoteService::Ptr s QList&lt;RemoteService::Ptr&gt; where Q_FOREACH RemoteService::Ptr i where s i i RemoteService::Ptr ServiceBrowserPrivate::gotNewService QString name QString type QString domain uint m_timer start TIMEOUT_LAST_SERVICE RemoteService::Ptr svr RemoteService name type domain m_autoResolve connect svr data SIGNAL resolved SLOT serviceResolved m_duringResolve svr svr resolveAsync m_services svr emit m_parent serviceAdded svr ServiceBrowserPrivate::gotRemoveService QString name QString type QString domain uint m_timer start TIMEOUT_LAST_SERVICE RemoteService::Ptr tmpl RemoteService name type domain RemoteService::Ptr found find tmpl m_duringResolve found m_duringResolve removeAll found found find tmpl m_services found emit m_parent serviceRemoved found m_services removeAll found ServiceBrowserPrivate::browserFinished m_timer stop m_browserFinished queryFinished ServiceBrowserPrivate::queryFinished m_duringResolve count m_browserFinished emit m_parent finished</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicebrowser.cpp</field>
    <field name="url">avahi-servicebrowser_8cpp_source.html#l00160</field>
    <field name="keywords"></field>
    <field name="text">QList&lt;RemoteService::Ptr&gt; ServiceBrowser::services d m_services ServiceBrowser::virtual_hook</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicebrowser.cpp</field>
    <field name="url">avahi-servicebrowser_8cpp_source.html#l00168</field>
    <field name="keywords"></field>
    <field name="text">QHostAddress ServiceBrowser::resolveHostName QString hostname org::freedesktop::Avahi::Server s QDBusConnection::systemBus protocol QString name aprotocol QString address uint flags QDBusReply&lt;int&gt; reply s ResolveHostName hostname protocol name aprotocol address flags reply isValid QHostAddress address QHostAddress</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicebrowser.cpp</field>
    <field name="url">avahi-servicebrowser_8cpp_source.html#l00187</field>
    <field name="keywords"></field>
    <field name="text">QString ServiceBrowser::getLocalHostName org::freedesktop::Avahi::Server s QDBusConnection::systemBus QDBusReply&lt;QString&gt; reply s GetHostName reply isValid reply value QString</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi-servicetypebrowser.cpp</field>
    <field name="url">avahi-servicetypebrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD ServiceTypeBrowser::ServiceTypeBrowser QString domain QObject parent QObject parent d new ServiceTypeBrowserPrivate this d m_domain domain d m_timer setSingleShot ServiceTypeBrowser::~ServiceTypeBrowser d ServiceTypeBrowser::startBrowse d m_started d m_started org::freedesktop::Avahi::Server s QDBusConnection::systemBus QDBusReply&lt;QDBusObjectPath&gt; rep s ServiceTypeBrowserNew d m_domain rep isValid org::freedesktop::Avahi::ServiceTypeBrowser b org::freedesktop::Avahi::ServiceTypeBrowser rep value path QDBusConnection::systemBus connect b SIGNAL ItemNew QString QString uint d SLOT gotNewServiceType QString QString uint connect b SIGNAL ItemRemove QString QString uint d SLOT gotRemoveServiceType QString QString uint connect b SIGNAL AllForNow d SLOT finished connect d m_timer SIGNAL timeout d SLOT finished d m_browser b d m_timer start domainIsLocal d m_domain TIMEOUT_LAST_SERVICE TIMEOUT_START_WAN ServiceTypeBrowserPrivate::finished m_timer stop emit m_parent finished ServiceTypeBrowserPrivate::gotNewServiceType QString type QString uint m_timer start TIMEOUT_LAST_SERVICE m_servicetypes type emit m_parent serviceTypeAdded type ServiceTypeBrowserPrivate::gotRemoveServiceType QString type QString uint m_timer start TIMEOUT_LAST_SERVICE m_servicetypes removeAll type emit m_parent serviceTypeRemoved type QStringList ServiceTypeBrowser::serviceTypes d m_servicetypes</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi_entrygroup_interface.cpp</field>
    <field name="url">avahi__entrygroup__interface_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">OrgFreedesktopAvahiEntryGroupInterface::OrgFreedesktopAvahiEntryGroupInterface QString service QString path QDBusConnection connection QObject parent QDBusAbstractInterface service path staticInterfaceName connection parent OrgFreedesktopAvahiEntryGroupInterface::~OrgFreedesktopAvahiEntryGroupInterface</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi_entrygroup_interface.h</field>
    <field name="url">avahi__entrygroup__interface_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">OrgFreedesktopAvahiEntryGroupInterface QDBusAbstractInterface Q_OBJECT staticInterfaceName OrgFreedesktopAvahiEntryGroupInterface QString service QString path QDBusConnection connection QObject parent OrgFreedesktopAvahiEntryGroupInterface Q_SLOTS QDBusReply&lt;void&gt; AddAddress interface protocol uint flags QString name QString address QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue flags qVariantFromValue name qVariantFromValue address callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;void&gt; AddRecord interface protocol uint flags QString name ushort clazz ushort type uint ttl QByteArray rdata QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue flags qVariantFromValue name qVariantFromValue clazz qVariantFromValue type qVariantFromValue ttl qVariantFromValue rdata callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;void&gt; AddService interface protocol uint flags QString name QString type QString domain QString host ushort port QList&lt;QByteArray&gt; txt QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue flags qVariantFromValue name qVariantFromValue type qVariantFromValue domain qVariantFromValue host qVariantFromValue port qVariantFromValue txt callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;void&gt; AddServiceSubtype interface protocol uint flags QString name QString type QString domain QString subtype QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue flags qVariantFromValue name qVariantFromValue type qVariantFromValue domain qVariantFromValue subtype callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;void&gt; Commit QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;void&gt; Free QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;int&gt; GetState QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;bool&gt; IsEmpty QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;void&gt; Reset QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;void&gt; UpdateServiceTxt interface protocol uint flags QString name QString type QString domain QList&lt;QByteArray&gt; txt QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue flags qVariantFromValue name qVariantFromValue type qVariantFromValue domain qVariantFromValue txt callWithArgumentList QDBus::Block QLatin1String argumentList Q_SIGNALS StateChanged state QString error org freedesktop Avahi typedef ::OrgFreedesktopAvahiEntryGroupInterface EntryGroup</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi_server_interface.cpp</field>
    <field name="url">avahi__server__interface_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">OrgFreedesktopAvahiServerInterface::OrgFreedesktopAvahiServerInterface QString service QString path QDBusConnection connection QObject parent QDBusAbstractInterface service path staticInterfaceName connection parent OrgFreedesktopAvahiServerInterface::~OrgFreedesktopAvahiServerInterface KDNSSD registerTypes registered registered qDBusRegisterMetaType&lt;QList&lt;QByteArray&gt; registered QString domainToDNS QString domain domainIsLocal domain domain QUrl::toAce domain QString DNSToDomain QString domain domainIsLocal domain domain QUrl::fromAce domain toLatin1</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi_server_interface.h</field>
    <field name="url">avahi__server__interface_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">OrgFreedesktopAvahiServerInterface QDBusAbstractInterface Q_OBJECT staticInterfaceName OrgFreedesktopAvahiServerInterface QString service QString path QDBusConnection connection QObject parent OrgFreedesktopAvahiServerInterface Q_SLOTS QDBusReply&lt;QDBusObjectPath&gt; AddressResolverNew interface protocol QString address uint flags QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue address qVariantFromValue flags callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QDBusObjectPath&gt; DomainBrowserNew interface protocol QString domain btype uint flags QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue domain qVariantFromValue btype qVariantFromValue flags callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QDBusObjectPath&gt; EntryGroupNew QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;uint&gt; GetAPIVersion QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QString&gt; GetAlternativeHostName QString name QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue name callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QString&gt; GetAlternativeServiceName QString name QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue name callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QString&gt; GetDomainName QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QString&gt; GetHostName QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QString&gt; GetHostNameFqdn QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;uint&gt; GetLocalServiceCookie QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;int&gt; GetNetworkInterfaceIndexByName QString name QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue name callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QString&gt; GetNetworkInterfaceNameByIndex index QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue index callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;int&gt; GetState QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QString&gt; GetVersionString QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QDBusObjectPath&gt; HostNameResolverNew interface protocol QString name aprotocol uint flags QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue name qVariantFromValue aprotocol qVariantFromValue flags callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;bool&gt; IsNSSSupportAvailable QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QDBusObjectPath&gt; RecordBrowserNew interface protocol QString name ushort clazz ushort type uint flags QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue name qVariantFromValue clazz qVariantFromValue type qVariantFromValue flags callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;int&gt; ResolveAddress interface protocol QString address uint flags protocol_ aprotocol QString address_ QString name uint flags_ QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue address qVariantFromValue flags QDBusMessage reply callWithArgumentList QDBus::Block QLatin1String argumentList reply type QDBusMessage::ReplyMessage reply arguments count protocol_ qdbus_cast reply arguments at aprotocol qdbus_cast reply arguments at address_ qdbus_cast QString reply arguments at name qdbus_cast QString reply arguments at flags_ qdbus_cast uint reply arguments at reply QDBusReply&lt;int&gt; ResolveHostName interface protocol QString name aprotocol uint flags protocol_ QString name_ aprotocol_ QString address uint flags_ QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue name qVariantFromValue aprotocol qVariantFromValue flags QDBusMessage reply callWithArgumentList QDBus::Block QLatin1String argumentList reply type QDBusMessage::ReplyMessage reply arguments count protocol_ qdbus_cast reply arguments at name_ qdbus_cast QString reply arguments at aprotocol_ qdbus_cast reply arguments at address qdbus_cast QString reply arguments at flags_ qdbus_cast uint reply arguments at reply QDBusReply&lt;int&gt; ResolveService interface protocol QString name QString type QString domain aprotocol uint flags protocol_ QString name_ QString type_ QString domain_ QString host aprotocol_ QString address ushort port QList&lt;QByteArray&gt; txt uint flags_ QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue name qVariantFromValue type qVariantFromValue domain qVariantFromValue aprotocol qVariantFromValue flags QDBusMessage reply callWithArgumentList QDBus::Block QLatin1String argumentList reply type QDBusMessage::ReplyMessage reply arguments count protocol_ qdbus_cast reply arguments at name_ qdbus_cast QString reply arguments at type_ qdbus_cast QString reply arguments at domain_ qdbus_cast QString reply arguments at host qdbus_cast QString reply arguments at aprotocol_ qdbus_cast reply arguments at address qdbus_cast QString reply arguments at port qdbus_cast ushort reply arguments at txt qdbus_cast QList&lt;QByteArray&gt; reply arguments at flags_ qdbus_cast uint reply arguments at reply QDBusReply&lt;QDBusObjectPath&gt; ServiceBrowserNew interface protocol QString type QString domain uint flags QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue type qVariantFromValue domain qVariantFromValue flags callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QDBusObjectPath&gt; ServiceResolverNew interface protocol QString name QString type QString domain aprotocol uint flags QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue name qVariantFromValue type qVariantFromValue domain qVariantFromValue aprotocol qVariantFromValue flags callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;QDBusObjectPath&gt; ServiceTypeBrowserNew interface protocol QString domain uint flags QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue interface qVariantFromValue protocol qVariantFromValue domain qVariantFromValue flags callWithArgumentList QDBus::Block QLatin1String argumentList QDBusReply&lt;void&gt; SetHostName QString name QList&lt;QVariant&gt; argumentList argumentList qVariantFromValue name callWithArgumentList QDBus::Block QLatin1String argumentList Q_SIGNALS StateChanged state QString error KDNSSD registerTypes QString domainToDNS QString domain QString DNSToDomain QString domain org freedesktop Avahi typedef ::OrgFreedesktopAvahiServerInterface Server</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi_serviceresolver_interface.cpp</field>
    <field name="url">avahi__serviceresolver__interface_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">OrgFreedesktopAvahiServiceResolverInterface::OrgFreedesktopAvahiServiceResolverInterface QString service QString path QDBusConnection connection QObject parent QDBusAbstractInterface service path staticInterfaceName connection parent OrgFreedesktopAvahiServiceResolverInterface::~OrgFreedesktopAvahiServiceResolverInterface</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">avahi_serviceresolver_interface.h</field>
    <field name="url">avahi__serviceresolver__interface_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">OrgFreedesktopAvahiServiceResolverInterface QDBusAbstractInterface Q_OBJECT staticInterfaceName OrgFreedesktopAvahiServiceResolverInterface QString service QString path QDBusConnection connection QObject parent OrgFreedesktopAvahiServiceResolverInterface Q_SLOTS QDBusReply&lt;void&gt; Free QList&lt;QVariant&gt; argumentList callWithArgumentList QDBus::Block QLatin1String argumentList Q_SIGNALS Failure QString error Found interface protocol QString name QString type QString domain QString host aprotocol QString address ushort port QList&lt;QByteArray&gt; txt uint flags org freedesktop Avahi typedef ::OrgFreedesktopAvahiServiceResolverInterface ServiceResolver</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainbrowser.h</field>
    <field name="url">domainbrowser_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">QStringList KDNSSD DomainBrowserPrivate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainbrowser.h</field>
    <field name="url">domainbrowser_8h_source.html#l00054</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD_EXPORT DomainBrowser QObject Q_OBJECT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainbrowser.h</field>
    <field name="url">domainbrowser_8h_source.html#l00061</field>
    <field name="keywords"></field>
    <field name="text">DomainType</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainbrowser.h</field>
    <field name="url">domainbrowser_8h_source.html#l00063</field>
    <field name="keywords"></field>
    <field name="text">Browsing</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainbrowser.h</field>
    <field name="url">domainbrowser_8h_source.html#l00065</field>
    <field name="keywords"></field>
    <field name="text">Publishing DomainBrowser DomainType type QObject parent DomainBrowser QStringList domains startBrowse isRunning Q_SIGNALS domainRemoved QString domain domainAdded QString domain DomainBrowserPrivate DomainBrowserPrivate d</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.cpp</field>
    <field name="url">domainmodel_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD DomainModelPrivate DomainBrowser m_browser</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.cpp</field>
    <field name="url">domainmodel_8cpp_source.html#l00032</field>
    <field name="keywords"></field>
    <field name="text">DomainModel::DomainModel DomainBrowser browser QObject parent QAbstractItemModel parent d new DomainModelPrivate d m_browser browser browser setParent connect browser SIGNAL domainAdded QString SIGNAL layoutChanged connect browser SIGNAL domainRemoved QString SIGNAL layoutChanged browser startBrowse DomainModel::~DomainModel d</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.cpp</field>
    <field name="url">domainmodel_8cpp_source.html#l00049</field>
    <field name="keywords"></field>
    <field name="text">DomainModel::columnCount QModelIndex parent Q_UNUSED parent</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.cpp</field>
    <field name="url">domainmodel_8cpp_source.html#l00054</field>
    <field name="keywords"></field>
    <field name="text">DomainModel::rowCount QModelIndex parent parent isValid d m_browser domains size</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.cpp</field>
    <field name="url">domainmodel_8cpp_source.html#l00059</field>
    <field name="keywords"></field>
    <field name="text">QModelIndex DomainModel::parent QModelIndex index Q_UNUSED index QModelIndex</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.cpp</field>
    <field name="url">domainmodel_8cpp_source.html#l00065</field>
    <field name="keywords"></field>
    <field name="text">QModelIndex DomainModel::index row column QModelIndex parent hasIndex row column parent createIndex row column QModelIndex</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.cpp</field>
    <field name="url">domainmodel_8cpp_source.html#l00070</field>
    <field name="keywords"></field>
    <field name="text">DomainModel::hasIndex row column QModelIndex parent parent isValid column row &lt; 0 || row &gt; rowCount parent</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.cpp</field>
    <field name="url">domainmodel_8cpp_source.html#l00084</field>
    <field name="keywords"></field>
    <field name="text">QVariant DomainModel::data QModelIndex index role index isValid QVariant hasIndex index row index column index parent QVariant QStringList domains d m_browser domains role Qt::DisplayRole domains index row QVariant</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.h</field>
    <field name="url">domainmodel_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD DomainModelPrivate DomainBrowser</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">domainmodel.h</field>
    <field name="url">domainmodel_8h_source.html#l00052</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD_EXPORT DomainModel QAbstractItemModel Q_OBJECT DomainModel DomainBrowser browser QObject parent DomainModel columnCount QModelIndex parent QModelIndex Q_DECL_OVERRIDE rowCount QModelIndex parent QModelIndex Q_DECL_OVERRIDE QModelIndex parent QModelIndex index Q_DECL_OVERRIDE QModelIndex index row column QModelIndex parent QModelIndex Q_DECL_OVERRIDE QVariant data QModelIndex index role Qt::DisplayRole Q_DECL_OVERRIDE hasIndex row column QModelIndex parent DomainModelPrivate d DomainModelPrivate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">dummy-domainbrowser.cpp</field>
    <field name="url">dummy-domainbrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD DomainBrowser::DomainBrowser DomainType QObject parent QObject parent d DomainBrowser::~DomainBrowser DomainBrowser::startBrowse QStringList DomainBrowser::domains QStringList DomainBrowser::isRunning</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">dummy-publicservice.cpp</field>
    <field name="url">dummy-publicservice_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD PublicService::PublicService QString name QString type port QString domain QStringList QObject ServiceBase name type QString domain port domain isNull d m_domain QLatin1String PublicService::~PublicService PublicService::setServiceName QString serviceName d m_serviceName serviceName PublicService::setDomain QString domain d m_domain domain PublicService::setTextData QMap&lt;QString, QByteArray&gt; textData d m_textData textData PublicService::setType QString type d m_type type PublicService::setSubTypes QStringList PublicService::setPort port d m_port port QStringList PublicService::subtypes QStringList PublicService::isPublished PublicService::publish PublicService::stop PublicService::publishAsync emit published PublicService::virtual_hook</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">dummy-remoteservice.cpp</field>
    <field name="url">dummy-remoteservice_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD RemoteService::RemoteService QString name QString type QString domain ServiceBase name type domain RemoteService::~RemoteService RemoteService::resolve RemoteService::resolveAsync emit resolved RemoteService::isResolved RemoteService::virtual_hook</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">dummy-servicebrowser.cpp</field>
    <field name="url">dummy-servicebrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD ServiceBrowser::ServiceBrowser QString QString QString d ServiceBrowser::isAutoResolving ServiceBrowser::State ServiceBrowser::isAvailable Unsupported ServiceBrowser::~ ServiceBrowser ServiceBrowser::startBrowse emit finished QList&lt;RemoteService::Ptr&gt; ServiceBrowser::services QList&lt;RemoteService::Ptr&gt; ServiceBrowser::virtual_hook QHostAddress ServiceBrowser::resolveHostName QString hostname Q_UNUSED hostname QHostAddress QString ServiceBrowser::getLocalHostName QString</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">dummy-servicetypebrowser.cpp</field>
    <field name="url">dummy-servicetypebrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD ServiceTypeBrowser::ServiceTypeBrowser QString QObject parent QObject parent d ServiceTypeBrowser::~ServiceTypeBrowser ServiceTypeBrowser::startBrowse QStringList ServiceTypeBrowser::serviceTypes QStringList</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-domainbrowser.cpp</field>
    <field name="url">mdnsd-domainbrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD domain_callback DNSServiceRef DNSServiceFlags flags uint32_t DNSServiceErrorType errorCode replyDomain context DomainBrowser::DomainBrowser DomainType type QObject parent QObject parent d new DomainBrowserPrivate type this DomainBrowser::~DomainBrowser d DomainBrowser::startBrowse d isRunning DNSServiceRef ref DNSServiceEnumerateDomains ref d m_type Browsing kDNSServiceFlagsBrowseDomains kDNSServiceFlagsBrowseDomains domain_callback reinterpret_cast&lt;void *&gt; d kDNSServiceErr_NoError d setRef ref DomainBrowserPrivate::customEvent QEvent event event type QEvent::User SD_ERROR stop event type QEvent::User SD_ADDREMOVE AddRemoveEvent aev AddRemoveEvent event aev m_op AddRemoveEvent::Add m_domains contains aev m_domain m_domains append aev m_domain emit m_parent domainAdded aev m_domain m_domains removeAll aev m_domain emit m_parent domainRemoved aev m_domain QStringList DomainBrowser::domains d m_domains DomainBrowser::isRunning d isRunning domain_callback DNSServiceRef DNSServiceFlags flags uint32_t DNSServiceErrorType errorCode replyDomain context QObject obj QObject context errorCode kDNSServiceErr_NoError ErrorEvent err QCoreApplication::sendEvent obj err flags kDNSServiceFlagsDefault AddRemoveEvent arev flags kDNSServiceFlagsAdd AddRemoveEvent::Add AddRemoveEvent::Remove QString QString DNSToDomain replyDomain flags kDNSServiceFlagsMoreComing QCoreApplication::sendEvent obj arev</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-publicservice.cpp</field>
    <field name="url">mdnsd-publicservice_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD publish_callback DNSServiceRef DNSServiceFlags DNSServiceErrorType errorCode name context PublicServicePrivate Responder ServiceBasePrivate PublicServicePrivate PublicService parent QString name QString type port QString domain Responder ServiceBasePrivate name type domain QString port m_published false m_parent parent m_published PublicService m_parent QStringList m_subtypes customEvent QEvent event PublicService::PublicService QString name QString type port QString domain QStringList subtypes QObject ServiceBase new PublicServicePrivate this name type port domain K_D domain isNull d m_domain d m_subtypes subtypes PublicService::~PublicService stop PublicService::setServiceName QString serviceName K_D d m_serviceName serviceName d isRunning stop publishAsync PublicService::setDomain QString domain K_D d m_domain domain d isRunning stop publishAsync QStringList PublicService::subtypes K_D d m_subtypes PublicService::setType QString type K_D d m_type type d isRunning stop publishAsync PublicService::setSubTypes QStringList subtypes K_D d m_subtypes subtypes d isRunning stop publishAsync PublicService::setPort port K_D d m_port port d isRunning stop publishAsync PublicService::isPublished K_D d m_published PublicService::setTextData QMap&lt;QString, QByteArray&gt; textData K_D d m_textData textData d isRunning stop publishAsync PublicService::publish K_D publishAsync d isRunning d m_published d process d m_published PublicService::stop K_D d stop d m_published PublicService::publishAsync K_D d isRunning stop TXTRecordRef txt TXTRecordCreate txt QMap&lt;QString, QByteArray&gt;::ConstIterator itEnd d m_textData cend QMap&lt;QString, QByteArray&gt;::ConstIterator it d m_textData cbegin it itEnd it TXTRecordSetValue txt it key toUtf8 it value length it value kDNSServiceErr_NoError TXTRecordDeallocate txt emit published DNSServiceRef ref QString fullType d m_type Q_FOREACH QString subtype d m_subtypes fullType subtype DNSServiceRegister ref d m_serviceName toUtf8 fullType toLatin1 constData domainToDNS d m_domain NULL htons d m_port TXTRecordGetLength txt TXTRecordGetBytesPtr txt publish_callback d kDNSServiceErr_NoError d setRef ref TXTRecordDeallocate txt d isRunning emit published publish_callback DNSServiceRef DNSServiceFlags DNSServiceErrorType errorCode name context QObject obj QObject context errorCode kDNSServiceErr_NoError ErrorEvent err QCoreApplication::sendEvent obj err PublishEvent pev QString::fromUtf8 name QCoreApplication::sendEvent obj pev PublicServicePrivate::customEvent QEvent event event type QEvent::User SD_ERROR m_parent stop emit m_parent published event type QEvent::User SD_PUBLISH m_published emit m_parent published m_serviceName PublishEvent event m_name PublicService::virtual_hook</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-remoteservice.cpp</field>
    <field name="url">mdnsd-remoteservice_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD resolve_callback DNSServiceRef DNSServiceFlags uint32_t DNSServiceErrorType errorCode hosttarget uint16_t port uint16_t txtLen txtRecord context RemoteServicePrivate Responder ServiceBasePrivate RemoteServicePrivate RemoteService parent QString name QString type QString domain Responder ServiceBasePrivate name type domain QString m_resolved false m_parent parent m_resolved RemoteService m_parent customEvent QEvent event RemoteService::RemoteService QString name QString type QString domain ServiceBase new RemoteServicePrivate this name type domain RemoteService::~RemoteService RemoteService::resolve K_D resolveAsync d isRunning d m_resolved d process d stop d m_resolved RemoteService::resolveAsync K_D d isRunning d m_resolved DNSServiceRef ref DNSServiceResolve ref d m_serviceName toUtf8 d m_type toLatin1 constData domainToDNS d m_domain DNSServiceResolveReply resolve_callback reinterpret_cast&lt;void *&gt; d kDNSServiceErr_NoError d setRef ref d isRunning emit resolved RemoteService::isResolved K_D d m_resolved RemoteServicePrivate::customEvent QEvent event event type QEvent::User SD_ERROR stop m_resolved emit m_parent resolved event type QEvent::User SD_RESOLVE ResolveEvent rev ResolveEvent event m_hostName rev m_hostname m_port rev m_port m_textData rev m_txtdata m_resolved emit m_parent resolved RemoteService::virtual_hook resolve_callback DNSServiceRef DNSServiceFlags uint32_t DNSServiceErrorType errorCode hosttarget uint16_t port uint16_t txtLen txtRecord context QObject obj QObject context errorCode kDNSServiceErr_NoError ErrorEvent err QCoreApplication::sendEvent obj err key index valueLen QMap&lt;QString, QByteArray&gt; map voidValue TXTRecordGetItemAtIndex txtLen txtRecord index key valueLen voidValue kDNSServiceErr_NoError voidValue map QString::fromUtf8 key QByteArray voidValue valueLen map QString::fromUtf8 key clear ResolveEvent rev DNSToDomain hosttarget ntohs port map QCoreApplication::sendEvent obj rev</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-responder.cpp</field>
    <field name="url">mdnsd-responder_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD Responder::Responder DNSServiceRef ref QObject parent QObject parent m_ref m_socket setRef ref Responder::setRef DNSServiceRef ref m_socket m_ref stop m_running m_ref ref m_ref fd DNSServiceRefSockFD ref fd m_socket QSocketNotifier fd QSocketNotifier::Read connect m_socket SIGNAL activated SLOT process m_running Responder::~Responder stop Responder::stop m_socket m_socket m_ref DNSServiceRefDeallocate m_ref m_ref m_running Responder::process DNSServiceProcessResult m_ref kDNSServiceErr_NoError stop</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-responder.cpp</field>
    <field name="url">mdnsd-responder_8cpp_source.html#l00076</field>
    <field name="keywords"></field>
    <field name="text">Responder::isRunning m_running QByteArray domainToDNS QString domain domainIsLocal domain domain toUtf8 QUrl::toAce domain QString DNSToDomain domain domainIsLocal domain QString::fromUtf8 domain QUrl::fromAce domain</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-responder.h</field>
    <field name="url">mdnsd-responder_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-responder.h</field>
    <field name="url">mdnsd-responder_8h_source.html#l00037</field>
    <field name="keywords"></field>
    <field name="text">Responder QObject Q_OBJECT Responder DNSServiceRef ref QObject parent Responder isRunning setRef DNSServiceRef ref stop Q_SLOTS process DNSServiceRef m_ref m_running QSocketNotifier m_socket QByteArray domainToDNS QString domain QString DNSToDomain domain</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-sdevent.h</field>
    <field name="url">mdnsd-sdevent_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD Operation SD_ERROR SD_ADDREMOVE SD_PUBLISH SD_RESOLVE ErrorEvent QEvent ErrorEvent QEvent QEvent Type QEvent User SD_ERROR AddRemoveEvent QEvent Operation Add Remove AddRemoveEvent Operation op QString name QString type QString domain last QEvent QEvent Type QEvent User SD_ADDREMOVE m_op op m_name name m_type type m_domain domain m_last last Operation m_op QString m_name QString m_type QString m_domain m_last PublishEvent QEvent PublishEvent QString name QEvent QEvent Type QEvent User SD_PUBLISH m_name name QString m_name ResolveEvent QEvent ResolveEvent QString hostname port QMap&lt;QString, QByteArray&gt; txtdata QEvent QEvent Type QEvent User SD_RESOLVE m_hostname hostname m_port port m_txtdata txtdata QString m_hostname m_port QMap&lt;QString, QByteArray&gt; m_txtdata</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-servicebrowser.cpp</field>
    <field name="url">mdnsd-servicebrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD query_callback DNSServiceRef DNSServiceFlags flags uint32_t DNSServiceErrorType errorCode serviceName regtype replyDomain context ServiceBrowser::ServiceBrowser QString type autoResolve QString domain QString subtype d new ServiceBrowserPrivate this d m_type type d m_autoResolve autoResolve d m_domain domain d m_subtype subtype d timeout setSingleShot connect d timeout SIGNAL timeout d SLOT onTimeout ServiceBrowser::State ServiceBrowser::isAvailable Working ServiceBrowser::~ ServiceBrowser d ServiceBrowser::isAutoResolving d m_autoResolve ServiceBrowserPrivate::serviceResolved success QObject sender_obj QObject sender RemoteService svr RemoteService sender_obj disconnect svr SIGNAL resolved SLOT serviceResolved QList&lt;RemoteService::Ptr&gt;::Iterator it m_duringResolve begin QList&lt;RemoteService::Ptr&gt;::Iterator itEnd m_duringResolve end it itEnd svr data it it itEnd success m_services emit m_parent serviceAdded RemoteService::Ptr svr m_duringResolve erase it queryFinished ServiceBrowser::startBrowse d isRunning d m_finished DNSServiceRef ref QString fullType d m_type d m_subtype isEmpty fullType d m_subtype d m_type DNSServiceBrowse ref fullType toLatin1 constData domainToDNS d m_domain query_callback d kDNSServiceErr_NoError d setRef ref d isRunning emit finished d timeout start domainIsLocal d m_domain TIMEOUT_LAN TIMEOUT_WAN ServiceBrowserPrivate::queryFinished m_duringResolve count m_finished emit m_parent finished QList&lt;RemoteService::Ptr&gt; ServiceBrowser::services d m_services ServiceBrowser::virtual_hook RemoteService::Ptr ServiceBrowserPrivate::find RemoteService::Ptr s QList&lt;RemoteService::Ptr&gt; where Q_FOREACH RemoteService::Ptr i where s i i RemoteService::Ptr ServiceBrowserPrivate::customEvent QEvent event event type QEvent::User SD_ERROR stop m_finished queryFinished event type QEvent::User SD_ADDREMOVE AddRemoveEvent aev AddRemoveEvent event RemoteService::Ptr svr RemoteService aev m_name aev m_type left aev m_type length aev m_domain aev m_op AddRemoveEvent::Add m_autoResolve connect svr data SIGNAL resolved SLOT serviceResolved m_duringResolve svr svr resolveAsync m_services svr emit m_parent serviceAdded svr RemoteService::Ptr found find svr m_duringResolve found m_duringResolve removeAll found found find svr m_services found emit m_parent serviceRemoved found m_services removeAll found m_finished aev m_last m_finished queryFinished ServiceBrowserPrivate::onTimeout m_finished queryFinished query_callback DNSServiceRef DNSServiceFlags flags uint32_t DNSServiceErrorType errorCode serviceName regtype replyDomain context QObject obj QObject context errorCode kDNSServiceErr_NoError ErrorEvent err QCoreApplication::sendEvent obj err AddRemoveEvent arev flags kDNSServiceFlagsAdd AddRemoveEvent::Add AddRemoveEvent::Remove QString::fromUtf8 serviceName regtype DNSToDomain replyDomain flags kDNSServiceFlagsMoreComing QCoreApplication::sendEvent obj arev QHostAddress ServiceBrowser::resolveHostName QString hostname QHostAddress QString ServiceBrowser::getLocalHostName QHostInfo::localHostName</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">mdnsd-servicetypebrowser.cpp</field>
    <field name="url">mdnsd-servicetypebrowser_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD ServiceTypeBrowser::ServiceTypeBrowser QString domain QObject parent QObject parent d new ServiceTypeBrowserPrivate this d m_browser ServiceBrowser domain connect d m_browser SIGNAL serviceAdded KDNSSD::RemoteService::Ptr d SLOT newService KDNSSD::RemoteService::Ptr connect d m_browser SIGNAL serviceRemoved KDNSSD::RemoteService::Ptr d SLOT removeService KDNSSD::RemoteService::Ptr connect d m_browser SIGNAL finished SIGNAL finished ServiceTypeBrowser::~ServiceTypeBrowser d QStringList ServiceTypeBrowser::serviceTypes d m_servicetypes ServiceTypeBrowser::startBrowse d m_browser startBrowse ServiceTypeBrowserPrivate::newService KDNSSD::RemoteService::Ptr srv QString type srv serviceName srv type m_servicetypes type emit m_parent serviceTypeAdded type ServiceTypeBrowserPrivate::removeService KDNSSD::RemoteService::Ptr srv QString type srv serviceName srv type m_servicetypes removeAll type emit m_parent serviceTypeRemoved type</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">publicservice.h</field>
    <field name="url">publicservice_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD PublicServicePrivate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">publicservice.h</field>
    <field name="url">publicservice_8h_source.html#l00059</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD_EXPORT PublicService QObject ServiceBase Q_OBJECT PublicService QString name QString QString type QString port QString domain QString QStringList subtypes QStringList PublicService stop publish isPublished publishAsync setTextData QMap&lt;QString, QByteArray&gt; textData setServiceName QString serviceName setType QString type setSubTypes QStringList subtypes setPort port setDomain QString domain QStringList subtypes Q_SIGNALS published successful PublicServicePrivate virtual_hook</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">remoteservice.h</field>
    <field name="url">remoteservice_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD RemoteServicePrivate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">remoteservice.h</field>
    <field name="url">remoteservice_8h_source.html#l00050</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD_EXPORT RemoteService QObject ServiceBase Q_OBJECT QExplicitlySharedDataPointer&lt;RemoteService&gt; Ptr RemoteService QString name QString type QString domain RemoteService resolveAsync resolve isResolved Q_SIGNALS resolved successful virtual_hook data Q_DECL_OVERRIDE RemoteServicePrivate Q_DECLARE_METATYPE KDNSSD::RemoteService::Ptr</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00030</field>
    <field name="keywords"></field>
    <field name="text">ServiceBase::ServiceBase QString name QString type QString domain QString host port d new ServiceBasePrivate name type domain host port ServiceBase::ServiceBase ServiceBasePrivate _d d _d ServiceBase::~ServiceBase d</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00044</field>
    <field name="keywords"></field>
    <field name="text">QString ServiceBase::serviceName d m_serviceName</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00049</field>
    <field name="keywords"></field>
    <field name="text">QString ServiceBase::type d m_type</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00054</field>
    <field name="keywords"></field>
    <field name="text">QString ServiceBase::domain d m_domain</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00059</field>
    <field name="keywords"></field>
    <field name="text">QString ServiceBase::hostName d m_hostName</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00064</field>
    <field name="keywords"></field>
    <field name="text">ServiceBase::port d m_port</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00068</field>
    <field name="keywords"></field>
    <field name="text">QMap&lt;QString, QByteArray&gt; ServiceBase::textData d m_textData</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00073</field>
    <field name="keywords"></field>
    <field name="text">ServiceBase::operator== ServiceBase o d m_domain o d m_domain d m_serviceName o d m_serviceName d m_type o d m_type</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.cpp</field>
    <field name="url">servicebase_8cpp_source.html#l00078</field>
    <field name="keywords"></field>
    <field name="text">ServiceBase::operator!= ServiceBase o o ServiceBase::virtual_hook domainIsLocal QString domain domain section toLower QLatin1String</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.h</field>
    <field name="url">servicebase_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD ServiceBasePrivate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebase.h</field>
    <field name="url">servicebase_8h_source.html#l00051</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD_EXPORT ServiceBase QSharedData QExplicitlySharedDataPointer&lt;ServiceBase&gt; Ptr ServiceBase QString name QString QString type QString QString domain QString QString host QString port ServiceBase QString serviceName QString type QString domain QString hostName port QMap&lt;QString, QByteArray&gt; textData operator== ServiceBase o operator!= ServiceBase o ServiceBase ServiceBasePrivate d virtual_hook ServiceBasePrivate d domainIsLocal QString domain</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebrowser.h</field>
    <field name="url">servicebrowser_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD DomainBrowser ServiceBrowserPrivate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebrowser.h</field>
    <field name="url">servicebrowser_8h_source.html#l00063</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD_EXPORT ServiceBrowser QObject Q_OBJECT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebrowser.h</field>
    <field name="url">servicebrowser_8h_source.html#l00071</field>
    <field name="keywords"></field>
    <field name="text">State</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebrowser.h</field>
    <field name="url">servicebrowser_8h_source.html#l00073</field>
    <field name="keywords"></field>
    <field name="text">Working</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebrowser.h</field>
    <field name="url">servicebrowser_8h_source.html#l00075</field>
    <field name="keywords"></field>
    <field name="text">Stopped</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicebrowser.h</field>
    <field name="url">servicebrowser_8h_source.html#l00077</field>
    <field name="keywords"></field>
    <field name="text">Unsupported ServiceBrowser QString type autoResolve QString domain QString QString subtype QString ServiceBrowser QList&lt;RemoteService::Ptr&gt; services startBrowse State isAvailable isAutoResolving QHostAddress resolveHostName QString hostname QString getLocalHostName Q_SIGNALS serviceAdded KDNSSD::RemoteService::Ptr service serviceRemoved KDNSSD::RemoteService::Ptr service finished virtual_hook ServiceBrowserPrivate ServiceBrowserPrivate d</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD ServiceModelPrivate ServiceBrowser m_browser</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00031</field>
    <field name="keywords"></field>
    <field name="text">ServiceModel::ServiceModel ServiceBrowser browser QObject parent QAbstractItemModel parent d new ServiceModelPrivate d m_browser browser browser setParent connect browser SIGNAL serviceAdded KDNSSD::RemoteService::Ptr SIGNAL layoutChanged connect browser SIGNAL serviceRemoved KDNSSD::RemoteService::Ptr SIGNAL layoutChanged browser startBrowse ServiceModel::~ServiceModel d</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00048</field>
    <field name="keywords"></field>
    <field name="text">ServiceModel::columnCount QModelIndex d m_browser isAutoResolving</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00052</field>
    <field name="keywords"></field>
    <field name="text">ServiceModel::rowCount QModelIndex parent parent isValid d m_browser services size</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00057</field>
    <field name="keywords"></field>
    <field name="text">QModelIndex ServiceModel::parent QModelIndex QModelIndex</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00062</field>
    <field name="keywords"></field>
    <field name="text">QModelIndex ServiceModel::index row column QModelIndex parent hasIndex row column parent createIndex row column QModelIndex</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00067</field>
    <field name="keywords"></field>
    <field name="text">ServiceModel::hasIndex row column QModelIndex parent parent isValid column &lt; 0 || column &gt; columnCount row &lt; 0 || row &gt; rowCount parent</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00081</field>
    <field name="keywords"></field>
    <field name="text">QVariant ServiceModel::data QModelIndex index role index isValid QVariant hasIndex index row index column index parent QVariant QList&lt;RemoteService::Ptr&gt; srv d m_browser services uint role Qt::DisplayRole index column ServiceName srv index row serviceName Host srv index row hostName Port srv index row port ServicePtrRole QVariant ret ret setValue srv index row ret QVariant</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.cpp</field>
    <field name="url">servicemodel_8cpp_source.html#l00104</field>
    <field name="keywords"></field>
    <field name="text">QVariant ServiceModel::headerData section Qt::Orientation orientation role orientation Qt::Horizontal role Qt::DisplayRole QVariant section ServiceName tr Host tr Port tr QVariant</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.h</field>
    <field name="url">servicemodel_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD ServiceModelPrivate ServiceBrowser</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.h</field>
    <field name="url">servicemodel_8h_source.html#l00065</field>
    <field name="keywords"></field>
    <field name="text">KDNSSD_EXPORT ServiceModel QAbstractItemModel Q_OBJECT</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.h</field>
    <field name="url">servicemodel_8h_source.html#l00072</field>
    <field name="keywords"></field>
    <field name="text">AdditionalRoles</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.h</field>
    <field name="url">servicemodel_8h_source.html#l00073</field>
    <field name="keywords"></field>
    <field name="text">ServicePtrRole</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicemodel.h</field>
    <field name="url">servicemodel_8h_source.html#l00082</field>
    <field name="keywords"></field>
    <field name="text">ModelColumns ServiceName Host Port ServiceModel ServiceBrowser browser QObject parent ServiceModel columnCount QModelIndex parent QModelIndex Q_DECL_OVERRIDE rowCount QModelIndex parent QModelIndex Q_DECL_OVERRIDE QModelIndex parent QModelIndex index Q_DECL_OVERRIDE QModelIndex index row column QModelIndex parent QModelIndex Q_DECL_OVERRIDE QVariant data QModelIndex index role Qt::DisplayRole Q_DECL_OVERRIDE QVariant headerData section Qt::Orientation orientation role Qt::DisplayRole Q_DECL_OVERRIDE hasIndex row column QModelIndex parent ServiceModelPrivate d ServiceModelPrivate</field>
  </doc>
  <doc>
    <field name="type">source</field>
    <field name="name">servicetypebrowser.h</field>
    <field name="url">servicetypebrowser_8h_source.html#l00001</field>
    <field name="keywords"></field>
    <field name="text">QStringList KDNSSD ServiceTypeBrowserPrivate KDNSSD_EXPORT ServiceTypeBrowser QObject Q_OBJECT ServiceTypeBrowser QString domain QString QObject parent ServiceTypeBrowser QStringList serviceTypes startBrowse KDNSSD_DEPRECATED isRunning Q_SIGNALS serviceTypeRemoved QString type serviceTypeAdded QString type finished ServiceTypeBrowserPrivate ServiceTypeBrowserPrivate d</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KDNSSD::DomainBrowser</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html</field>
    <field name="keywords">DomainBrowser</field>
    <field name="text">Usage of this class is very simple If you are interested in browsing for services simple do If you are interested in domains where you can register services usage is identical except that you should pass KDNSSD::DomainBrowser::Registering to the constructor Jakub Stachowski</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">KDNSSD::DomainBrowser::DomainType</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#af93e72d9dad62d4fa255bd0fa66fb477</field>
    <field name="keywords">DomainType KDNSSD::DomainBrowser::DomainType KDNSSD::DomainBrowser</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">KDNSSD::DomainBrowser::Browsing</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#af93e72d9dad62d4fa255bd0fa66fb477a6cfe2826b583285428ee3f5bcca1cc90</field>
    <field name="keywords">Browsing KDNSSD::DomainBrowser::Browsing KDNSSD::DomainBrowser</field>
    <field name="text">Domains recommended for browsing for services on using ServiceBrowser</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">KDNSSD::DomainBrowser::Publishing</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#af93e72d9dad62d4fa255bd0fa66fb477ab3930c8de92b640c057fd198a51c02f8</field>
    <field name="keywords">Publishing KDNSSD::DomainBrowser::Publishing KDNSSD::DomainBrowser</field>
    <field name="text">Domains recommended for publishing to using PublicService</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KDNSSD::DomainBrowser::domainAdded</field>
    <field name="args">(const QString &amp;domain)</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#a72d048bb239ae571548354788b43ba7d</field>
    <field name="keywords">domainAdded KDNSSD::DomainBrowser::domainAdded KDNSSD::DomainBrowser</field>
    <field name="text">If the requested DomainType is Browsing this will also be emitted for the domains specified in the global configuration domain the name of the domain domainRemoved()</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KDNSSD::DomainBrowser::domainRemoved</field>
    <field name="args">(const QString &amp;domain)</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#a2903f01a0aff12859276d0fbe0995e3d</field>
    <field name="keywords">domainRemoved KDNSSD::DomainBrowser::domainRemoved KDNSSD::DomainBrowser</field>
    <field name="text">Emitted when domain has been removed from browsing list or the publishing list depending on which list was requested in the constructor domain the name of the domain domainAdded()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainBrowser::DomainBrowser</field>
    <field name="args">(DomainType type, QObject *parent=0)</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#aca8815be064f7c8384f3516e2f16bb09</field>
    <field name="keywords">DomainBrowser KDNSSD::DomainBrowser::DomainBrowser KDNSSD::DomainBrowser</field>
    <field name="text">The global DNS-SD configuration for example the global Avahi configuration for the Avahi backend will be used type the type of domain to search for parent parent object see QObject documentation startBrowse() and ServiceBrowser::isAvailable()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainBrowser::domains</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#ada36483d7edcbcdebac35f5316d5fb59</field>
    <field name="keywords">domains KDNSSD::DomainBrowser::domains KDNSSD::DomainBrowser</field>
    <field name="text">a list of currently known domain names</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainBrowser::isRunning</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#a6f481a702919b971aede5e7def0ce273</field>
    <field name="keywords">isRunning KDNSSD::DomainBrowser::isRunning KDNSSD::DomainBrowser</field>
    <field name="text">true if startBrowse() has been called false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainBrowser::startBrowse</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1DomainBrowser.html#a53cdde6aec323364e83e28be0f0e40ab</field>
    <field name="keywords">startBrowse KDNSSD::DomainBrowser::startBrowse KDNSSD::DomainBrowser</field>
    <field name="text">Only the first call to this function will have any effect Browsing stops when the DomainBrowser object is destroyed The domainAdded() signal may be emitted before this function returns domainAdded() and domainRemoved()</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KDNSSD::DomainModel</field>
    <field name="url">classKDNSSD_1_1DomainModel.html</field>
    <field name="keywords">DomainModel</field>
    <field name="text">This class provides a Qt Model for DomainBrowser to allow easy integration of domain discovery into a GUI For example to provide a combo box listing available domains you can do 4.1 Jakub Stachowski</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainModel::DomainModel</field>
    <field name="args">(DomainBrowser *browser, QObject *parent=0)</field>
    <field name="url">classKDNSSD_1_1DomainModel.html#ab2b7926cfd6cf20aca6cdb3eaf1686af</field>
    <field name="keywords">DomainModel KDNSSD::DomainModel::DomainModel KDNSSD::DomainModel</field>
    <field name="text">The model takes ownership of the browser so there is no need to delete it afterwards You should not call DomainBrowser::startBrowse() on browser before passing it to DomainModel browser the domain browser that will provide the domains to be listed by the model parent the parent object see QObject documentation</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainModel::columnCount</field>
    <field name="args">(const QModelIndex &amp;parent=QModelIndex()) const override</field>
    <field name="url">classKDNSSD_1_1DomainModel.html#a579251de4192c786990dec9bfc407cee</field>
    <field name="keywords">columnCount KDNSSD::DomainModel::columnCount KDNSSD::DomainModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainModel::data</field>
    <field name="args">(const QModelIndex &amp;index, int role=Qt::DisplayRole) const override</field>
    <field name="url">classKDNSSD_1_1DomainModel.html#a6113f8a780027340689e21a88f609e4a</field>
    <field name="keywords">data KDNSSD::DomainModel::data KDNSSD::DomainModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainModel::hasIndex</field>
    <field name="args">(int row, int column, const QModelIndex &amp;parent) const</field>
    <field name="url">classKDNSSD_1_1DomainModel.html#a632c361d6514a985cf3002355972cc9e</field>
    <field name="keywords">hasIndex KDNSSD::DomainModel::hasIndex KDNSSD::DomainModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainModel::index</field>
    <field name="args">(int row, int column, const QModelIndex &amp;parent=QModelIndex()) const override</field>
    <field name="url">classKDNSSD_1_1DomainModel.html#a99805f122770aac363254d97c073767a</field>
    <field name="keywords">index KDNSSD::DomainModel::index KDNSSD::DomainModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainModel::parent</field>
    <field name="args">(const QModelIndex &amp;index) const override</field>
    <field name="url">classKDNSSD_1_1DomainModel.html#a68dfcbb1e3ddb7a7375e8f763a83984b</field>
    <field name="keywords">parent KDNSSD::DomainModel::parent KDNSSD::DomainModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::DomainModel::rowCount</field>
    <field name="args">(const QModelIndex &amp;parent=QModelIndex()) const override</field>
    <field name="url">classKDNSSD_1_1DomainModel.html#a38d46ac94ea7b58bab97aeddfd7dcd01</field>
    <field name="keywords">rowCount KDNSSD::DomainModel::rowCount KDNSSD::DomainModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KDNSSD::PublicService</field>
    <field name="url">classKDNSSD_1_1PublicService.html</field>
    <field name="keywords">PublicService</field>
    <field name="text">This class allows you to publish the existence of a network service provided by your application If you are providing a web server and want to advertise it on the local network you might do In this example publish() is synchronous it will not return until publishing is complete This is usually not too long but it can freeze an application s GUI for a moment To publish asynchronously instead do Jakub Stachowski</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KDNSSD::PublicService::published</field>
    <field name="args">(bool successful)</field>
    <field name="url">classKDNSSD_1_1PublicService.html#ad5cbe4c14df0cf6cbcef836c00dab0cf</field>
    <field name="keywords">published KDNSSD::PublicService::published KDNSSD::PublicService</field>
    <field name="text">It will also emitted when an already-published service is republished after a property of the service such as the name or port is changed</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::PublicService</field>
    <field name="args">(const QString &amp;name=QString(), const QString &amp;type=QString(), unsigned int port=0, const QString &amp;domain=QString(), const QStringList &amp;subtypes=QStringList())</field>
    <field name="url">classKDNSSD_1_1PublicService.html#aa1d7e4f12e020cef47342295ee349048</field>
    <field name="keywords">PublicService KDNSSD::PublicService::PublicService KDNSSD::PublicService</field>
    <field name="text">If no name is given the computer name is used instead If there is already a service with the same name type and domain a number will be appended to the name to make it unique If no domain is specified the service is published on the link-local domain local The subtypes can be used to specify server attributes such as for anonymous FTP servers or can specify a specific protocol such as a web service interface on top of a generic protocol like SOAP There is a comprehensive list of possible types available but you are largely on your own for subtypes name a service name to use instead of the computer name type service type in the form _sometype._udp or _sometype._tcp port port number or 0 to the service name domain the domain to publish the service on see DomainBrowser subtypes optional list of subtypes each with a leading underscore ServiceBrowser::ServiceBrowser()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::isPublished</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1PublicService.html#adc96d985c331329e91826daa64c05822</field>
    <field name="keywords">isPublished KDNSSD::PublicService::isPublished KDNSSD::PublicService</field>
    <field name="text">true if the service is being published to the domain false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::publish</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1PublicService.html#a37f87507e3ae6722824299d5b143d1a1</field>
    <field name="keywords">publish KDNSSD::PublicService::publish KDNSSD::PublicService</field>
    <field name="text">The method will not return and hence the application interface will freeze since KDElibs code should be executed in the main thread until either the service is published or publishing fails published(bool) is emitted before this method returns true if the service was successfully published false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::publishAsync</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1PublicService.html#af873564c0a3d29fcbf61b38b04a61ba7</field>
    <field name="keywords">publishAsync KDNSSD::PublicService::publishAsync KDNSSD::PublicService</field>
    <field name="text">Returns immediately and emits published(bool) when completed Note that published(bool) may be emitted before this method returns when an error is detected immediately</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::setDomain</field>
    <field name="args">(const QString &amp;domain)</field>
    <field name="url">classKDNSSD_1_1PublicService.html#a4c484289e86c33e0e27c404e29b7bf82</field>
    <field name="keywords">setDomain KDNSSD::PublicService::setDomain KDNSSD::PublicService</field>
    <field name="text">means link-local ie the IP subnet on the LAN containing this computer If service is already published it will be removed from the current domain and published on domain instead domain the new domain to publish the service on</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::setPort</field>
    <field name="args">(unsigned short port)</field>
    <field name="url">classKDNSSD_1_1PublicService.html#aa9bf78b810a5c6a6cc9edd3d5e910cb8</field>
    <field name="keywords">setPort KDNSSD::PublicService::setPort KDNSSD::PublicService</field>
    <field name="text">If the service is already published it will be re-announced with the new port port the port of the service or 0 to simply the name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::setServiceName</field>
    <field name="args">(const QString &amp;serviceName)</field>
    <field name="url">classKDNSSD_1_1PublicService.html#a3a9554d8360a13ff4101a55ec9cca28f</field>
    <field name="keywords">setServiceName KDNSSD::PublicService::setServiceName KDNSSD::PublicService</field>
    <field name="text">If the service is already published it will be re-announced with the new name serviceName the new name of the service</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::setSubTypes</field>
    <field name="args">(const QStringList &amp;subtypes)</field>
    <field name="url">classKDNSSD_1_1PublicService.html#a4cb55003c7f35a691833fc7d40a26cf0</field>
    <field name="keywords">setSubTypes KDNSSD::PublicService::setSubTypes KDNSSD::PublicService</field>
    <field name="text">If the service is already published it will be re-announced with the new subtypes The existing list of substypes is replaced so an empty list will cause all existing subtypes to be removed subtypes the new list of subtypes</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::setTextData</field>
    <field name="args">(const QMap&lt; QString, QByteArray &gt; &amp;textData)</field>
    <field name="url">classKDNSSD_1_1PublicService.html#ae90fb2cb6471ea8290a0aec1d2c1ca51</field>
    <field name="keywords">setTextData KDNSSD::PublicService::setTextData KDNSSD::PublicService</field>
    <field name="text">If the service is already published it will be re-announced with the new data textData the new text properties for the service ServiceBase::textData()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::setType</field>
    <field name="args">(const QString &amp;type)</field>
    <field name="url">classKDNSSD_1_1PublicService.html#abc3e288e48b5c817f31eca1e960f13ad</field>
    <field name="keywords">setType KDNSSD::PublicService::setType KDNSSD::PublicService</field>
    <field name="text">If the service is already published it will be re-announced with the new type type the new type of the service See PublicService() for details on the format of type</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::stop</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1PublicService.html#a2ae23fc66afc6384ec4ac09a48c5b845</field>
    <field name="keywords">stop KDNSSD::PublicService::stop KDNSSD::PublicService</field>
    <field name="text">Useful when you want to disable the service for some time Note that if you stop providing a service without exiting the application you should stop publishing it</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::PublicService::subtypes</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1PublicService.html#afd9b8cf6e8c53ea730e9c1d2b4ec7bd6</field>
    <field name="keywords">subtypes KDNSSD::PublicService::subtypes KDNSSD::PublicService</field>
    <field name="text">setSubTypes()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::ServiceBase</field>
    <field name="args">(const QString &amp;name=QString(), const QString &amp;type=QString(), const QString &amp;domain=QString(), const QString &amp;host=QString(), unsigned short port=0)</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#a047fd77b4121314c481a8c8f0d325b88</field>
    <field name="keywords">ServiceBase KDNSSD::ServiceBase::ServiceBase KDNSSD::ServiceBase ServiceBase KDNSSD::ServiceBase::ServiceBase KDNSSD::ServiceBase ServiceBase KDNSSD::ServiceBase::ServiceBase KDNSSD::ServiceBase</field>
    <field name="text">Note that name type and domain uniquely identify the service in the DNS-SD system and host and port provide the actual location of the service For example RemoteService populates host and port based on the name type and domain attributes using the DNS-SD resolution system name service name type service type domain the DNS-SD domain name for service host the host name of the service a fully-qualified domain name port the port number of the service</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::domain</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#a9e65320d438f5abc261f2b77b96ccaa8</field>
    <field name="keywords">domain KDNSSD::ServiceBase::domain KDNSSD::ServiceBase domain KDNSSD::ServiceBase::domain KDNSSD::ServiceBase domain KDNSSD::ServiceBase::domain KDNSSD::ServiceBase</field>
    <field name="text">It is for link-local services</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::hostName</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#ab97cdc587b1d12b2081e6e23035e2c51</field>
    <field name="keywords">hostName KDNSSD::ServiceBase::hostName KDNSSD::ServiceBase hostName KDNSSD::ServiceBase::hostName KDNSSD::ServiceBase hostName KDNSSD::ServiceBase::hostName KDNSSD::ServiceBase</field>
    <field name="text">Only valid for local and resolved remote services Together with port() this can be used to actually access the service RemoteService::resolve() and RemoteService::resolveAsync()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::operator!=</field>
    <field name="args">(const ServiceBase &amp;o) const</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#a82318b112c1ba1ed77f07ab902b18883</field>
    <field name="keywords">operator!= KDNSSD::ServiceBase::operator!= KDNSSD::ServiceBase operator!= KDNSSD::ServiceBase::operator!= KDNSSD::ServiceBase operator!= KDNSSD::ServiceBase::operator!= KDNSSD::ServiceBase</field>
    <field name="text">This is enough to for unique identification and omitting port host and text data allows to compare resolved and unresolved services o the service to compare this service to false if this service represents the same service from the point of view of DNS-SD as o true otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::operator==</field>
    <field name="args">(const ServiceBase &amp;o) const</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#a369ff4a29370f64ba4adaf8a9f8e9ff5</field>
    <field name="keywords">operator== KDNSSD::ServiceBase::operator== KDNSSD::ServiceBase operator== KDNSSD::ServiceBase::operator== KDNSSD::ServiceBase operator== KDNSSD::ServiceBase::operator== KDNSSD::ServiceBase</field>
    <field name="text">This is enough to for unique identification and omitting port host and text data allows to compare resolved and unresolved services o the service to compare this service to true if this service represents the same service from the point of view of DNS-SD as o false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::port</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#a91a718efe26f11a438a88bf156d80384</field>
    <field name="keywords">port KDNSSD::ServiceBase::port KDNSSD::ServiceBase port KDNSSD::ServiceBase::port KDNSSD::ServiceBase port KDNSSD::ServiceBase::port KDNSSD::ServiceBase</field>
    <field name="text">Only valid for local and resolved remote services Together with hostName() this can be used to actually access the service RemoteService::resolve() and RemoteService::resolveAsync()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::serviceName</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#a8f6fe19b279b51d62ff1cecc7b432c50</field>
    <field name="keywords">serviceName KDNSSD::ServiceBase::serviceName KDNSSD::ServiceBase serviceName KDNSSD::ServiceBase::serviceName KDNSSD::ServiceBase serviceName KDNSSD::ServiceBase::serviceName KDNSSD::ServiceBase</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::textData</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#a96ae1592b4f6a94187aa643506a70852</field>
    <field name="keywords">textData KDNSSD::ServiceBase::textData KDNSSD::ServiceBase textData KDNSSD::ServiceBase::textData KDNSSD::ServiceBase textData KDNSSD::ServiceBase::textData KDNSSD::ServiceBase</field>
    <field name="text">Only valid for local and resolved remote services This is data that provides additional information about the service For example it might be used to specify a printer queue on the printer server specified by hostName() and port() You can check for the data that might be associated with a particular service on the service types list If a key value pair is given this will appear with the value in a QByteArray indexed by the key If the data is on its own does not have an in it it will be used to index an empty QByteArray and can be checked for with QMap::contains() For example if you are accessing the _ipp._tcp service you might do something like since the TXT data of the IPP service may contain data like Note that you actually have to be a bit more clever than this since the key should usually be case insensitive</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBase::type</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html#aeeced7db9b94078a9b44fc3f1dffe879</field>
    <field name="keywords">type KDNSSD::ServiceBase::type KDNSSD::ServiceBase type KDNSSD::ServiceBase::type KDNSSD::ServiceBase type KDNSSD::ServiceBase::type KDNSSD::ServiceBase</field>
    <field name="text">This is always in the format _sometype._udp or _sometype._tcp See the DNS-SD website for a full list of service types</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KDNSSD::RemoteService</field>
    <field name="url">classKDNSSD_1_1RemoteService.html</field>
    <field name="keywords">RemoteService</field>
    <field name="text">This class allows delayed or asynchronous resolution of services As the name suggests the service is normally on a remote machine but the service could just as easily be published on the local machine RemoteService instances are normally provided by ServiceBrowser but can be used to resolve any service if you know the name type and domain for it Jakub Stachowski ServiceBrowser</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KDNSSD::RemoteService::resolved</field>
    <field name="args">(bool successful)</field>
    <field name="url">classKDNSSD_1_1RemoteService.html#ac9147f01be1f9c9c319419a51d120e99</field>
    <field name="keywords">resolved KDNSSD::RemoteService::resolved KDNSSD::RemoteService</field>
    <field name="text">If operating in asynchronous mode this signal can be emitted several times when the hostName or port of the service changes successful true if the hostName and port were successfully resolved false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::RemoteService::RemoteService</field>
    <field name="args">(const QString &amp;name, const QString &amp;type, const QString &amp;domain)</field>
    <field name="url">classKDNSSD_1_1RemoteService.html#a6ae39c3823a94623be14f8379bb42649</field>
    <field name="keywords">RemoteService KDNSSD::RemoteService::RemoteService KDNSSD::RemoteService</field>
    <field name="text">name the name of the service type the type of the service see ServiceBrowser::ServiceBrowser() domain the domain of the service ServiceBrowser::isAvailable()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::RemoteService::isResolved</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1RemoteService.html#a812db85170fd32c0755c7bff9148aec5</field>
    <field name="keywords">isResolved KDNSSD::RemoteService::isResolved KDNSSD::RemoteService</field>
    <field name="text">true if hostName() and port() will return valid values false otherwise</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::RemoteService::resolve</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1RemoteService.html#ad402252765bcb063942db007501587d2</field>
    <field name="keywords">resolve KDNSSD::RemoteService::resolve KDNSSD::RemoteService</field>
    <field name="text">The host name is not resolved into an IP address use KResolver for that resolved(bool) is emitted before this function is returned resolve() will not cause RemoteService to monitor for changes in the hostname or port of the service true if successful false on failure resolveAsync() hostName() port()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::RemoteService::resolveAsync</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1RemoteService.html#a71b5db6504bbb771a4bfe16273dcb0f3</field>
    <field name="keywords">resolveAsync KDNSSD::RemoteService::resolveAsync KDNSSD::RemoteService</field>
    <field name="text">The host name is not resolved into an IP address use KResolver for that The resolved(bool) signal will be emitted when the resolution is complete or when it fails Note that resolved(bool) may be emitted before this function returns in case of immediate failure RemoteService will keep monitoring the service for changes in hostname and port and re-emit resolved(bool) when either changes resolve() hostName() port()</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KDNSSD::Responder</field>
    <field name="url">classKDNSSD_1_1Responder.html</field>
    <field name="keywords">Responder</field>
    <field name="text">Jakub Stachowski Internal class wrapping dns_sd.h interface</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::Responder::isRunning</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1Responder.html#a174d4d92feb6ce5aead841fa5dce8770</field>
    <field name="keywords">isRunning KDNSSD::Responder::isRunning KDNSSD::Responder</field>
    <field name="text">It needs mDNSResponder running</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KDNSSD::ServiceBase</field>
    <field name="url">classKDNSSD_1_1ServiceBase.html</field>
    <field name="keywords">ServiceBase</field>
    <field name="text">This class is used to describe a service The service can be published by the current application in which case it is probably a PublicService or by another application either on the current machine or a remote machine in which case it is probably a RemoteService returned by ServiceBrowser You should not normally need to create a ServiceBase object yourself Jakub Stachowski PublicService</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KDNSSD::ServiceBrowser</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html</field>
    <field name="keywords">ServiceBrowser</field>
    <field name="text">Browses the service types being published on a domain This is the central class in the KDNSSD library for applications that want to discover services on network Suppose that you need list of web servers running Then you might do something like In above example addService() will be called for every web server already running and for every web service that subsequently appears on the network and delService() will be called when a server previously advertised is stopped Because no domain was passed to constructor the default domain will be searched To find other domains to browse for services on use DomainBrowser Jakub Stachowski This class is mostly useful for generic utilities for browsing all the published services on a local network Applications that wish to find out about available services of a particular type such as web servers should use ServiceBrowser ServiceTypeBrowser provides a list of all the service types published by at least one service on a given domain Jakub Stachowski</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">KDNSSD::ServiceBrowser::State</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a84c7e602c7fdd47e16e58676a177f61f</field>
    <field name="keywords">State KDNSSD::ServiceBrowser::State KDNSSD::ServiceBrowser</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">KDNSSD::ServiceBrowser::Working</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a84c7e602c7fdd47e16e58676a177f61fa4700e42111e22353d0558464f3d12def</field>
    <field name="keywords">Working KDNSSD::ServiceBrowser::Working KDNSSD::ServiceBrowser</field>
    <field name="text">the service is available</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">KDNSSD::ServiceBrowser::Stopped</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a84c7e602c7fdd47e16e58676a177f61fa9e02f602f7e710559e19a02d55c90dc1</field>
    <field name="keywords">Stopped KDNSSD::ServiceBrowser::Stopped KDNSSD::ServiceBrowser</field>
    <field name="text">not available because mDnsd or Avahi daemon is not running</field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">KDNSSD::ServiceBrowser::Unsupported</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a84c7e602c7fdd47e16e58676a177f61fa8032d57900b39474984c7e2f310d3f59</field>
    <field name="keywords">Unsupported KDNSSD::ServiceBrowser::Unsupported KDNSSD::ServiceBrowser</field>
    <field name="text">not available because KDE was compiled without DNS-SD support</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KDNSSD::ServiceBrowser::finished</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a8ce315840489147267890408d101dd4a</field>
    <field name="keywords">finished KDNSSD::ServiceBrowser::finished KDNSSD::ServiceBrowser</field>
    <field name="text">This signal is emitted once after startBrowse() is called when all the services of the requested type that are currently published have been reported even if none are available or the DNS-SD service is not available It is emitted again when a new batch of services become available or disappear For example if a new host is connected to network and announces some services watched for by this ServiceBrowser they will be reported by one or more serviceAdded() signals and the whole batch will be concluded by finished() This signal can be used by applications that just want to get a list of the currently available services similar to a directory listing and do not care about adding or removing services that appear or disappear later There is no guarantee any RemoteService pointers received by serviceAdded() will be valid by the time this signal is emitted so you should either do all your work involving them in the slot receiving the serviceAdded() signal or you should listen to serviceRemoved() as well serviceAdded() and serviceRemoved()</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KDNSSD::ServiceBrowser::serviceAdded</field>
    <field name="args">(KDNSSD::RemoteService::Ptr service)</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a37ab8bdba6cca8b61fb24818db1722f8</field>
    <field name="keywords">serviceAdded KDNSSD::ServiceBrowser::serviceAdded KDNSSD::ServiceBrowser</field>
    <field name="text">If isAutoResolving() returns true this will not be emitted until the service has been resolved service a RemoteService object describing the service serviceRemoved() and finished()</field>
  </doc>
  <doc>
    <field name="type">signal</field>
    <field name="name">KDNSSD::ServiceBrowser::serviceRemoved</field>
    <field name="args">(KDNSSD::RemoteService::Ptr service)</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a12c62e4b97fb94b2a7d94f189e552f74</field>
    <field name="keywords">serviceRemoved KDNSSD::ServiceBrowser::serviceRemoved KDNSSD::ServiceBrowser</field>
    <field name="text">The RemoteService object is removed from the services() list and deleted immediately after this signal returns Do not use a delayed connection with this signal service a RemoteService object describing the service serviceAdded() and finished()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBrowser::ServiceBrowser</field>
    <field name="args">(const QString &amp;type, bool autoResolve=false, const QString &amp;domain=QString(), const QString &amp;subtype=QString())</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#ae2965fa63de2fb977e1bff806ab452f5</field>
    <field name="keywords">ServiceBrowser KDNSSD::ServiceBrowser::ServiceBrowser KDNSSD::ServiceBrowser</field>
    <field name="text">DomainBrowser can be used to find other domains to browse on If no domain is given the default domain is used The service type is the high-level protocol type followed by a dot followed by the transport protocol type _tcp or _udp The DNS-SD website maintains a full list of service types The subtype parameter allows you to do more fine-grained filtering on the services you are interested in So you might request only FTP servers that allow anonymous access by passing as the type and as the subtype Subtypes are particularly important for types like _soap and _upnp which are far too generic for most applications In these cases the subtype can be used to specify the particular SOAP or UPnP protocol they want Enabling autoResolve will increase network usage by resolving all services so this feature should be used only when necessary type service types to browse for example autoResolve discovered services will be resolved before being reported with the serviceAdded() signal domain a domain to search on instead of the default one subtype only browse for a specific subtype startBrowse() and isAvailable()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBrowser::isAutoResolving</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a258438d1f7a58b772c53f5ca907babbc</field>
    <field name="keywords">isAutoResolving KDNSSD::ServiceBrowser::isAutoResolving KDNSSD::ServiceBrowser</field>
    <field name="text">the value of the autoResolve parameter passed to the constructor 4.1</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBrowser::services</field>
    <field name="args">() const</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a729f46a775f71440e163908310729436</field>
    <field name="keywords">services KDNSSD::ServiceBrowser::services KDNSSD::ServiceBrowser</field>
    <field name="text">a list of RemoteService pointers serviceAdded() and serviceRemoved()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBrowser::startBrowse</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a50aecd61b661f0c0925c65aa931e09fa</field>
    <field name="keywords">startBrowse KDNSSD::ServiceBrowser::startBrowse KDNSSD::ServiceBrowser</field>
    <field name="text">Only the first call to this function will have any effect Browsing stops when the ServiceBrowser object is destroyed The serviceAdded() signal may be emitted before this function returns serviceAdded() serviceRemoved() and finished()</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBrowser::getLocalHostName</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#aeb8c2abd42e8fe65f354ee24cb8c2d52</field>
    <field name="keywords">getLocalHostName KDNSSD::ServiceBrowser::getLocalHostName KDNSSD::ServiceBrowser</field>
    <field name="text">Usually this will return the same as QHostInfo::localHostName() but it may be changed to something different in the Avahi configuration file if using the Avahi backend the hostname or an empty string on failure 4.2</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBrowser::isAvailable</field>
    <field name="args">()</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#ac0f402d7933c305570bb4dbc2f4ac961</field>
    <field name="keywords">isAvailable KDNSSD::ServiceBrowser::isAvailable KDNSSD::ServiceBrowser</field>
    <field name="text">Although this method is part of ServiceBrowser none of the classes in this library will be able to perform their intended function if this method does not return Working If this method does not return Working it is still safe to call any of the methods in this library However no services will be found or published and no domains will be found If you use this function to report an error to the user below is a suggestion on how to word the errors when publishing a service The first line of each error message can also be used for reporting errors when browsing for services</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceBrowser::resolveHostName</field>
    <field name="args">(const QString &amp;hostname)</field>
    <field name="url">classKDNSSD_1_1ServiceBrowser.html#a2537d3d0b70defc47309fd8d57de3bf2</field>
    <field name="keywords">resolveHostName KDNSSD::ServiceBrowser::resolveHostName KDNSSD::ServiceBrowser</field>
    <field name="text">This function is very rarely useful since a properly configured system is able to resolve an mDNS-based host name using the system resolver ie you can just pass the mDNS hostname to KIO or other library hostname the hostname to be resolved a QHostAddress containing the IP address or QHostAddress() if resolution failed 4.2</field>
  </doc>
  <doc>
    <field name="type">class</field>
    <field name="name">KDNSSD::ServiceModel</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html</field>
    <field name="keywords">ServiceModel</field>
    <field name="text">This class provides a Qt Model for ServiceBrowser to allow easy integration of service discovery into a GUI For example to show the HTTP servers published on the local network you can do After the user makes a selection the application typically needs to get a pointer to the selected service in order to get the host name and port A RemoteService::Ptr can be obtained from a QModelIndex using 4.1 Jakub Stachowski</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">KDNSSD::ServiceModel::AdditionalRoles</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a4d43cc493c1e92f9db8f735a139c7537</field>
    <field name="keywords">AdditionalRoles KDNSSD::ServiceModel::AdditionalRoles KDNSSD::ServiceModel</field>
    <field name="text"></field>
  </doc>
  <doc>
    <field name="type">enumvalue</field>
    <field name="name">KDNSSD::ServiceModel::ServicePtrRole</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a4d43cc493c1e92f9db8f735a139c7537a9a8934200347ab7927661464b12ece70</field>
    <field name="keywords">ServicePtrRole KDNSSD::ServiceModel::ServicePtrRole KDNSSD::ServiceModel</field>
    <field name="text">gets a RemoteService::Ptr for the service</field>
  </doc>
  <doc>
    <field name="type">enum</field>
    <field name="name">KDNSSD::ServiceModel::ModelColumns</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a999fd41a6039d0f6bf26338593d92114</field>
    <field name="keywords">ModelColumns KDNSSD::ServiceModel::ModelColumns KDNSSD::ServiceModel</field>
    <field name="text">If service browser is not set to resolve automatically then the model will only ever have one column the service name</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceModel::ServiceModel</field>
    <field name="args">(ServiceBrowser *browser, QObject *parent=0)</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a79a9833e870a2acdbb743631bc3ebed8</field>
    <field name="keywords">ServiceModel KDNSSD::ServiceModel::ServiceModel KDNSSD::ServiceModel</field>
    <field name="text">The model takes ownership of the browser so there is no need to delete it afterwards You should not call ServiceBrowser::startBrowse() on browser before passing it to ServiceModel</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceModel::columnCount</field>
    <field name="args">(const QModelIndex &amp;parent=QModelIndex()) const override</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a96e27d62fc3e50239ccbaa4ebe598101</field>
    <field name="keywords">columnCount KDNSSD::ServiceModel::columnCount KDNSSD::ServiceModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceModel::data</field>
    <field name="args">(const QModelIndex &amp;index, int role=Qt::DisplayRole) const override</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a79e82d6c0dfc0f4ef6f3926cd4997fc8</field>
    <field name="keywords">data KDNSSD::ServiceModel::data KDNSSD::ServiceModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceModel::hasIndex</field>
    <field name="args">(int row, int column, const QModelIndex &amp;parent) const</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a9683fe29a469691fafef4a70ecc8a1c3</field>
    <field name="keywords">hasIndex KDNSSD::ServiceModel::hasIndex KDNSSD::ServiceModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceModel::headerData</field>
    <field name="args">(int section, Qt::Orientation orientation, int role=Qt::DisplayRole) const override</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a013073f45e5702b3013ae425a834343b</field>
    <field name="keywords">headerData KDNSSD::ServiceModel::headerData KDNSSD::ServiceModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceModel::index</field>
    <field name="args">(int row, int column, const QModelIndex &amp;parent=QModelIndex()) const override</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#acfe93e29929b97c005aa79d16152276a</field>
    <field name="keywords">index KDNSSD::ServiceModel::index KDNSSD::ServiceModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceModel::parent</field>
    <field name="args">(const QModelIndex &amp;index) const override</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#afb6621769d618d8245ec9a155b2735e3</field>
    <field name="keywords">parent KDNSSD::ServiceModel::parent KDNSSD::ServiceModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">function</field>
    <field name="name">KDNSSD::ServiceModel::rowCount</field>
    <field name="args">(const QModelIndex &amp;parent=QModelIndex()) const override</field>
    <field name="url">classKDNSSD_1_1ServiceModel.html#a0fff2e46b237f4f06f91915ed0949e36</field>
    <field name="keywords">rowCount KDNSSD::ServiceModel::rowCount KDNSSD::ServiceModel</field>
    <field name="text">Reimplemented from superclass</field>
  </doc>
  <doc>
    <field name="type">page</field>
    <field name="name">index</field>
    <field name="url">index.html</field>
    <field name="keywords"></field>
    <field name="text">KDE DNS-SD Network service discovery using Zeroconf Introduction KDNSSD is a library for handling the DNS-based Service Discovery Protocol DNS-SD the layer of Zeroconf that allows network services such as printers to be discovered without any user intervention or centralized infrastructure Usage If you are using CMake you need to have or similar in your CMakeLists.txt file and you need to link to KF5::DNSSD If you are writing an application that wants to discover services on the network use DNSSD::ServiceBrowser You can also find available service types using ServiceTypeBrowser If you want to announce the availability of a service provided by your application use DNSSD::PublicService DNSSD::DomainBrowser allows you to find domains other than the local one recommended for browsing or publishing to Note that DNSSD::ServiceBrowser::isAvailable() provides information about the availability of the services provided by this library generally not just for browsing services More information More information about DNS-SD can be found in the online documentation for Apple s implementation of Zeroconf Bonjour</field>
  </doc>
</add>
