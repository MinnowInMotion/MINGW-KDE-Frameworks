{"name": "kdnssd-5.26.0", "fancyname": "KDNSSD", "docfields": [{"type": "class", "name": "KDNSSD::DomainBrowser", "url": "classKDNSSD_1_1DomainBrowser.html", "keyword": "DomainBrowser", "text": "Usage of this class is very simple If you are interested in browsing for services simple do If you are interested in domains where you can register services usage is identical except that you should pass KDNSSD::DomainBrowser::Registering to the constructor Jakub Stachowski"}, {"type": "enum", "name": "KDNSSD::DomainBrowser::DomainType", "url": "classKDNSSD_1_1DomainBrowser.html#af93e72d9dad62d4fa255bd0fa66fb477", "keyword": "DomainType KDNSSD::DomainBrowser::DomainType KDNSSD::DomainBrowser", "text": ""}, {"type": "enumvalue", "name": "KDNSSD::DomainBrowser::Browsing", "url": "classKDNSSD_1_1DomainBrowser.html#af93e72d9dad62d4fa255bd0fa66fb477a6cfe2826b583285428ee3f5bcca1cc90", "keyword": "Browsing KDNSSD::DomainBrowser::Browsing KDNSSD::DomainBrowser", "text": "Domains recommended for browsing for services on using ServiceBrowser"}, {"type": "enumvalue", "name": "KDNSSD::DomainBrowser::Publishing", "url": "classKDNSSD_1_1DomainBrowser.html#af93e72d9dad62d4fa255bd0fa66fb477ab3930c8de92b640c057fd198a51c02f8", "keyword": "Publishing KDNSSD::DomainBrowser::Publishing KDNSSD::DomainBrowser", "text": "Domains recommended for publishing to using PublicService"}, {"type": "signal", "name": "KDNSSD::DomainBrowser::domainAdded", "url": "classKDNSSD_1_1DomainBrowser.html#a72d048bb239ae571548354788b43ba7d", "keyword": "domainAdded KDNSSD::DomainBrowser::domainAdded KDNSSD::DomainBrowser", "text": "If the requested DomainType is Browsing this will also be emitted for the domains specified in the global configuration domain the name of the domain domainRemoved()"}, {"type": "signal", "name": "KDNSSD::DomainBrowser::domainRemoved", "url": "classKDNSSD_1_1DomainBrowser.html#a2903f01a0aff12859276d0fbe0995e3d", "keyword": "domainRemoved KDNSSD::DomainBrowser::domainRemoved KDNSSD::DomainBrowser", "text": "Emitted when domain has been removed from browsing list or the publishing list depending on which list was requested in the constructor domain the name of the domain domainAdded()"}, {"type": "function", "name": "KDNSSD::DomainBrowser::DomainBrowser", "url": "classKDNSSD_1_1DomainBrowser.html#aca8815be064f7c8384f3516e2f16bb09", "keyword": "DomainBrowser KDNSSD::DomainBrowser::DomainBrowser KDNSSD::DomainBrowser", "text": "The global DNS-SD configuration for example the global Avahi configuration for the Avahi backend will be used type the type of domain to search for parent parent object see QObject documentation startBrowse() and ServiceBrowser::isAvailable()"}, {"type": "function", "name": "KDNSSD::DomainBrowser::domains", "url": "classKDNSSD_1_1DomainBrowser.html#ada36483d7edcbcdebac35f5316d5fb59", "keyword": "domains KDNSSD::DomainBrowser::domains KDNSSD::DomainBrowser", "text": "a list of currently known domain names"}, {"type": "function", "name": "KDNSSD::DomainBrowser::isRunning", "url": "classKDNSSD_1_1DomainBrowser.html#a6f481a702919b971aede5e7def0ce273", "keyword": "isRunning KDNSSD::DomainBrowser::isRunning KDNSSD::DomainBrowser", "text": "true if startBrowse() has been called false otherwise"}, {"type": "function", "name": "KDNSSD::DomainBrowser::startBrowse", "url": "classKDNSSD_1_1DomainBrowser.html#a53cdde6aec323364e83e28be0f0e40ab", "keyword": "startBrowse KDNSSD::DomainBrowser::startBrowse KDNSSD::DomainBrowser", "text": "Only the first call to this function will have any effect Browsing stops when the DomainBrowser object is destroyed The domainAdded() signal may be emitted before this function returns domainAdded() and domainRemoved()"}, {"type": "class", "name": "KDNSSD::DomainModel", "url": "classKDNSSD_1_1DomainModel.html", "keyword": "DomainModel", "text": "This class provides a Qt Model for DomainBrowser to allow easy integration of domain discovery into a GUI For example to provide a combo box listing available domains you can do 4.1 Jakub Stachowski"}, {"type": "function", "name": "KDNSSD::DomainModel::DomainModel", "url": "classKDNSSD_1_1DomainModel.html#ab2b7926cfd6cf20aca6cdb3eaf1686af", "keyword": "DomainModel KDNSSD::DomainModel::DomainModel KDNSSD::DomainModel", "text": "The model takes ownership of the browser so there is no need to delete it afterwards You should not call DomainBrowser::startBrowse() on browser before passing it to DomainModel browser the domain browser that will provide the domains to be listed by the model parent the parent object see QObject documentation"}, {"type": "function", "name": "KDNSSD::DomainModel::columnCount", "url": "classKDNSSD_1_1DomainModel.html#a579251de4192c786990dec9bfc407cee", "keyword": "columnCount KDNSSD::DomainModel::columnCount KDNSSD::DomainModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::DomainModel::data", "url": "classKDNSSD_1_1DomainModel.html#a6113f8a780027340689e21a88f609e4a", "keyword": "data KDNSSD::DomainModel::data KDNSSD::DomainModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::DomainModel::hasIndex", "url": "classKDNSSD_1_1DomainModel.html#a632c361d6514a985cf3002355972cc9e", "keyword": "hasIndex KDNSSD::DomainModel::hasIndex KDNSSD::DomainModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::DomainModel::index", "url": "classKDNSSD_1_1DomainModel.html#a99805f122770aac363254d97c073767a", "keyword": "index KDNSSD::DomainModel::index KDNSSD::DomainModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::DomainModel::parent", "url": "classKDNSSD_1_1DomainModel.html#a68dfcbb1e3ddb7a7375e8f763a83984b", "keyword": "parent KDNSSD::DomainModel::parent KDNSSD::DomainModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::DomainModel::rowCount", "url": "classKDNSSD_1_1DomainModel.html#a38d46ac94ea7b58bab97aeddfd7dcd01", "keyword": "rowCount KDNSSD::DomainModel::rowCount KDNSSD::DomainModel", "text": "Reimplemented from superclass"}, {"type": "class", "name": "KDNSSD::PublicService", "url": "classKDNSSD_1_1PublicService.html", "keyword": "PublicService", "text": "This class allows you to publish the existence of a network service provided by your application If you are providing a web server and want to advertise it on the local network you might do In this example publish() is synchronous it will not return until publishing is complete This is usually not too long but it can freeze an application s GUI for a moment To publish asynchronously instead do Jakub Stachowski"}, {"type": "signal", "name": "KDNSSD::PublicService::published", "url": "classKDNSSD_1_1PublicService.html#ad5cbe4c14df0cf6cbcef836c00dab0cf", "keyword": "published KDNSSD::PublicService::published KDNSSD::PublicService", "text": "It will also emitted when an already-published service is republished after a property of the service such as the name or port is changed"}, {"type": "function", "name": "KDNSSD::PublicService::PublicService", "url": "classKDNSSD_1_1PublicService.html#aa1d7e4f12e020cef47342295ee349048", "keyword": "PublicService KDNSSD::PublicService::PublicService KDNSSD::PublicService", "text": "If no name is given the computer name is used instead If there is already a service with the same name type and domain a number will be appended to the name to make it unique If no domain is specified the service is published on the link-local domain local The subtypes can be used to specify server attributes such as for anonymous FTP servers or can specify a specific protocol such as a web service interface on top of a generic protocol like SOAP There is a comprehensive list of possible types available but you are largely on your own for subtypes name a service name to use instead of the computer name type service type in the form _sometype._udp or _sometype._tcp port port number or 0 to the service name domain the domain to publish the service on see DomainBrowser subtypes optional list of subtypes each with a leading underscore ServiceBrowser::ServiceBrowser()"}, {"type": "function", "name": "KDNSSD::PublicService::isPublished", "url": "classKDNSSD_1_1PublicService.html#adc96d985c331329e91826daa64c05822", "keyword": "isPublished KDNSSD::PublicService::isPublished KDNSSD::PublicService", "text": "true if the service is being published to the domain false otherwise"}, {"type": "function", "name": "KDNSSD::PublicService::publish", "url": "classKDNSSD_1_1PublicService.html#a37f87507e3ae6722824299d5b143d1a1", "keyword": "publish KDNSSD::PublicService::publish KDNSSD::PublicService", "text": "The method will not return and hence the application interface will freeze since KDElibs code should be executed in the main thread until either the service is published or publishing fails published(bool) is emitted before this method returns true if the service was successfully published false otherwise"}, {"type": "function", "name": "KDNSSD::PublicService::publishAsync", "url": "classKDNSSD_1_1PublicService.html#af873564c0a3d29fcbf61b38b04a61ba7", "keyword": "publishAsync KDNSSD::PublicService::publishAsync KDNSSD::PublicService", "text": "Returns immediately and emits published(bool) when completed Note that published(bool) may be emitted before this method returns when an error is detected immediately"}, {"type": "function", "name": "KDNSSD::PublicService::setDomain", "url": "classKDNSSD_1_1PublicService.html#a4c484289e86c33e0e27c404e29b7bf82", "keyword": "setDomain KDNSSD::PublicService::setDomain KDNSSD::PublicService", "text": "means link-local ie the IP subnet on the LAN containing this computer If service is already published it will be removed from the current domain and published on domain instead domain the new domain to publish the service on"}, {"type": "function", "name": "KDNSSD::PublicService::setPort", "url": "classKDNSSD_1_1PublicService.html#aa9bf78b810a5c6a6cc9edd3d5e910cb8", "keyword": "setPort KDNSSD::PublicService::setPort KDNSSD::PublicService", "text": "If the service is already published it will be re-announced with the new port port the port of the service or 0 to simply the name"}, {"type": "function", "name": "KDNSSD::PublicService::setServiceName", "url": "classKDNSSD_1_1PublicService.html#a3a9554d8360a13ff4101a55ec9cca28f", "keyword": "setServiceName KDNSSD::PublicService::setServiceName KDNSSD::PublicService", "text": "If the service is already published it will be re-announced with the new name serviceName the new name of the service"}, {"type": "function", "name": "KDNSSD::PublicService::setSubTypes", "url": "classKDNSSD_1_1PublicService.html#a4cb55003c7f35a691833fc7d40a26cf0", "keyword": "setSubTypes KDNSSD::PublicService::setSubTypes KDNSSD::PublicService", "text": "If the service is already published it will be re-announced with the new subtypes The existing list of substypes is replaced so an empty list will cause all existing subtypes to be removed subtypes the new list of subtypes"}, {"type": "function", "name": "KDNSSD::PublicService::setTextData", "url": "classKDNSSD_1_1PublicService.html#ae90fb2cb6471ea8290a0aec1d2c1ca51", "keyword": "setTextData KDNSSD::PublicService::setTextData KDNSSD::PublicService", "text": "If the service is already published it will be re-announced with the new data textData the new text properties for the service ServiceBase::textData()"}, {"type": "function", "name": "KDNSSD::PublicService::setType", "url": "classKDNSSD_1_1PublicService.html#abc3e288e48b5c817f31eca1e960f13ad", "keyword": "setType KDNSSD::PublicService::setType KDNSSD::PublicService", "text": "If the service is already published it will be re-announced with the new type type the new type of the service See PublicService() for details on the format of type"}, {"type": "function", "name": "KDNSSD::PublicService::stop", "url": "classKDNSSD_1_1PublicService.html#a2ae23fc66afc6384ec4ac09a48c5b845", "keyword": "stop KDNSSD::PublicService::stop KDNSSD::PublicService", "text": "Useful when you want to disable the service for some time Note that if you stop providing a service without exiting the application you should stop publishing it"}, {"type": "function", "name": "KDNSSD::PublicService::subtypes", "url": "classKDNSSD_1_1PublicService.html#afd9b8cf6e8c53ea730e9c1d2b4ec7bd6", "keyword": "subtypes KDNSSD::PublicService::subtypes KDNSSD::PublicService", "text": "setSubTypes()"}, {"type": "function", "name": "KDNSSD::ServiceBase::ServiceBase", "url": "classKDNSSD_1_1ServiceBase.html#a047fd77b4121314c481a8c8f0d325b88", "keyword": "ServiceBase KDNSSD::ServiceBase::ServiceBase KDNSSD::ServiceBase ServiceBase KDNSSD::ServiceBase::ServiceBase KDNSSD::ServiceBase ServiceBase KDNSSD::ServiceBase::ServiceBase KDNSSD::ServiceBase", "text": "Note that name type and domain uniquely identify the service in the DNS-SD system and host and port provide the actual location of the service For example RemoteService populates host and port based on the name type and domain attributes using the DNS-SD resolution system name service name type service type domain the DNS-SD domain name for service host the host name of the service a fully-qualified domain name port the port number of the service"}, {"type": "function", "name": "KDNSSD::ServiceBase::domain", "url": "classKDNSSD_1_1ServiceBase.html#a9e65320d438f5abc261f2b77b96ccaa8", "keyword": "domain KDNSSD::ServiceBase::domain KDNSSD::ServiceBase domain KDNSSD::ServiceBase::domain KDNSSD::ServiceBase domain KDNSSD::ServiceBase::domain KDNSSD::ServiceBase", "text": "It is for link-local services"}, {"type": "function", "name": "KDNSSD::ServiceBase::hostName", "url": "classKDNSSD_1_1ServiceBase.html#ab97cdc587b1d12b2081e6e23035e2c51", "keyword": "hostName KDNSSD::ServiceBase::hostName KDNSSD::ServiceBase hostName KDNSSD::ServiceBase::hostName KDNSSD::ServiceBase hostName KDNSSD::ServiceBase::hostName KDNSSD::ServiceBase", "text": "Only valid for local and resolved remote services Together with port() this can be used to actually access the service RemoteService::resolve() and RemoteService::resolveAsync()"}, {"type": "function", "name": "KDNSSD::ServiceBase::operator!=", "url": "classKDNSSD_1_1ServiceBase.html#a82318b112c1ba1ed77f07ab902b18883", "keyword": "operator!= KDNSSD::ServiceBase::operator!= KDNSSD::ServiceBase operator!= KDNSSD::ServiceBase::operator!= KDNSSD::ServiceBase operator!= KDNSSD::ServiceBase::operator!= KDNSSD::ServiceBase", "text": "This is enough to for unique identification and omitting port host and text data allows to compare resolved and unresolved services o the service to compare this service to false if this service represents the same service from the point of view of DNS-SD as o true otherwise"}, {"type": "function", "name": "KDNSSD::ServiceBase::operator==", "url": "classKDNSSD_1_1ServiceBase.html#a369ff4a29370f64ba4adaf8a9f8e9ff5", "keyword": "operator== KDNSSD::ServiceBase::operator== KDNSSD::ServiceBase operator== KDNSSD::ServiceBase::operator== KDNSSD::ServiceBase operator== KDNSSD::ServiceBase::operator== KDNSSD::ServiceBase", "text": "This is enough to for unique identification and omitting port host and text data allows to compare resolved and unresolved services o the service to compare this service to true if this service represents the same service from the point of view of DNS-SD as o false otherwise"}, {"type": "function", "name": "KDNSSD::ServiceBase::port", "url": "classKDNSSD_1_1ServiceBase.html#a91a718efe26f11a438a88bf156d80384", "keyword": "port KDNSSD::ServiceBase::port KDNSSD::ServiceBase port KDNSSD::ServiceBase::port KDNSSD::ServiceBase port KDNSSD::ServiceBase::port KDNSSD::ServiceBase", "text": "Only valid for local and resolved remote services Together with hostName() this can be used to actually access the service RemoteService::resolve() and RemoteService::resolveAsync()"}, {"type": "function", "name": "KDNSSD::ServiceBase::serviceName", "url": "classKDNSSD_1_1ServiceBase.html#a8f6fe19b279b51d62ff1cecc7b432c50", "keyword": "serviceName KDNSSD::ServiceBase::serviceName KDNSSD::ServiceBase serviceName KDNSSD::ServiceBase::serviceName KDNSSD::ServiceBase serviceName KDNSSD::ServiceBase::serviceName KDNSSD::ServiceBase", "text": ""}, {"type": "function", "name": "KDNSSD::ServiceBase::textData", "url": "classKDNSSD_1_1ServiceBase.html#a96ae1592b4f6a94187aa643506a70852", "keyword": "textData KDNSSD::ServiceBase::textData KDNSSD::ServiceBase textData KDNSSD::ServiceBase::textData KDNSSD::ServiceBase textData KDNSSD::ServiceBase::textData KDNSSD::ServiceBase", "text": "Only valid for local and resolved remote services This is data that provides additional information about the service For example it might be used to specify a printer queue on the printer server specified by hostName() and port() You can check for the data that might be associated with a particular service on the service types list If a key value pair is given this will appear with the value in a QByteArray indexed by the key If the data is on its own does not have an in it it will be used to index an empty QByteArray and can be checked for with QMap::contains() For example if you are accessing the _ipp._tcp service you might do something like since the TXT data of the IPP service may contain data like Note that you actually have to be a bit more clever than this since the key should usually be case insensitive"}, {"type": "function", "name": "KDNSSD::ServiceBase::type", "url": "classKDNSSD_1_1ServiceBase.html#aeeced7db9b94078a9b44fc3f1dffe879", "keyword": "type KDNSSD::ServiceBase::type KDNSSD::ServiceBase type KDNSSD::ServiceBase::type KDNSSD::ServiceBase type KDNSSD::ServiceBase::type KDNSSD::ServiceBase", "text": "This is always in the format _sometype._udp or _sometype._tcp See the DNS-SD website for a full list of service types"}, {"type": "class", "name": "KDNSSD::RemoteService", "url": "classKDNSSD_1_1RemoteService.html", "keyword": "RemoteService", "text": "This class allows delayed or asynchronous resolution of services As the name suggests the service is normally on a remote machine but the service could just as easily be published on the local machine RemoteService instances are normally provided by ServiceBrowser but can be used to resolve any service if you know the name type and domain for it Jakub Stachowski ServiceBrowser"}, {"type": "signal", "name": "KDNSSD::RemoteService::resolved", "url": "classKDNSSD_1_1RemoteService.html#ac9147f01be1f9c9c319419a51d120e99", "keyword": "resolved KDNSSD::RemoteService::resolved KDNSSD::RemoteService", "text": "If operating in asynchronous mode this signal can be emitted several times when the hostName or port of the service changes successful true if the hostName and port were successfully resolved false otherwise"}, {"type": "function", "name": "KDNSSD::RemoteService::RemoteService", "url": "classKDNSSD_1_1RemoteService.html#a6ae39c3823a94623be14f8379bb42649", "keyword": "RemoteService KDNSSD::RemoteService::RemoteService KDNSSD::RemoteService", "text": "name the name of the service type the type of the service see ServiceBrowser::ServiceBrowser() domain the domain of the service ServiceBrowser::isAvailable()"}, {"type": "function", "name": "KDNSSD::RemoteService::isResolved", "url": "classKDNSSD_1_1RemoteService.html#a812db85170fd32c0755c7bff9148aec5", "keyword": "isResolved KDNSSD::RemoteService::isResolved KDNSSD::RemoteService", "text": "true if hostName() and port() will return valid values false otherwise"}, {"type": "function", "name": "KDNSSD::RemoteService::resolve", "url": "classKDNSSD_1_1RemoteService.html#ad402252765bcb063942db007501587d2", "keyword": "resolve KDNSSD::RemoteService::resolve KDNSSD::RemoteService", "text": "The host name is not resolved into an IP address use KResolver for that resolved(bool) is emitted before this function is returned resolve() will not cause RemoteService to monitor for changes in the hostname or port of the service true if successful false on failure resolveAsync() hostName() port()"}, {"type": "function", "name": "KDNSSD::RemoteService::resolveAsync", "url": "classKDNSSD_1_1RemoteService.html#a71b5db6504bbb771a4bfe16273dcb0f3", "keyword": "resolveAsync KDNSSD::RemoteService::resolveAsync KDNSSD::RemoteService", "text": "The host name is not resolved into an IP address use KResolver for that The resolved(bool) signal will be emitted when the resolution is complete or when it fails Note that resolved(bool) may be emitted before this function returns in case of immediate failure RemoteService will keep monitoring the service for changes in hostname and port and re-emit resolved(bool) when either changes resolve() hostName() port()"}, {"type": "class", "name": "KDNSSD::Responder", "url": "classKDNSSD_1_1Responder.html", "keyword": "Responder", "text": "Jakub Stachowski Internal class wrapping dns_sd.h interface"}, {"type": "function", "name": "KDNSSD::Responder::isRunning", "url": "classKDNSSD_1_1Responder.html#a174d4d92feb6ce5aead841fa5dce8770", "keyword": "isRunning KDNSSD::Responder::isRunning KDNSSD::Responder", "text": "It needs mDNSResponder running"}, {"type": "class", "name": "KDNSSD::ServiceBase", "url": "classKDNSSD_1_1ServiceBase.html", "keyword": "ServiceBase", "text": "This class is used to describe a service The service can be published by the current application in which case it is probably a PublicService or by another application either on the current machine or a remote machine in which case it is probably a RemoteService returned by ServiceBrowser You should not normally need to create a ServiceBase object yourself Jakub Stachowski PublicService"}, {"type": "class", "name": "KDNSSD::ServiceBrowser", "url": "classKDNSSD_1_1ServiceBrowser.html", "keyword": "ServiceBrowser", "text": "Browses the service types being published on a domain This is the central class in the KDNSSD library for applications that want to discover services on network Suppose that you need list of web servers running Then you might do something like In above example addService() will be called for every web server already running and for every web service that subsequently appears on the network and delService() will be called when a server previously advertised is stopped Because no domain was passed to constructor the default domain will be searched To find other domains to browse for services on use DomainBrowser Jakub Stachowski This class is mostly useful for generic utilities for browsing all the published services on a local network Applications that wish to find out about available services of a particular type such as web servers should use ServiceBrowser ServiceTypeBrowser provides a list of all the service types published by at least one service on a given domain Jakub Stachowski"}, {"type": "enum", "name": "KDNSSD::ServiceBrowser::State", "url": "classKDNSSD_1_1ServiceBrowser.html#a84c7e602c7fdd47e16e58676a177f61f", "keyword": "State KDNSSD::ServiceBrowser::State KDNSSD::ServiceBrowser", "text": ""}, {"type": "enumvalue", "name": "KDNSSD::ServiceBrowser::Working", "url": "classKDNSSD_1_1ServiceBrowser.html#a84c7e602c7fdd47e16e58676a177f61fa4700e42111e22353d0558464f3d12def", "keyword": "Working KDNSSD::ServiceBrowser::Working KDNSSD::ServiceBrowser", "text": "the service is available"}, {"type": "enumvalue", "name": "KDNSSD::ServiceBrowser::Stopped", "url": "classKDNSSD_1_1ServiceBrowser.html#a84c7e602c7fdd47e16e58676a177f61fa9e02f602f7e710559e19a02d55c90dc1", "keyword": "Stopped KDNSSD::ServiceBrowser::Stopped KDNSSD::ServiceBrowser", "text": "not available because mDnsd or Avahi daemon is not running"}, {"type": "enumvalue", "name": "KDNSSD::ServiceBrowser::Unsupported", "url": "classKDNSSD_1_1ServiceBrowser.html#a84c7e602c7fdd47e16e58676a177f61fa8032d57900b39474984c7e2f310d3f59", "keyword": "Unsupported KDNSSD::ServiceBrowser::Unsupported KDNSSD::ServiceBrowser", "text": "not available because KDE was compiled without DNS-SD support"}, {"type": "signal", "name": "KDNSSD::ServiceBrowser::finished", "url": "classKDNSSD_1_1ServiceBrowser.html#a8ce315840489147267890408d101dd4a", "keyword": "finished KDNSSD::ServiceBrowser::finished KDNSSD::ServiceBrowser", "text": "This signal is emitted once after startBrowse() is called when all the services of the requested type that are currently published have been reported even if none are available or the DNS-SD service is not available It is emitted again when a new batch of services become available or disappear For example if a new host is connected to network and announces some services watched for by this ServiceBrowser they will be reported by one or more serviceAdded() signals and the whole batch will be concluded by finished() This signal can be used by applications that just want to get a list of the currently available services similar to a directory listing and do not care about adding or removing services that appear or disappear later There is no guarantee any RemoteService pointers received by serviceAdded() will be valid by the time this signal is emitted so you should either do all your work involving them in the slot receiving the serviceAdded() signal or you should listen to serviceRemoved() as well serviceAdded() and serviceRemoved()"}, {"type": "signal", "name": "KDNSSD::ServiceBrowser::serviceAdded", "url": "classKDNSSD_1_1ServiceBrowser.html#a37ab8bdba6cca8b61fb24818db1722f8", "keyword": "serviceAdded KDNSSD::ServiceBrowser::serviceAdded KDNSSD::ServiceBrowser", "text": "If isAutoResolving() returns true this will not be emitted until the service has been resolved service a RemoteService object describing the service serviceRemoved() and finished()"}, {"type": "signal", "name": "KDNSSD::ServiceBrowser::serviceRemoved", "url": "classKDNSSD_1_1ServiceBrowser.html#a12c62e4b97fb94b2a7d94f189e552f74", "keyword": "serviceRemoved KDNSSD::ServiceBrowser::serviceRemoved KDNSSD::ServiceBrowser", "text": "The RemoteService object is removed from the services() list and deleted immediately after this signal returns Do not use a delayed connection with this signal service a RemoteService object describing the service serviceAdded() and finished()"}, {"type": "function", "name": "KDNSSD::ServiceBrowser::ServiceBrowser", "url": "classKDNSSD_1_1ServiceBrowser.html#ae2965fa63de2fb977e1bff806ab452f5", "keyword": "ServiceBrowser KDNSSD::ServiceBrowser::ServiceBrowser KDNSSD::ServiceBrowser", "text": "DomainBrowser can be used to find other domains to browse on If no domain is given the default domain is used The service type is the high-level protocol type followed by a dot followed by the transport protocol type _tcp or _udp The DNS-SD website maintains a full list of service types The subtype parameter allows you to do more fine-grained filtering on the services you are interested in So you might request only FTP servers that allow anonymous access by passing as the type and as the subtype Subtypes are particularly important for types like _soap and _upnp which are far too generic for most applications In these cases the subtype can be used to specify the particular SOAP or UPnP protocol they want Enabling autoResolve will increase network usage by resolving all services so this feature should be used only when necessary type service types to browse for example autoResolve discovered services will be resolved before being reported with the serviceAdded() signal domain a domain to search on instead of the default one subtype only browse for a specific subtype startBrowse() and isAvailable()"}, {"type": "function", "name": "KDNSSD::ServiceBrowser::isAutoResolving", "url": "classKDNSSD_1_1ServiceBrowser.html#a258438d1f7a58b772c53f5ca907babbc", "keyword": "isAutoResolving KDNSSD::ServiceBrowser::isAutoResolving KDNSSD::ServiceBrowser", "text": "the value of the autoResolve parameter passed to the constructor 4.1"}, {"type": "function", "name": "KDNSSD::ServiceBrowser::services", "url": "classKDNSSD_1_1ServiceBrowser.html#a729f46a775f71440e163908310729436", "keyword": "services KDNSSD::ServiceBrowser::services KDNSSD::ServiceBrowser", "text": "a list of RemoteService pointers serviceAdded() and serviceRemoved()"}, {"type": "function", "name": "KDNSSD::ServiceBrowser::startBrowse", "url": "classKDNSSD_1_1ServiceBrowser.html#a50aecd61b661f0c0925c65aa931e09fa", "keyword": "startBrowse KDNSSD::ServiceBrowser::startBrowse KDNSSD::ServiceBrowser", "text": "Only the first call to this function will have any effect Browsing stops when the ServiceBrowser object is destroyed The serviceAdded() signal may be emitted before this function returns serviceAdded() serviceRemoved() and finished()"}, {"type": "function", "name": "KDNSSD::ServiceBrowser::getLocalHostName", "url": "classKDNSSD_1_1ServiceBrowser.html#aeb8c2abd42e8fe65f354ee24cb8c2d52", "keyword": "getLocalHostName KDNSSD::ServiceBrowser::getLocalHostName KDNSSD::ServiceBrowser", "text": "Usually this will return the same as QHostInfo::localHostName() but it may be changed to something different in the Avahi configuration file if using the Avahi backend the hostname or an empty string on failure 4.2"}, {"type": "function", "name": "KDNSSD::ServiceBrowser::isAvailable", "url": "classKDNSSD_1_1ServiceBrowser.html#ac0f402d7933c305570bb4dbc2f4ac961", "keyword": "isAvailable KDNSSD::ServiceBrowser::isAvailable KDNSSD::ServiceBrowser", "text": "Although this method is part of ServiceBrowser none of the classes in this library will be able to perform their intended function if this method does not return Working If this method does not return Working it is still safe to call any of the methods in this library However no services will be found or published and no domains will be found If you use this function to report an error to the user below is a suggestion on how to word the errors when publishing a service The first line of each error message can also be used for reporting errors when browsing for services"}, {"type": "function", "name": "KDNSSD::ServiceBrowser::resolveHostName", "url": "classKDNSSD_1_1ServiceBrowser.html#a2537d3d0b70defc47309fd8d57de3bf2", "keyword": "resolveHostName KDNSSD::ServiceBrowser::resolveHostName KDNSSD::ServiceBrowser", "text": "This function is very rarely useful since a properly configured system is able to resolve an mDNS-based host name using the system resolver ie you can just pass the mDNS hostname to KIO or other library hostname the hostname to be resolved a QHostAddress containing the IP address or QHostAddress() if resolution failed 4.2"}, {"type": "class", "name": "KDNSSD::ServiceModel", "url": "classKDNSSD_1_1ServiceModel.html", "keyword": "ServiceModel", "text": "This class provides a Qt Model for ServiceBrowser to allow easy integration of service discovery into a GUI For example to show the HTTP servers published on the local network you can do After the user makes a selection the application typically needs to get a pointer to the selected service in order to get the host name and port A RemoteService::Ptr can be obtained from a QModelIndex using 4.1 Jakub Stachowski"}, {"type": "enum", "name": "KDNSSD::ServiceModel::AdditionalRoles", "url": "classKDNSSD_1_1ServiceModel.html#a4d43cc493c1e92f9db8f735a139c7537", "keyword": "AdditionalRoles KDNSSD::ServiceModel::AdditionalRoles KDNSSD::ServiceModel", "text": ""}, {"type": "enumvalue", "name": "KDNSSD::ServiceModel::ServicePtrRole", "url": "classKDNSSD_1_1ServiceModel.html#a4d43cc493c1e92f9db8f735a139c7537a9a8934200347ab7927661464b12ece70", "keyword": "ServicePtrRole KDNSSD::ServiceModel::ServicePtrRole KDNSSD::ServiceModel", "text": "gets a RemoteService::Ptr for the service"}, {"type": "enum", "name": "KDNSSD::ServiceModel::ModelColumns", "url": "classKDNSSD_1_1ServiceModel.html#a999fd41a6039d0f6bf26338593d92114", "keyword": "ModelColumns KDNSSD::ServiceModel::ModelColumns KDNSSD::ServiceModel", "text": "If service browser is not set to resolve automatically then the model will only ever have one column the service name"}, {"type": "function", "name": "KDNSSD::ServiceModel::ServiceModel", "url": "classKDNSSD_1_1ServiceModel.html#a79a9833e870a2acdbb743631bc3ebed8", "keyword": "ServiceModel KDNSSD::ServiceModel::ServiceModel KDNSSD::ServiceModel", "text": "The model takes ownership of the browser so there is no need to delete it afterwards You should not call ServiceBrowser::startBrowse() on browser before passing it to ServiceModel"}, {"type": "function", "name": "KDNSSD::ServiceModel::columnCount", "url": "classKDNSSD_1_1ServiceModel.html#a96e27d62fc3e50239ccbaa4ebe598101", "keyword": "columnCount KDNSSD::ServiceModel::columnCount KDNSSD::ServiceModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::ServiceModel::data", "url": "classKDNSSD_1_1ServiceModel.html#a79e82d6c0dfc0f4ef6f3926cd4997fc8", "keyword": "data KDNSSD::ServiceModel::data KDNSSD::ServiceModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::ServiceModel::hasIndex", "url": "classKDNSSD_1_1ServiceModel.html#a9683fe29a469691fafef4a70ecc8a1c3", "keyword": "hasIndex KDNSSD::ServiceModel::hasIndex KDNSSD::ServiceModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::ServiceModel::headerData", "url": "classKDNSSD_1_1ServiceModel.html#a013073f45e5702b3013ae425a834343b", "keyword": "headerData KDNSSD::ServiceModel::headerData KDNSSD::ServiceModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::ServiceModel::index", "url": "classKDNSSD_1_1ServiceModel.html#acfe93e29929b97c005aa79d16152276a", "keyword": "index KDNSSD::ServiceModel::index KDNSSD::ServiceModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::ServiceModel::parent", "url": "classKDNSSD_1_1ServiceModel.html#afb6621769d618d8245ec9a155b2735e3", "keyword": "parent KDNSSD::ServiceModel::parent KDNSSD::ServiceModel", "text": "Reimplemented from superclass"}, {"type": "function", "name": "KDNSSD::ServiceModel::rowCount", "url": "classKDNSSD_1_1ServiceModel.html#a0fff2e46b237f4f06f91915ed0949e36", "keyword": "rowCount KDNSSD::ServiceModel::rowCount KDNSSD::ServiceModel", "text": "Reimplemented from superclass"}, {"type": "page", "name": "index", "url": "index.html", "keyword": null, "text": "KDE DNS-SD Network service discovery using Zeroconf Introduction KDNSSD is a library for handling the DNS-based Service Discovery Protocol DNS-SD the layer of Zeroconf that allows network services such as printers to be discovered without any user intervention or centralized infrastructure Usage If you are using CMake you need to have or similar in your CMakeLists.txt file and you need to link to KF5::DNSSD If you are writing an application that wants to discover services on the network use DNSSD::ServiceBrowser You can also find available service types using ServiceTypeBrowser If you want to announce the availability of a service provided by your application use DNSSD::PublicService DNSSD::DomainBrowser allows you to find domains other than the local one recommended for browsing or publishing to Note that DNSSD::ServiceBrowser::isAvailable() provides information about the availability of the services provided by this library generally not just for browsing services More information More information about DNS-SD can be found in the online documentation for Apple s implementation of Zeroconf Bonjour"}]}